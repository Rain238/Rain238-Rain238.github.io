{
    "version": "https://jsonfeed.org/version/1",
    "title": "雨的记忆",
    "subtitle": "程序是有生命的精灵",
    "icon": "https://rainrem.top/images/favicon.ico",
    "description": "我还在原地等你，你却已经忘记曾来过这里",
    "home_page_url": "https://rainrem.top",
    "items": [
        {
            "id": "https://rainrem.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/c++/c++%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B/",
            "url": "https://rainrem.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/c++/c++%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B/",
            "title": "C++核心编程",
            "date_published": "2025-06-15T14:13:00.000Z",
            "content_html": "<details class=\"danger\"><summary>内存四大分区概念简介</summary><div>\n<ul>\n<li>在 C++ 程序执行时，将内存大方向划分为四个区域\n<ul>\n<li>代码区：存放函数体的二进制代码，由操作系统进行管理的</li>\n<li>全局区：存放全局变量和静态变量以及常量</li>\n<li>栈区：由编译器自动分配释放，存在函数的参数值，局部变量等</li>\n<li>堆区：由程序员分配和释放，若程序员不释放，程序结束时由操作系统回收</li>\n<li>内存四区意义：不同区域存放的数据，赋予不同的生命周期，给我们更大的灵活编程</li>\n</ul>\n</li>\n</ul>\n</div></details>\n<h1 id=\"new操作符-内存分区模型\"><a class=\"anchor\" href=\"#new操作符-内存分区模型\">#</a> new 操作符 - 内存分区模型</h1>\n<blockquote>\n<p><code>C++</code>  中利用 <code>new</code>  操作符在堆区开辟数据，堆区开辟的数据，由程序员手动开辟，手动释放，释放利用操作符 <code>delete</code> <br />\n, 语法： <code>new 数据类型</code> ，利用 <code>new</code>  创建的数据，会返回该数据对应的类型指针</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>new操作符</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 使用 new 关键字开辟空间可以返回指针地址</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 利用 delete 释放堆区数据</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">delete</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">//    cout &lt;&lt; *p &lt;&lt; endl;// 释放后的空间不可访问</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// 在堆中开辟应该数组</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 手动开辟内存</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">;</span><span class=\"token comment\">// 手动释放内存</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"引用\"><a class=\"anchor\" href=\"#引用\">#</a> 引用</h1>\n<h2 id=\"引用的基本使用\"><a class=\"anchor\" href=\"#引用的基本使用\">#</a> 引用的基本使用</h2>\n<blockquote>\n<p>作用：给变量起别名，语法： <code>数据类型 &amp;别名 = 原名</code></p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>引用的基本使用</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* 引用的基本使用</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 作用：给变量起别名</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 语法：数据类型 &amp; 别名 = 原名</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 给变量起别名，创建引用</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>b <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a：\"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"b：\"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a：\"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"b：\"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"引用注意事项\"><a class=\"anchor\" href=\"#引用注意事项\">#</a> 引用注意事项</h2>\n<blockquote>\n<p>引用必须初始化，引用在初始化后，不可以改变</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>引用注意事项</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 引用注意事项</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 引用必须初始化</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 引用在初始化后不可以改变</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 创建变量</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">//    int &amp;c;// 引用必须初始化</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>c <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span><span class=\"token comment\">// 引用一旦初始化就不可以更改</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    c <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span><span class=\"token comment\">// 这是赋值操作不是更改引用</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a：\"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"b：\"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"c：\"</span> <span class=\"token operator\">&lt;&lt;</span> c <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"引用做函数参数\"><a class=\"anchor\" href=\"#引用做函数参数\">#</a> 引用做函数参数</h2>\n<blockquote>\n<p>作用：函数传参时，可以利用引用的技术让形参修饰实参</p>\n</blockquote>\n<blockquote>\n<p>优点：可以简化指针修改实参</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>引用做函数参数</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 引用做函数参数</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 作用：函数传参时，可以利用引用的技术让形参修饰实参</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 优点：可以简化指针修改实参</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * 总结：通过引用参数产生的效果同按地址传递是一样的。引用的语法更清楚简单</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">//1. 值传递</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">mySwap01</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    a <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    b <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">//    cout &lt;&lt; \"mySwap01 a= \" &lt;&lt; a &lt;&lt; endl;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">//    cout &lt;&lt; \"mySwap01 b= \" &lt;&lt; b &lt;&lt; endl;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">//2. 地址传递</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">mySwap02</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token operator\">*</span>a <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token operator\">*</span>b <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">//3. 地址传递</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">mySwap03</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    a <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    b <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\">// 值传递，形参不会修饰实参</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token function\">mySwap01</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a= \"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"b= \"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\">// 地址传递，形参可以修饰实参</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token function\">mySwap02</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a= \"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"b= \"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token comment\">// 引用传递。形参也会修饰实参</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token function\">mySwap03</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a= \"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"b= \"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"引用做函数返回值\"><a class=\"anchor\" href=\"#引用做函数返回值\">#</a> 引用做函数返回值</h2>\n<blockquote>\n<p>作用：引用是可以作为函数的返回值存在的</p>\n</blockquote>\n<blockquote>\n<p>注意：不要返回局部变量引用</p>\n</blockquote>\n<blockquote>\n<p>用法：函数调用作为左值</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>引用做函数返回值</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 引用做函数的返回值</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 作用：引用是可以作为函数的返回值存在的</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 注意：不要返回局部变量的引用</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * 用法：函数调用作为左值</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 返回局部变量引用</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 局部变量存在四区中的：栈区</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 该方法调用完成后变量会被自动销毁</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 局部变量</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 返回静态变量引用</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">test02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 静态变量，存放在全局区，全局区上的数据在程序结束后系统释放</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 静态变量</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">// 引用做函数的返回值</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">// 不要返回局部变量的引用</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">//    int &amp;ref = test01();</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">//    cout &lt;&lt; \"ref =\" &lt;&lt; ref &lt;&lt; endl;// 因为内存已经被释放</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>ref2 <span class=\"token operator\">=</span> <span class=\"token function\">test02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ref2 = \"</span> <span class=\"token operator\">&lt;&lt;</span> ref2 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ref2 = \"</span> <span class=\"token operator\">&lt;&lt;</span> ref2 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">// 左值赋值操作</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token function\">test02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ref2 = \"</span> <span class=\"token operator\">&lt;&lt;</span> ref2 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ref2 = \"</span> <span class=\"token operator\">&lt;&lt;</span> ref2 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"引用的本质\"><a class=\"anchor\" href=\"#引用的本质\">#</a> 引用的本质</h2>\n<blockquote>\n<p>本质：引用的本质在 <code>C++</code>  内部实现是应该指针常量</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>引用的本质</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* 引用的本质</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 本质：引用的本质在 C++ 内部实现是一个指针常量</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 引用的本质就是一个指针常量</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * 引用一旦初始化后，就不可以发生改变</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * 总结：C++ 推荐用引用技术，因为语法方便，引用本质是指针常量，但是所有的指针操作编译器都帮我们做了</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 发现是引用，转换为 int * const ref = &amp;a;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>ref<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    ref <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//ref 是引用，转换为 *ref = 100</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 自动转换为 intconstref=&amp;a; 指针常量是指针指向不可改，也说明为什么引用不可更改</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>ref <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    ref <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 内部发现 ref 是引用，自动帮我们转换为: *ref = 20;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a: \"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ref: \"</span> <span class=\"token operator\">&lt;&lt;</span> ref <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"常量引用\"><a class=\"anchor\" href=\"#常量引用\">#</a> 常量引用</h2>\n<blockquote>\n<p>作用：常量引用主要用来修饰形参，防止误操作</p>\n</blockquote>\n<blockquote>\n<p>在函数形参列表中，可以加 const 修饰形参，防止形参改变实参</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>常量引用</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 常量引用</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 作用：常量引用主要用来修饰形参，防止误操作</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 在函数形参列表中，可以添加 const 修饰形参，防止形参改变实参</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 打印数据函数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">showValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">//    v += 10;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">//    v = 1000;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> val <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">//int &amp; ref = 10; 引用本身需要一个合法的内存空间，因此这行错误</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 加入 const 就可以了，编译器优化代码，int temp = 10; const int&amp; ref = temp;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">//    int a  = 10;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">//    int &amp;ref = 10;  // 错误</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 加上 const 之后编译器将代码修改 int temp = 10; const int &amp; ref = temp;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>ref <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 引用必须引一块合法的内存空间</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">//    ref = 20; // 加入 const 之后变为只读，不可以修改</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token function\">showValue</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"函数提高\"><a class=\"anchor\" href=\"#函数提高\">#</a> 函数提高</h1>\n<h2 id=\"函数的默认参数\"><a class=\"anchor\" href=\"#函数的默认参数\">#</a> 函数的默认参数</h2>\n<blockquote>\n<p>在 <code>C++</code>  中，函数的形参列表中的形参是可以有默认值的，语法： <code>返回值类型 函数名(参数=默认值)&#123; &#125;</code></p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>函数默认参数</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 函数默认参数</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 在 C++ 中 函数的形参列表中的形参是可以有默认值的</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 语法：返回值类型 函数名称 (参数 = 默认值)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 函数默认参数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 如果我们自己传入数据，就用自己的数据，如果没有，那么用默认值</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b <span class=\"token operator\">+</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">//1，如果某个位置参数有默认值，那么从这个位置往后，从左向右，必须都要有默认值</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">//2，如果函数声明有默认值，函数实现的时候就不能有默认参数</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">//3、如果函数声明有默认参数，函数实现就不能有默认参数，声明和实现只能有一个有默认参数</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// 注意事项</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">//1、如果某个位置已经有了默认参数，那么从这个位置往后，从左到右都必须有默认值</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">//int func3(int a = 10, int b, int c) &#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">//    return a + b + c;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">//&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"函数的占位参数\"><a class=\"anchor\" href=\"#函数的占位参数\">#</a> 函数的占位参数</h2>\n<blockquote>\n<p><code>C++</code>  中函数的形参列表里可以有占位参数，用来做占位使用，被调用函数时必须填补该位置</p>\n</blockquote>\n<blockquote>\n<p>语法： <code>返回值类型 函数名 (数据类型)&#123; &#125;</code></p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>函数占位参数</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 函数占位参数</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * C++ 中函数的形参列表里可以有占位参数，，用来做占位操作，调用函数时必须填补该位置</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 语法：返回值 函数名称 (数据类型)&#123; &#125;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 函数占位参数占位参数也可以有默认参数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"this is func\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 占位参数还可以有默认参数</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"this is func\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 占位参数必须填补</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"函数重载\"><a class=\"anchor\" href=\"#函数重载\">#</a> 函数重载</h2>\n<ul>\n<li>作用：函数名可以相同，提高复用性</li>\n<li>函数重载需要满足以下条件：\n<ul>\n<li>同一个作用域下</li>\n<li>函数名称相同</li>\n<li>函数参数类型不同或者个数不同或者顺序不同</li>\n</ul>\n</li>\n<li>注意：函数的返回值不可以作为函数重载的条件</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>函数重载</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 函数重载 - 函数重载概述</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 作用：函数名可以相同，提高复用性</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 函数重载满足条件：</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * 同一个作用域下</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * 函数名称相同</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * 函数参数类型不同或者个数不同或者顺序不同</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * 注意：函数的返回值不可以作为函数重载的条件</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 函数重载需要函数都在同一个作用域下</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"func\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"func：\"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"func：\"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"函数重载注意事项\"><a class=\"anchor\" href=\"#函数重载注意事项\">#</a> 函数重载注意事项</h2>\n<ul>\n<li>引用作为重载条件</li>\n<li>函数重下碰到函数默认参数</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>函数重载注意事项</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 函数重载注意事项</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 1. 引用作为重载条件</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    cout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"func (int &amp;a) 调用\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    cout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"func (const int &amp;a) 调用\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 2. 函数重载碰到函数默认参数</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"func2 (int &amp;a) 调用\"</span> <span class=\"token operator\">&lt;&lt;</span>  endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"func2 (int &amp;a) 调用\"</span> <span class=\"token operator\">&lt;&lt;</span>  endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">//    int a = 10;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">//    func(a);</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">//    func(10);</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">//    func2 (10);// 当函数重载碰到默认参数，会出现二义性，报错，尽量避免这种情况</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"类和对象\"><a class=\"anchor\" href=\"#类和对象\">#</a> 类和对象</h1>\n<blockquote>\n<p><code>C++</code>  面向对象的三大特性为：封装、继承、多态， <code>C++</code>  认为万事万物都皆为对象，对象上有其属性和行为</p>\n</blockquote>\n<h2 id=\"封装\"><a class=\"anchor\" href=\"#封装\">#</a> 封装</h2>\n<ul>\n<li>封装是 <code>C++</code>  面向对象三大特性之一</li>\n<li>封装的意义：\n<ul>\n<li>将属性和行为作为一个整体</li>\n<li>将属性和行为加以权限控制</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>封装的意义</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 封装的意义</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 设计一个圆类，求圆的周长</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 圆求周长的公式：2 * PI * 半径</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">//c1ass 代表设计一个类，类后面紧跟着的就是类名称</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 圆周率</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token keyword\">double</span> PI <span class=\"token operator\">=</span> <span class=\"token number\">3.14</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 访问权限</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span> <span class=\"token comment\">// 公共权限</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 半径</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">int</span> m_r<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>nodiscard<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">double</span> <span class=\"token function\">calculateZC</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> PI <span class=\"token operator\">*</span> m_r<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span> <span class=\"token comment\">// 私有权限</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">// 属性</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">// 行为</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span> <span class=\"token comment\">// 继承权限</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">// 通过圆类创建具体的圆 (对象)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">// 实例化 (通过一个类创建一个对象的过程)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    Circle circle<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\">// 给园的属性进行赋值</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    circle<span class=\"token punctuation\">.</span>m_r <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">//    circle.calculateZC();</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"圆的周长为：\"</span> <span class=\"token operator\">&lt;&lt;</span> circle<span class=\"token punctuation\">.</span><span class=\"token function\">calculateZC</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"设计学生类\"><a class=\"anchor\" href=\"#设计学生类\">#</a> 设计学生类</h2>\n<blockquote>\n<p>案例：设计一个学生类，属性有姓名和学号，可以给姓名和学号进行赋值，可以显示学生和姓名以及学号</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>设计学生类</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 设计学生类</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span><span class=\"token comment\">// 学号</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    string name<span class=\"token punctuation\">;</span><span class=\"token comment\">// 姓名</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">setId</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        Student<span class=\"token double-colon punctuation\">::</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        Student<span class=\"token double-colon punctuation\">::</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">// 实例化</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    Student student<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    student<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    student<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ID：\"</span> <span class=\"token operator\">&lt;&lt;</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" name：\"</span> <span class=\"token operator\">&lt;&lt;</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    Student student2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    student2<span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    student2<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ID：\"</span> <span class=\"token operator\">&lt;&lt;</span> student2<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" name：\"</span> <span class=\"token operator\">&lt;&lt;</span> student2<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"struct和class区别\"><a class=\"anchor\" href=\"#struct和class区别\">#</a> struct 和 class 区别</h2>\n<ul>\n<li>在 <code>C++</code>  中 <code>struct</code>  和 <code>class</code>  的唯一区别就是在于默认的访问权限不同</li>\n<li>区别：\n<ul>\n<li><code>struct</code> : 默认权限为公共</li>\n<li><code>class</code> : 默认权限为私有</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>struct和class区别</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* struct 和 class 区别</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>* 在 C++ 中 struct 和 class 唯一的区别就在于默认的访问权限不同</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>* 区别：</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * struct 默认权限为公共</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * class 默认权限为私有</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">C1</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 默认是私有权限</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> m_A<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">C2</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 默认是公共权限</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">int</span> m_A<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"立方体案例\"><a class=\"anchor\" href=\"#立方体案例\">#</a> 立方体案例</h2>\n<blockquote>\n<p>设计一个立方体 <code>(Cube)</code> , 要求：求出立方体的面积和体积，并且分别用全局函数和成员函数判断两个立方体是否相等。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>立方体案例</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Cube</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 行为</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">//1. 设置获取长宽高</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 设置长</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">setML</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ml<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_L <span class=\"token operator\">=</span> ml<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 设置宽</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">setMW</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> mw<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_W <span class=\"token operator\">=</span> mw<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 设置髙</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">setMH</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> mh<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_H <span class=\"token operator\">=</span> mh<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// 获取长</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">getML</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">return</span> m_L<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">// 获取宽</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">getMW</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">return</span> m_W<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">// 获取髙</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">getMH</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">return</span> m_H<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token comment\">// 获取立方体面积</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> m_L <span class=\"token operator\">*</span> m_W <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> m_W <span class=\"token operator\">*</span> m_H <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> m_L <span class=\"token operator\">*</span> m_H<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\">// 获取立方体体积</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">getVolume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">return</span> m_L <span class=\"token operator\">*</span> m_W <span class=\"token operator\">*</span> m_H<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token comment\">// 长</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">int</span> m_L<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token comment\">// 宽</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">int</span> m_W<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token comment\">// 髙</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">int</span> m_H<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token keyword\">bool</span> <span class=\"token function\">isSame</span><span class=\"token punctuation\">(</span>Cube <span class=\"token operator\">&amp;</span>c1<span class=\"token punctuation\">,</span> Cube <span class=\"token operator\">&amp;</span>c2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">.</span><span class=\"token function\">getML</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> c2<span class=\"token punctuation\">.</span><span class=\"token function\">getML</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> c1<span class=\"token punctuation\">.</span><span class=\"token function\">getMW</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> c2<span class=\"token punctuation\">.</span><span class=\"token function\">getMW</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> c1<span class=\"token punctuation\">.</span><span class=\"token function\">getMH</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> c2<span class=\"token punctuation\">.</span><span class=\"token function\">getMH</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token comment\">// 实例化</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    Cube c1<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token comment\">// 设置长宽高</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    c1<span class=\"token punctuation\">.</span><span class=\"token function\">setML</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    c1<span class=\"token punctuation\">.</span><span class=\"token function\">setMW</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    c1<span class=\"token punctuation\">.</span><span class=\"token function\">setMH</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"长：\"</span> <span class=\"token operator\">&lt;&lt;</span> c1<span class=\"token punctuation\">.</span><span class=\"token function\">getML</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 宽：\"</span> <span class=\"token operator\">&lt;&lt;</span> c1<span class=\"token punctuation\">.</span><span class=\"token function\">getMW</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 髙：\"</span> <span class=\"token operator\">&lt;&lt;</span> c1<span class=\"token punctuation\">.</span><span class=\"token function\">getMH</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"面积：\"</span> <span class=\"token operator\">&lt;&lt;</span> c1<span class=\"token punctuation\">.</span><span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 体积：\"</span> <span class=\"token operator\">&lt;&lt;</span> c1<span class=\"token punctuation\">.</span><span class=\"token function\">getVolume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    Cube c2<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token comment\">// 设置长宽高</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    c2<span class=\"token punctuation\">.</span><span class=\"token function\">setML</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    c2<span class=\"token punctuation\">.</span><span class=\"token function\">setMW</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    c2<span class=\"token punctuation\">.</span><span class=\"token function\">setMH</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isSame</span><span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">,</span> c2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"c1和c2是相等的\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"点和圆的关系-案例\"><a class=\"anchor\" href=\"#点和圆的关系-案例\">#</a> 点和圆的关系 - 案例</h2>\n<blockquote>\n<p>设计一个圆形类 <code>(Circle)</code> , 和一个点类 <code>(Point)</code> , 并计算点和圆的关系。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>点和圆的关系</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 点和圆关系判断</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 点到圆心的距离 == 半径 点在园上</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 点到圆心的距离 > 半径 点在园外</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * 点到圆心的距离 &lt; 半径 点在圆内</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//#include \"point.h\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//#include \"circle.h\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 点类</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">getMX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> m_X<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">setMX</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> mX<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        m_X <span class=\"token operator\">=</span> mX<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">getMY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> m_Y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">setMY</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> mY<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        m_Y <span class=\"token operator\">=</span> mY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">int</span> m_X<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">int</span> m_Y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">// 圆类</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Circle</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">getMR</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">return</span> m_R<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">setMR</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> mR<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        m_R <span class=\"token operator\">=</span> mR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">const</span> Point <span class=\"token operator\">&amp;</span><span class=\"token function\">getMCenter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">return</span> m_Center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">setMCenter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Point <span class=\"token operator\">&amp;</span>mCenter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        m_Center <span class=\"token operator\">=</span> mCenter<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">int</span> m_R<span class=\"token punctuation\">;</span><span class=\"token comment\">// 半径</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    Point m_Center<span class=\"token punctuation\">;</span><span class=\"token comment\">// 圆心</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token comment\">// 判断点和圆的关系</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">isInCircle</span><span class=\"token punctuation\">(</span>Circle <span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">,</span> Point <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token comment\">// 计算两点之间距离平方</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token keyword\">int</span> distance <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">getMCenter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">getMX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">getMCenter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">getMX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                   <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">getMCenter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">getMY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">getMCenter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">getMY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token comment\">// 计算半径的平方</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token keyword\">int</span> rDistance <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getMR</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getMR</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token comment\">// 判断关系</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>distance <span class=\"token operator\">==</span> rDistance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"点在圆上\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>distance <span class=\"token operator\">></span> rDistance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"点在圆外\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"点在圆内\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token comment\">// 创建圆</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    Circle c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    c<span class=\"token punctuation\">.</span><span class=\"token function\">setMR</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    Point center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    center<span class=\"token punctuation\">.</span><span class=\"token function\">setMX</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    center<span class=\"token punctuation\">.</span><span class=\"token function\">setMY</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    c<span class=\"token punctuation\">.</span><span class=\"token function\">setMCenter</span><span class=\"token punctuation\">(</span>center<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token comment\">// 创建点</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    Point p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    p<span class=\"token punctuation\">.</span><span class=\"token function\">setMX</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    p<span class=\"token punctuation\">.</span><span class=\"token function\">setMY</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token function\">isInCircle</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>以下是拆分设计</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>point.h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once </span><span class=\"token comment\">// 防止头文件重复包含</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 点类</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>nodiscard<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getMX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">setMX</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> mX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>nodiscard<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getMY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">setMY</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> mY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">int</span> m_X<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">int</span> m_Y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>point.h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"point.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token class-name\">Point</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getMX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> m_X<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Point</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">setMX</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> mX<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    m_X <span class=\"token operator\">=</span> mX<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token class-name\">Point</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getMY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> m_Y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Point</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">setMY</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> mY<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    m_Y <span class=\"token operator\">=</span> mY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>circle.h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"point.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 圆类</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Circle</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>nodiscard<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getMR</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">setMR</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> mR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>nodiscard<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">const</span> Point <span class=\"token function\">getMCenter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">setMCenter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Point <span class=\"token operator\">&amp;</span>mCenter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">int</span> m_R<span class=\"token punctuation\">;</span><span class=\"token comment\">// 半径</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    Point m_Center<span class=\"token punctuation\">;</span><span class=\"token comment\">// 圆心</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>circle.cpp</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"circle.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token class-name\">Circle</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getMR</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> m_R<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Circle</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">setMR</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> mR<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    m_R <span class=\"token operator\">=</span> mR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">const</span> Point <span class=\"token class-name\">Circle</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">getMCenter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> m_Center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">Circle</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">setMCenter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Point <span class=\"token operator\">&amp;</span>mCenter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    m_Center <span class=\"token operator\">=</span> mCenter<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>点和圆的关系.cpp</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 点和圆关系判断</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 点到圆心的距离 == 半径 点在园上</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 点到圆心的距离 > 半径 点在园外</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * 点到圆心的距离 &lt; 半径 点在圆内</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"point.h\"</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"circle.h\"</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 判断点和圆的关系</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">isInCircle</span><span class=\"token punctuation\">(</span>Circle <span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">,</span> Point <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 计算两点之间距离平方</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">int</span> distance <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">getMCenter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">getMX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">getMCenter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">getMX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                   <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">getMCenter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">getMY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">getMCenter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">getMY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 计算半径的平方</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">int</span> rDistance <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getMR</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getMR</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 判断关系</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>distance <span class=\"token operator\">==</span> rDistance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"点在圆上\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>distance <span class=\"token operator\">></span> rDistance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"点在圆外\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"点在圆内\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">// 创建圆</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    Circle c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    c<span class=\"token punctuation\">.</span><span class=\"token function\">setMR</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    Point center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    center<span class=\"token punctuation\">.</span><span class=\"token function\">setMX</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    center<span class=\"token punctuation\">.</span><span class=\"token function\">setMY</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    c<span class=\"token punctuation\">.</span><span class=\"token function\">setMCenter</span><span class=\"token punctuation\">(</span>center<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">// 创建点</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    Point p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    p<span class=\"token punctuation\">.</span><span class=\"token function\">setMX</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    p<span class=\"token punctuation\">.</span><span class=\"token function\">setMY</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token function\">isInCircle</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"构造函数和析构函数\"><a class=\"anchor\" href=\"#构造函数和析构函数\">#</a> 构造函数和析构函数</h2>\n<blockquote>\n<p>对象的初始化和清理也是两个非常重要的安全问题，一个对象或者变量没有初始状态，对其使用后果是未知同样的使用完一个对象或变量，没有及时清理，也会造成一定的安全问题，C++ 利用了构造函数和析构函数解决上述问题，这两个函数将会被编译器自动调用，完成对象初始化和清理工作。</p>\n</blockquote>\n<blockquote>\n<p>对象的初始化和清理工作是编译器强制要我们做的事情，因此如果我们不提供构造和析构，编译器会提供，编译器提供的构造函数和析构函数是空实现。构造函数：主要作用在于创建对象时为对象的成员属性赋值，构造函数由编译器自动调用，无须手动调用。<br />\n析构函数：主要作用在于对象销毁前系统自动调用，执行一些清理工作。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* 构造函数和析构函数</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>* 对象的初始化和清理也是两个非常重要的安全问题</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>*    一个对象或者变量没有初始状态，对其使用后果是未知</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>*    同样的使用完一个对象或变量，没有及时清理，也会造成一定的安全问题</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>* C++ 利用了构造函数和析构函数解决上述问题，这两个函数将会被编译器自动调用，完成对象初始化和清理工作。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>* 对象的初始化和清理工作是编译器强制要我们做的事情，因此如果我们不提供构造和析构，编译器会提供</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>* 编译器提供的构造函数和析构函数是空实现。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>*    构造函数：主要作用在于创建对象时为对象的成员属性赋值，构造函数由编译器自动调用，无须手动调用。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>*    析构函数：主要作用在于对象销毁前系统自动调用，执行一些清理工作。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> 构造函数语法：类名 ()&#123;&#125;</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>1. 构造函数，没有返回值也不写 void</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>2. 函数名称与类名相同</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>3. 构造函数可以有参数，因此可以发生重载</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>4. 程序在调用对象时候会自动调用构造，无须手动调用，而且只会调用一次</pre></td></tr><tr><td data-num=\"22\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"25\"></td><td><pre> 析构函数语法：类名 ()&#123;&#125;</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>1. 析构函数，没有返回值也不写 void</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>2. 函数名称与类名相司，在名称前加上符号～</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>3. 析构函数不可以有参数，因此不可以发生重载</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>4. 程序在对象销毁前会自动调用析构，无须手动调用，而且只会调用一次</pre></td></tr><tr><td data-num=\"30\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">// 对象的初始化和清理</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">// 1. 构造函数进行初始化操作</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Person的构造函数被调用\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\">// 2. 析构函数，进行清理操作</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Person的析构函数被调用\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\">// 构造和析构都是必须有的实现，如果我们自己不提供，编译器会提供一个空实现的构造和析构</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    Person p<span class=\"token punctuation\">;</span><span class=\"token comment\">// 在栈上的数据，test01 执行完毕后，释放这个对象</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"构造函数的分类以及调用\"><a class=\"anchor\" href=\"#构造函数的分类以及调用\">#</a> 构造函数的分类以及调用</h2>\n<ul>\n<li>构造函数的分离及调用有两种分类方式：\n<ul>\n<li>按参数分为：有参构造和无参构造</li>\n<li>按类型分为：普通构造和拷贝构造</li>\n</ul>\n</li>\n<li>三种调用方式：\n<ul>\n<li>括号法</li>\n<li>显示法</li>\n<li>隐式转换法</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>构造函数的分离及调用</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 构造函数的分离及调用</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 两种分类方式：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *  按参数分为：有参构造和无参构造</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *  按类型分为：普通构造和拷贝构造</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * 三种调用方式：</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *  括号法</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *  显示法</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> *  隐式转换法</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Person的无参构造函数被调用\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        age <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Person的有参构造函数被调用\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">// 拷贝构造函数</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Person <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">// 将传入的人身上的所有属性，拷贝到我身上</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        age <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Person的拷贝构造函数被调用\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Person的析构函数被调用\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token comment\">// 1. 括号法</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\">//    Person p1;// 默认构造函数调用</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\">//    Person p2 (10);// 有参构造函数</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\">//    Person p3 (p2);// 拷贝构造函数</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token comment\">// 注意事项 1</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token comment\">// 调用默认构造函数时候，不要加 ()</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token comment\">//    cout &lt;&lt; \"p2 的年龄：\" &lt;&lt; p2.age &lt;&lt; endl;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\">//    cout &lt;&lt; \"p3 的年龄：\" &lt;&lt; p3.age &lt;&lt; endl;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token comment\">// 因为下面这行代码，编译器会认为是一个函数的声明，不会认为在创建对象</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token comment\">//    Person p1();</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token comment\">// 2. 显示法</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    Person p1<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// ↓ 匿名对象语法：Person ()</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    Person p2 <span class=\"token operator\">=</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 有参构造函数</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    Person p3 <span class=\"token operator\">=</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 拷贝构造函数</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token comment\">//    Person (20);// 匿名对象特点：当前行执行结束后，系统会立即回收掉匿名对象</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token comment\">// 注意事项 2</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token comment\">// 不用利用拷贝构造函数初始化匿名对象 编译器会认为 Person (p3) == Person p3;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token comment\">//    Person (p3);// 错误</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token comment\">// 3. 隐式转换法</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    Person p4 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 相当于写了 Person p4 = Person (10) 有参构造</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    Person p5 <span class=\"token operator\">=</span> p4<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 拷贝构造</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"拷贝构造函数调用时机\"><a class=\"anchor\" href=\"#拷贝构造函数调用时机\">#</a> 拷贝构造函数调用时机</h2>\n<ul>\n<li>C++ 中拷贝构造函数调用时机通常有三种情况</li>\n<li>1. 使用应该已经创建完毕的对象来初始化应该新对象</li>\n<li>2. 值传递的方式给函数参数传值</li>\n<li>3. 以值方式返回局部对象</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>拷贝构造函数调用时机</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 拷贝构造函数调用时机</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * C++ 中拷贝构造函数调用时机通常有三种情况</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 1. 使用应该已经创建完毕的对象来初始化应该新对象</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * 2. 值传递的方式给函数参数传值</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * 3. 以值方式返回局部对象</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Person无参构造函数调用\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        mAge <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Person有参构造函数调用\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        mAge <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Person <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Person拷贝构造函数调用\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        mAge <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>mAge<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Person析构造函数调用\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">int</span> mAge<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">// 1. 使用应该已经创建完毕的对象来初始化应该新对象</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    Person <span class=\"token function\">p1</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    Person <span class=\"token function\">p2</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"P2的年龄：\"</span> <span class=\"token operator\">&lt;&lt;</span> p2<span class=\"token punctuation\">.</span>mAge <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\">// 2. 值传递的方式给函数参数传值</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">doWork</span><span class=\"token punctuation\">(</span>Person p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    Person p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token function\">doWork</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token comment\">// 3. 以值方式返回局部对象</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>Person <span class=\"token function\">doWork2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    Person p1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>p1 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test03</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    Person p <span class=\"token operator\">=</span> <span class=\"token function\">doWork2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>p <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token comment\">//    test01();</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token comment\">//    test02();</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token function\">test03</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"构造函数调用规则\"><a class=\"anchor\" href=\"#构造函数调用规则\">#</a> 构造函数调用规则</h2>\n<ul>\n<li>默认情况下 C++ 编译器至少给一个类添加三个函数\n<ul>\n<li>默认构造函数 (无参，函数体为空)</li>\n<li>默认析构函数 (无参，函数体为空)</li>\n<li>默认拷贝构造函数，对属性进行值拷贝</li>\n</ul>\n</li>\n<li>构造函数调用规则如下：</li>\n<li>如果用户定义有参构造函数 C++ 不在提供默认无参构造，弹会提供默认拷贝构造</li>\n<li>如果用户定义拷贝构造函数 C++ 不会在提供其他构造函数</li>\n<li>总结：如果属性有在堆区开辟的，一定要自己提供拷贝构造函数，防止浅拷贝带来的问题</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>构造函数调用规则</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 构造函数调用规则</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 默认情况下 C++ 编译器至少给一个类添加三个函数</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 1. 默认构造函数 (无参，函数体为空)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * 2. 默认析构函数 (无参，函数体为空)</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * 3. 默认拷贝构造函数，对属性进行值拷贝</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * 构造函数调用规则如下：</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> *  如果用户定义有参构造函数 C++ 不在提供默认无参构造，弹会提供默认拷贝构造</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> *  如果用户定义拷贝构造函数 C++ 不会在提供其他构造函数</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> *  总结：如果属性有在堆区开辟的，一定要自己提供拷贝构造函数，防止浅拷贝带来的问题</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 无参 (默认) 构造函数</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"无参构造函数的调用\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 有参构造函数</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        age <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"有参构造函数的调用\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Person <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"拷贝构造函数的调用\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        age <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">//        m_Height = new int (*p.m_Height); // 深拷贝 new int 代表重新在堆区开辟一个新内存空间</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">// 析构函数</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"析构函数的调用\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    Person p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    p<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    Person <span class=\"token function\">p2</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"p2的年龄为：\"</span> <span class=\"token operator\">&lt;&lt;</span> p2<span class=\"token punctuation\">.</span>age <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"深拷贝与浅拷贝\"><a class=\"anchor\" href=\"#深拷贝与浅拷贝\">#</a> 深拷贝与浅拷贝</h2>\n<blockquote>\n<p>深浅拷贝是面试经典问题，也是常见的一个坑，浅拷贝：简单的赋值拷贝操作，深拷贝：在堆区重新申请空间，进行拷贝操作</p>\n</blockquote>\n<h2 id=\"初始化列表\"><a class=\"anchor\" href=\"#初始化列表\">#</a> 初始化列表</h2>\n<blockquote>\n<p>作用： <code>C++</code>  提供了初始化列表语法，用来初始化属性，语法： <code>构造函数(): 属性1(值1),属性2(值2)....&#123; &#125;</code></p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>初始化列表</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 初始化列表</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 作用：C++ 提供了初始化列表语法，用来初始化属性</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 语法：构造函数 (): 属性 1 (值 1), 属性 2 (值 2)...&#123; &#125;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">//    Person(int a,int b,int c)&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">//        this->a = a;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">//        this->b = b;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">//        this->c = c;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">//    &#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 使用初始化列表初始化属性</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 方法 1</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">m_A</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">m_B</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">m_C</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 方法 2</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> c<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">m_A</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">m_B</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">m_C</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">int</span> m_A<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">int</span> m_B<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">int</span> m_C<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    Person <span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"A = \"</span> <span class=\"token operator\">&lt;&lt;</span> p<span class=\"token punctuation\">.</span>m_A <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"B = \"</span> <span class=\"token operator\">&lt;&lt;</span> p<span class=\"token punctuation\">.</span>m_B <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"C = \"</span> <span class=\"token operator\">&lt;&lt;</span> p<span class=\"token punctuation\">.</span>m_C <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"类对象作为类成员\"><a class=\"anchor\" href=\"#类对象作为类成员\">#</a> 类对象作为类成员</h2>\n<blockquote>\n<p><code>C++</code>  类中的成员是可以另一个类的对象，我们称该成员为对象成员</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>类对象作为类成员</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* 类对象作为类成员</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * C++ 类中的成员是可以另一个类的对象，我们称该成员为对象成员</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"A class构造函数被调用\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"A class析构函数被调用\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token function\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"B class构造函数被调用\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"B class析构函数被调用\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>     A a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    B b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>     * 调用结果：</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>     *  A class 构造函数被调用</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>     *  B class 构造函数被调用</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>     *  B class 析构函数被调用</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>     *  A class 析构函数被调用</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"静态成员\"><a class=\"anchor\" href=\"#静态成员\">#</a> 静态成员</h2>\n<blockquote>\n<p>静态成员就是在成员变量和成员函数前加上关键字 <code>static</code> , 称为静态成员。</p>\n</blockquote>\n<ul>\n<li>静态成员分为：\n<ul>\n<li>静态成员变量：\n<ul>\n<li>所有对象共享同一份数据</li>\n<li>在编译阶段分配内存</li>\n<li>类内声明，类外初始化</li>\n</ul>\n</li>\n<li>静态成员函数\n<ul>\n<li>所有对象共享同一个函数</li>\n<li>静态成员函数只能访问静态成员变量</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>静态成员变量.cpp</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* 静态成员变量</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">//1. 所有对象都共享同一份数据</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">//2. 编译阶段就分配内存</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">//3. 类内声明，类外初始化操作</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> m_A<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 静态成员变量也是有访问权限的</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> m_B<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">int</span> Person<span class=\"token double-colon punctuation\">::</span>m_A <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">int</span> Person<span class=\"token double-colon punctuation\">::</span>m_B <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    Person p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> p<span class=\"token punctuation\">.</span>m_A <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    Person p2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    p2<span class=\"token punctuation\">.</span>m_A <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> p<span class=\"token punctuation\">.</span>m_A <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">// 静态成员变量不属于某个对象上，所有对象都共享同一份数据</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">// 因此静态成员变量有两种访问方式</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">//1. 通过对象进行访问</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">//    Person p;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">//    cout &lt;&lt; p.m_A &lt;&lt; endl;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">//2. 通过类名进行访问</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> Person<span class=\"token double-colon punctuation\">::</span>m_A <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">//    cout &lt;&lt; Person::m_B &lt;&lt; endl;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token function\">test02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\">//    test01();</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>静态成员函数.cpp</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 静态成员函数</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 所有对象共享同一个函数</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 静态成员函数只能访问静态成员变量</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        m_A <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 静态成员函数可以访问静态成员变量</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">//        m_B = 200; 静态成员函数 不可以访问非静态成员变量，因为编译器无法区分到底是哪个对象的 m_B 属性</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"static void func调用\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> m_A<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">int</span> m_B<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// 静态成员函数也是有访问权限的</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"static void func2调用\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre> <span class=\"token keyword\">int</span> Person<span class=\"token double-colon punctuation\">::</span>m_A <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">// 1. 通过对象进行访问</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    Person p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    p<span class=\"token punctuation\">.</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">// 2. 通过类名进行访问</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token class-name\">Person</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"c对象模型和this指针\"><a class=\"anchor\" href=\"#c对象模型和this指针\">#</a> C++ 对象模型和 this 指针</h2>\n<h3 id=\"成员变量和成员函数分开存储\"><a class=\"anchor\" href=\"#成员变量和成员函数分开存储\">#</a> 成员变量和成员函数分开存储</h3>\n<blockquote>\n<p>在 <code>C++</code>  中，类内的成员变量和成员函数分开存储，只有非静态成员变量才属于类的对象上</p>\n</blockquote>\n<h3 id=\"this指针概念\"><a class=\"anchor\" href=\"#this指针概念\">#</a> this 指针概念</h3>\n<details class=\"info\"><summary>this指针概念</summary><div>\n<p><code>this</code>  指针是隐含每一个非静态成员函数内的一种指针，this 指针不需要定义，直接使用即可。</p>\n</div></details>\n<blockquote>\n<p><code>this</code>  指针的用途： 当形参和成员变量同名时，我们就可以使用 this 指针来进行区分，在类的非静态成员函数中返回对象本身，，可使用  <code>return *this</code> 。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>this指针概念.cpp</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * this 指针概念</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * this 指针是隐含每一个非静态成员函数内的一种指针</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * this 指针不需要定义，直接使用即可</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * this 指针的用途：</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *  当形参和成员变量同名时，我们就可以使用 this 指针来进行区分</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *  在类的非静态成员函数中返回对象本身，，可使用 return *this</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">//this 指针指向被调用的成员函数所属的对象</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    Person<span class=\"token operator\">&amp;</span> <span class=\"token function\">PersonAddAge</span><span class=\"token punctuation\">(</span>Person <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>age <span class=\"token operator\">+=</span>p<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">// 1. 解决名称冲突问题</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    Person <span class=\"token function\">p1</span><span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"p1的年龄为：\"</span> <span class=\"token operator\">&lt;&lt;</span> p1<span class=\"token punctuation\">.</span>age <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">// 2. 返回对象本身用 *this</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    Person <span class=\"token function\">p1</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    Person <span class=\"token function\">p2</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token comment\">// 链式编程</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    p2<span class=\"token punctuation\">.</span><span class=\"token function\">PersonAddAge</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">PersonAddAge</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">PersonAddAge</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"p2的年龄为：\"</span> <span class=\"token operator\">&lt;&lt;</span> p2<span class=\"token punctuation\">.</span>age <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token function\">test02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"空指针访问成员函数\"><a class=\"anchor\" href=\"#空指针访问成员函数\">#</a> 空指针访问成员函数</h3>\n<blockquote>\n<p><code>C++</code>  中空指针也是可以调用成员函数的，但是也要注意有没有用到 <code>this</code>  指针，如果用到 <code>this</code>  指针，需要加以判断保证代码的健壮性。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>控制在访问成员函数.cpp</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 控制在访问成员函数</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * C++ 中空指针也是可以调用成员函数的，但是要注意有没有使用到 this 指针</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *  如果有使用到 this 指针，就需要加以判断保证代码的健壮性</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 空指针访问成员函数</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">showClassName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"this is person class\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">showPersonAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">==</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 错误：原因是因为传入的指针是为 NULL</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"age = \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>age <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    Person <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    p<span class=\"token operator\">-></span><span class=\"token function\">showClassName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    p<span class=\"token operator\">-></span><span class=\"token function\">showPersonAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"const修饰成员函数\"><a class=\"anchor\" href=\"#const修饰成员函数\">#</a> const 修饰成员函数</h3>\n<ul>\n<li>常函数：\n<ul>\n<li>成员函数后加 const 后我们称为这个函数为常函数</li>\n<li>常函数内不可以修改成员属性</li>\n<li>成员属性声明时加上 mutable 关键字后，在常函数中依然可以修改</li>\n</ul>\n</li>\n<li>常对象：\n<ul>\n<li>声明对象前加上 const 称为该对象为常对象</li>\n<li>常对象只能调用常函数</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>const修饰成员函数.cpp</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* const 修饰成员函数</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 常函数：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *      成员函数后加 const 后我们称为这个函数为常函数</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *      常函数内不可以修改成员属性</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *      成员属性声明时加上 mutable 关键字后，在常函数中依然可以修改</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * 常对象：</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> *      声明对象前加上 const 称为该对象为常对象</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> *      常对象只能调用常函数</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 常函数</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        m_B <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"m_B的值为：\"</span> <span class=\"token operator\">&lt;&lt;</span> m_B <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// 常函数</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">//this 指针的本质是指针常量 指针的指向是不可以修改的</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">// 在成员函数后面加 const 修饰的是 this 指向，让指针指向的值夜不可以修改</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">showPerson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        m_B <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">//        this -> m_A = 100;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">//        this = NULL; //this 指针是不可以修改指针的指向的</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">int</span> m_A<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">mutable</span> <span class=\"token keyword\">int</span> m_B<span class=\"token punctuation\">;</span><span class=\"token comment\">// 特殊变量，即使在常函数中，也可以修改这个值</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    Person p1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    p1<span class=\"token punctuation\">.</span><span class=\"token function\">showPerson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\">// 常对象</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">const</span> Person p<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 在对象前加上 const, 变为常对象</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token comment\">//   p.m_A = 100;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    p<span class=\"token punctuation\">.</span>m_B <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//m_B 因为添加了 mutable 关键字，在常对象下也是可以修改</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token comment\">// 常对象只能调用常函数</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    p<span class=\"token punctuation\">.</span><span class=\"token function\">showPerson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token comment\">//    p.func (); // 因为常对象不可以调用普通的成员函数，另外普通函数是可以修改成员函数的</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    Person p2<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    p2<span class=\"token punctuation\">.</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token function\">test02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"友元\"><a class=\"anchor\" href=\"#友元\">#</a> 友元</h2>\n<blockquote>\n<p>在生活中你的家里有客厅 (public) 有卧室 <code>(private)</code> , 客厅所有来的客人都可以进去，但是你的卧室是私有的，也加上说只有你自己可以进去。 但是，你也可以允许你的好朋友进去，在程序中，有些是私有属性，也想让类外特殊的一些函数或者类进行访问，就需要用到友元的技术了，友元的目的是让一个函数或者类访问另应该类中私有的成员。 友元的关键字为： <code>friend</code> 。</p>\n</blockquote>\n<ul>\n<li>友元的三种实现：\n<ul>\n<li>全局函数做友元</li>\n<li>类做友元</li>\n<li>成员函数做友元</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>友元-全局函数做友元.cpp</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* 友元</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 在生活中你的家里有客厅 (public) 有卧室 (private)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 客厅所有来的客人都可以进去，但是你的卧室是私有的，也加上说只有你自己可以进去</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * 但是，你也可以允许你的好朋友进去</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * 在程序中，有些是私有属性，也想让类外特殊的一些函数或者类进行访问，就需要用到友元的技术了</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * 友元的目的是让一个函数或者类访问另应该类中私有的成员</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * 友元的关键字为：friend</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * 友元的三种实现：</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> *      全局函数做友元</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> *      类做友元</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> *      成员函数做友元</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 1. 全局函数做友元</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// 建筑类</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Building</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">// 函数的声明</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">//goodGay 全局函数是 Building 的好朋友，加上 friend 关键字后就可以访问 Building 中的私有成员</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">friend</span> <span class=\"token keyword\">void</span> <span class=\"token function\">goodGay</span><span class=\"token punctuation\">(</span>Building <span class=\"token operator\">&amp;</span>building<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token function\">Building</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        m_SittingRoom <span class=\"token operator\">=</span> <span class=\"token string\">\"客厅\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        m_BedRoom <span class=\"token operator\">=</span> <span class=\"token string\">\"卧室\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    string m_SittingRoom<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 客厅</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    string m_BedRoom<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 卧室</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\">// 全局函数</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">goodGay</span><span class=\"token punctuation\">(</span>Building <span class=\"token operator\">&amp;</span>building<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"好基友全局函数 正在访问：\"</span> <span class=\"token operator\">&lt;&lt;</span> building<span class=\"token punctuation\">.</span>m_SittingRoom <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"好基友全局函数 正在访问：\"</span> <span class=\"token operator\">&lt;&lt;</span> building<span class=\"token punctuation\">.</span>m_BedRoom <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    Building building<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token function\">goodGay</span><span class=\"token punctuation\">(</span>building<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>友元-类做友元.cpp</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* 类做友元</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Building</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">GoodGay</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">GoodGay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 参观函数 访问 Building 中的属性</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    Building <span class=\"token operator\">*</span>building<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Building</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">//    friend void GoodGay::visit();</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">//GoodGay 类是本来的好朋友，可以访问本类中的私有成员</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">friend</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GoodGay</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token function\">Building</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    string m_SittingRoom<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 客厅</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    string m_BedRoom<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 卧室</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">// 在类外写成员函数</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token class-name\">Building</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Building</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    m_SittingRoom <span class=\"token operator\">=</span> <span class=\"token string\">\"客厅\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    m_BedRoom <span class=\"token operator\">=</span> <span class=\"token string\">\"卧室\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token class-name\">GoodGay</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">GoodGay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    building <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Building<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">GoodGay</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"GoodGay正在访问：\"</span> <span class=\"token operator\">&lt;&lt;</span> building<span class=\"token operator\">-></span>m_SittingRoom <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"GoodGay正在访问：\"</span> <span class=\"token operator\">&lt;&lt;</span> building<span class=\"token operator\">-></span>m_BedRoom <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    GoodGay g<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    g<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>友元-成员函数做友元.cpp</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* 成员函数做友元</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Building</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">GoodGay</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">GoodGay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 让 visit 函数可以访问 Building 中的私有成员</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 让 visit2 函数不可以访问 Building 中的私有成员</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">visit2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    Building <span class=\"token operator\">*</span>building<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Building</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 告诉编译器 GoodGay 类下的 visit 成员函数作为本类的好朋友，可以访问私有成员</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">friend</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">GoodGay</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token function\">Building</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">// 客厅</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    string m_SittingRoom<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">// 卧室</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    string m_BedRoom<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">// 类外实现成员函数</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token class-name\">GoodGay</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">GoodGay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token comment\">// 创建 Building</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    building <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Building<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">GoodGay</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"GoodGay.visit()函数正在访问\"</span> <span class=\"token operator\">&lt;&lt;</span> building<span class=\"token operator\">-></span>m_SittingRoom <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"GoodGay.visit()函数正在访问\"</span> <span class=\"token operator\">&lt;&lt;</span> building<span class=\"token operator\">-></span>m_BedRoom <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token class-name\">GoodGay</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">visit2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"GoodGay.visit2()函数正在访问\"</span> <span class=\"token operator\">&lt;&lt;</span> building<span class=\"token operator\">-></span>m_SittingRoom <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token comment\">//    cout &lt;&lt; \"GoodGay.visit2 () 函数正在访问\" &lt;&lt; building->m_BedRoom &lt;&lt; endl;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token class-name\">Building</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Building</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    m_SittingRoom <span class=\"token operator\">=</span> <span class=\"token string\">\"客厅\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    m_BedRoom <span class=\"token operator\">=</span> <span class=\"token string\">\"卧室\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    GoodGay g<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    g<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    g<span class=\"token punctuation\">.</span><span class=\"token function\">visit2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"运算符重载\"><a class=\"anchor\" href=\"#运算符重载\">#</a> 运算符重载</h2>\n<blockquote>\n<p>运算符重载概念：对已有的运算符重载进行定义，赋予其另一种功能，以适应不同的数据类型。</p>\n</blockquote>\n<h3 id=\"加号运算符重载\"><a class=\"anchor\" href=\"#加号运算符重载\">#</a> 加号运算符重载</h3>\n<blockquote>\n<p>作用：实现两个自定义数据类型相加的运算，请勿滥用运算符重载，如：加法运算重载成减法运算。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>加号运算符重载.cpp</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 加号运算符重载</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 作用：实现两个自定义数据类型相加的运算</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 总结 1：对于内置的数据类型的表达式的运算符是不可以改变的，如：1+1 = 0</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * 总结 2：不要滥用运算符重载</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 1. 成员函数重载 + 号</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">//    Person operator+(Person &amp;p) &#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">//        Person temp;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">//        temp.m_A = this->m_A + p.m_A;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">//        temp.m_B = this->m_B + p.m_B;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">//        return temp;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">//    &#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">int</span> m_A<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">int</span> m_B<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// 2. 全局函数重载 + 号</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>Person <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>Person <span class=\"token operator\">&amp;</span>p1<span class=\"token punctuation\">,</span> Person <span class=\"token operator\">&amp;</span>p2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    Person temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    temp<span class=\"token punctuation\">.</span>m_A <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">.</span>m_A <span class=\"token operator\">+</span> p2<span class=\"token punctuation\">.</span>m_A<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    temp<span class=\"token punctuation\">.</span>m_B <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">.</span>m_B <span class=\"token operator\">+</span> p2<span class=\"token punctuation\">.</span>m_B<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">return</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>Person <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>Person <span class=\"token operator\">&amp;</span>p1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> nuber<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    Person temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    temp<span class=\"token punctuation\">.</span>m_A <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">.</span>m_A <span class=\"token operator\">+</span> nuber<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    temp<span class=\"token punctuation\">.</span>m_B <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">.</span>m_B <span class=\"token operator\">+</span> nuber<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">return</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    Person p1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    p1<span class=\"token punctuation\">.</span>m_A <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    p1<span class=\"token punctuation\">.</span>m_B <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    Person p2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    p2<span class=\"token punctuation\">.</span>m_A <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    p2<span class=\"token punctuation\">.</span>m_B <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token comment\">// 成员函数重载本质调用</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\">//    Person p3 = p1.operator+(p2);</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token comment\">// 全局函数重载本质调用</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token comment\">//    Person p3 = operator+(p1,p2);</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    Person p3 <span class=\"token operator\">=</span> p1 <span class=\"token operator\">+</span> p2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"p3.m_A = \"</span> <span class=\"token operator\">&lt;&lt;</span> p3<span class=\"token punctuation\">.</span>m_A <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"p3.m_B = \"</span> <span class=\"token operator\">&lt;&lt;</span> p3<span class=\"token punctuation\">.</span>m_B <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token comment\">// 运算符重载，也可以发生函数重载</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    Person p4 <span class=\"token operator\">=</span> p1 <span class=\"token operator\">+</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"p4.m_A = \"</span> <span class=\"token operator\">&lt;&lt;</span> p4<span class=\"token punctuation\">.</span>m_A <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"p4.m_B = \"</span> <span class=\"token operator\">&lt;&lt;</span> p4<span class=\"token punctuation\">.</span>m_B <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"左移运算符重载\"><a class=\"anchor\" href=\"#左移运算符重载\">#</a> 左移运算符重载</h3>\n<blockquote>\n<p>作用：可以输出自定义数据类型。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>左移运算符重载.cpp</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* 左移运算符重载</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 作用：可以输出自定义数据类型</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 总结：重载左移运算符配合友元可以实现输出自定义数据类型</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">friend</span> ostream <span class=\"token operator\">&amp;</span><span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>ostream <span class=\"token operator\">&amp;</span>cout<span class=\"token punctuation\">,</span> Person <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_A <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>m_B <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">int</span> m_A<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">int</span> m_B<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// 重载 &lt;&lt; 左移运算符</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>ostream <span class=\"token operator\">&amp;</span><span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>ostream <span class=\"token operator\">&amp;</span>cout<span class=\"token punctuation\">,</span> Person <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"m_A = \"</span> <span class=\"token operator\">&lt;&lt;</span> p<span class=\"token punctuation\">.</span>m_A <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" m_B = \"</span> <span class=\"token operator\">&lt;&lt;</span> p<span class=\"token punctuation\">.</span>m_B<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">return</span> cout<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    Person <span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> p <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"递增运算符重载\"><a class=\"anchor\" href=\"#递增运算符重载\">#</a> 递增运算符重载</h3>\n<blockquote>\n<p>作用：通过重载递增运算符，实现对自己的整型数据进行自增。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>递增运算符重载.cpp</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* 递增运算符重载</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 作用：通过重载递增运算符，实现自己的整型数据</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 总结：前置递增返回引用，后置递增返回值</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyInteger</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">friend</span> ostream <span class=\"token operator\">&amp;</span><span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>ostream <span class=\"token operator\">&amp;</span>cout<span class=\"token punctuation\">,</span> MyInteger myint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 重载前置 ++ 运算符</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 返回引用是为了一直对一个数据进行递增操作</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    MyInteger <span class=\"token operator\">&amp;</span><span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 需要先进行 ++ 运算</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        m_Num<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 再将自身做返回</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// 重载后置 ++ 运算符</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">//int 代表占位参数，可以用于区分前置和后置递增</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    MyInteger <span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">// 先 记录当前结果</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        MyInteger temp <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">// 后 递增</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        m_Num<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">// 最后将记录结果返回</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">return</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token function\">MyInteger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        m_Num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">int</span> m_Num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\">// 重载左移运算符</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>ostream <span class=\"token operator\">&amp;</span><span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>ostream <span class=\"token operator\">&amp;</span>cout<span class=\"token punctuation\">,</span> MyInteger myint<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> myint<span class=\"token punctuation\">.</span>m_Num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">return</span> cout<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    MyInteger myInteger<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>myInteger<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> myInteger <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    MyInteger myInteger<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span>  myInteger<span class=\"token operator\">++</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span>  myInteger<span class=\"token operator\">++</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span>  myInteger<span class=\"token operator\">++</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span>  myInteger<span class=\"token operator\">++</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token function\">test02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"赋值运算符重载\"><a class=\"anchor\" href=\"#赋值运算符重载\">#</a> 赋值运算符重载</h3>\n<ul>\n<li><code>C++</code>  编译器至少给一个类添加四个函数\n<ul>\n<li>默认构造函数 (无参，函数体为空)</li>\n<li>默认析构函数 (无参，函数体为空)</li>\n<li>默认拷贝构造函数，对属性进行值拷贝</li>\n<li>赋值运算符 <code>operator=</code> , 对属性进行值拷贝</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>如果类中有属性指向堆区，做赋值操作时也会出现深浅拷贝的问题。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>赋值运算符重载.cpp</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* 赋值运算符重载</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        m_Age <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_Age <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">delete</span> m_Age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            m_Age <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 重载 赋值运算符</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    Person <span class=\"token operator\">&amp;</span><span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>Person <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">// 编译器是提供浅拷贝</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">//        m_Age = p.m_Age;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">// 应该先判断是否有属性在堆区，如果有就需要先释放干净，然后在进行深拷贝</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_Age <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">delete</span> m_Age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            m_Age <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">// 深拷贝</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        m_Age <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">.</span>m_Age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">// 返回自身引用</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>m_Age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    Person <span class=\"token function\">p1</span><span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    Person <span class=\"token function\">p2</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    Person <span class=\"token function\">p3</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    p3 <span class=\"token operator\">=</span> p2 <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"p1的年龄为：\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>p1<span class=\"token punctuation\">.</span>m_Age <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"p2的年龄为：\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>p2<span class=\"token punctuation\">.</span>m_Age <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"p2的年龄为：\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>p3<span class=\"token punctuation\">.</span>m_Age <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"关系运算符重载\"><a class=\"anchor\" href=\"#关系运算符重载\">#</a> 关系运算符重载</h3>\n<blockquote>\n<p>作用：重载关系运算符，可以让两个自定义类型对象进行对比操作。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>关系运算符重载.cpp</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* 关系运算符重载</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 作用：重载关系运算符，可以让两个自定义类型对象进行对比操作</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>string name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 重载关系运算符 ==</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span>Person <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span>name <span class=\"token operator\">==</span> p<span class=\"token punctuation\">.</span>name <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>age <span class=\"token operator\">==</span> p<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">!=</span><span class=\"token punctuation\">(</span>Person <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span>name <span class=\"token operator\">==</span> p<span class=\"token punctuation\">.</span>name <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>age <span class=\"token operator\">==</span> p<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    string name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    Person <span class=\"token function\">p1</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tom2\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    Person <span class=\"token function\">p2</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p1 <span class=\"token operator\">==</span> p2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"p1 和 p2是相等的！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"p1 和 p2是不相等的！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p1 <span class=\"token operator\">!=</span> p2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"p1 和 p2是不相等的！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"p1 和 p2是相等的！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"函数调用运算符重载\"><a class=\"anchor\" href=\"#函数调用运算符重载\">#</a> 函数调用运算符重载</h3>\n<blockquote>\n<p>函数调用运算符 <code>()</code>  也是可以重载，由于重载后使用的方式非常像函数的调用，因此称为仿函数，仿函数没有固定的写法，因此非常灵活。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>函数调用运算符重载.cpp</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 函数调用运算符重载</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 函数调用运算符 \"()\" 小括号也可以重载</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 由于重载后使用的方式非常像函数的调用，因此称为仿函数</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * 仿函数没有固定写法，非常灵活</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyPrint</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 重载函数调用运算符 仿函数</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>string test<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> test <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    MyPrint myPrint<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 由于使用起来非常类似于函数调用，因此称为仿函数</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token function\">myPrint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">// 仿函数 - 加法类</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyAdd</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">return</span> num1 <span class=\"token operator\">+</span> num2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    MyAdd add<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"i：\"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token comment\">// 匿名函数对象</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">MyAdd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token function\">test02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"继承\"><a class=\"anchor\" href=\"#继承\">#</a> 继承</h2>\n<blockquote>\n<p>继承是面向对象三大特性之一，继承的基本语法： <code>class 子类类名:访问权限 父类类名</code></p>\n</blockquote>\n<h3 id=\"继承方式\"><a class=\"anchor\" href=\"#继承方式\">#</a> 继承方式</h3>\n<ul>\n<li>继承的语法： <code>class 子类:继承方式 父类</code></li>\n<li>继承方式一共有三种：\n<ul>\n<li>公共继承</li>\n<li>保护继承</li>\n<li>私有继承</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>继承方式.cpp</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* 继承方式</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 继承语法：class 子类：继承方式 父类</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 继承方式一共有三种：</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *  公共继承</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *  保护继承</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *  私有继承</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 继承方式</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 公共继承</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">int</span> m_A<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">int</span> m_B<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">int</span> m_C<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Son1</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base1</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">// 父类中的公共权限成员，到了子类中依然是公共权限</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        m_A <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">// 父类中的保护权限成员，到了子类中依然是保护权限</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        m_B <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">//        m_C = 10; 父类中的私有权限成员，在子类中是无法访问的</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Son1 func() m_A：\"</span> <span class=\"token operator\">&lt;&lt;</span> m_A <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Son1 func() m_B：\"</span> <span class=\"token operator\">&lt;&lt;</span> m_B <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    Son1 son1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    son1<span class=\"token punctuation\">.</span>m_A <span class=\"token operator\">=</span> <span class=\"token number\">25</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    son1<span class=\"token punctuation\">.</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\">// 保护继承</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">int</span> m_A<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">int</span> m_B<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">int</span> m_C<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Son2</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">protected</span> <span class=\"token class-name\">Base2</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token comment\">// 父类中公共成员，到子类中变为保护权限</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        m_A <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token comment\">// 父类中保护成员，到子类中变为保护权限</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        m_B <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token comment\">// 父类中私有成员，子类依旧无法访问</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token comment\">//        m_C = 100;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Son2 func() m_A：\"</span> <span class=\"token operator\">&lt;&lt;</span> m_A <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Son2 func() m_B：\"</span> <span class=\"token operator\">&lt;&lt;</span> m_B <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    Son2 son2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    son2<span class=\"token punctuation\">.</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token comment\">// 私有继承</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base3</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token keyword\">int</span> m_A<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token keyword\">int</span> m_B<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token keyword\">int</span> m_C<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Son3</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">private</span> <span class=\"token class-name\">Base3</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        m_A <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 父类中公共成员，到子类中变为私有权限</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        m_B <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 父类中保护成员，到子类中变为私有权限</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token comment\">//m_C = 1000; 我们在使用私有继承，依旧是访问不到父类中的私有成员</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Son3 func() m_A：\"</span> <span class=\"token operator\">&lt;&lt;</span> m_A <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Son3 func() m_B：\"</span> <span class=\"token operator\">&lt;&lt;</span> m_B <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test03</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    Son3 son3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    son3<span class=\"token punctuation\">.</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token function\">test02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    <span class=\"token function\">test03</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"继承中的对象模型\"><a class=\"anchor\" href=\"#继承中的对象模型\">#</a> 继承中的对象模型</h3>\n<blockquote>\n<p>问题：从父类继承过来的成员，，哪些属于子类对象中？</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* 继承中的对象模型</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 总结：父类中私有成员也是被子类继承下去了，只是由编译器给隐藏后访问不到</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">int</span> m_A<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">protected</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">int</span> m_B<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">int</span> m_C<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Son</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">int</span> m_D<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// 父类中所有非静态成员属性都会被子类继承下去</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// 父类中私有成员属性，是被编译器给隐藏了，因此无法访问，但是确实是被继承到了子类中</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">// 16 字节</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"size of Son = \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Son<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>* D:\\CLionProjects\\Demo\\ 类和对象 \\ 继承 > c1 /d1 reportSingleClassLayoutSon 继承中的对象模型.cpp</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>'c1' 不是内部或外部命令，也不是可运行的程序</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>或批处理文件。</pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>D:\\CLionProjects\\Demo\\ 类和对象 \\ 继承 > cl /d1 reportSingleClassLayoutSon 继承中的对象模型.cpp</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>用于 x86 的 Microsoft (R) C/C++ 优化编译器 19.44.35209 版</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>版权所有 (C) Microsoft Corporation。保留所有权利。</pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>继承中的对象模型.cpp</pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>class Son       size (16):</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        +---</pre></td></tr><tr><td data-num=\"47\"></td><td><pre> 0      | +--- (base class Base)</pre></td></tr><tr><td data-num=\"48\"></td><td><pre> 0      | | m_A</pre></td></tr><tr><td data-num=\"49\"></td><td><pre> 4      | | m_B</pre></td></tr><tr><td data-num=\"50\"></td><td><pre> 8      | | m_C</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        | +---</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>12      | m_D</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        +---</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>D:\\Software\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\include\\__msvc_ostream.hpp (781): warning C4530: 使用了 C++ 异常处理程序，但未启用展开语义。请指定 /EHsc</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>D:\\Software\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\include\\__msvc_ostream.hpp (781): note: 模板实例化上下文 (最早的实例化上下文) 为</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>继承中的对象模型.cpp (31): note: 查看对正在编译的函数 模板 实例化 “std::basic_ostream&lt;char,std::char_traits&lt;char>> &amp;std::operator &lt;&lt;&lt;std::char_traits&lt;char>>(std::basic_ostream&lt;char,std::char_traits&lt;char>> &amp;,const char *)” 的引用</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>Microsoft (R) Incremental Linker Version 14.44.35209.0</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>Copyright (C) Microsoft Corporation.  All rights reserved.</pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>/out: 继承中的对象模型.exe</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>继承中的对象模型.obj</pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>D:\\CLionProjects\\Demo\\ 类和对象 \\ 继承 ></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>*/</span></pre></td></tr></table></figure><blockquote>\n<p>另外可以使用 Vs 来查看继承类中的属性是否被一同继承了没有，使用 Vs 开发终端，输入： <code>cl /d1 reportSingleClassLayout(类名) 文件名</code>  例如： <code>cl /d1 reportSingleClassLayoutSon 继承中的对象模型.cpp</code></p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>查看Son类的底层继承属性</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[Administrator] $\"></td><td><pre>D:<span class=\"token punctuation\">\\</span>CLionProjects<span class=\"token punctuation\">\\</span>Demo<span class=\"token punctuation\">\\</span>类和对象<span class=\"token punctuation\">\\</span>继承<span class=\"token operator\">></span>cl /d1 reportSingleClassLayoutSon 继承中的对象模型.cpp</pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[Administrator] $\"></td><td><pre>用于 x86 的 Microsoft <span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">)</span> C/C++ 优化编译器 <span class=\"token number\">19.44</span>.35209 版</pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"[Administrator] $\"></td><td><pre>版权所有<span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">)</span> Microsoft Corporation。保留所有权利。</pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td data-command=\"[Administrator] $\"></td><td><pre>继承中的对象模型.cpp</pre></td></tr><tr><td data-num=\"6\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td data-command=\"[Administrator] $\"></td><td><pre>class Son       size<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span>:</pre></td></tr><tr><td data-num=\"8\"></td><td data-command=\"[Administrator] $\"></td><td><pre>        +---</pre></td></tr><tr><td data-num=\"9\"></td><td data-command=\"[Administrator] $\"></td><td><pre> <span class=\"token number\">0</span>      <span class=\"token operator\">|</span> +--- <span class=\"token punctuation\">(</span>base class Base<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td data-command=\"[Administrator] $\"></td><td><pre> <span class=\"token number\">0</span>      <span class=\"token operator\">|</span> <span class=\"token operator\">|</span> m_A</pre></td></tr><tr><td data-num=\"11\"></td><td data-command=\"[Administrator] $\"></td><td><pre> <span class=\"token number\">4</span>      <span class=\"token operator\">|</span> <span class=\"token operator\">|</span> m_B</pre></td></tr><tr><td data-num=\"12\"></td><td data-command=\"[Administrator] $\"></td><td><pre> <span class=\"token number\">8</span>      <span class=\"token operator\">|</span> <span class=\"token operator\">|</span> m_C</pre></td></tr><tr><td data-num=\"13\"></td><td data-command=\"[Administrator] $\"></td><td><pre>        <span class=\"token operator\">|</span> +---</pre></td></tr><tr><td data-num=\"14\"></td><td data-command=\"[Administrator] $\"></td><td><pre><span class=\"token number\">12</span>      <span class=\"token operator\">|</span> m_D</pre></td></tr><tr><td data-num=\"15\"></td><td data-command=\"[Administrator] $\"></td><td><pre>        +---</pre></td></tr><tr><td data-num=\"16\"></td><td data-command=\"[Administrator] $\"></td><td><pre>D:<span class=\"token punctuation\">\\</span>Software<span class=\"token punctuation\">\\</span>Microsoft Visual Studio<span class=\"token punctuation\">\\</span><span class=\"token number\">2022</span><span class=\"token punctuation\">\\</span>Community<span class=\"token punctuation\">\\</span>VC<span class=\"token punctuation\">\\</span>Tools<span class=\"token punctuation\">\\</span>MSVC<span class=\"token punctuation\">\\</span><span class=\"token number\">14.44</span>.35207<span class=\"token punctuation\">\\</span>include<span class=\"token punctuation\">\\</span>__msvc_ostream.hpp<span class=\"token punctuation\">(</span><span class=\"token number\">781</span><span class=\"token punctuation\">)</span>: warning C4530: 使用了 C++ 异常处理程序，但未启用展开语义。请指定 /EHsc</pre></td></tr><tr><td data-num=\"17\"></td><td data-command=\"[Administrator] $\"></td><td><pre>D:<span class=\"token punctuation\">\\</span>Software<span class=\"token punctuation\">\\</span>Microsoft Visual Studio<span class=\"token punctuation\">\\</span><span class=\"token number\">2022</span><span class=\"token punctuation\">\\</span>Community<span class=\"token punctuation\">\\</span>VC<span class=\"token punctuation\">\\</span>Tools<span class=\"token punctuation\">\\</span>MSVC<span class=\"token punctuation\">\\</span><span class=\"token number\">14.44</span>.35207<span class=\"token punctuation\">\\</span>include<span class=\"token punctuation\">\\</span>__msvc_ostream.hpp<span class=\"token punctuation\">(</span><span class=\"token number\">781</span><span class=\"token punctuation\">)</span>: note: 模板实例化上下文<span class=\"token punctuation\">(</span>最早的实例化上下文<span class=\"token punctuation\">)</span>为</pre></td></tr><tr><td data-num=\"18\"></td><td data-command=\"[Administrator] $\"></td><td><pre>继承中的对象模型.cpp<span class=\"token punctuation\">(</span><span class=\"token number\">31</span><span class=\"token punctuation\">)</span>: note: 查看对正在编译的函数 模板 实例化“std::basic_ostream<span class=\"token operator\">&lt;</span>char,std::char_traits<span class=\"token operator\">&lt;</span>char<span class=\"token operator\">>></span> <span class=\"token operator\">&amp;</span>std::operator <span class=\"token operator\">&lt;&lt;&lt;</span>std::char_traits<span class=\"token operator\">&lt;</span>char<span class=\"token operator\">>></span><span class=\"token punctuation\">(</span>std::basic_ostream<span class=\"token operator\">&lt;</span>char,std::char_traits<span class=\"token operator\">&lt;</span>char<span class=\"token operator\">>></span> <span class=\"token operator\">&amp;</span>,const char *<span class=\"token punctuation\">)</span>”的引用</pre></td></tr><tr><td data-num=\"19\"></td><td data-command=\"[Administrator] $\"></td><td><pre>Microsoft <span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">)</span> Incremental Linker Version <span class=\"token number\">14.44</span>.35209.0</pre></td></tr><tr><td data-num=\"20\"></td><td data-command=\"[Administrator] $\"></td><td><pre>Copyright <span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">)</span> Microsoft Corporation.  All rights reserved.</pre></td></tr><tr><td data-num=\"21\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td data-command=\"[Administrator] $\"></td><td><pre>/out:继承中的对象模型.exe</pre></td></tr><tr><td data-num=\"23\"></td><td data-command=\"[Administrator] $\"></td><td><pre>继承中的对象模型.obj</pre></td></tr><tr><td data-num=\"24\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td data-command=\"[Administrator] $\"></td><td><pre>D:<span class=\"token punctuation\">\\</span>CLionProjects<span class=\"token punctuation\">\\</span>Demo<span class=\"token punctuation\">\\</span>类和对象<span class=\"token punctuation\">\\</span>继承<span class=\"token operator\">></span></pre></td></tr></table></figure><h3 id=\"继承中构造和析构顺序\"><a class=\"anchor\" href=\"#继承中构造和析构顺序\">#</a> 继承中构造和析构顺序</h3>\n<blockquote>\n<p>在子类继承父类后，当创建子类对象，也会调用父类的构造函数，问题：父类和子类的构造和析构顺序是谁先谁后？？？</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>继承中构造和析构顺序.cpp</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* 继承中构造和析构顺序</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 子类继承父类后当创建子类对象，也会调用父类的构造函数</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 问题：父类和子类的构造和析构顺序是谁先谁后？</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * 结论：父有 -> 子有 -> 子无 -> 父无</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * 总结：继承中先调用父类构造函数，再调用子类构造函数，析构顺序与构造调用则相反</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">Base</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Base构造函数！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">Base</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Base析构函数！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Son</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token function\">Son</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Son构造函数！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">Son</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">override</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Son析构函数！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">// 继承中的构造和析构顺序如下：</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">// 先构造父类，再构造子类，析构的顺序与构造的顺序相反</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    Son son<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"44\"></td><td><pre> * 执行结果：</pre></td></tr><tr><td data-num=\"45\"></td><td><pre> * Base 构造函数！</pre></td></tr><tr><td data-num=\"46\"></td><td><pre> * Son 构造函数！</pre></td></tr><tr><td data-num=\"47\"></td><td><pre> * Son 析构函数！</pre></td></tr><tr><td data-num=\"48\"></td><td><pre> * Base 析构函数！</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"继承同名成员处理方式\"><a class=\"anchor\" href=\"#继承同名成员处理方式\">#</a> 继承同名成员处理方式</h3>\n<blockquote>\n<p>问题：当子类与父类出现同名的成员，如何通过子类对象，访问到子类或父类中同名的数据吗？访问子类同名成员，直接访问即可，访问父类同名成员，需要加作用域</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>继承同名成员处理方式.cpp</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 继承同名成员处理方式</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 问题：当子类与父类出现同名的成员，如何通过子类对象，访问到子类或父类中同名的数据吗？</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 访问子类同名成员，直接访问即可</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * 访问父类同名成员，需要加作用域</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * 总结：</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *  1. 子类对象可以直接访问到子类中同名成员</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *  2. 子类镀锌加作用域可以访问到父类同名成员</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> *  3. 当子类与父类拥有同名的成员函数，子类会隐藏掉父类中同名成员函数，只有加上作用域才可以访问到父类中的同名函数，其中包括父类中的重载函数</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">Base</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        m_A <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Base func函数被调用！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// 重载函数</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Base func(int a)函数被调用！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">int</span> m_A<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Son</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token function\">Son</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        m_A <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Son func函数被调用！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">int</span> m_A<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token comment\">// 同名成员属性处理</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    Son s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Son 下的m_A = \"</span> <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span>m_A <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token comment\">// 如果通过子类对象访问到父类中同名的成员，需要加上父类的作用域</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Base 下的m_A = \"</span> <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span>Base<span class=\"token double-colon punctuation\">::</span>m_A <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token comment\">// 同名成员函数处理</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    Son son<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token comment\">// 就近原则调用</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    son<span class=\"token punctuation\">.</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token comment\">// 添加父类作用域</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    son<span class=\"token punctuation\">.</span><span class=\"token class-name\">Base</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token comment\">// 如果子类中出现和父类同名的成员函数，子类的同名成员会隐藏掉父类中所有同名成员函数</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token comment\">// 如果想要访问到父类中的被隐藏的同名成员函数，就需要添加父类作用域</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    son<span class=\"token punctuation\">.</span><span class=\"token class-name\">Base</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token comment\">//    test01();</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token function\">test02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"继承同名静态成员处理方式\"><a class=\"anchor\" href=\"#继承同名静态成员处理方式\">#</a> 继承同名静态成员处理方式</h3>\n<blockquote>\n<p>问题：继承中同名的静态成员在子类对象上如何进行访问？</p>\n</blockquote>\n<ul>\n<li>静态成员和非静态成员出现同名，处理方式一致\n<ul>\n<li>访问子类同名成员，直接访问即可</li>\n<li>访问父类同名成员，需要加作用域</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>继承同名静态成员处理方式.cpp</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 继承同名静态成员处理方式</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>* 问题：继承中同名的静态成员在子类对象上如何进行访问？</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 静态成员和非静态成员出现同名，处理方式一致</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *  访问子类同名成员，直接访问即可</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *  访问父类同名成员，需要加作用域</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * 总结：同名静态成员处理方式和非静态处理方式一样，只不过有两种访问的方式 (通过对象或类名进行访问)</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> m_A<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Base - static void func()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Base - static void func(int a)\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">int</span> Base<span class=\"token double-colon punctuation\">::</span>m_A <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Son</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> m_A<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Son - static void func()\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">int</span> Son<span class=\"token double-colon punctuation\">::</span>m_A <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">// 同名静态成员属性</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token comment\">// 1. 通过对象访问</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"通过对象进行访问：\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    Son s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Son  下 m_A = \"</span> <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span>m_A <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Base 下 m_A = \"</span> <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span>Base<span class=\"token double-colon punctuation\">::</span>m_A <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token comment\">// 2. 通过类名访问</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"通过类名进行访问：\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Son  下 m_A = \"</span> <span class=\"token operator\">&lt;&lt;</span> Son<span class=\"token double-colon punctuation\">::</span>m_A <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token comment\">// 第一个：：代表通过类名方式访问，第二个：：代表访问父类作用域下的成员函数</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Base 下 m_A = \"</span> <span class=\"token operator\">&lt;&lt;</span> Son<span class=\"token double-colon punctuation\">::</span>Base<span class=\"token double-colon punctuation\">::</span>m_A <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token comment\">// 同名静态成员函数</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token comment\">// 1. 通过对象访问</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"通过对象访问：\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    Son son<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    son<span class=\"token punctuation\">.</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    son<span class=\"token punctuation\">.</span><span class=\"token class-name\">Base</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token comment\">// 2. 通过类名访问</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"通过类名访问：\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token class-name\">Son</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token class-name\">Base</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token comment\">// 如果子类先访问父类再访问函数也可以</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    Son<span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">Base</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token comment\">// 子类出现和父类同名静态成员函数，也会隐藏父类中所有同名成员函数</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token comment\">// 如果想访问父类中被隐藏同名成员，需要添加父类作用域</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    Son<span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">Base</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token comment\">//    test01();</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token function\">test02</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"多继承语法\"><a class=\"anchor\" href=\"#多继承语法\">#</a> 多继承语法</h3>\n<blockquote>\n<p><code>C++</code>  允许一个类继承多个类，语法： <code>class 子类:继承方式 父类1,继承方式 父类2...</code> , 多继承可能会引发父类中有同名成员的出现，这时就需要添加作用域来进行区分，但在实际开发中不推荐使用 <code>C++</code>  的多继承方式</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>多继承语法.cpp</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 多继承语法</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>* C++ 允许一个类继承多个类</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 语法：class 子类：继承方式 父类 1, 继承方式 父类 2....</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * 多继承可能会引发父类中有同名成员的出现，这时就需要添加作用域来进行区分</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * 但在实际开发中不推荐使用 C++ 的多继承方式</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * 总结：多继承中如果父类中出现了同名的情况，子类要使用父类中的属性变量时，就需要添加父类作用域才可以正常调用</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base1</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">Base1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        m_A <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">int</span> m_A<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base2</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">Base2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        m_A <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">int</span> m_A<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Son</span><span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base1</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">public</span> <span class=\"token class-name\">Base2</span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token function\">Son</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        m_C <span class=\"token operator\">=</span> <span class=\"token number\">300</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        m_D <span class=\"token operator\">=</span> <span class=\"token number\">400</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">int</span> m_C<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">int</span> m_D<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    Son s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"sizeof Son = \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token comment\">// 当父类中出现同名成员，需要添加作用域进行区分</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Base1::m_A = \"</span> <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span>Base1<span class=\"token double-colon punctuation\">::</span>m_A <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Base2::m_A = \"</span> <span class=\"token operator\">&lt;&lt;</span> s<span class=\"token punctuation\">.</span>Base2<span class=\"token double-colon punctuation\">::</span>m_A <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre> D:\\CLionProjects\\Demo\\ 类和对象 \\ 继承 > cl /d1 reportSingleClassLayoutSon \".\\ 多继承语法.cpp\"</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>用于 x86 的 Microsoft (R) C/C++ 优化编译器 19.44.35209 版</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>版权所有 (C) Microsoft Corporation。保留所有权利。</pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>多继承语法.cpp</pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>class Son       size (16):</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        +---</pre></td></tr><tr><td data-num=\"61\"></td><td><pre> 0      | +--- (base class Base1)</pre></td></tr><tr><td data-num=\"62\"></td><td><pre> 0      | | m_A</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        | +---</pre></td></tr><tr><td data-num=\"64\"></td><td><pre> 4      | +--- (base class Base2)</pre></td></tr><tr><td data-num=\"65\"></td><td><pre> 4      | | m_B</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        | +---</pre></td></tr><tr><td data-num=\"67\"></td><td><pre> 8      | m_C</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>12      | m_D</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        +---</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>D:\\Software\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\include\\__msvc_ostream.hpp (781): warning C4530: 使用了 C++ 异常处理程序，但未启用展开语义。请指定 /EHsc</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>D:\\Software\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.44.35207\\include\\__msvc_ostream.hpp (781): note: 模板实例化上下文 (最早的实例化上下文) 为</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>.\\ 多继承语法.cpp (44): note: 查看对正在编译的函数 模板 实例化 “std::basic_ostream&lt;char,std::char_traits&lt;char>> &amp;std::operator &lt;&lt;&lt;std::char_traits&lt;char>>(std::basic_ostream&lt;char,std::char_traits&lt;char>> &amp;,const char *)” 的引用</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>Microsoft (R) Incremental Linker Version 14.44.35209.0</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>Copyright (C) Microsoft Corporation.  All rights reserved.</pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>/out: 多继承语法.exe</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>多继承语法.obj</pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>D:\\CLionProjects\\Demo\\ 类和对象 \\ 继承 ></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>*/</span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>查看Son类的底层继承属性</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[Administrator] $\"></td><td><pre>D:<span class=\"token punctuation\">\\</span>CLionProjects<span class=\"token punctuation\">\\</span>Demo<span class=\"token punctuation\">\\</span>类和对象<span class=\"token punctuation\">\\</span>继承<span class=\"token operator\">></span>cl /d1 reportSingleClassLayoutSon <span class=\"token string\">\".\\多继承语法.cpp\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[Administrator] $\"></td><td><pre>用于 x86 的 Microsoft <span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">)</span> C/C++ 优化编译器 <span class=\"token number\">19.44</span>.35209 版</pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"[Administrator] $\"></td><td><pre>版权所有<span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">)</span> Microsoft Corporation。保留所有权利。</pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td data-command=\"[Administrator] $\"></td><td><pre>多继承语法.cpp</pre></td></tr><tr><td data-num=\"6\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td data-command=\"[Administrator] $\"></td><td><pre>class Son       size<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span>:</pre></td></tr><tr><td data-num=\"8\"></td><td data-command=\"[Administrator] $\"></td><td><pre>        +---</pre></td></tr><tr><td data-num=\"9\"></td><td data-command=\"[Administrator] $\"></td><td><pre> <span class=\"token number\">0</span>      <span class=\"token operator\">|</span> +--- <span class=\"token punctuation\">(</span>base class Base1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td data-command=\"[Administrator] $\"></td><td><pre> <span class=\"token number\">0</span>      <span class=\"token operator\">|</span> <span class=\"token operator\">|</span> m_A</pre></td></tr><tr><td data-num=\"11\"></td><td data-command=\"[Administrator] $\"></td><td><pre>        <span class=\"token operator\">|</span> +---</pre></td></tr><tr><td data-num=\"12\"></td><td data-command=\"[Administrator] $\"></td><td><pre> <span class=\"token number\">4</span>      <span class=\"token operator\">|</span> +--- <span class=\"token punctuation\">(</span>base class Base2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td data-command=\"[Administrator] $\"></td><td><pre> <span class=\"token number\">4</span>      <span class=\"token operator\">|</span> <span class=\"token operator\">|</span> m_B</pre></td></tr><tr><td data-num=\"14\"></td><td data-command=\"[Administrator] $\"></td><td><pre>        <span class=\"token operator\">|</span> +---</pre></td></tr><tr><td data-num=\"15\"></td><td data-command=\"[Administrator] $\"></td><td><pre> <span class=\"token number\">8</span>      <span class=\"token operator\">|</span> m_C</pre></td></tr><tr><td data-num=\"16\"></td><td data-command=\"[Administrator] $\"></td><td><pre><span class=\"token number\">12</span>      <span class=\"token operator\">|</span> m_D</pre></td></tr><tr><td data-num=\"17\"></td><td data-command=\"[Administrator] $\"></td><td><pre>        +---</pre></td></tr><tr><td data-num=\"18\"></td><td data-command=\"[Administrator] $\"></td><td><pre>D:<span class=\"token punctuation\">\\</span>Software<span class=\"token punctuation\">\\</span>Microsoft Visual Studio<span class=\"token punctuation\">\\</span><span class=\"token number\">2022</span><span class=\"token punctuation\">\\</span>Community<span class=\"token punctuation\">\\</span>VC<span class=\"token punctuation\">\\</span>Tools<span class=\"token punctuation\">\\</span>MSVC<span class=\"token punctuation\">\\</span><span class=\"token number\">14.44</span>.35207<span class=\"token punctuation\">\\</span>include<span class=\"token punctuation\">\\</span>__msvc_ostream.hpp<span class=\"token punctuation\">(</span><span class=\"token number\">781</span><span class=\"token punctuation\">)</span>: warning C4530: 使用了 C++ 异常处理程序，但未启用展开语义。请指定 /EHsc</pre></td></tr><tr><td data-num=\"19\"></td><td data-command=\"[Administrator] $\"></td><td><pre>D:<span class=\"token punctuation\">\\</span>Software<span class=\"token punctuation\">\\</span>Microsoft Visual Studio<span class=\"token punctuation\">\\</span><span class=\"token number\">2022</span><span class=\"token punctuation\">\\</span>Community<span class=\"token punctuation\">\\</span>VC<span class=\"token punctuation\">\\</span>Tools<span class=\"token punctuation\">\\</span>MSVC<span class=\"token punctuation\">\\</span><span class=\"token number\">14.44</span>.35207<span class=\"token punctuation\">\\</span>include<span class=\"token punctuation\">\\</span>__msvc_ostream.hpp<span class=\"token punctuation\">(</span><span class=\"token number\">781</span><span class=\"token punctuation\">)</span>: note: 模板实例化上下文<span class=\"token punctuation\">(</span>最早的实例化上下文<span class=\"token punctuation\">)</span>为</pre></td></tr><tr><td data-num=\"20\"></td><td data-command=\"[Administrator] $\"></td><td><pre>.<span class=\"token punctuation\">\\</span>多继承语法.cpp<span class=\"token punctuation\">(</span><span class=\"token number\">44</span><span class=\"token punctuation\">)</span>: note: 查看对正在编译的函数 模板 实例化“std::basic_ostream<span class=\"token operator\">&lt;</span>char,std::char_traits<span class=\"token operator\">&lt;</span>char<span class=\"token operator\">>></span> <span class=\"token operator\">&amp;</span>std::operator <span class=\"token operator\">&lt;&lt;&lt;</span>std::char_traits<span class=\"token operator\">&lt;</span>char<span class=\"token operator\">>></span><span class=\"token punctuation\">(</span>std::basic_ostream<span class=\"token operator\">&lt;</span>char,std::char_traits<span class=\"token operator\">&lt;</span>char<span class=\"token operator\">>></span> <span class=\"token operator\">&amp;</span>,const char *<span class=\"token punctuation\">)</span>”的引用</pre></td></tr><tr><td data-num=\"21\"></td><td data-command=\"\"></td><td><pre>Microsoft <span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">)</span> Incremental Linker Version <span class=\"token number\">14.44</span>.35209.0</pre></td></tr><tr><td data-num=\"22\"></td><td data-command=\"[Administrator] $\"></td><td><pre>Copyright <span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">)</span> Microsoft Corporation.  All rights reserved.</pre></td></tr><tr><td data-num=\"23\"></td><td data-command=\"[Administrator] $\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td data-command=\"\"></td><td><pre>/out:多继承语法.exe</pre></td></tr><tr><td data-num=\"25\"></td><td data-command=\"[Administrator] $\"></td><td><pre>多继承语法.obj</pre></td></tr><tr><td data-num=\"26\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td data-command=\"[Administrator] $\"></td><td><pre>D:<span class=\"token punctuation\">\\</span>CLionProjects<span class=\"token punctuation\">\\</span>Demo<span class=\"token punctuation\">\\</span>类和对象<span class=\"token punctuation\">\\</span>继承<span class=\"token operator\">></span></pre></td></tr></table></figure><h3 id=\"菱形继承\"><a class=\"anchor\" href=\"#菱形继承\">#</a> 菱形继承</h3>\n<ul>\n<li>菱形继承概念：\n<ul>\n<li>两个派生类继承同一个基类</li>\n<li>又有某个类同事继承这两个的派生类</li>\n<li>这种继承就被称为菱形继承或是钻石继承</li>\n<li>典型继承案例：</li>\n<li>动物：</li>\n<li>羊  鸵</li>\n<li>羊驼</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>虚继承关键字 <code>virtual</code> , 使用 <code>virtual</code>  即可解决菱形继承的多份数据问题。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>菱形继承.cpp</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* 菱形继承</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 菱形继承概念：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *  两个派生类继承同一个基类</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *  有某个类同事继承这两个的派生类</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *  这种继承就被称为菱形继承或是钻石继承</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *  典型继承案例：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *     动物：</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> *    羊  鸵</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> *     羊驼</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * 总结：</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> *      1. 菱形继承带来的主要问题是子类继承两份相同的数据，导致资源浪费以及毫无意义</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> *      2. 利用虚继承可以解决菱形继承问题</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// 动物类</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">int</span> m_Age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// 利用虚继承，来解决菱形继承的问题</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">// 在继承之前，加上关键字 virtual 就会变为虚继承</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">// Animal 类也就被称为虚基类</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">// 羊类继承动物</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Sheep</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">virtual</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Animal</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">// 鸵鸟继承动物</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Tuo</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">virtual</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Animal</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">// 羊驼继承羊类和鸵鸟类</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">SheepTuo</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Sheep</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Tuo</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    SheepTuo st<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    st<span class=\"token punctuation\">.</span>Sheep<span class=\"token double-colon punctuation\">::</span>m_Age <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    st<span class=\"token punctuation\">.</span>Tuo<span class=\"token double-colon punctuation\">::</span>m_Age <span class=\"token operator\">=</span> <span class=\"token number\">28</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token comment\">// 当菱形继承，两个父类拥有相同数据时，就需要添加父类作用域才可以进行区分</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"st.Sheep::m_Age = \"</span> <span class=\"token operator\">&lt;&lt;</span> st<span class=\"token punctuation\">.</span>Sheep<span class=\"token double-colon punctuation\">::</span>m_Age <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"st.Tuo::m_Age = \"</span> <span class=\"token operator\">&lt;&lt;</span> st<span class=\"token punctuation\">.</span>Tuo<span class=\"token double-colon punctuation\">::</span>m_Age <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token comment\">// 这份数据我们知道，只有一份就可以，菱形继承导致数据会有两份，会导致资源的浪费</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token comment\">// 菱形继承的解决办法是给羊类和鸵鸟类在继承动物类时添加虚继承</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"st.m_Age = \"</span> <span class=\"token operator\">&lt;&lt;</span> st<span class=\"token punctuation\">.</span>m_Age <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token function\">test01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>未使用虚继承后的底层实现</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>未使用虚继承的底层实现</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[Administrator] $\"></td><td><pre>D:<span class=\"token punctuation\">\\</span>CLionProjects<span class=\"token punctuation\">\\</span>Demo<span class=\"token punctuation\">\\</span>类和对象<span class=\"token punctuation\">\\</span>继承<span class=\"token operator\">></span>cl /d1 reportSingleClassLayoutSheepTuo 菱形继承.cpp</pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[Administrator] $\"></td><td><pre>用于 x86 的 Microsoft <span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">)</span> C/C++ 优化编译器 <span class=\"token number\">19.44</span>.35209 版</pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"[Administrator] $\"></td><td><pre>版权所有<span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">)</span> Microsoft Corporation。保留所有权利。</pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td data-command=\"[Administrator] $\"></td><td><pre>菱形继承.cpp</pre></td></tr><tr><td data-num=\"6\"></td><td data-command=\"[Administrator] $\"></td><td><pre>菱形继承.cpp<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>: warning C4819: 该文件包含不能在当前代码页<span class=\"token punctuation\">(</span><span class=\"token number\">936</span><span class=\"token punctuation\">)</span>中表示的字符。请将该文件保存为 Unicode 格式以防止数据丢失</pre></td></tr><tr><td data-num=\"7\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td data-command=\"[Administrator] $\"></td><td><pre>class SheepTuo  size<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span>:</pre></td></tr><tr><td data-num=\"9\"></td><td data-command=\"[Administrator] $\"></td><td><pre>        +---</pre></td></tr><tr><td data-num=\"10\"></td><td data-command=\"[Administrator] $\"></td><td><pre> <span class=\"token number\">0</span>      <span class=\"token operator\">|</span> +--- <span class=\"token punctuation\">(</span>base class Sheep<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td data-command=\"[Administrator] $\"></td><td><pre> <span class=\"token number\">0</span>      <span class=\"token operator\">|</span> <span class=\"token operator\">|</span> +--- <span class=\"token punctuation\">(</span>base class Animal<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td data-command=\"[Administrator] $\"></td><td><pre> <span class=\"token number\">0</span>      <span class=\"token operator\">|</span> <span class=\"token operator\">|</span> <span class=\"token operator\">|</span> m_Age</pre></td></tr><tr><td data-num=\"13\"></td><td data-command=\"[Administrator] $\"></td><td><pre>        <span class=\"token operator\">|</span> <span class=\"token operator\">|</span> +---</pre></td></tr><tr><td data-num=\"14\"></td><td data-command=\"[Administrator] $\"></td><td><pre>        <span class=\"token operator\">|</span> +---</pre></td></tr><tr><td data-num=\"15\"></td><td data-command=\"[Administrator] $\"></td><td><pre> <span class=\"token number\">4</span>      <span class=\"token operator\">|</span> +--- <span class=\"token punctuation\">(</span>base class Tuo<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td data-command=\"[Administrator] $\"></td><td><pre> <span class=\"token number\">4</span>      <span class=\"token operator\">|</span> <span class=\"token operator\">|</span> +--- <span class=\"token punctuation\">(</span>base class Animal<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td data-command=\"[Administrator] $\"></td><td><pre> <span class=\"token number\">4</span>      <span class=\"token operator\">|</span> <span class=\"token operator\">|</span> <span class=\"token operator\">|</span> m_Age</pre></td></tr><tr><td data-num=\"18\"></td><td data-command=\"[Administrator] $\"></td><td><pre>        <span class=\"token operator\">|</span> <span class=\"token operator\">|</span> +---</pre></td></tr><tr><td data-num=\"19\"></td><td data-command=\"[Administrator] $\"></td><td><pre>        <span class=\"token operator\">|</span> +---</pre></td></tr><tr><td data-num=\"20\"></td><td data-command=\"[Administrator] $\"></td><td><pre>        +---</pre></td></tr><tr><td data-num=\"21\"></td><td data-command=\"[Administrator] $\"></td><td><pre>菱形继承.cpp<span class=\"token punctuation\">(</span><span class=\"token number\">56</span><span class=\"token punctuation\">)</span>: error C2385: 对“m_Age”的访问不明确</pre></td></tr><tr><td data-num=\"22\"></td><td data-command=\"[Administrator] $\"></td><td><pre>菱形继承.cpp<span class=\"token punctuation\">(</span><span class=\"token number\">56</span><span class=\"token punctuation\">)</span>: note: 可以是基 <span class=\"token string\">\"Animal\"</span> 中的 <span class=\"token string\">\"m_Age\"</span></pre></td></tr><tr><td data-num=\"23\"></td><td data-command=\"[Administrator] $\"></td><td><pre>菱形继承.cpp<span class=\"token punctuation\">(</span><span class=\"token number\">56</span><span class=\"token punctuation\">)</span>: note: 也可以是基 <span class=\"token string\">\"Animal\"</span> 中的 <span class=\"token string\">\"m_Age\"</span></pre></td></tr><tr><td data-num=\"24\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td data-command=\"[Administrator] $\"></td><td><pre>D:<span class=\"token punctuation\">\\</span>CLionProjects<span class=\"token punctuation\">\\</span>Demo<span class=\"token punctuation\">\\</span>类和对象<span class=\"token punctuation\">\\</span>继承<span class=\"token operator\">></span></pre></td></tr></table></figure><blockquote>\n<p>使用虚继承后的底层实现，虚继承关键字 <code>virtual</code></p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>使用虚继承后的底层实现</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[Administrator] $\"></td><td><pre>D:<span class=\"token punctuation\">\\</span>CLionProjects<span class=\"token punctuation\">\\</span>Demo<span class=\"token punctuation\">\\</span>类和对象<span class=\"token punctuation\">\\</span>继承<span class=\"token operator\">></span>cl /d1 reportSingleClassLayoutSheepTuo 菱形继承.cpp</pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[Administrator] $\"></td><td><pre>用于 x86 的 Microsoft <span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">)</span> C/C++ 优化编译器 <span class=\"token number\">19.44</span>.35209 版</pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"[Administrator] $\"></td><td><pre>版权所有<span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">)</span> Microsoft Corporation。保留所有权利。</pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td data-command=\"[Administrator] $\"></td><td><pre>菱形继承.cpp</pre></td></tr><tr><td data-num=\"6\"></td><td data-command=\"[Administrator] $\"></td><td><pre>菱形继承.cpp<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>: warning C4819: 该文件包含不能在当前代码页<span class=\"token punctuation\">(</span><span class=\"token number\">936</span><span class=\"token punctuation\">)</span>中表示的字符。请将该文件保存为 Unicode 格式以防止数据丢失</pre></td></tr><tr><td data-num=\"7\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td data-command=\"[Administrator] $\"></td><td><pre>class SheepTuo  size<span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span>:</pre></td></tr><tr><td data-num=\"9\"></td><td data-command=\"[Administrator] $\"></td><td><pre>        +---</pre></td></tr><tr><td data-num=\"10\"></td><td data-command=\"[Administrator] $\"></td><td><pre> <span class=\"token number\">0</span>      <span class=\"token operator\">|</span> +--- <span class=\"token punctuation\">(</span>base class Sheep<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td data-command=\"[Administrator] $\"></td><td><pre> <span class=\"token number\">0</span>      <span class=\"token operator\">|</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">&#123;</span>vbptr<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td data-command=\"[Administrator] $\"></td><td><pre>        <span class=\"token operator\">|</span> +---</pre></td></tr><tr><td data-num=\"13\"></td><td data-command=\"[Administrator] $\"></td><td><pre> <span class=\"token number\">4</span>      <span class=\"token operator\">|</span> +--- <span class=\"token punctuation\">(</span>base class Tuo<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td data-command=\"[Administrator] $\"></td><td><pre> <span class=\"token number\">4</span>      <span class=\"token operator\">|</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">&#123;</span>vbptr<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td data-command=\"[Administrator] $\"></td><td><pre>        <span class=\"token operator\">|</span> +---</pre></td></tr><tr><td data-num=\"16\"></td><td data-command=\"[Administrator] $\"></td><td><pre>        +---</pre></td></tr><tr><td data-num=\"17\"></td><td data-command=\"[Administrator] $\"></td><td><pre>        +--- <span class=\"token punctuation\">(</span>virtual base Animal<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td data-command=\"[Administrator] $\"></td><td><pre> <span class=\"token number\">8</span>      <span class=\"token operator\">|</span> m_Age</pre></td></tr><tr><td data-num=\"19\"></td><td data-command=\"[Administrator] $\"></td><td><pre>        +---</pre></td></tr><tr><td data-num=\"20\"></td><td data-command=\"[Administrator] $\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td data-command=\"[Administrator] $\"></td><td><pre>SheepTuo::<span class=\"token variable\">$vbtable</span>@Sheep@:</pre></td></tr><tr><td data-num=\"22\"></td><td data-command=\"[Administrator] $\"></td><td><pre> <span class=\"token number\">0</span>      <span class=\"token operator\">|</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"23\"></td><td data-command=\"[Administrator] $\"></td><td><pre> <span class=\"token number\">1</span>      <span class=\"token operator\">|</span> <span class=\"token number\">8</span> <span class=\"token punctuation\">(</span>SheepTuod<span class=\"token punctuation\">(</span>Sheep+0<span class=\"token punctuation\">)</span>Animal<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td data-command=\"[Administrator] $\"></td><td><pre>SheepTuo::<span class=\"token variable\">$vbtable</span>@Tuo@:</pre></td></tr><tr><td data-num=\"26\"></td><td data-command=\"[Administrator] $\"></td><td><pre> <span class=\"token number\">0</span>      <span class=\"token operator\">|</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"27\"></td><td data-command=\"[Administrator] $\"></td><td><pre> <span class=\"token number\">1</span>      <span class=\"token operator\">|</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">(</span>SheepTuod<span class=\"token punctuation\">(</span>Tuo+0<span class=\"token punctuation\">)</span>Animal<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td data-command=\"[Administrator] $\"></td><td><pre>vbi:       class  offset o.vbptr  o.vbte fVtorDisp</pre></td></tr><tr><td data-num=\"29\"></td><td data-command=\"[Administrator] $\"></td><td><pre>          Animal       <span class=\"token number\">8</span>       <span class=\"token number\">0</span>       <span class=\"token number\">4</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"30\"></td><td data-command=\"[Administrator] $\"></td><td><pre>D:<span class=\"token punctuation\">\\</span>Software<span class=\"token punctuation\">\\</span>Microsoft Visual Studio<span class=\"token punctuation\">\\</span><span class=\"token number\">2022</span><span class=\"token punctuation\">\\</span>Community<span class=\"token punctuation\">\\</span>VC<span class=\"token punctuation\">\\</span>Tools<span class=\"token punctuation\">\\</span>MSVC<span class=\"token punctuation\">\\</span><span class=\"token number\">14.44</span>.35207<span class=\"token punctuation\">\\</span>include<span class=\"token punctuation\">\\</span>__msvc_ostream.hpp<span class=\"token punctuation\">(</span><span class=\"token number\">781</span><span class=\"token punctuation\">)</span>: warning C4530: 使用了 C++ 异常处理程序，但未启用展开语义。请指定 /EHsc</pre></td></tr><tr><td data-num=\"31\"></td><td data-command=\"[Administrator] $\"></td><td><pre>D:<span class=\"token punctuation\">\\</span>Software<span class=\"token punctuation\">\\</span>Microsoft Visual Studio<span class=\"token punctuation\">\\</span><span class=\"token number\">2022</span><span class=\"token punctuation\">\\</span>Community<span class=\"token punctuation\">\\</span>VC<span class=\"token punctuation\">\\</span>Tools<span class=\"token punctuation\">\\</span>MSVC<span class=\"token punctuation\">\\</span><span class=\"token number\">14.44</span>.35207<span class=\"token punctuation\">\\</span>include<span class=\"token punctuation\">\\</span>__msvc_ostream.hpp<span class=\"token punctuation\">(</span><span class=\"token number\">781</span><span class=\"token punctuation\">)</span>: note: 模板实例化上下文<span class=\"token punctuation\">(</span>最早的实例化上下文<span class=\"token punctuation\">)</span>为</pre></td></tr><tr><td data-num=\"32\"></td><td data-command=\"[Administrator] $\"></td><td><pre>菱形继承.cpp<span class=\"token punctuation\">(</span><span class=\"token number\">52</span><span class=\"token punctuation\">)</span>: note: 查看对正在编译的函数 模板 实例化“std::basic_ostream<span class=\"token operator\">&lt;</span>char,std::char_traits<span class=\"token operator\">&lt;</span>char<span class=\"token operator\">>></span> <span class=\"token operator\">&amp;</span>std::operator <span class=\"token operator\">&lt;&lt;&lt;</span>std::char_traits<span class=\"token operator\">&lt;</span>char<span class=\"token operator\">>></span><span class=\"token punctuation\">(</span>std::basic_ostream<span class=\"token operator\">&lt;</span>char,std::char_traits<span class=\"token operator\">&lt;</span>char<span class=\"token operator\">>></span> <span class=\"token operator\">&amp;</span>,const char *<span class=\"token punctuation\">)</span>”的引用</pre></td></tr><tr><td data-num=\"33\"></td><td data-command=\"[Administrator] $\"></td><td><pre>Microsoft <span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">)</span> Incremental Linker Version <span class=\"token number\">14.44</span>.35209.0</pre></td></tr><tr><td data-num=\"34\"></td><td data-command=\"[Administrator] $\"></td><td><pre>Copyright <span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">)</span> Microsoft Corporation.  All rights reserved.</pre></td></tr><tr><td data-num=\"35\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td data-command=\"[Administrator] $\"></td><td><pre>/out:菱形继承.exe</pre></td></tr><tr><td data-num=\"37\"></td><td data-command=\"[Administrator] $\"></td><td><pre>菱形继承.obj</pre></td></tr><tr><td data-num=\"38\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td data-command=\"[Administrator] $\"></td><td><pre>D:<span class=\"token punctuation\">\\</span>CLionProjects<span class=\"token punctuation\">\\</span>Demo<span class=\"token punctuation\">\\</span>类和对象<span class=\"token punctuation\">\\</span>继承<span class=\"token operator\">></span></pre></td></tr></table></figure><blockquote>\n<p>总结：1. 菱形继承带来的主要问题是子类继承两份相同的数据，导致资源浪费以及毫无意义。 2. 利用虚继承可以解决菱形继承问题</p>\n</blockquote>\n<h2 id=\"多态\"><a class=\"anchor\" href=\"#多态\">#</a> 多态</h2>\n",
            "tags": [
                "计算机科学",
                "C++",
                "C++核心编程",
                "计算机科学",
                "C++",
                "C++核心编程"
            ]
        },
        {
            "id": "https://rainrem.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/aigc/flux/Flux%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/",
            "url": "https://rainrem.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/aigc/flux/Flux%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/",
            "title": "Flux搭建流程",
            "date_published": "2024-10-14T06:20:35.000Z",
            "content_html": "<h1 id=\"fluxai介绍\"><a class=\"anchor\" href=\"#fluxai介绍\">#</a> FluxAI 介绍</h1>\n",
            "tags": [
                "计算机科学",
                "Aigc",
                "Flux",
                "计算机科学",
                "Aigc",
                "Flux"
            ]
        },
        {
            "id": "https://rainrem.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/aigc/stable%20diffusion/StableDiffusionWebUI%E7%90%86%E8%AE%BA%E4%B8%8E%E5%AE%9E%E8%B7%B5%E7%94%A8%E6%B3%95/",
            "url": "https://rainrem.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/aigc/stable%20diffusion/StableDiffusionWebUI%E7%90%86%E8%AE%BA%E4%B8%8E%E5%AE%9E%E8%B7%B5%E7%94%A8%E6%B3%95/",
            "title": "Stable Diffusion Web UI-理论与实践",
            "date_published": "2024-10-04T16:43:44.000Z",
            "content_html": "",
            "tags": [
                "计算机科学",
                "Aigc",
                "StableDiffusion",
                "计算机科学",
                "Aigc",
                "StableDiffusion"
            ]
        },
        {
            "id": "https://rainrem.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/c++/c++%E5%9F%BA%E7%A1%80/",
            "url": "https://rainrem.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/c++/c++%E5%9F%BA%E7%A1%80/",
            "title": "C++基础篇",
            "date_published": "2024-10-01T05:33:32.000Z",
            "content_html": "<h1 id=\"c基础篇\"><a class=\"anchor\" href=\"#c基础篇\">#</a> C++ 基础篇</h1>\n<h2 id=\"变量\"><a class=\"anchor\" href=\"#变量\">#</a> 变量</h2>\n<blockquote>\n<p>变量是程序中用于存储数据的地方。变量的类型决定了变量可以存储的数据类型，以及变量的操作可以进行的操作。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>c++变量声明</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// declaring namespace std</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// using namespace std, we can access cout and endl directly</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 打印变量 a 的值</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"A = \"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"常量\"><a class=\"anchor\" href=\"#常量\">#</a> 常量</h2>\n<blockquote>\n<p>常量是固定值，不能被修改的变量，常量通常用大写字母表示。</p>\n</blockquote>\n<ul>\n<li>常量声明有两种方式：\n<ul>\n<li>\n<ol>\n<li><code>宏常量</code> ：使用 <code>#define</code>  关键字定义，通常定义在文件头部。</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li><code>常量声明</code> ：使用 <code>const</code>  关键字定义。</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>c++常量声明一</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// declaring namespace std</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//defining macro day, 定义宏常量使用 #define 关键字，通常定义在文件头部</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">Day</span> <span class=\"token expression\"><span class=\"token number\">1</span></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// using namespace std, we can access cout and endl directly</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 打印 Day 宏常量的值</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Day = \"</span> <span class=\"token operator\">&lt;&lt;</span> Day <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>c++常量声明二</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// declaring namespace std</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//const 修饰的变量</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> month <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">//a = 20; // 编译错误，常量不能被修改</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"一年有多少个月份 \"</span><span class=\"token operator\">&lt;&lt;</span> month <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 10</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><a href=\"https://imgse.com/i/pVA50uq\"><img data-src=\"https://s21.ax1x.com/2025/06/15/pVA50uq.jpg\" alt=\"pVA50uq.jpg\" /></a></p>\n<h2 id=\"关键字\"><a class=\"anchor\" href=\"#关键字\">#</a> 关键字</h2>\n<ul>\n<li>关键字： <code>C++</code>  语言中具有特殊含义的单词，不能用作 <code>变量名</code> 、 <code>常量名</code> 、 <code>函数名</code> 等。</li>\n<li>关键字列表：\n<ul>\n<li><code>auto</code> ：声明变量类型，只能用于局部变量。</li>\n<li><code>break</code> ：跳出循环。</li>\n<li><code>case</code> ：选择语句中的一个分支。</li>\n<li><code>char</code> ：字符类型。</li>\n<li><code>const</code> ：常量。</li>\n<li><code>continue</code> ：继续下一轮循环。</li>\n<li><code>default</code> ：选择语句中的默认分支。</li>\n<li><code>do-while</code> ：循环语句。</li>\n<li><code>double</code> ：双精度浮点数类型。</li>\n<li><code>else</code> ：条件语句中的否定分支。</li>\n<li><code>enum</code> ：枚举类型。</li>\n<li><code>extern</code> ：声明变量在其他文件中。</li>\n<li><code>float</code> ：单精度浮点数类型。</li>\n<li><code>for</code> ：循环语句。</li>\n<li><code>goto</code> ：无条件跳转语句。</li>\n<li><code>if-else</code> ：条件语句。</li>\n<li><code>int</code> ：整数类型。</li>\n<li><code>long</code> ：长整数类型。</li>\n<li><code>register</code> ：声明变量在寄存器中。</li>\n<li><code>return</code> ：函数返回语句。</li>\n<li><code>short</code> ：短整数类型。</li>\n<li><code>signed</code> ：有符号整数类型。</li>\n<li><code>sizeof</code> ：获取变量或类型大小。</li>\n<li><code>static</code> ：声明静态变量。</li>\n<li><code>struct</code> ：结构类型。</li>\n<li><code>switch</code> ：选择语句。</li>\n<li><code>typedef</code> ：给类型定义一个新的名称。</li>\n<li><code>union</code> ：联合类型。</li>\n<li><code>unsigned</code> ：无符号整数类型。</li>\n<li><code>void</code> ：空类型。</li>\n<li><code>volatile</code> ：声明变量易变。</li>\n<li><code>while</code> ：循环语句。</li>\n</ul>\n</li>\n</ul>\n<table>\n<tbody>\n<tr>\n<td><code>asm</code></td>\n<td><code>do</code></td>\n<td><code>if</code></td>\n<td><code>return</code></td>\n<td><code>typedef</code></td>\n</tr>\n<tr>\n<td><code>auto</code></td>\n<td><code>double</code></td>\n<td><code>inline</code></td>\n<td><code>short</code></td>\n<td><code>typeid</code></td>\n</tr>\n<tr>\n<td><code>bool</code></td>\n<td><code>dynamic_cast</code></td>\n<td><code>int</code></td>\n<td><code>signed</code></td>\n<td><code>typename</code></td>\n</tr>\n<tr>\n<td><code>break</code></td>\n<td><code>else</code></td>\n<td><code>long</code></td>\n<td><code>sizeof</code></td>\n<td><code>union</code></td>\n</tr>\n<tr>\n<td><code>case</code></td>\n<td><code>enum</code></td>\n<td><code>mutable</code></td>\n<td><code>static</code></td>\n<td><code>unsigned</code></td>\n</tr>\n<tr>\n<td><code>catch</code></td>\n<td><code>explicit</code></td>\n<td><code>namespace</code></td>\n<td><code>static_cast</code></td>\n<td><code>using</code></td>\n</tr>\n<tr>\n<td><code>char</code></td>\n<td><code>export</code></td>\n<td><code>new</code></td>\n<td><code>struct</code></td>\n<td><code>virtual</code></td>\n</tr>\n<tr>\n<td><code>class</code></td>\n<td><code>extern</code></td>\n<td><code>operator</code></td>\n<td><code>switch</code></td>\n<td><code>void</code></td>\n</tr>\n<tr>\n<td><code>const</code></td>\n<td><code>false</code></td>\n<td><code>private</code></td>\n<td><code>template</code></td>\n<td><code>volatile</code></td>\n</tr>\n<tr>\n<td><code>const_cast</code></td>\n<td><code>float</code></td>\n<td><code>protected</code></td>\n<td><code>this</code></td>\n<td><code>wchar_t</code></td>\n</tr>\n<tr>\n<td><code>continue</code></td>\n<td><code>for</code></td>\n<td><code>public</code></td>\n<td><code>throw</code></td>\n<td><code>while</code></td>\n</tr>\n<tr>\n<td><code>default</code></td>\n<td><code>friend</code></td>\n<td><code>register</code></td>\n<td><code>true</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>delete</code></td>\n<td><code>goto</code></td>\n<td><code>reinterpret</code></td>\n<td><code>try</code></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"标识符命名规则\"><a class=\"anchor\" href=\"#标识符命名规则\">#</a> 标识符命名规则</h2>\n<ul>\n<li>标识符：程序中用于表示 <code>变量</code> 、 <code>常量</code> 、 <code>函数</code> 、 <code>类</code> 、 <code>命名空间</code> 等名称的符号。</li>\n<li>命名规则：\n<ol>\n<li>标识符只能由字母、数字和下划线组成，且不能以数字开头。</li>\n<li>标识符不能是 <code>C++</code>  关键字。</li>\n<li>标识符的长度不超过 31 个字符。</li>\n<li>标识符的命名应易于理解，不要使用拼音、缩写、数字代替英文单词。</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"数据类型\"><a class=\"anchor\" href=\"#数据类型\">#</a> 数据类型</h2>\n<blockquote>\n<p>数据类型是程序中用于存储数据的形式，决定了变量可以存储的数据类型，以及变量的操作可以进行的操作。</p>\n</blockquote>\n<ul>\n<li>数据类型分类：\n<ol>\n<li>整型：整数类型，包括 <code>char</code> 、 <code>short</code> 、 <code>int</code> 、 <code>long</code> 、 <code>long long</code> 。</li>\n<li>浮点型：小数类型，包括 <code>float</code> 、 <code>double</code> 。</li>\n<li>字符型： <code>char</code>  类型，包括 <code>char</code> 、 <code>wchar_t</code> 。</li>\n<li>布尔型： <code>bool</code>  类型。</li>\n<li>指针型：指针类型。</li>\n<li>数组型：数组类型。</li>\n<li>枚举型：枚举类型。</li>\n<li>结构型：结构类型。</li>\n<li>共用体型：共用体类型。</li>\n<li>联合型：联合类型。</li>\n<li>虚基类型：虚基类类型。</li>\n<li>其他类型： <code>void</code>  类型。</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"声明\"><a class=\"anchor\" href=\"#声明\">#</a> 声明</h3>\n<ul>\n<li>声明：在程序中声明变量或函数，说明变量或函数的类型、名称、作用域、属性等。</li>\n<li>语法： <code>类型 变量名 = 值;</code>\n<ul>\n<li>注意：声明时，类型必须与变量实际存储的数据类型一致。</li>\n</ul>\n</li>\n<li>作用域：声明的变量或函数的作用域决定了变量或函数的可见性和生命周期。</li>\n<li>属性：\n<ol>\n<li><code>全局变量</code> ：全局变量在整个程序中都可以访问，生命周期从程序开始到程序结束。</li>\n<li><code>局部变量</code> ：局部变量在函数或块作用域中可以访问，生命周期从声明到函数或块结束。</li>\n<li><code>静态变量</code> ：静态变量在整个程序中只初始化一次，生命周期从程序开始到程序结束。</li>\n<li><code>常量</code> ：常量的值不能被修改。</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>c++数据类型声明</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// declaring namespace std</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 全局变量</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 局部变量</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 静态变量</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 常量</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> d <span class=\"token operator\">=</span> <span class=\"token number\">40</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 打印变量的值</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a = \"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"b = \"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"c = \"</span> <span class=\"token operator\">&lt;&lt;</span> c <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"d = \"</span> <span class=\"token operator\">&lt;&lt;</span> d <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"整型\"><a class=\"anchor\" href=\"#整型\">#</a> 整型</h3>\n<ul>\n<li><code>整型</code> ：整数类型，包括 <code>char</code> 、 <code>short</code> 、 <code>int</code> 、 <code>long</code> 、 <code>long long</code> 。</li>\n<li>整型范围：\n<ul>\n<li><code>char</code> ： <code>-128~127</code> 。</li>\n<li><code>short</code> ： <code>-32768~32767</code> 。</li>\n<li><code>int</code> ： <code>-2147483648~2147483647</code> 。</li>\n<li><code>long</code> ： <code>-9223372036854775808~9223372036854775807</code> 。</li>\n<li><code>long long</code> ： <code>-18446744073709551616~18446744073709551615</code> 。</li>\n</ul>\n</li>\n<li>整型默认值：\n<ul>\n<li><code>char</code> ： <code>0</code> 。</li>\n<li><code>short</code> ： <code>0</code> 。</li>\n<li><code>int</code> ： <code>0</code> 。</li>\n<li><code>long</code> ： <code>0</code> 。</li>\n<li><code>long long</code> ： <code>0</code> 。</li>\n</ul>\n</li>\n<li>整型大小：\n<ul>\n<li><code>char</code> ： <code>1字节</code> 。</li>\n<li><code>short</code> ： <code>2字节</code> 。</li>\n<li><code>int</code> ： <code>4字节</code> 。</li>\n<li><code>long</code> ： <code>4字节</code> 。</li>\n<li><code>long long</code> ： <code>8字节</code> 。</li>\n</ul>\n</li>\n<li>整型声明：\n<ul>\n<li>\n<ol>\n<li>声明变量： <code>类型 变量名 = 值;</code></li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>声明多个变量： <code>类型 变量名1 = 值1, 变量名2 = 值2;</code></li>\n</ol>\n</li>\n<li>\n<ol start=\"3\">\n<li>声明指针变量： <code>类型 *变量名 = &amp;变量名;</code></li>\n</ol>\n</li>\n<li>\n<ol start=\"4\">\n<li>声明常量： <code>const 类型 变量名 = 值;</code></li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>c++整型声明</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// declaring namespace std</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 声明变量</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 声明多个变量</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 声明指针变量</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>d <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 声明常量</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> e <span class=\"token operator\">=</span> <span class=\"token number\">40</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 打印变量的值</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a = \"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"b = \"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"c = \"</span> <span class=\"token operator\">&lt;&lt;</span> c <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"d = \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>d <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"e = \"</span> <span class=\"token operator\">&lt;&lt;</span> e <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"sizeof关键字\"><a class=\"anchor\" href=\"#sizeof关键字\">#</a> sizeof 关键字</h3>\n<ul>\n<li><code>sizeof</code>  关键字：获取变量或类型大小。</li>\n<li>语法： <code>sizeof(类型或变量名)</code></li>\n<li>注意： <code>sizeof</code>  关键字返回的是字节数，而不是单位。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>c++_sizeof关键字</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// declaring namespace std  </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">double</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20.5</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 打印变量 a 的大小  </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a的大小为：\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"字节\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 打印变量 b 的大小  </span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"b的大小为：\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"字节\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"浮点型\"><a class=\"anchor\" href=\"#浮点型\">#</a> 浮点型</h3>\n<ul>\n<li><code>浮点型</code> ：小数类型，包括 <code>float</code> 、 <code>double</code> 。</li>\n<li>浮点型范围：</li>\n<li><code>float</code> ： <code>-3.40282347e+38~3.40282347e+38</code> 。</li>\n<li><code>double</code> ： <code>-1.7976931348623157e+308~1.7976931348623157e+308</code> 。</li>\n<li>浮点型默认值：\n<ul>\n<li><code>float</code> ： <code>0.0</code> 。</li>\n<li><code>double</code> ： <code>0.0</code> 。</li>\n</ul>\n</li>\n<li>浮点型大小：\n<ul>\n<li><code>float</code> ： <code>4字节</code> 。</li>\n<li><code>double</code> ： <code>8字节</code> 。</li>\n</ul>\n</li>\n<li>浮点型声明：\n<ol>\n<li><code>声明变量</code> ： <code>类型 变量名 = 值;</code></li>\n<li><code>声明多个变量</code> ： <code>类型 变量名1 = 值1, 变量名2 = 值2;</code></li>\n<li><code>声明指针变量</code> ： <code>类型 *变量名 = &amp;变量名;</code></li>\n<li><code>声明常量</code> ： <code>const 类型 变量名 = 值;</code></li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>c++浮点型声明</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// declaring namespace std</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 声明变量</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">float</span> a <span class=\"token operator\">=</span> <span class=\"token number\">3.14f</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 声明多个变量</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">double</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20.5</span><span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> <span class=\"token number\">30.5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 声明指针变量</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">double</span> <span class=\"token operator\">*</span>d <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 声明常量</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">double</span> e <span class=\"token operator\">=</span> <span class=\"token number\">40.5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 打印变量的值</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a = \"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"b = \"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"c = \"</span> <span class=\"token operator\">&lt;&lt;</span> c <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"d = \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>d <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"e = \"</span> <span class=\"token operator\">&lt;&lt;</span> e <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     <span class=\"token comment\">// 科学计数法输出</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">float</span> f2 <span class=\"token operator\">=</span> <span class=\"token number\">3e2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3 * 10^2</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"f2 = \"</span> <span class=\"token operator\">&lt;&lt;</span> f2 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">double</span> d2 <span class=\"token operator\">=</span> <span class=\"token number\">3e-2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3 * 10^-2</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"d2 = \"</span> <span class=\"token operator\">&lt;&lt;</span> d2 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"字符型\"><a class=\"anchor\" href=\"#字符型\">#</a> 字符型</h3>\n<ul>\n<li><code>字符型</code> ： <code>char</code>  类型，包括 <code>char</code> 、 <code>wchar_t</code> 。</li>\n<li>字符型范围：\n<ul>\n<li><code>char</code> ： <code>-128~127</code> 。</li>\n<li><code>wchar_t</code> ： <code>-32768~32767</code> 。</li>\n</ul>\n</li>\n<li>字符型默认值：\n<ul>\n<li><code>char</code> ： <code>'\\0'</code> 。</li>\n<li><code>wchar_t</code> ： <code>'\\0'</code> 。</li>\n</ul>\n</li>\n<li>字符型大小：\n<ul>\n<li><code>char</code> ： <code>1字节</code> 。</li>\n<li><code>wchar_t</code> ： <code>2字节</code> 。</li>\n</ul>\n</li>\n<li>字符型声明：\n<ol>\n<li><code>声明变量</code> ： <code>类型 变量名 = 值;</code></li>\n<li><code>声明多个变量</code> ： <code>类型 变量名1 = 值1, 变量名2 = 值2;</code></li>\n<li><code>声明指针变量</code> ： <code>类型 *变量名 = &amp;变量名;</code></li>\n<li><code>声明常量</code> ： <code>const 类型 变量名 = 值;</code></li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>c++字符型声明</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// declaring namespace std</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 声明变量</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">char</span> a <span class=\"token operator\">=</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 声明多个变量</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">char</span> b <span class=\"token operator\">=</span> <span class=\"token char\">'b'</span><span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> <span class=\"token char\">'c'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 声明指针变量</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>d <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 声明常量</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> e <span class=\"token operator\">=</span> <span class=\"token char\">'e'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 打印变量的值</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a = \"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"b = \"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"c = \"</span> <span class=\"token operator\">&lt;&lt;</span> c <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"d = \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>d <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"e = \"</span> <span class=\"token operator\">&lt;&lt;</span> e <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"转义字符\"><a class=\"anchor\" href=\"#转义字符\">#</a> 转义字符</h3>\n<ul>\n<li>转义字符：在 <code>C++</code>  中，有一些字符需要用反斜杠进行转义，以表示其特殊含义。</li>\n<li>转义字符列表：\n<ul>\n<li><code>\\n</code> ： <code>换行符</code> 。</li>\n<li><code>\\t</code> ： <code>制表符</code> 。</li>\n<li><code>\\\\</code> ： <code>反斜杠</code> 。</li>\n<li><code>\\'</code> ： <code>单引号</code> 。</li>\n<li><code>\\&quot;</code> ： <code>双引号</code> 。</li>\n<li><code>\\?</code> ： <code>问号</code> 。</li>\n<li><code>\\a</code> ： <code>响铃</code> 。</li>\n<li><code>\\b</code> ： <code>退格</code> 。</li>\n<li><code>\\f</code> ： <code>换页</code> 。</li>\n<li><code>\\r</code> ： <code>回车</code> 。</li>\n<li><code>\\v</code> ： <code>垂直制表符</code> 。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>c++转义字符</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// declaring namespace std</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 输出换行符</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Hello\\nWorld\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 输出制表符</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Hello\\tWorld\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 输出反斜杠</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Hello\\\\World\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 输出单引号</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Hello'World\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 输出双引号</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Hello\\\"World\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 输出问号</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Hello?World\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 输出响铃</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Hello\\aWorld\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 输出退格</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Hello\\bWorld\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 输出换页</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Hello\\fWorld\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// 输出回车</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Hello\\rWorld\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// 输出垂直制表符</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Hello\\vWorld\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"字符串类型\"><a class=\"anchor\" href=\"#字符串类型\">#</a> 字符串类型</h3>\n<ul>\n<li><code>字符串类型</code> ： <code>char</code>  类型数组，以 <code>'\\0'</code>  结尾。</li>\n<li>字符串类型声明：\n<ul>\n<li>\n<ol>\n<li><code>声明变量</code> ： <code>char 变量名[] = &quot;值&quot;;</code></li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li><code>声明指针变量</code> ： <code>char *变量名 = &quot;值&quot;;</code></li>\n</ol>\n</li>\n<li>\n<ol start=\"3\">\n<li><code>声明常量</code> ： <code>const char 变量名[] = &quot;值&quot;;</code></li>\n</ol>\n</li>\n</ul>\n</li>\n<li><code>C++11</code>  新增了一种字符串类型： <code>std::string</code> ，可以自动管理内存，使用方便。</li>\n<li><code>C</code>  风格字符串： <code>char str[] = &quot;Hello World&quot;;</code></li>\n<li><code>C++</code>  风格字符串： <code>std::string str = &quot;Hello World&quot;;</code></li>\n<li>注意：\n<ul>\n<li><code>C++</code>  风格字符串可以自动管理内存，不需要手动释放内存。</li>\n<li><code>C++</code>  风格字符串可以直接输出，不需要使用 <code>cout &lt;&lt; str &lt;&lt; endl;</code></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>c++字符串类型</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// declaring namespace std</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 声明变量</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">char</span> str1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 声明指针变量</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str2 <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 声明常量</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> str3<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 打印变量的值</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"str1 = \"</span> <span class=\"token operator\">&lt;&lt;</span> str1 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"str2 = \"</span> <span class=\"token operator\">&lt;&lt;</span> str2 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"str3 = \"</span> <span class=\"token operator\">&lt;&lt;</span> str3 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// C++11 新增的字符串类型</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    string str4 <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 打印变量的值</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"str4 = \"</span> <span class=\"token operator\">&lt;&lt;</span> str4 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"布尔类型\"><a class=\"anchor\" href=\"#布尔类型\">#</a> 布尔类型</h3>\n<ul>\n<li><code>布尔类型</code> ： <code>bool</code>  类型，只有 <code>true</code>  和 <code>false</code>  两个值。</li>\n<li>布尔类型声明：\n<ul>\n<li>\n<ol>\n<li>声明变量： <code>bool 变量名 = 值;</code></li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>声明指针变量： <code>bool *变量名 = &amp;变量名;</code></li>\n</ol>\n</li>\n<li>\n<ol start=\"3\">\n<li>声明常量： <code>const bool 变量名 = 值;</code></li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>c++布尔类型</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// declaring namespace std</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 声明变量</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">bool</span> a <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 声明指针变量</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">bool</span> <span class=\"token operator\">*</span>b <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 声明常量</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">bool</span> c <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 打印变量的值</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a = \"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"b = \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"c = \"</span> <span class=\"token operator\">&lt;&lt;</span> c <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"数据的输入\"><a class=\"anchor\" href=\"#数据的输入\">#</a> 数据的输入</h3>\n<ul>\n<li>输入数据：<br />\n- <code>cin</code> ：从标准输入设备（键盘）读取数据。\n<ul>\n<li><code>getline</code> ：从标准输入设备（键盘）读取一行数据。</li>\n<li><code>get</code> ：从标准输入设备（键盘）读取一个字符。</li>\n</ul>\n</li>\n<li>输出数据：\n<ul>\n<li><code>cout</code> ：输出到标准输出设备（屏幕）。</li>\n<li><code>put</code> ：输出到标准输出设备（屏幕）。</li>\n<li><code>putchar</code> ：输出到标准输出设备（屏幕）。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>c++数据的输入输出</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// declaring namespace std</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 输入数据</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">double</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">char</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    string d<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 输出数据</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"请输入整数a：\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 读取输入数据</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    cin <span class=\"token operator\">>></span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"请输入小数b：\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    cin <span class=\"token operator\">>></span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"请输入字符c：\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    cin <span class=\"token operator\">>></span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"请输入字符串d：\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    cin <span class=\"token operator\">>></span> d<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 输出数据</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a = \"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"b = \"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"c = \"</span> <span class=\"token operator\">&lt;&lt;</span> c <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"d = \"</span> <span class=\"token operator\">&lt;&lt;</span> d <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"运算符\"><a class=\"anchor\" href=\"#运算符\">#</a> 运算符</h2>\n<h3 id=\"加减乘除\"><a class=\"anchor\" href=\"#加减乘除\">#</a> 加减乘除</h3>\n<ul>\n<li>加法运算符： <code>+</code></li>\n<li>减法运算符： <code>-</code></li>\n<li>乘法运算符： <code>*</code></li>\n<li>除法运算符： <code>/</code></li>\n<li>取余运算符： <code>%</code></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>c++算术运算符</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// declaring namespace std</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 加法运算</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a + b = \"</span> <span class=\"token operator\">&lt;&lt;</span> c <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 减法运算</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> d <span class=\"token operator\">=</span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a - b = \"</span> <span class=\"token operator\">&lt;&lt;</span> d <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 乘法运算</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">int</span> e <span class=\"token operator\">=</span> a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a * b = \"</span> <span class=\"token operator\">&lt;&lt;</span> e <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 除法运算</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">int</span> f <span class=\"token operator\">=</span> a <span class=\"token operator\">/</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a / b = \"</span> <span class=\"token operator\">&lt;&lt;</span> f <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 取余运算</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">int</span> g <span class=\"token operator\">=</span> a <span class=\"token operator\">%</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a % b = \"</span> <span class=\"token operator\">&lt;&lt;</span> g <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"取余运算符\"><a class=\"anchor\" href=\"#取余运算符\">#</a> 取余运算符</h3>\n<ul>\n<li>取余运算符： <code>%</code></li>\n<li>语法： <code>a % b</code></li>\n<li>功能：求 <code>a</code>  除以 <code>b</code>  的余数，即 <code>a - b * (a / b)</code> 。</li>\n<li>特别注意：\n<ul>\n<li>取余运算符的结果是整数，向零取整。</li>\n<li>取余运算符的结果是负数，表示 <code>b</code>  大于 <code>a</code> 。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>c++取余运算符</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// declaring namespace std</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 取余运算</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> a <span class=\"token operator\">%</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a % b = \"</span> <span class=\"token operator\">&lt;&lt;</span> c <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"自增自减运算符\"><a class=\"anchor\" href=\"#自增自减运算符\">#</a> 自增自减运算符</h3>\n<ul>\n<li>自增运算符： <code>++</code></li>\n<li>自减运算符： <code>--</code></li>\n<li>语法： <code>变量名++</code>  或  <code>变量名--</code></li>\n<li>功能：\n<ul>\n<li><code>自增运算符</code> ： <code>先将变量的值加1，然后再返回变量的值</code> 。</li>\n<li><code>自减运算符</code> ： <code>先将变量的值减1，然后再返回变量的值</code> 。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>c++自增自减运算符</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// declaring namespace std</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 自增运算</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a = \"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    b<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"b = \"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>注意：\n<ul>\n<li>自增自减运算符只能作用于变量，不能作用于常量。</li>\n<li>自增自减运算符只能作用于整型变量。</li>\n<li>自增自减运算符只能作用于变量，不能作用于表达式。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>c++自增自减运算符注意事项</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// declaring namespace std</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 自增运算</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 错误，不能作用于常量</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a = \"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>自增自减运算符的前后顺序：\n<ul>\n<li><code>前置</code> ： <code>++变量名</code>  或  <code>--变量名</code></li>\n<li><code>后置</code> ： <code>变量名++</code>  或  <code>变量名--</code></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>c++自增自减运算符的前后顺序</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// declaring namespace std</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 前置自增运算</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token operator\">++</span>a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a = \"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 后置自增运算</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    b <span class=\"token operator\">=</span> b<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"b = \"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 前置自减运算</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token operator\">--</span>a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a = \"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 后置自减运算</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    b <span class=\"token operator\">=</span> b<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"b = \"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"赋值运算符\"><a class=\"anchor\" href=\"#赋值运算符\">#</a> 赋值运算符</h3>\n<ul>\n<li>赋值运算符： <code>=</code></li>\n<li>语法： <code>变量名 = 值</code></li>\n<li>功能：将右侧的值赋给左侧的变量。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>c++赋值运算符</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// declaring namespace std</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 赋值运算</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    a <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a = \"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"b = \"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"关系运算符\"><a class=\"anchor\" href=\"#关系运算符\">#</a> 关系运算符</h3>\n<ul>\n<li>关系运算符：\n<ul>\n<li><code>==</code> ： <code>等于</code> 。</li>\n<li><code>!=</code> ： <code>不等于</code> 。</li>\n<li><code>&gt;</code> ： <code>大于</code> 。</li>\n<li><code>&lt;</code> ： <code>小于</code> 。</li>\n<li><code>&gt;=</code> ： <code>大于等于</code> 。</li>\n<li><code>&lt;=</code> ： <code>小于等于</code> 。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>c++关系运算符</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// declaring namespace std</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 关系运算</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">bool</span> c <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a == b = \"</span> <span class=\"token operator\">&lt;&lt;</span> c <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    c <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">!=</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a != b = \"</span> <span class=\"token operator\">&lt;&lt;</span> c <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    c <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a  <span class=\"token operator\">></span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a  > b = \"</span> <span class=\"token operator\">&lt;&lt;</span> c <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    c <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a  <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a  &lt; b = \"</span> <span class=\"token operator\">&lt;&lt;</span> c <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    c <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">>=</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a >= b = \"</span> <span class=\"token operator\">&lt;&lt;</span> c <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    c <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">&lt;=</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a &lt;= b = \"</span> <span class=\"token operator\">&lt;&lt;</span> c <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"逻辑运算符\"><a class=\"anchor\" href=\"#逻辑运算符\">#</a> 逻辑运算符</h3>\n<ul>\n<li>逻辑运算符：\n<ul>\n<li><code>&amp;&amp;</code> ： <code>逻辑与</code> 。</li>\n<li><code>||</code> ： <code>逻辑或</code> 。</li>\n<li><code>!</code> ： <code>逻辑非</code> 。</li>\n</ul>\n</li>\n<li>语法：\n<ul>\n<li><code>逻辑与</code> ： <code>表达式1 &amp;&amp; 表达式2</code></li>\n<li><code>逻辑或</code> ： <code>表达式1 || 表达式2</code></li>\n<li><code>逻辑非</code> ： <code>!表达式</code></li>\n</ul>\n</li>\n<li>功能：\n<ul>\n<li><code>逻辑与</code> ： <code>只有两个表达式都为真，结果才为真</code> 。</li>\n<li><code>逻辑或</code> ： <code>只要两个表达式有一个为真，结果就为真</code> 。</li>\n<li><code>逻辑非</code> ： <code>取反，如果表达式为真，结果为假；如果表达式为假，结果为真</code> 。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>c++逻辑运算符</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// declaring namespace std</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 逻辑运算</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">bool</span> c <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">></span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a == b &amp;&amp; a > b = \"</span> <span class=\"token operator\">&lt;&lt;</span> c <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    c <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">!=</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a != b || a &lt; b = \"</span> <span class=\"token operator\">&lt;&lt;</span> c <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    c <span class=\"token operator\">=</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"!a == b = \"</span> <span class=\"token operator\">&lt;&lt;</span> c <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> d <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>d <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 可以使用逻辑运算符！！对常量进行取反操作</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>c++逻辑运算符短路特性</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// declaring namespace std</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 逻辑与短路特性</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">bool</span> c <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">></span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a == b &amp;&amp; a > b = \"</span> <span class=\"token operator\">&lt;&lt;</span> c <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    c <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">!=</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a != b || a &lt; b = \"</span> <span class=\"token operator\">&lt;&lt;</span> c <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    c <span class=\"token operator\">=</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"!a == b = \"</span> <span class=\"token operator\">&lt;&lt;</span> c <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> d <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>d <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 可以使用逻辑运算符！！对常量进行取反操作</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"位运算符\"><a class=\"anchor\" href=\"#位运算符\">#</a> 位运算符</h3>\n<ul>\n<li>位运算符：\n<ul>\n<li><code>&amp;</code> ：按位与。</li>\n<li><code>|</code> ：按位或。</li>\n<li><code>^</code> ：按位异或。</li>\n<li><code>~</code> ：按位取反。</li>\n<li><code>&lt;&lt;</code> ：左移。</li>\n<li><code>&gt;&gt;</code> ：右移。</li>\n</ul>\n</li>\n<li>语法：\n<ul>\n<li><code>&amp;</code> ： <code>变量1 &amp; 变量2</code></li>\n<li><code>|</code> ： <code>变量1 | 变量2</code></li>\n<li><code>^</code> ： <code>变量1 ^ 变量2</code></li>\n<li><code>~</code> ： <code>~变量</code></li>\n<li><code>&lt;&lt;</code> ： <code>变量 &lt;&lt; 位数</code></li>\n<li><code>&gt;&gt;</code> ： <code>变量 &gt;&gt; 位数</code></li>\n</ul>\n</li>\n<li>功能：\n<ul>\n<li><code>&amp;</code> ：两个二进制位都为 1 时，结果才为 1。</li>\n<li><code>|</code> ：两个二进制位中只要有一个为 1，结果就为 1。</li>\n<li><code>^</code> ：两个二进制位不同时为 1，结果才为 1。</li>\n<li><code>~</code> ：对二进制位取反，即 0 变 1，1 变 0。</li>\n<li><code>&lt;&lt;</code> ：将二进制位向左移动指定的位数。</li>\n<li><code>&gt;&gt;</code> ：将二进制位向右移动指定的位数。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>c++位运算符</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// declaring namespace std</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 位运算</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> a <span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a &amp; b = \"</span> <span class=\"token operator\">&lt;&lt;</span> c <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    c <span class=\"token operator\">=</span> a <span class=\"token operator\">|</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a | b = \"</span> <span class=\"token operator\">&lt;&lt;</span> c <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    c <span class=\"token operator\">=</span> a <span class=\"token operator\">^</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a ^ b = \"</span> <span class=\"token operator\">&lt;&lt;</span> c <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    c <span class=\"token operator\">=</span> <span class=\"token operator\">~</span>a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"~a = \"</span> <span class=\"token operator\">&lt;&lt;</span> c <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    c <span class=\"token operator\">=</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a &lt;&lt; 2 = \"</span> <span class=\"token operator\">&lt;&lt;</span> c <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    c <span class=\"token operator\">=</span> a <span class=\"token operator\">>></span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a >> 2 = \"</span> <span class=\"token operator\">&lt;&lt;</span> c <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"程序流程结构\"><a class=\"anchor\" href=\"#程序流程结构\">#</a> 程序流程结构</h2>\n<ul>\n<li><code>C/C++</code>  支持最基本的三种程序流程结构：顺序结构、分支结构、循环结构。\n<ul>\n<li>顺序结构：从上到下依次执行语句。</li>\n<li>分支结构：选择执行。</li>\n<li>循环结构：重复执行。</li>\n</ul>\n</li>\n<li>顺序结构：\n<ul>\n<li>语法： <code>&#123;语句1; 语句2; ...; 语句n;&#125;</code></li>\n<li>功能：从上到下依次执行语句。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>c++顺序结构示例</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// declaring namespace std</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 顺序结构</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a + b = \"</span> <span class=\"token operator\">&lt;&lt;</span> c <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"b = \"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"单行if语句\"><a class=\"anchor\" href=\"#单行if语句\">#</a> 单行 if 语句</h3>\n<ul>\n<li>语法： <code>if(条件表达式)&#123;语句&#125;</code></li>\n<li>功能：如果条件表达式为真，则执行语句。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>c++单行if语句</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// declaring namespace std</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> Language<span class=\"token punctuation\">,</span> Mathematics<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"请输入语文成绩：\"</span><span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 获取输入</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    cin <span class=\"token operator\">>></span> Language<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"请输入数学成绩：\"</span><span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    cin <span class=\"token operator\">>></span> Mathematics<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Language <span class=\"token operator\">>=</span> <span class=\"token number\">60</span> <span class=\"token operator\">&amp;&amp;</span> Mathematics <span class=\"token operator\">>=</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"你通过了本次考试！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"你未通过本次考试！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"多行if语句\"><a class=\"anchor\" href=\"#多行if语句\">#</a> 多行 if 语句</h3>\n<ul>\n<li>语法： <code>if(条件表达式)&#123;语句1&#125;else&#123;语句2&#125;</code></li>\n<li>功能：如果条件表达式为真，则执行语句 1；否则执行语句 2。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>c++多行if语句</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// declaring namespace std</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 总分</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> score <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"请输入一个考试分数：\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 获取输入的分数</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    cin <span class=\"token operator\">>></span> score<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 判断分数是否合法</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>score <span class=\"token operator\">>=</span> <span class=\"token number\">600</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"恭喜你通过了考试！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"很遗憾，你未能通过考试！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"多条件if语句\"><a class=\"anchor\" href=\"#多条件if语句\">#</a> 多条件 if 语句</h3>\n<ul>\n<li>语法： <code>if(条件表达式1)&#123;语句1&#125;else if(条件表达式2)&#123;语句2&#125;...else&#123;语句n&#125;</code></li>\n<li>功能：从上到下依次判断条件表达式，如果第一个表达式为真，则执行第一个语句；如果第一个表达式为假，则判断第二个表达式，如果第二个表达式为真，则执行第二个语句；以此类推，直到找到真值表达式，执行对应的语句。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>c++多条件if语句</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// declaring namespace std</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 总分</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> score <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"请输入一个考试分数：\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 获取输入的分数</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    cin <span class=\"token operator\">>></span> score<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 判断分数是否合法</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>score <span class=\"token operator\">>=</span> <span class=\"token number\">90</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"恭喜你通过了考试！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>score <span class=\"token operator\">>=</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"你通过了本次考试！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>score <span class=\"token operator\">>=</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"你及格了！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"很遗憾，你未能通过考试！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre> </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// 输出结果：</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 请输入一个考试分数：</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// 85</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// 你通过了本次考试！</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"嵌套if语句\"><a class=\"anchor\" href=\"#嵌套if语句\">#</a> 嵌套 if 语句</h3>\n<ul>\n<li>语法： <code>if(条件表达式1)&#123;语句1&#125;else if(条件表达式2)&#123;语句2&#125;...else&#123;语句n&#125;</code></li>\n<li>功能：从上到下依次判断条件表达式，如果第一个表达式为真，则执行第一个语句；如果第一个表达式为假，则判断第二个表达式，如果第二个表达式为真，则执行第二个语句；以此类推，直到找到真值表达式，执行对应的语句。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>c++嵌套if语句</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 嵌套 if 语句</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// declaring namespace std</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 总分</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> score <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"请输入一个考试分数：\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 获取输入的分数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    cin <span class=\"token operator\">>></span> score<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 判断分数是否合法</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>score <span class=\"token operator\">>=</span> <span class=\"token number\">90</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"恭喜你通过了考试！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>score <span class=\"token operator\">>=</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"你通过了本次考试！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>score <span class=\"token operator\">>=</span> <span class=\"token number\">85</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"你优秀！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"你及格了！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>score <span class=\"token operator\">>=</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"你及格了！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"很遗憾，你未能通过考试！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre> </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">// 输出结果：</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">// 请输入一个考试分数：</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">// 85</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">// 你通过了本次考试！</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">// 你优秀！</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"三只小猪称重程序\"><a class=\"anchor\" href=\"#三只小猪称重程序\">#</a> 三只小猪称重程序</h3>\n<ul>\n<li>功能：输入三只小猪的体重，判断谁那只小猪最重。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>c++三只小猪称重程序</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 三只小猪称重程序，使用多重 if 语句和嵌套 if 语句判断谁那只小猪谁最重</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// declaring namespace std</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 三只小猪的体重</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> weight1<span class=\"token punctuation\">,</span> weight2<span class=\"token punctuation\">,</span> weight3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"请输入第一只小猪的体重：\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    cin <span class=\"token operator\">>></span> weight1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"请输入第二只小猪的体重：\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    cin <span class=\"token operator\">>></span> weight2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"请输入第三只小猪的体重：\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    cin <span class=\"token operator\">>></span> weight3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 三只小猪的重量</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">int</span> totalWeight <span class=\"token operator\">=</span> weight1 <span class=\"token operator\">+</span> weight2 <span class=\"token operator\">+</span> weight3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 三只小猪的体重</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"第一只小猪的体重：\"</span> <span class=\"token operator\">&lt;&lt;</span> weight1 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"第二只小猪的体重：\"</span> <span class=\"token operator\">&lt;&lt;</span> weight2 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"第三只小猪的体重：\"</span> <span class=\"token operator\">&lt;&lt;</span> weight3 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 三只小猪的重量</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"三只小猪的总体重：\"</span> <span class=\"token operator\">&lt;&lt;</span> totalWeight <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// 三只小猪的重量</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>weight1 <span class=\"token operator\">></span> weight2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 第一只小猪最重</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>weight1 <span class=\"token operator\">></span> weight3<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 第一只小猪最重</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"第一只小猪最重！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 第三只小猪最重</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"第三只小猪最重！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 第二只小猪最重</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>weight2 <span class=\"token operator\">></span> weight3<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 第二只小猪最重</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"第二只小猪最重！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 第三只小猪最重</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"第三只小猪最重！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"三目运算符\"><a class=\"anchor\" href=\"#三目运算符\">#</a> 三目运算符</h3>\n<ul>\n<li>语法： <code>表达式1?表达式2:表达式3</code></li>\n<li>功能：如果表达式 1 为真，则返回表达式 2 的值；否则返回表达式 3 的值。</li>\n<li>注意：在 <code>C++</code>  中三目运算符返回的是变量，可以继续赋值</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>c++三目运算符</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// declaring namespace std</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 三目运算符</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    c <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">></span> b <span class=\"token operator\">?</span> a <span class=\"token operator\">:</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"c = \"</span> <span class=\"token operator\">&lt;&lt;</span> c <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 在 C++ 中三目运算符返回的是变量，可以继续赋值</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">(</span>a <span class=\"token operator\">></span> b <span class=\"token operator\">?</span> a <span class=\"token operator\">:</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a = \"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"b = \"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"switch语句\"><a class=\"anchor\" href=\"#switch语句\">#</a> switch 语句</h3>\n<ul>\n<li>语法： <code>switch(表达式)&#123;case 常量1:语句1;break;case 常量2:语句2;break;...default:语句n;break;&#125;</code></li>\n<li>功能：根据表达式的值，选择执行对应的语句。</li>\n<li>注意：\n<ul>\n<li><code>case</code>  后面的常量可以是表达式，也可以是常量。</li>\n<li><code>break</code>  语句用于结束当前 <code>case</code>  语句，并开始执行下一个 <code>case</code>  语句。</li>\n<li><code>default</code>  语句是可选的，如果没有匹配到任何 <code>case</code>  语句，则执行 <code>default</code>  语句。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>c++switch语句</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// declaring namespace std</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> grade <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"请输入您的成绩：\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 获取输入的成绩</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    cin <span class=\"token operator\">>></span> grade<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">//switch 语句</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>grade<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token number\">10</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"超棒\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token number\">9</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"优秀\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token number\">8</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"良好\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token number\">7</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"及格\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token number\">6</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"不及格\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"输入错误\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"循环结构\"><a class=\"anchor\" href=\"#循环结构\">#</a> 循环结构</h3>\n<ul>\n<li>循环结构：\n<ul>\n<li><code>while</code>  循环： <code>while(条件表达式)&#123;语句&#125;</code></li>\n<li><code>do-while</code>  循环： <code>do&#123;语句&#125;while(条件表达式)</code></li>\n<li><code>for</code>  循环： <code>for(初始化表达式;条件表达式;循环表达式)&#123;语句&#125;</code></li>\n</ul>\n</li>\n<li>功能：\n<ul>\n<li><code>while</code>  循环：当条件表达式为真时，执行语句。</li>\n<li><code>do-while</code>  循环：先执行语句，然后判断条件表达式。</li>\n<li><code>for</code>  循环：初始化表达式，判断条件表达式，执行语句，循环表达式，直到条件表达式为假。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>c++循环结构</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// declaring namespace std</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">//while 循环</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"i = \"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">//do-while 循环</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"i = \"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">//for 循环</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"j = \"</span> <span class=\"token operator\">&lt;&lt;</span> j <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"猜数字游戏\"><a class=\"anchor\" href=\"#猜数字游戏\">#</a> 猜数字游戏</h3>\n<ul>\n<li>功能：用户输入一个数字，计算机根据提示猜测数字。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>c++猜数字游戏</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// declaring namespace std</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//time 系统时间头文件包含</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ctime></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 添加随机数种子，保证每次运行程序生成的随机数相同</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">srand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 生成随机数</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> random_number <span class=\"token operator\">=</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">100</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> user_input<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"请猜一个数字: \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 获取用户输入</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        cin <span class=\"token operator\">>></span> user_input<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 判断用户输入是否正确</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user_input <span class=\"token operator\">==</span> random_number<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"恭喜你，猜对了！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user_input <span class=\"token operator\">&lt;</span> random_number<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"你猜的数字小了，再接再厉！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user_input <span class=\"token operator\">></span> random_number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"你猜的数字大了，再接再厉！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"很遗憾，猜错了！正确答案是\"</span> <span class=\"token operator\">&lt;&lt;</span> random_number <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"do-while循环\"><a class=\"anchor\" href=\"#do-while循环\">#</a> do-while 循环</h3>\n<ul>\n<li>语法： <code>do&#123;语句&#125;while(条件表达式)</code></li>\n<li>功能：先执行语句，然后判断条件表达式。</li>\n<li>注意： <code>do-while</code>  循环至少执行一次语句。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>c++do-while循环</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// declaring namespace std</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">//do-while 循环</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"i = \"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">//do...while 与 while 的区别在于，do...while 循环至少执行一次语句。</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"水仙花数\"><a class=\"anchor\" href=\"#水仙花数\">#</a> 水仙花数</h3>\n<ul>\n<li>功能：输入一个 <code>3</code>  位数，判断是否为水仙花数。</li>\n<li>水仙花数：一个 <code>n</code>  位数，它的每个位上的数字的 n 次幂之和等于这个数本身。</li>\n<li>例如： <code>153</code>  是一个 <code>3</code>  位数，它的每个位上的数字的 <code>3</code>  次幂之和等于这个数本身，即 <code>1^3 + 5^3 + 3^3 = 153</code> 。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>c++水仙花数</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// declaring namespace std</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"请输入一个3位数：\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    cin <span class=\"token operator\">>></span> num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> gewei <span class=\"token operator\">=</span> num <span class=\"token operator\">/</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> shiwei <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">%</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> baiwei <span class=\"token operator\">=</span> num <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> gewei <span class=\"token operator\">*</span> gewei <span class=\"token operator\">*</span> gewei <span class=\"token operator\">+</span> shiwei <span class=\"token operator\">*</span> shiwei <span class=\"token operator\">*</span> shiwei <span class=\"token operator\">+</span> baiwei <span class=\"token operator\">*</span> baiwei <span class=\"token operator\">*</span> baiwei<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">==</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"是水仙花数！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"不是水仙花数！\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>使用 <code>do-while</code>  实现水仙花数游戏</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>c++do-while实现水仙花数游戏</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// declaring namespace std</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">int</span> gewei <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 个位数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">int</span> shiwei <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 十位数</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">int</span> baiwei <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 百位数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        gewei <span class=\"token operator\">=</span> num <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 取个位数</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        shiwei <span class=\"token operator\">=</span> num <span class=\"token operator\">/</span> <span class=\"token number\">10</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 取十位数</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        baiwei <span class=\"token operator\">=</span> num <span class=\"token operator\">/</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 取百位数</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>gewei <span class=\"token operator\">*</span> gewei <span class=\"token operator\">*</span> gewei <span class=\"token operator\">+</span> shiwei <span class=\"token operator\">*</span> shiwei <span class=\"token operator\">*</span> shiwei <span class=\"token operator\">+</span> baiwei <span class=\"token operator\">*</span> baiwei <span class=\"token operator\">*</span> baiwei <span class=\"token operator\">==</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        num<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"for循环\"><a class=\"anchor\" href=\"#for循环\">#</a> for 循环</h3>\n<ul>\n<li>语法： <code>for(初始化表达式;条件表达式;循环表达式)&#123;语句&#125;</code></li>\n<li>功能：初始化表达式，判断条件表达式，执行语句，循环表达式，直到条件表达式为假。</li>\n<li>注意：\n<ul>\n<li>初始化表达式：在循环开始之前执行一次。</li>\n<li>循环表达式：在每次循环结束后执行一次。</li>\n<li>条件表达式：循环条件，当其为真时，循环继续，当其为假时，循环结束。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>c++for循环</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// declaring namespace std</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"i = \"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"敲桌子游戏\"><a class=\"anchor\" href=\"#敲桌子游戏\">#</a> 敲桌子游戏</h3>\n<ul>\n<li>功能：从这 <code>100</code>  个数字中找到特殊数字，改为 “敲桌子:”</li>\n<li>特殊数字：\n<ul>\n<li>能被 <code>7</code>  整除的数字</li>\n<li>能被 <code>10</code>  整除的数字</li>\n<li>能被 <code>70</code>  整除的数字</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>c++敲桌子游戏</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// declaring namespace std</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token number\">10</span> <span class=\"token operator\">==</span> <span class=\"token number\">7</span> <span class=\"token operator\">||</span> i <span class=\"token operator\">/</span> <span class=\"token number\">10</span> <span class=\"token operator\">==</span> <span class=\"token number\">7</span> <span class=\"token operator\">||</span> i <span class=\"token operator\">%</span> <span class=\"token number\">7</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"敲桌子\"</span> <span class=\"token operator\">:</span> <span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"九九乘法表\"><a class=\"anchor\" href=\"#九九乘法表\">#</a> 九九乘法表</h3>\n<ul>\n<li>功能：打印九九乘法表。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>c++九九乘法表</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// declaring namespace std</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"x\"</span> <span class=\"token operator\">&lt;&lt;</span> j <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"=\"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">*</span> j <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"打印矩形\"><a class=\"anchor\" href=\"#打印矩形\">#</a> 打印矩形</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>c++打印矩形</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// declaring namespace std</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"*\"</span><span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"斐波那契数列\"><a class=\"anchor\" href=\"#斐波那契数列\">#</a> 斐波那契数列</h3>\n<ul>\n<li>功能：打印斐波那契数列。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>c++斐波那契数列</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// declaring namespace std</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        c <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> c <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        a <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        b <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"break跳出循环\"><a class=\"anchor\" href=\"#break跳出循环\">#</a> break 跳出循环</h3>\n<ul>\n<li>语法： <code>break;</code></li>\n<li>功能：跳出当前循环。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>c++break跳出循环</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// declaring namespace std</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"i = \"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"continue跳过本次循环\"><a class=\"anchor\" href=\"#continue跳过本次循环\">#</a> continue 跳过本次循环</h3>\n<ul>\n<li>语法： <code>continue;</code></li>\n<li>功能：跳过本次循环，继续执行下一次循环。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>c++continue跳过本次循环</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// declaring namespace std</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"i = \"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 输出结果：</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// i = 0</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// i = 1</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// i = 3</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// i = 4</span></pre></td></tr></table></figure><h3 id=\"goto跳转语句\"><a class=\"anchor\" href=\"#goto跳转语句\">#</a> goto 跳转语句</h3>\n<ul>\n<li>语法： <code>goto 标签;</code></li>\n<li>功能：跳转到指定标签处执行。</li>\n<li>注意： <code>goto</code>  语句只能用于无限循环中，且不能跳出 <code>switch</code>  语句，不推荐使用。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>c++goto语句</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// declaring namespace std</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"1.xxx\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// using goto statement to jump to the label \"flag\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">goto</span> flag<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"2.xxx\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"3.xxx\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// using label \"flag\" to mark the end of the program</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    flag<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"4.xxx\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 输出结果：</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 1.xxx</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 4.xxx</span></pre></td></tr></table></figure><h2 id=\"数组\"><a class=\"anchor\" href=\"#数组\">#</a> 数组</h2>\n<ul>\n<li>语法： <code>类型 数组名[数组大小];</code></li>\n<li>功能：声明一个数组，数组名为数组的名字，数组大小为数组的元素个数。</li>\n<li>注意：数组的下标从 0 开始，数组的元素可以是不同的数据类型。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>c++数组</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// declaring namespace std</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 方法一</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 数组元素赋值</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    arr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    arr<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">40</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    arr<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 输出数组元素</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"arr[\"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"] = \"</span> <span class=\"token operator\">&lt;&lt;</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 方法二，如果在初始化数据时候，没有全部填写完，会用 0 来填补剩余数据</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">int</span> arr2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 输出数组元素</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"arr2[\"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"] = \"</span> <span class=\"token operator\">&lt;&lt;</span> arr2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// 方法三，定义数组的时候必须有初始长度</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">int</span> arr3<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"arr3[\"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"] = \"</span> <span class=\"token operator\">&lt;&lt;</span> arr3<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"数组名用途\"><a class=\"anchor\" href=\"#数组名用途\">#</a> 数组名用途</h3>\n<ul>\n<li>数组名可以作为指针使用，指向数组的第一个元素。</li>\n<li>数组名可以作为函数参数，传递数组的首地址。</li>\n<li>数组名可以作为结构体成员，访问结构体中的数组元素。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>c++数组名用途</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// declaring namespace std</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 数组名用途</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 1. 可以通过数组名统计整个数组占用内存大小</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"arr数组占用内存大小为: \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"每个元素占用内存空间为: \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"数组中元素个数为: \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 2. 可以通过数组名查看数组首地址</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 强转成 int 报错的话是因为精度丢失，可以用 long long</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 使用 long long 可以避免精度丢失，使用强转主要是可以查看十进制的地址</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"数组首地址为：\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>arr <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"数组中第一个元素地址为：\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"数组中第二个元素地址为：\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">//arr = 100; // 数组名是常量，不可以进行赋值操作</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"数组案例1\"><a class=\"anchor\" href=\"#数组案例1\">#</a> 数组案例 1</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>c++数组案例1</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// declaring namespace std</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * 案例描述 1:</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * 在一个数组中记录了五只小猪的体重，如:int arr [5] = &#123;300,350,200,400,250&#125;;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * 找出并打印最重的小猪体重</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @return</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">350</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">250</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 假设第一个小猪最重</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> max<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            max <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 更新最重的小猪体重</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"The heaviest pig is \"</span> <span class=\"token operator\">&lt;&lt;</span> max <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"kg.\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">//arr = 100; // 数组名是常量，不可以进行赋值操作</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"数组案例2\"><a class=\"anchor\" href=\"#数组案例2\">#</a> 数组案例 2</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>c++数组案例2</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// declaring namespace std</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * 练习案例 2: 数组元素逆置</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * 案例描述：请声明一个 5 个元素的数组，并且将元素逆置</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * 如原数组元素为：1,3,2,5,4; 逆置后输出结果为：4,5,2,3,1</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @return</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 起始下标</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">int</span> start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 数组</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 结束下标</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">int</span> end <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 输出原数组</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Original Array: \"</span> <span class=\"token operator\">&lt;&lt;</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 逆置数组</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">// 交换元素</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        arr<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        arr<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">// 更新下标</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        start<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        end<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">// 输出逆置后的数组</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> endl <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Reversed Array: \"</span> <span class=\"token operator\">&lt;&lt;</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"冒泡排序\"><a class=\"anchor\" href=\"#冒泡排序\">#</a> 冒泡排序</h3>\n<ul>\n<li>功能：对数组进行升序排序。</li>\n<li>步骤：\n<ol>\n<li>外层循环控制遍历数组的次数，从 0 到 n-1。</li>\n<li>内层循环控制比较的次数，从 0 到 n-i-1。</li>\n<li>内层循环从 0 到 n-i-1，比较 arr [j] 和 arr [j+1]，如果 arr [j] 大于 arr [j+1]，则交换 arr [j] 和 arr [j+1]。</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>c++冒泡排序</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// declaring namespace std</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">bubbleSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">bool</span> swapped<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 引入一个标志变量</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        swapped <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 每次外循环开始时重置</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token operator\">-</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token comment\">// 交换相邻的元素</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                arr<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                swapped <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 标志变量设为 true，表示发生了交换</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 如果在某一轮没有发生交换，说明数组已经有序</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>swapped<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token function\">bubbleSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Sorted array: \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>在最好的情况下（即数组已经是有序的），优化后的算法只需要一轮就可以判断出数组有序，从而将时间复杂度从 O (n^2) 优化到 O (n)。</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>在最坏的情况下，时间复杂度仍然是 O (n^2)，因为冒泡排序的核心机制决定了它的最坏表现。</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>*/</span></pre></td></tr></table></figure><h3 id=\"二维数组\"><a class=\"anchor\" href=\"#二维数组\">#</a> 二维数组</h3>\n<ul>\n<li>语法： <code>类型 数组名[行数][列数];</code></li>\n<li>功能：声明一个二维数组，数组名为二维数组的名字，行数为二维数组的行数，列数为二维数组的列数。</li>\n<li>注意：二维数组的下标从 0 开始，数组的元素可以是不同的数据类型。</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>c++二维数组</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// declaring namespace std</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 方法一</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 输出二维数组</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"arr[\"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"][\"</span> <span class=\"token operator\">&lt;&lt;</span> j <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"] = \"</span> <span class=\"token operator\">&lt;&lt;</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 方法二，如果在初始化数据时候，没有全部填写完，会用 0 来填补剩余数据</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">int</span> arr2<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>    </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// 输出二维数组</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"arr2[\"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"][\"</span> <span class=\"token operator\">&lt;&lt;</span> j <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"] = \"</span> <span class=\"token operator\">&lt;&lt;</span> arr2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">// 方法三，定义二维数组的时候必须有初始行数和列数</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">int</span> arr3<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\">// 输出二维数组</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"arr3[\"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"][\"</span> <span class=\"token operator\">&lt;&lt;</span> j <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"] = \"</span> <span class=\"token operator\">&lt;&lt;</span> arr3<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"函数\"><a class=\"anchor\" href=\"#函数\">#</a> 函数</h2>\n<h3 id=\"函数的调用\"><a class=\"anchor\" href=\"#函数的调用\">#</a> 函数的调用</h3>\n<ul>\n<li>功能：使用定义好的函数</li>\n<li>语法： <code>函数名 (参数)</code></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>函数的调用</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> num1 <span class=\"token operator\">+</span> num2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Sum = \"</span> <span class=\"token operator\">&lt;&lt;</span> sum <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 执行结果 Sum = 30</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"函数的声明\"><a class=\"anchor\" href=\"#函数的声明\">#</a> 函数的声明</h3>\n<ul>\n<li>作用是告诉编译器函数名称及如何调用函数，函数的实际主体可以单独定义</li>\n<li>函数的声明可以多次，但函数的定义只能有一次</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>函数的声明</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 函数的声明</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 函数的声明可以多次，但定义只能有一次</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">></span> b <span class=\"token operator\">?</span> a <span class=\"token operator\">:</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"拆分函数编写函数的分文件编写\"><a class=\"anchor\" href=\"#拆分函数编写函数的分文件编写\">#</a> 拆分函数编写 (函数的分文件编写)</h3>\n<ul>\n<li>作用让代码结构更清晰，函数分文件编写一般有四个步骤</li>\n<li>1. 创建后缀名为 <code>.h</code>  的头文件</li>\n<li>2. 创建后缀名为 <code>.cpp</code>  的源文件</li>\n<li>3. 在头文件中写函数的声明</li>\n<li>4. 在源文件中写函数的定义</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>swap.h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">DEMO_SWAP_H</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">DEMO_SWAP_H</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span> <span class=\"token comment\">//DEMO_SWAP_H</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>调用头文件示例</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"swap.h\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"sum\"</span> <span class=\"token operator\">&lt;&lt;</span> sum <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"指针\"><a class=\"anchor\" href=\"#指针\">#</a> 指针</h2>\n<blockquote>\n<p>指针的作用：可以土狗指针间接访问内存</p>\n</blockquote>\n<ul>\n<li>内存编号是从 <code>0</code>  开始记录的，一般用十六进制数字进行表示</li>\n<li>可以利用指针变量保存地址</li>\n</ul>\n<h3 id=\"指针的使用\"><a class=\"anchor\" href=\"#指针的使用\">#</a> 指针的使用</h3>\n<ul>\n<li>指针变量定义语法： <code>数据类型 * 变量名</code></li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>指针的使用</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 定义变量</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 定义指针</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 让指针记录变量 a 的地址</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a的地址：\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">&amp;</span>a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"p的地址：\"</span> <span class=\"token operator\">&lt;&lt;</span> p <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 使用指针</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// * 代表解引用，找到指针指向的内存中的数据。这样就可以修改 a 变量的值</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a：\"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"p：\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"指针的占用空间\"><a class=\"anchor\" href=\"#指针的占用空间\">#</a> 指针的占用空间</h3>\n<blockquote>\n<p>指针也是种数据类型，那么遮罩数据类型占用多少内存空间呢？</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>指针的占用空间</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 指针占用内存空间</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 在 32 位操作系统下，指针是占 4 个字节空间大小，不管是什么数据类型</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 在 64 位操作系统下，指针是占 8 个字节空间大小，不管是什么数据类型</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"sizeof(int *)\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"sizeof(float *)\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"sizeof(double *)\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"sizeof(char *)\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     * 执行结果</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     * sizeof (int *) 8</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     * sizeof (float *) 8</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     * sizeof (double *) 8</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     * sizeof (char *) 8</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"空指针and野指针\"><a class=\"anchor\" href=\"#空指针and野指针\">#</a> 空指针 and 野指针</h3>\n<ul>\n<li>空指针：指针变量指向内存中编号为 <code>0</code>  的空间</li>\n<li>野指针：指针变量指向非法的内存空间</li>\n</ul>\n<h4 id=\"空指针\"><a class=\"anchor\" href=\"#空指针\">#</a> 空指针</h4>\n<ul>\n<li>空指针：指针变量指向内存中编号为 <code>0</code>  的空间</li>\n<li>用途：初始化指针变量</li>\n<li>注意：空指针指向的内存是不可以访问的</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>空指针和野指针</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* 空指针和野指针</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>空指针：指针变量指向内存中编号为 0 的空间</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>用途：初始化指针变量</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>注意：空指针指向的内存是不可以访问的</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 空指针</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"*p\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"野指针\"><a class=\"anchor\" href=\"#野指针\">#</a> 野指针</h4>\n<ul>\n<li>野指针：指针变量指向非法的内存空间</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>野指针</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* 野指针</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 指针变量指向非法的内存空间</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 指针变量 p 指向内存地址编号为 θx1100 的空间</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token number\">0x1100</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"*p\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"const修饰指针\"><a class=\"anchor\" href=\"#const修饰指针\">#</a> const 修饰指针</h3>\n<ul>\n<li><code>const</code>  修饰指针有三种情况：\n<ol>\n<li><code>const</code>  修饰指针 - 常量指针</li>\n<li><code>const</code>  修饰常量 - 指针常量</li>\n<li><code>const</code>  即修饰指针，又修饰常量</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>const修饰指针</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* const 修饰指针</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * const 修饰指针有三种情况：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 1.const 修饰指针 --- 常量指针</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * 2. const 修饰常量 - 指针常量</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * 3. const 即修饰指针，又修饰常量</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    常量指针</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    特点：指针的指向可以修改，但是指针指向的值不可以改</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">//     *p = 20; // 错误，指针指向的值不可以改</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">//     *p = &amp;b; // 正确，指针指向可以改</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 指针常量</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> p2 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// 特点：指针的指向不可以改，指针指向的值可以改</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">//     *p = 20; // 正确，指针指向的值可以改</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">//     *p = &amp;b; // 错误，指针指向不可以改</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">//const 即修饰指针，又修饰常里，特点：指针的指向和指针指向的值都不可以改</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> p3 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">//     *p = 20; // 错误，指针指向的值不可以改</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">//     *p = &amp;b; // 错误，指针指向不可以改</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"指针和数组\"><a class=\"anchor\" href=\"#指针和数组\">#</a> 指针和数组</h3>\n<blockquote>\n<p>利用指针访问数组中的元素</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>利用指针访问数组中元素</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* 利用指针访问数组中元素</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 指针和数组</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 利用指针访问数组中的元素</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"第一个元素为：\"</span> <span class=\"token operator\">&lt;&lt;</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">//arr 就是数组首地址</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"利用指针访问第一个元素：\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    p<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 让指针向后位移四个四节</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"利用指针访问第二个元素：\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"利用指针遍历数组\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// 定义新指针</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p2 <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">//        cout &lt;&lt; arr[i] &lt;&lt; endl;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>p2  <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        p2<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"指针和函数\"><a class=\"anchor\" href=\"#指针和函数\">#</a> 指针和函数</h3>\n<blockquote>\n<p>利用指针作为函数参数，可以修改实参的值</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>指针和函数</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 指针和函数</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 总结：如果不想修改实参，就用值传递，如果想修改实参，就用地址传递</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">swap01</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    a <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    b <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"swap01 a = \"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"swap01 b = \"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">swap02</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>p2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>p1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token operator\">*</span>p1 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>p2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token operator\">*</span>p2 <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"swap02 *p1 = \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>p1 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"swap02 *p2 = \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>p2 <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// 实现两个数字交换</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">// 指针和函数</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">// 1. 值传递</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token function\">swap01</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 值传递不会改变实参</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a = \"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"b = \"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\">// 2. 地址传递</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\">// 如果是地址传递，可以修饰实参</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token function\">swap02</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a = \"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"b = \"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"指针-数组-函数案例\"><a class=\"anchor\" href=\"#指针-数组-函数案例\">#</a> 指针、数组、函数案例</h3>\n<blockquote>\n<p>案例描述：封装一个函数，利用冒泡排序，实现对整型数组的升序排序</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>冒泡排序</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">bubbleSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 外层循环控制遍历次数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 内层循环进行相邻元素的比较和交换</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>arr <span class=\"token operator\">+</span> j<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>arr <span class=\"token operator\">+</span> j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token comment\">// 交换元素</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>arr <span class=\"token operator\">+</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>arr <span class=\"token operator\">+</span> j<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>arr <span class=\"token operator\">+</span> j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>arr <span class=\"token operator\">+</span> j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">printArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>arr <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"原始数组: \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token function\">printArray</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token function\">bubbleSort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"排序后的数组: \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token function\">printArray</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\">// 原始数组: 64 34 25 12 22 11 90</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\">// 排序后的数组: 11 12 22 25 34 64 90</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"结构体\"><a class=\"anchor\" href=\"#结构体\">#</a> 结构体</h2>\n<blockquote>\n<p>结构体属于用户自定义的数据类型，允许用户存储不同的数据类型，结构体语法： <code>struct 结构体名 &#123; 结构体成员列表 &#125;;</code></p>\n</blockquote>\n<ul>\n<li>通过结构体创建变量的方式有三种：\n<ol>\n<li><code>struct</code>  结构体名 变量名</li>\n<li><code>struct</code>  结构体名 变量名 =  <code>&#123; 成员值1,成员值2 &#125;</code></li>\n<li>定义结构体时顺便创建变量</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"结构体的使用\"><a class=\"anchor\" href=\"#结构体的使用\">#</a> 结构体的使用</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>结构体的使用</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 结构体的定义与使用</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 总结 1：定义结构体时的关键字是 struct，不可省略</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 总结 2：创建结构体变垂时，关键字 struct 可以省略</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * 总结 3：结构体变量利用操作符 “.“访问成员</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">//1. 创建学生结构体数据类型</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 自定义数据类型，一些类型集合组成的应该类型</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 语法 struct 类型名称 &#123;成员列表&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 成员列表</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    string name<span class=\"token punctuation\">;</span><span class=\"token comment\">// 昵称</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 年龄</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">int</span> score<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 分数</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span> s3<span class=\"token punctuation\">;</span><span class=\"token comment\">// 这里的 s3 就是顺便创建的结构体变量</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">//2. 通过学生类型创建具体学生</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 2.1 struct Student s1;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">//struct 关键字可以省略</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">//     Student s1;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> s1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">// 给 s1 属性进行赋值，通过访问结构体变量中的属性</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    s1<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    s1<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    s1<span class=\"token punctuation\">.</span>score <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"name：\"</span> <span class=\"token operator\">&lt;&lt;</span> s1<span class=\"token punctuation\">.</span>name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" age：\"</span> <span class=\"token operator\">&lt;&lt;</span> s1<span class=\"token punctuation\">.</span>age <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" score：\"</span> <span class=\"token operator\">&lt;&lt;</span> s1<span class=\"token punctuation\">.</span>score <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">//2.2 struct Student s2=&#123;...&#125;;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span> s2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"name：\"</span> <span class=\"token operator\">&lt;&lt;</span> s2<span class=\"token punctuation\">.</span>name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" age：\"</span> <span class=\"token operator\">&lt;&lt;</span> s2<span class=\"token punctuation\">.</span>age <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" score：\"</span> <span class=\"token operator\">&lt;&lt;</span> s2<span class=\"token punctuation\">.</span>score <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">//2.3 在定义结构体时顺便创建结构体变量</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    s3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"name：\"</span> <span class=\"token operator\">&lt;&lt;</span> s3<span class=\"token punctuation\">.</span>name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" age：\"</span> <span class=\"token operator\">&lt;&lt;</span> s3<span class=\"token punctuation\">.</span>age <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" score：\"</span> <span class=\"token operator\">&lt;&lt;</span> s3<span class=\"token punctuation\">.</span>score <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"结构体数组\"><a class=\"anchor\" href=\"#结构体数组\">#</a> 结构体数组</h3>\n<blockquote>\n<p>将自定义的结构体放入到数组中方便进行维护</p>\n</blockquote>\n<blockquote>\n<p>语法： <code>struct 结构体名 数组名[元素个数] = &#123; &#123;&#125;,&#123;&#125;,&#123;&#125;,...,&#123;&#125; &#125;</code></p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>结构体数组</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 结构体数组</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 1. 结构体定义</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    string name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">int</span> score<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 2. 定义结构体数组</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    Student arr<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token number\">80</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">14</span><span class=\"token punctuation\">,</span><span class=\"token number\">75</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// 3. 给结构体数组中的元素赋值</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    arr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"老六\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    arr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">21</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// 4.1 遍历数组</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span> i <span class=\"token operator\">:</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"name：\"</span> <span class=\"token operator\">&lt;&lt;</span> i<span class=\"token punctuation\">.</span>name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" age：\"</span> <span class=\"token operator\">&lt;&lt;</span> i<span class=\"token punctuation\">.</span>age <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" score：\"</span> <span class=\"token operator\">&lt;&lt;</span> i<span class=\"token punctuation\">.</span>score <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"结构体指针\"><a class=\"anchor\" href=\"#结构体指针\">#</a> 结构体指针</h3>\n<blockquote>\n<p>通过指针访问结构体中的成员，利用操作符  <code>-&gt;</code>  就可以通过结构体指针访问结构体属性</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>结构体指针</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 指针结构体</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 作用：通过指针访问结构体中的成员</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 利用操作符 -> 可以通过结构体指针访问结构体属性</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * 总结：结构体指针可以通过 -> 操作符来访问结构体中的成员</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 创建结构体</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    string name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">int</span> score<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 创建学生结构体变量</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    Student stu <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span><span class=\"token number\">80</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 通过指针指向结构体变量</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// 通过指针访问结构体中的数据</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 通过结构体指针访问结构体中的属性，需需要利用 -></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    Student <span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>stu<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    p<span class=\"token operator\">-></span>age <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"name = \"</span> <span class=\"token operator\">&lt;&lt;</span> p<span class=\"token operator\">-></span>name <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" age = \"</span> <span class=\"token operator\">&lt;&lt;</span> p<span class=\"token operator\">-></span>age <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" score = \"</span> <span class=\"token operator\">&lt;&lt;</span> p<span class=\"token operator\">-></span>score <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">//system (\"pause\"); 请按任意键继续. . .</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"结构体嵌套\"><a class=\"anchor\" href=\"#结构体嵌套\">#</a> 结构体嵌套</h3>\n<blockquote>\n<p>结构体中的成员可以是另一个结构体，例如：每个老师辅导应该学员，应该老师的结构体中，记录一个学生的结构体</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>结构体嵌套</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 结构体嵌套</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 总结：在结构体中可以定义另一个结构体作为成员，用来解决实际问题</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * 定义学生结构体</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Stendent</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    string name<span class=\"token punctuation\">;</span><span class=\"token comment\">// 学生编号</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span><span class=\"token comment\">// 学生年龄</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">int</span> score<span class=\"token punctuation\">;</span><span class=\"token comment\">// 学生分数</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"19\"></td><td><pre> * 定义老师结构体</pre></td></tr><tr><td data-num=\"20\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Teacher</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span><span class=\"token comment\">// 老师 ID</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    string name<span class=\"token punctuation\">;</span><span class=\"token comment\">// 老师名称</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span><span class=\"token comment\">// 老师年龄</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Stendent</span> stu<span class=\"token punctuation\">;</span><span class=\"token comment\">// 辅导的学生</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    Teacher t1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"王老师\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Teacher-Name：\"</span> <span class=\"token operator\">&lt;&lt;</span> t1<span class=\"token punctuation\">.</span>name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" Teacher-Age：\"</span> <span class=\"token operator\">&lt;&lt;</span> t1<span class=\"token punctuation\">.</span>age <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" Stendent-Name：\"</span> <span class=\"token operator\">&lt;&lt;</span> t1<span class=\"token punctuation\">.</span>stu<span class=\"token punctuation\">.</span>name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" Stendent-Age：\"</span> <span class=\"token operator\">&lt;&lt;</span> t1<span class=\"token punctuation\">.</span>stu<span class=\"token punctuation\">.</span>age <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" Stendent-Score：\"</span> <span class=\"token operator\">&lt;&lt;</span>t1<span class=\"token punctuation\">.</span>stu<span class=\"token punctuation\">.</span>score <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    Teacher t2<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"赵老师\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">19</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">19</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"张老师\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"王五\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">60</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span> i <span class=\"token operator\">:</span> t2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Teacher-Name：\"</span> <span class=\"token operator\">&lt;&lt;</span> i<span class=\"token punctuation\">.</span>name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" Teacher-Age：\"</span> <span class=\"token operator\">&lt;&lt;</span> i<span class=\"token punctuation\">.</span>age <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" Stendent-Name：\"</span> <span class=\"token operator\">&lt;&lt;</span> i<span class=\"token punctuation\">.</span>stu<span class=\"token punctuation\">.</span>name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" Stendent-Age：\"</span> <span class=\"token operator\">&lt;&lt;</span> i<span class=\"token punctuation\">.</span>stu<span class=\"token punctuation\">.</span>age <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" Stendent-Score：\"</span> <span class=\"token operator\">&lt;&lt;</span>i<span class=\"token punctuation\">.</span>stu<span class=\"token punctuation\">.</span>score <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"结构体做函数参数\"><a class=\"anchor\" href=\"#结构体做函数参数\">#</a> 结构体做函数参数</h3>\n<blockquote>\n<p>将结构体作为参数向函数中传递，传递方式有两种：一 值传递，二 地址传递</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>结构体做函数参数</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 结构体做函数参数</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 总结：如果不想修改主函数中的数据，用值传递，反之用地址传递</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 值传递是复制，地址传递是共用</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * 定义学生结构体</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Stendent</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    string name<span class=\"token punctuation\">;</span><span class=\"token comment\">// 学生编号</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span><span class=\"token comment\">// 学生年龄</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">int</span> score<span class=\"token punctuation\">;</span><span class=\"token comment\">// 学生分数</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"19\"></td><td><pre> * 值传递</pre></td></tr><tr><td data-num=\"20\"></td><td><pre> * @param stu</pre></td></tr><tr><td data-num=\"21\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">printStudent1</span><span class=\"token punctuation\">(</span>Stendent stu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    stu<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">28</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 值传递不会修改实参</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"子函数1 姓名：\"</span> <span class=\"token operator\">&lt;&lt;</span> stu<span class=\"token punctuation\">.</span>name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 年龄：\"</span> <span class=\"token operator\">&lt;&lt;</span> stu<span class=\"token punctuation\">.</span>age <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 分数：\"</span> <span class=\"token operator\">&lt;&lt;</span> stu<span class=\"token punctuation\">.</span>score <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"27\"></td><td><pre> * 地址传递</pre></td></tr><tr><td data-num=\"28\"></td><td><pre> * @param stu</pre></td></tr><tr><td data-num=\"29\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">printStudent2</span><span class=\"token punctuation\">(</span>Stendent <span class=\"token operator\">*</span>stu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    stu<span class=\"token operator\">-></span>age <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 地址传递可以修改实参</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"子函数2 姓名：\"</span> <span class=\"token operator\">&lt;&lt;</span> stu<span class=\"token operator\">-></span>name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 年龄：\"</span> <span class=\"token operator\">&lt;&lt;</span> stu<span class=\"token operator\">-></span>age <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 分数：\"</span> <span class=\"token operator\">&lt;&lt;</span> stu<span class=\"token operator\">-></span>score <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    Stendent s1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token function\">printStudent1</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token function\">printStudent2</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"主函数 姓名：\"</span> <span class=\"token operator\">&lt;&lt;</span> s1<span class=\"token punctuation\">.</span>name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 年龄：\"</span> <span class=\"token operator\">&lt;&lt;</span> s1<span class=\"token punctuation\">.</span>age <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 分数：\"</span> <span class=\"token operator\">&lt;&lt;</span> s1<span class=\"token punctuation\">.</span>score <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"结构体中const使用场景\"><a class=\"anchor\" href=\"#结构体中const使用场景\">#</a> 结构体中 const 使用场景</h3>\n<blockquote>\n<p>用 const 来防止误操作</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>结构体中const使用场景</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * 定义学生结构体</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Stendent</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    string name<span class=\"token punctuation\">;</span><span class=\"token comment\">// 学生编号</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span><span class=\"token comment\">// 学生年龄</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> score<span class=\"token punctuation\">;</span><span class=\"token comment\">// 学生分数</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> * 值传递</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> * @param stu</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">printStudent1</span><span class=\"token punctuation\">(</span>Stendent stu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    stu<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">28</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 值传递不会修改实参</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"子函数1 姓名：\"</span> <span class=\"token operator\">&lt;&lt;</span> stu<span class=\"token punctuation\">.</span>name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 年龄：\"</span> <span class=\"token operator\">&lt;&lt;</span> stu<span class=\"token punctuation\">.</span>age <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 分数：\"</span> <span class=\"token operator\">&lt;&lt;</span> stu<span class=\"token punctuation\">.</span>score <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"22\"></td><td><pre> * 地址传递</pre></td></tr><tr><td data-num=\"23\"></td><td><pre> * 将函数中的形参改为指针，可以减少内存空间，而且不会复制新的副本出来</pre></td></tr><tr><td data-num=\"24\"></td><td><pre> * @param stu</pre></td></tr><tr><td data-num=\"25\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">printStudent2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Stendent <span class=\"token operator\">*</span>stu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 加 const 防止函数体中的误操作</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"子函数2 姓名：\"</span> <span class=\"token operator\">&lt;&lt;</span> stu<span class=\"token operator\">-></span>name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 年龄：\"</span> <span class=\"token operator\">&lt;&lt;</span> stu<span class=\"token operator\">-></span>age <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 分数：\"</span> <span class=\"token operator\">&lt;&lt;</span> stu<span class=\"token operator\">-></span>score <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    Stendent s1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token function\">printStudent1</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token function\">printStudent2</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"主函数 姓名：\"</span> <span class=\"token operator\">&lt;&lt;</span> s1<span class=\"token punctuation\">.</span>name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 年龄：\"</span> <span class=\"token operator\">&lt;&lt;</span> s1<span class=\"token punctuation\">.</span>age <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 分数：\"</span> <span class=\"token operator\">&lt;&lt;</span> s1<span class=\"token punctuation\">.</span>score <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"结构体案例\"><a class=\"anchor\" href=\"#结构体案例\">#</a> 结构体案例</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 结构体案例</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ctime></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * 定义学生结构体</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Stendent</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    string name<span class=\"token punctuation\">;</span><span class=\"token comment\">// 学生编号</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">int</span> score<span class=\"token punctuation\">;</span><span class=\"token comment\">// 学生分数</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> * 定义老师结构体</pre></td></tr><tr><td data-num=\"18\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Teacher</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    string name<span class=\"token punctuation\">;</span><span class=\"token comment\">// 老师名称</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Stendent</span> stuArray<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 辅导的学生</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"25\"></td><td><pre> * 给老师和学生赋值的函数</pre></td></tr><tr><td data-num=\"26\"></td><td><pre> * @return</pre></td></tr><tr><td data-num=\"27\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">allocateSpace</span><span class=\"token punctuation\">(</span>Teacher tArray<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    string nameSeed <span class=\"token operator\">=</span> <span class=\"token string\">\"ABCDE\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">// 给老师开始赋值</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        tArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Teacher_\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        tArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+=</span> nameSeed<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">// 通过循环给每名老师所带的学生赋值</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            tArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>stuArray<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Student_\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            tArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>stuArray<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+=</span> nameSeed<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token comment\">// 设置随机数</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token keyword\">int</span> random <span class=\"token operator\">=</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">61</span><span class=\"token operator\">+</span><span class=\"token number\">40</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//40~100</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            tArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>stuArray<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>score <span class=\"token operator\">=</span> random<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token comment\">// 打印所有信息</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">printInfo</span><span class=\"token punctuation\">(</span>Teacher pTeacher<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token comment\">// 遍历老师</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"老师名称：\"</span> <span class=\"token operator\">&lt;&lt;</span> pTeacher<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\t学生名称：\"</span> <span class=\"token operator\">&lt;&lt;</span> pTeacher<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>stuArray<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" 学生成绩：\"</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                 <span class=\"token operator\">&lt;&lt;</span> pTeacher<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>stuArray<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>score <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token comment\">// 添加随机数种子</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token function\">srand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span>  <span class=\"token keyword\">int</span> <span class=\"token punctuation\">)</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token comment\">// 创建 3 名老师的数组</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    Teacher tArray<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token comment\">// 通过函数给 3 名老师的信息赋值，并给老师带的学生信息赋值</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token function\">allocateSpace</span><span class=\"token punctuation\">(</span>tArray<span class=\"token punctuation\">,</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span>tArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token comment\">//    cout &lt;&lt; size(tArray)&lt;&lt;endl;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token comment\">// 打印所有老师及所带的学生</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token function\">printInfo</span><span class=\"token punctuation\">(</span>tArray<span class=\"token punctuation\">,</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span>tArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "C++",
                "C++基础",
                "计算机科学",
                "C++",
                "C++基础"
            ]
        },
        {
            "id": "https://rainrem.top/%E6%95%A3%E7%AB%A0/%E9%85%8D%E7%BD%AEIDEA%E6%B3%A8%E9%87%8A%E6%A8%A1%E7%89%88/",
            "url": "https://rainrem.top/%E6%95%A3%E7%AB%A0/%E9%85%8D%E7%BD%AEIDEA%E6%B3%A8%E9%87%8A%E6%A8%A1%E7%89%88/",
            "title": "配置IDEA注释模版",
            "date_published": "2024-08-31T09:58:00.000Z",
            "content_html": "<h1 id=\"文件和代码模版\"><a class=\"anchor\" href=\"#文件和代码模版\">#</a> 文件和代码模版</h1>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>文件和代码模版</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @Description: $&#123;DESCRIPTION&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @DateTime: $&#123;DATE&#125; $&#123;TIME&#125;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> **/</span></pre></td></tr></table></figure><p><img data-src=\"https://s21.ax1x.com/2024/08/31/pAE60PK.png\" alt=\"pAE60PK.png\" /></p>\n<h1 id=\"实时模版\"><a class=\"anchor\" href=\"#实时模版\">#</a> 实时模版</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>实时模版</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @Date: <span class=\"token variable\">$DATE</span>$ <span class=\"token variable\">$TIME</span>$</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Param: <span class=\"token variable\">$PARAMS</span>$</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Return: <span class=\"token variable\">$RETURN_TYPE</span>$</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @Description: <span class=\"token variable\">$END</span>$</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Since <span class=\"token number\">21</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> */</pre></td></tr></table></figure><p><img data-src=\"https://s21.ax1x.com/2024/08/31/pAE6rxe.png\" alt=\"pAE6rxe.png\" /></p>\n<p><img data-src=\"https://s21.ax1x.com/2024/08/31/pAE6yKH.png\" alt=\"pAE6yKH.png\" /></p>\n",
            "tags": [
                "IDEA",
                "模版注释",
                "IDEA",
                "模版注释"
            ]
        },
        {
            "id": "https://rainrem.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/mysql/course-3/%E6%B7%BB%E5%8A%A0%E4%B8%80%E6%9D%A1%E4%B8%B4%E6%97%B6id/",
            "url": "https://rainrem.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/mysql/course-3/%E6%B7%BB%E5%8A%A0%E4%B8%80%E6%9D%A1%E4%B8%B4%E6%97%B6id/",
            "title": "添加一条临时ID的SQL",
            "date_published": "2024-08-31T09:34:00.000Z",
            "content_html": "<blockquote>\n<p>这是一个临时 ID 的 SQL 语句，用于在查询时添加一条临时 ID 来区分不同的数据。</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token variable\">@id</span>:<span class=\"token operator\">=</span><span class=\"token variable\">@id</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> id<span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 设置 id</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    moving_all<span class=\"token punctuation\">.</span><span class=\"token keyword\">text</span><span class=\"token punctuation\">,</span>id <span class=\"token comment\">// 查询 moving_all 表下的 text 字段和 id 字段</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">FROM</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    moving_all<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 要查询的表 </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token variable\">@id</span>:<span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token keyword\">as</span> id_temp <span class=\"token keyword\">where</span> <span class=\"token keyword\">type</span><span class=\"token operator\">=</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//where 查询指定字段  id_temp 为别名</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">SELECT</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token variable\">@id</span>:<span class=\"token operator\">=</span><span class=\"token variable\">@id</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> id<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    表名<span class=\"token punctuation\">.</span>字段名</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">FROM</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    表名<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token variable\">@id</span>:<span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token keyword\">as</span> id_temp <span class=\"token keyword\">where</span> 条件</pre></td></tr></table></figure><p><img data-src=\"https://s21.ax1x.com/2024/08/31/pAE6KU0.png\" alt=\"pAE6KU0.png\" /></p>\n",
            "tags": [
                "计算机科学",
                "Mysql",
                "Mysql篇",
                "Mysql",
                "SQL"
            ]
        },
        {
            "id": "https://rainrem.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/java/spring/Spring%20Security-6.3.1%E7%89%88%E6%9C%AC%E5%AE%89%E5%85%A8%E9%85%8D%E7%BD%AE/",
            "url": "https://rainrem.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/java/spring/Spring%20Security-6.3.1%E7%89%88%E6%9C%AC%E5%AE%89%E5%85%A8%E9%85%8D%E7%BD%AE/",
            "title": "Spring Security-6.3.1版本安全配置",
            "date_published": "2024-08-09T10:07:18.000Z",
            "content_html": "<h1 id=\"引言\"><a class=\"anchor\" href=\"#引言\">#</a> 引言</h1>\n<blockquote>\n<p><code>Spring Security</code>  它是 <code>Spring</code>  家族中的一个安全框架，主要用于保护我们的应用程序，它提供了许多安全特性，如身份验证、授权、加密、会话管理、访问控制等。本文将介绍 <code>Spring Security</code>  的 6.3.1 版本的安全配置。</p>\n</blockquote>\n<h2 id=\"spring-security简介\"><a class=\"anchor\" href=\"#spring-security简介\">#</a> Spring Security 简介</h2>\n<blockquote>\n<p><code>Spring Security</code>  的最新版本是 6.3.1，本文将介绍 6.3.1 版本的安全配置。</p>\n</blockquote>\n<ul>\n<li><code>Spring Security</code>  的主要特性：</li>\n<li>认证与授权：提供多种认证方式和权限管理功能。</li>\n<li>攻击防护：防御常见的攻击，如跨站请求伪造 <code>(CSRF)</code> 、点击劫持等。</li>\n<li>灵活配置：通过 <code>Java</code>  配置、 <code>XML</code>  配置等多种方式进行灵活配置。</li>\n<li>集成支持：支持与多种身份验证协议（如 <code>OAuth2</code> 、 <code>JWT</code> ）和第三方服务的集成。</li>\n</ul>\n<h2 id=\"spring-security依赖\"><a class=\"anchor\" href=\"#spring-security依赖\">#</a> Spring Security 依赖</h2>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>pom.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-security<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h1 id=\"环境准备\"><a class=\"anchor\" href=\"#环境准备\">#</a> 环境准备</h1>\n<ul>\n<li>工具和版本\n<ul>\n<li><code>JDK</code> :  <code>11</code>  或更高版本</li>\n<li><code>Spring Boot</code> : 最新稳定版本</li>\n<li><code>Maven/Gradle</code> : 用于项目构建和依赖管理</li>\n<li><code>IDE</code> : 如 <code>IntelliJ IDEA</code>  或 <code>Eclipse</code></li>\n</ul>\n</li>\n<li>创建 <code>Spring Boot</code>  项目\n<ul>\n<li>使用 <code>Spring Initializr</code>  创建一个新的 <code>Spring Boot</code>  项目。</li>\n<li>选择 <code>&quot;Spring Security&quot;</code>  作为依赖项。</li>\n<li>下载并导入项目到你的 <code>IDE</code> 。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"安全配置\"><a class=\"anchor\" href=\"#安全配置\">#</a> 安全配置</h1>\n<h2 id=\"实现userdetails接口\"><a class=\"anchor\" href=\"#实现userdetails接口\">#</a> 实现 UserDetails 接口</h2>\n<blockquote>\n<p>首先我们需要先配置自己的 <code>UserBean</code> , 将自己的 <code>User</code>  实体类实现 <code>UserDetails</code>  接口，并在 <code>SecurityConfig</code>  中配置 <code>UserDetailsService</code> ， <code>UserDetails</code>  接口提供了获取用户信息的方法，包括用户名、密码、权限等。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>User.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fairiy<span class=\"token punctuation\">.</span>magic<span class=\"token punctuation\">.</span>magicbackend<span class=\"token punctuation\">.</span>bean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Data</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Getter</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Setter</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ToString</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GrantedAuthority</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>userdetails<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UserDetails</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Date</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> * @Description: User 实体类，实现 UserDeails 接口</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> * @DateTime: 2023-04-01 16:37</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"18\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">UserDetails</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// id</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// 用户名</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> username<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">// 密码</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">// 头像地址</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> avatar_address<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">// 性别</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> gender<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">// 角色</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> role<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token comment\">// 状态</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> user_status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token comment\">// 有效时间</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Date</span> valid_time<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token comment\">// 更新时间</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Date</span> update_time<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token comment\">// 创建时间</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Date</span> create_time<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token comment\">// 是否删除（0 - 未删，1 - 已删）</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> is_deleted<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">GrantedAuthority</span><span class=\"token punctuation\">></span></span> authorities<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token keyword\">return</span> username<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isAccountNonExpired</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isAccountNonLocked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isCredentialsNonExpired</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"实现userdetailsservice接口\"><a class=\"anchor\" href=\"#实现userdetailsservice接口\">#</a> 实现 UserDetailsService 接口</h2>\n<blockquote>\n<p>下面我们来实现登录权限的效验，来编写 <code>SecurityServiceImpl</code>  实现类，实现 <code>UserDetailsService</code>  接口中的 <code>loadUserByUsername</code>  方法，并在 <code>SecurityConfig</code>  中配置 <code>AuthenticationManager</code> 。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>SecurityServiceImpl.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fairiy<span class=\"token punctuation\">.</span>magic<span class=\"token punctuation\">.</span>magicbackend<span class=\"token punctuation\">.</span>service</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fairiy<span class=\"token punctuation\">.</span>magic<span class=\"token punctuation\">.</span>magicbackend<span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">User</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fairiy<span class=\"token punctuation\">.</span>magic<span class=\"token punctuation\">.</span>magicbackend<span class=\"token punctuation\">.</span>mapper<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UserMapper</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>authority<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AuthorityUtils</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>userdetails<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UserDetails</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>userdetails<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UserDetailsService</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Service</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * Created by LightRain on 2024/7/30 下午 23:25.</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * UserDetailsService 接口用于实现用户认证，使用 SpringSecurity 来处理授权请求</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SecurityServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">UserDetailsService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   * 注入 UserMapper</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">UserMapper</span> userMapper<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">SecurityServiceImpl</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserMapper</span> userMapper<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>userMapper <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">UserDetails</span> <span class=\"token function\">loadUserByUsername</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> username<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">getUserName</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">getUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">getPassword</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>userdetails<span class=\"token punctuation\">.</span></span>User</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">getPassword</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">AuthorityUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">commaSeparatedStringToAuthorityList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">// 验证失败</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>userdetails<span class=\"token punctuation\">.</span></span>User</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"$2a$10$kiS2bbJHUiDINf466LuMae2kpoC0/iGvbmqNR7w7eiQhaEUlgw6Nq\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">AuthorityUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">commaSeparatedStringToAuthorityList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"配置securityconfig安全类\"><a class=\"anchor\" href=\"#配置securityconfig安全类\">#</a> 配置 SecurityConfig 安全类</h2>\n<blockquote>\n<p>配置 <code>SecurityConfig</code>  类，这是 <code>6.3.1</code>  版本的最新配置格式，旧版方法均已被弃用，新版配置如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>SecurityConfig.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fairiy<span class=\"token punctuation\">.</span>magic<span class=\"token punctuation\">.</span>magicbackend<span class=\"token punctuation\">.</span>config</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Bean</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Configuration</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>builders<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpSecurity</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>configuration<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EnableWebSecurity</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>bcrypt<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BCryptPasswordEncoder</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PasswordEncoder</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SecurityFilterChain</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>cors<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">CorsConfiguration</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>cors<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">CorsConfigurationSource</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>cors<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UrlBasedCorsConfigurationSource</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"18\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"19\"></td><td><pre> * @Description: Security 安全配置</pre></td></tr><tr><td data-num=\"20\"></td><td><pre> * @DateTime: 2024/7/30 下午 7:53</pre></td></tr><tr><td data-num=\"21\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"22\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token annotation punctuation\">@EnableWebSecurity</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SecurityConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>     * @Author: LightRain</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>     * @Date: 2024/7/30 下午 11:44</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>     * @Param: [httpSecurity]</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>     * @Return: org.springframework.security.web.SecurityFilterChain</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>     * @Description: SpringSecurity 配置</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>     * @Since 21</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SecurityFilterChain</span> <span class=\"token function\">securityFilterChain</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpSecurity</span> httpSecurity<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\">// 默认开启 CSRF 防护</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        httpSecurity</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token comment\">// 配置 CORS 从源策略</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">cors</span><span class=\"token punctuation\">(</span>corsConfigurer <span class=\"token operator\">-></span> corsConfigurer<span class=\"token punctuation\">.</span><span class=\"token function\">configurationSource</span><span class=\"token punctuation\">(</span><span class=\"token function\">corsConfigurationSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token comment\">// 开启表单登录</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">formLogin</span><span class=\"token punctuation\">(</span>formLogin <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                    <span class=\"token comment\">// 登录页面，允许所有人访问</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                    formLogin<span class=\"token punctuation\">.</span><span class=\"token function\">loginPage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">permitAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                    <span class=\"token comment\">// 登录成功后将请求转发到 successForwardUrl</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                    formLogin<span class=\"token punctuation\">.</span><span class=\"token function\">successForwardUrl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login/success\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                            <span class=\"token comment\">// 登录失败后转发到 failureForwardUrl</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                            <span class=\"token punctuation\">.</span><span class=\"token function\">failureForwardUrl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login/failure\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">permitAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                <span class=\"token comment\">// 开启记住我</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">rememberMe</span><span class=\"token punctuation\">(</span>rememberMe <span class=\"token operator\">-></span> rememberMe<span class=\"token punctuation\">.</span><span class=\"token function\">tokenValiditySeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">24</span> <span class=\"token operator\">*</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                <span class=\"token comment\">// 配置权限</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">authorizeHttpRequests</span><span class=\"token punctuation\">(</span>authorize <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                    <span class=\"token comment\">// 配置白名单，允许访问 /public/**, 其他请求都需要认证</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                    authorize<span class=\"token punctuation\">.</span><span class=\"token function\">requestMatchers</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/public/**\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/login/**\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">permitAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">anyRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">authenticated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                <span class=\"token comment\">// 配置 session 管理</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">sessionManagement</span><span class=\"token punctuation\">(</span>sessionManagement <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                    <span class=\"token comment\">//session 失效时跳转的 url</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                    sessionManagement<span class=\"token punctuation\">.</span><span class=\"token function\">invalidSessionUrl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/session/invalid\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                <span class=\"token comment\">// 配置异常处理</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">exceptionHandling</span><span class=\"token punctuation\">(</span>exceptionHandling <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                    <span class=\"token comment\">// 身份验证入口点</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                    exceptionHandling<span class=\"token punctuation\">.</span><span class=\"token function\">authenticationEntryPoint</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">OAAuthenticationEntryPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                    <span class=\"token comment\">// 未授权时跳转的 url</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token comment\">//                    exceptionHandling.accessDeniedHandler(new OAAccessDeniedHandler());</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                <span class=\"token comment\">// 配置退出登录</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">logout</span><span class=\"token punctuation\">(</span>logout <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>                    <span class=\"token comment\">// 退出登录 url</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>                    logout<span class=\"token punctuation\">.</span><span class=\"token function\">logoutUrl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/logout\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>                            <span class=\"token comment\">// 退出成功后跳转的 url</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>                            <span class=\"token punctuation\">.</span><span class=\"token function\">logoutSuccessUrl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>                            <span class=\"token comment\">// 是否清除 HttpSession</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                            <span class=\"token punctuation\">.</span><span class=\"token function\">invalidateHttpSession</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                            <span class=\"token comment\">// 删除对应 cookie</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                            <span class=\"token punctuation\">.</span><span class=\"token function\">deleteCookies</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"JSESSIONID\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token keyword\">return</span> httpSecurity<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>     * @Author: LightRain</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>     * @Date: 2024/7/30 下午 11:49</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>     * @Param: []</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>     * @Return: org.springframework.web.cors.CorsConfigurationSource</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>     * @Description: CORS 从源策略配置</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>     * @Since 21</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">CorsConfigurationSource</span> <span class=\"token function\">corsConfigurationSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        <span class=\"token class-name\">CorsConfiguration</span> corsConfiguration <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CorsConfiguration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token comment\">// 允许跨域访问的站点</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        corsConfiguration<span class=\"token punctuation\">.</span><span class=\"token function\">setAllowedOrigins</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://localhost:5170\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"http://localhost:4500\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"http://localhost:80\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        <span class=\"token comment\">// 允许跨域访问的 methods</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        corsConfiguration<span class=\"token punctuation\">.</span><span class=\"token function\">setAllowedMethods</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        <span class=\"token comment\">// 允许携带凭证</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        corsConfiguration<span class=\"token punctuation\">.</span><span class=\"token function\">setAllowCredentials</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        corsConfiguration<span class=\"token punctuation\">.</span><span class=\"token function\">setAllowedHeaders</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        <span class=\"token comment\">// 基于 url 的 cors 配置源</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        <span class=\"token class-name\">UrlBasedCorsConfigurationSource</span> source <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UrlBasedCorsConfigurationSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        <span class=\"token comment\">// 对所有 URL 生效</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        source<span class=\"token punctuation\">.</span><span class=\"token function\">registerCorsConfiguration</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/**\"</span><span class=\"token punctuation\">,</span> corsConfiguration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        <span class=\"token keyword\">return</span> source<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"109\"></td><td><pre>     * 配置从源策略</pre></td></tr><tr><td data-num=\"110\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre><span class=\"token comment\">//    public CorsConfigurationSource corsConfigurationSource() &#123;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre><span class=\"token comment\">//        CorsConfiguration corsConfiguration = new CorsConfiguration();</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre><span class=\"token comment\">//        corsConfiguration.addAllowedOrigin(\"http://localhost:4500\");</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre><span class=\"token comment\">//        corsConfiguration.addAllowedMethod (\"*\"); // 允许所有方法</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre><span class=\"token comment\">//        corsConfiguration.addAllowedHeader(\"Content-Type\");</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre><span class=\"token comment\">//        corsConfiguration.addAllowedHeader(\"Authorization\");</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre><span class=\"token comment\">//        corsConfiguration.addAllowedHeader(\"Access-Control-Allow-Origin\");</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre><span class=\"token comment\">//        corsConfiguration.addAllowedHeader(\"x-csrf-token\");</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre><span class=\"token comment\">//        corsConfiguration.setAllowCredentials(true);</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre><span class=\"token comment\">//        // 基于 url 的 cors 配置源</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre><span class=\"token comment\">//        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre><span class=\"token comment\">//        // 对所有 URL 生效</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre><span class=\"token comment\">//        source.registerCorsConfiguration(\"/**\", corsConfiguration);</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre><span class=\"token comment\">//        return source;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre><span class=\"token comment\">//    &#125;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"128\"></td><td><pre>     * @Author: LightRain</pre></td></tr><tr><td data-num=\"129\"></td><td><pre>     * @Date: 2024/7/30 下午 11:50</pre></td></tr><tr><td data-num=\"130\"></td><td><pre>     * @Param: []</pre></td></tr><tr><td data-num=\"131\"></td><td><pre>     * @Return: org.springframework.security.crypto.password.PasswordEncoder</pre></td></tr><tr><td data-num=\"132\"></td><td><pre>     * @Description: 配置密码加密器</pre></td></tr><tr><td data-num=\"133\"></td><td><pre>     * @Since 21</pre></td></tr><tr><td data-num=\"134\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">PasswordEncoder</span> <span class=\"token function\">passwordEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BCryptPasswordEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre></pre></td></tr><tr><td data-num=\"140\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"实现身份验证入口点\"><a class=\"anchor\" href=\"#实现身份验证入口点\">#</a> 实现身份验证入口点</h2>\n<blockquote>\n<p>实现 OA 身份验证入口点 <code>OAAuthenticationEntryPoint</code> ，用于处理身份验证失败的情况，如用户名或密码错误等。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>OAAuthenticationEntryPoint.java </span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fairiy<span class=\"token punctuation\">.</span>magic<span class=\"token punctuation\">.</span>magicbackend<span class=\"token punctuation\">.</span>config</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fairiy<span class=\"token punctuation\">.</span>magic<span class=\"token punctuation\">.</span>magicbackend<span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Return</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fasterxml<span class=\"token punctuation\">.</span>jackson<span class=\"token punctuation\">.</span>databind<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ObjectMapper</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">jakarta<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletRequest</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">jakarta<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletResponse</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AuthenticationException</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AuthenticationEntryPoint</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PrintWriter</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> * @Description: OA 身份验证入口点</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> * @DateTime: 2024/7/30 下午 7:52</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OAAuthenticationEntryPoint</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AuthenticationEntryPoint</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">commence</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> httpServletRequest<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">AuthenticationException</span> e<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        response<span class=\"token punctuation\">.</span><span class=\"token function\">setContentType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"application/json;charset=UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">PrintWriter</span> out <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">Return</span> notAuthorized <span class=\"token operator\">=</span> <span class=\"token class-name\">Return</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">code</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">message</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"尚未授权\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Return</span><span class=\"token punctuation\">.</span><span class=\"token constant\">FAILED</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        out<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">writeValueAsString</span><span class=\"token punctuation\">(</span>notAuthorized<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        out<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        out<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>实现 <code>Return</code>  类，用于返回统一的返回信息。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Return.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fairiy<span class=\"token punctuation\">.</span>magic<span class=\"token punctuation\">.</span>magicbackend<span class=\"token punctuation\">.</span>bean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Builder</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Getter</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Setter</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ToString</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @Description: 统一返回信息</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @DateTime: 2023-03-29 12:55</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token annotation punctuation\">@Getter</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token annotation punctuation\">@Setter</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token annotation punctuation\">@Builder</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token annotation punctuation\">@ToString</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token comment\">// 状态码</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> code<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token comment\">// 返回信息</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> message<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token comment\">// 返回数据</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token comment\">// 成功</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">SUCCESS</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"SUCCESS\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token comment\">// 失败</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">FAILED</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"FAILED\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"实现登录接口\"><a class=\"anchor\" href=\"#实现登录接口\">#</a> 实现登录接口</h2>\n<blockquote>\n<p>实现登录接口，用于处理用户登录请求，并返回登录结果。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>LoginController.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fairiy<span class=\"token punctuation\">.</span>magic<span class=\"token punctuation\">.</span>magicbackend<span class=\"token punctuation\">.</span>controller</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fairiy<span class=\"token punctuation\">.</span>magic<span class=\"token punctuation\">.</span>magicbackend<span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Return</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fairiy<span class=\"token punctuation\">.</span>magic<span class=\"token punctuation\">.</span>magicbackend<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LoginService</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">jakarta<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletRequest</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">jakarta<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletResponse</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">jakarta<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpSession</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Authentication</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SecurityContextHolder</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>authentication<span class=\"token punctuation\">.</span>logout<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SecurityContextLogoutHandler</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestMapping</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestMethod</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ResponseBody</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RestController</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"18\"></td><td><pre> * @Description: 登录控制器</pre></td></tr><tr><td data-num=\"19\"></td><td><pre> * @DateTime: 2024/7/30 下午 21:10</pre></td></tr><tr><td data-num=\"20\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"21\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoginController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">LoginService</span> service<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">LoginController</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LoginService</span> service<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>service <span class=\"token operator\">=</span> service<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>     * @Author: LightRain</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>     * @Date: 2024/8/31 下午 4:48</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>     * @Param: [session, username, captcha]</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>     * @Return: com.fairiy.magic.magicbackend.bean.Return</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>     * @Description: 登录成功</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>     * @Since 21</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/success\"</span><span class=\"token punctuation\">,</span> method <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">GET</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">POST</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Return</span> <span class=\"token function\">loginSuccess</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpSession</span> session<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> username<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> captcha<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>       <span class=\"token keyword\">return</span> service<span class=\"token punctuation\">.</span><span class=\"token function\">loginSuccess</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">,</span> captcha<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>     * @Author: LightRain</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>     * @Date: 2024/8/31 下午 4:48</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>     * @Param: []</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>     * @Return: com.fairiy.magic.magicbackend.bean.Return</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>     * @Description: 登录失败</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>     * @Since 21</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/failure\"</span><span class=\"token punctuation\">,</span> method <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">GET</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">POST</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Return</span> <span class=\"token function\">loginFailure</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Return</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">code</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">message</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"授权失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Return</span><span class=\"token punctuation\">.</span><span class=\"token constant\">FAILED</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>     * @Author: LightRain</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>     * @Date: 2024/8/31 下午 4:48</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>     * @Param: [request, response]</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>     * @Return: java.lang.String</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>     * @Description: 退出登录</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>     * @Since 21</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/logout\"</span><span class=\"token punctuation\">,</span> method <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">GET</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">POST</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">logoutPage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token class-name\">Authentication</span> auth <span class=\"token operator\">=</span> <span class=\"token class-name\">SecurityContextHolder</span><span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAuthentication</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>auth <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token keyword\">new</span> <span class=\"token class-name\">SecurityContextLogoutHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">logout</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> auth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"redirect:/login\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>LoginService.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fairiy<span class=\"token punctuation\">.</span>magic<span class=\"token punctuation\">.</span>magicbackend<span class=\"token punctuation\">.</span>service</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fairiy<span class=\"token punctuation\">.</span>magic<span class=\"token punctuation\">.</span>magicbackend<span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Return</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">jakarta<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpSession</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * Created by LightRain on 2024/07/30 23:30.</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * 登录服务接口</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">LoginService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">Return</span> <span class=\"token function\">loginSuccess</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpSession</span> session<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> username<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> captcha<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>LoginServiceImpl.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fairiy<span class=\"token punctuation\">.</span>magic<span class=\"token punctuation\">.</span>magicbackend<span class=\"token punctuation\">.</span>service</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fairiy<span class=\"token punctuation\">.</span>magic<span class=\"token punctuation\">.</span>magicbackend<span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Return</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fairiy<span class=\"token punctuation\">.</span>magic<span class=\"token punctuation\">.</span>magicbackend<span class=\"token punctuation\">.</span>mapper<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UserMapper</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">jakarta<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpSession</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Service</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @Description: 登录服务实现类，用于处理登录逻辑，使用 SpringSecurity 来处理授权请求</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @DateTime: 2024/7/30 下午 23:18</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoginServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">LoginService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token comment\">// 注入 UserMapper</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">UserMapper</span> userMapper<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">LoginServiceImpl</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserMapper</span> userMapper<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>userMapper <span class=\"token operator\">=</span> userMapper<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token comment\">// 登录成功，可以在此添加验证码验证等逻辑</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Return</span> <span class=\"token function\">loginSuccess</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpSession</span> session<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> username<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> captcha<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"login success\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    session<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"User\"</span><span class=\"token punctuation\">,</span> userMapper<span class=\"token punctuation\">.</span><span class=\"token function\">getUserName</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Return</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">code</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">message</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"授权成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Return</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SUCCESS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"实现token认证\"><a class=\"anchor\" href=\"#实现token认证\">#</a> 实现 Token 认证</h2>\n<blockquote>\n<p>实现 Token 认证，用于处理用户登录请求，并返回登录结果。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fairiy<span class=\"token punctuation\">.</span>magic<span class=\"token punctuation\">.</span>magicbackend<span class=\"token punctuation\">.</span>controller</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">cn<span class=\"token punctuation\">.</span>hutool<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>codec<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Base64</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fairiy<span class=\"token punctuation\">.</span>magic<span class=\"token punctuation\">.</span>magicbackend<span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Register</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fairiy<span class=\"token punctuation\">.</span>magic<span class=\"token punctuation\">.</span>magicbackend<span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Return</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fairiy<span class=\"token punctuation\">.</span>magic<span class=\"token punctuation\">.</span>magicbackend<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PublicService</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>google<span class=\"token punctuation\">.</span>code<span class=\"token punctuation\">.</span>kaptcha<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Producer</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">jakarta<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletRequest</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">jakarta<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletResponse</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>commons<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ByteArrayOutputStream</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>csrf<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">CsrfToken</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Controller</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GetMapping</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestMapping</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ResponseBody</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>imageio<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ImageIO</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>awt<span class=\"token punctuation\">.</span>image<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BufferedImage</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"22\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"23\"></td><td><pre> * @Description: 不登录就可以访问的公开控制器</pre></td></tr><tr><td data-num=\"24\"></td><td><pre> * @DateTime: 2024/7/30 下午 8:13</pre></td></tr><tr><td data-num=\"25\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"26\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/public\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PublicController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">PublicService</span> publicService<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Producer</span> kaptchaProducer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">PublicController</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PublicService</span> publicService<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Producer</span> kaptchaProducer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>publicService <span class=\"token operator\">=</span> publicService<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>kaptchaProducer <span class=\"token operator\">=</span> kaptchaProducer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>   * @Author: LightRain</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>   * @Date: 2024/8/21 下午 6:42</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>   * @Param: [request]</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>   * @Return: org.springframework.security.web.csrf.CsrfToken</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>   * @Description: 获取 csrfToken</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>   * @Since 21</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/csrf-token\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">CsrfToken</span> <span class=\"token function\">csrfToken</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token class-name\">CsrfToken</span> attribute <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">CsrfToken</span><span class=\"token punctuation\">)</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CsrfToken</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>attribute<span class=\"token punctuation\">.</span><span class=\"token function\">getToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">return</span> attribute<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>   * @Author: LightRain</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>   * @Date: 2024/8/21 下午 4:05</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>   * @Param: [request, activationCode]</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>   * @Return: com.fairiy.magic.magicbackend.bean.Return</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>   * @Description: 注册接口</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>   * @Since 21</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/register\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Return</span> <span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Register</span> request<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> activationCode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token keyword\">return</span> publicService<span class=\"token punctuation\">.</span><span class=\"token function\">registerAccount</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span>activationCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>   * @Author: LightRain</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>   * @Date: 2024/8/21 下午 6:42</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>   * @Param: [request, response]</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>   * @Return: com.fairiy.magic.magicbackend.bean.Return</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>   * @Description: 生成验证码，暂时弃用</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>   * @Since 21</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>  <span class=\"token annotation punctuation\">@Deprecated</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>  <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>  <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/createKaptchaCodeImg\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Return</span> <span class=\"token function\">createKaptchaCode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    request<span class=\"token punctuation\">.</span><span class=\"token function\">getSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kaptchaCode\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token comment\">// 设置浏览器缓存机制</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    response<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cache-Control\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"no-store, no-cache\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token comment\">// 设置返回响应类型</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    response<span class=\"token punctuation\">.</span><span class=\"token function\">setContentType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"image/jpeg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token comment\">// 生成验证码</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token class-name\">String</span> code <span class=\"token operator\">=</span> kaptchaProducer<span class=\"token punctuation\">.</span><span class=\"token function\">createText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token comment\">// 保存验证码到 session</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    request<span class=\"token punctuation\">.</span><span class=\"token function\">getSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kaptchaCode\"</span><span class=\"token punctuation\">,</span> code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token comment\">// 生成图片验证码</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token class-name\">BufferedImage</span> image <span class=\"token operator\">=</span> kaptchaProducer<span class=\"token punctuation\">.</span><span class=\"token function\">createImage</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    <span class=\"token comment\">// 转为 Base64</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token class-name\">ByteArrayOutputStream</span> stream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ByteArrayOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token class-name\">ImageIO</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">,</span> <span class=\"token string\">\"png\"</span><span class=\"token punctuation\">,</span> stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token class-name\">String</span> imgString <span class=\"token operator\">=</span> <span class=\"token string\">\"data:image/gif;base64,\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Base64</span><span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">.</span><span class=\"token function\">toByteArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    stream<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    stream<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    <span class=\"token comment\">// 将数据存入并将其返回</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Return</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">code</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">message</span><span class=\"token punctuation\">(</span>imgString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Return</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SUCCESS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre></pre></td></tr><tr><td data-num=\"104\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"实现session管理\"><a class=\"anchor\" href=\"#实现session管理\">#</a> 实现 Session 管理</h2>\n<blockquote>\n<p>实现 Session 管理，用于处理用户登录请求，并返回登录结果。</p>\n</blockquote>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"><span>application.yml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5170</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">servlet</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">session</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token key atrule\">timeout</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3600</span> <span class=\"token comment\">#session Effective time is one hour 3600s</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token key atrule\">datasource</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> jdbc<span class=\"token punctuation\">:</span>mysql<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span>3306/magic_journey<span class=\"token punctuation\">?</span>useUnicode=true<span class=\"token important\">&amp;characterEncoding=utf-8&amp;serverTimezone=UTC</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> root</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> <span class=\"token number\">123456</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token key atrule\">driver-class-name</span><span class=\"token punctuation\">:</span> com.mysql.cj.jdbc.Driver</pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>SessionController.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fairiy<span class=\"token punctuation\">.</span>magic<span class=\"token punctuation\">.</span>magicbackend<span class=\"token punctuation\">.</span>controller</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fairiy<span class=\"token punctuation\">.</span>magic<span class=\"token punctuation\">.</span>magicbackend<span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Return</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">jakarta<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpSession</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpStatus</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Controller</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GetMapping</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestMapping</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ResponseBody</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ResponseStatus</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> * @Description: Session 控制器</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> * @DateTime: 2024/7/30 下午 21:15</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SessionController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"session/invalid\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseStatus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span><span class=\"token constant\">UNAUTHORIZED</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">sessionInvalid</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpSession</span> session<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        session<span class=\"token punctuation\">.</span><span class=\"token function\">removeAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"User\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"session已失效，请重新认证\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"session/status\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Return</span> <span class=\"token function\">sessionStatus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpSession</span> session<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"User\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Return</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">code</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">message</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"授权成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Return</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SUCCESS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Return</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">code</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">message</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"尚未授权\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Return</span><span class=\"token punctuation\">.</span><span class=\"token constant\">FAILED</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"实现mvc-cors配置\"><a class=\"anchor\" href=\"#实现mvc-cors配置\">#</a> 实现 MVC-CORS 配置</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fairiy<span class=\"token punctuation\">.</span>magic<span class=\"token punctuation\">.</span>magicbackend<span class=\"token punctuation\">.</span>config</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Configuration</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">CorsRegistry</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WebMvcConfigurer</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @Description: Cors 从源策略配置</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @DateTime: 2023-04-01 17:51</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CorsConfig</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">WebMvcConfigurer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     * @Author: LightRain</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     * @Date: 3/4/2023 下午 1:55</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     * @Param: [registry]</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     * @Return: void</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     * @Description: 添加 Cors 从源策略映射</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     * @since 17</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addCorsMappings</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CorsRegistry</span> registry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        addMapping (\"/**\"): 设置允许跨域的路径</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        allowedOriginPatterns (\"*\"): 设置允许跨域请求的域名</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        allowCredentials (true): 是否允许 cookie</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        allowedMethods (\"GET\", \"POST\", \"DELETE\", \"PUT\"): 设置允许的请求方式</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        allowedHeaders (\"*\"): 设置允许的 header 属性</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        maxAge (3600): 跨域允许时间</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        registry<span class=\"token punctuation\">.</span><span class=\"token function\">addMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/**\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">allowedOriginPatterns</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">allowCredentials</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">allowedMethods</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"DELETE\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"PUT\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">allowedHeaders</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">maxAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">3600</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "Java",
                "Java深入理解",
                "计算机科学",
                "Java深入理解",
                "Spring",
                "Security",
                "安全配置"
            ]
        },
        {
            "id": "https://rainrem.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/rust/Rust%E5%9F%BA%E7%A1%80%E7%AF%87/",
            "url": "https://rainrem.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/rust/Rust%E5%9F%BA%E7%A1%80%E7%AF%87/",
            "title": "Rust基础篇",
            "date_published": "2024-07-07T15:51:20.000Z",
            "content_html": "<h1 id=\"p27-71-package-crate-module\"><a class=\"anchor\" href=\"#p27-71-package-crate-module\">#</a> P27 7.1 Package、Crate、Module</h1>\n<h2 id=\"rust的代码组织\"><a class=\"anchor\" href=\"#rust的代码组织\">#</a> Rust 的代码组织</h2>\n<ul>\n<li>代码组织主要包括:\n<ul>\n<li>哪些细节可以暴露，哪些细节是私有的</li>\n<li>作用域内哪些名称有效</li>\n</ul>\n</li>\n<li>模块系统:\n<ul>\n<li><code>Package(包)</code> : <code>Cargo</code>  的特性，让你构建、测试、共享 <code>crate</code></li>\n<li><code>Crate(单元包)</code> : 一个模块树，它可产生一个 <code>library</code>  或可执行文件</li>\n<li><code>Module(模块)</code> : <code>use</code>  让你控制代码的组织、作用域、私有路径</li>\n<li><code>Path(路径)</code> : 为 <code>struct</code>   <code>function</code>  或 <code>module</code>  等项命名的方式</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"pacakge-和-crate\"><a class=\"anchor\" href=\"#pacakge-和-crate\">#</a> Pacakge 和 Crate</h2>\n<ul>\n<li><code>Crate</code>  的类型:\n<ul>\n<li><code>binary</code></li>\n<li><code>library</code></li>\n</ul>\n</li>\n<li><code>Crate Root</code> :\n<ul>\n<li>是源代码文件</li>\n<li><code>Rust</code>  编译器从这里开始，组成你的 <code>Crate</code>  的根 <code>Module</code></li>\n</ul>\n</li>\n<li>一个 <code>Package</code>\n<ul>\n<li>包含 1 个 <code>Cargo.tom</code> ，它描述了如何构建这些 <code>Crates</code></li>\n<li>只能包含 <code>0-1</code>  个 <code>library crate</code></li>\n<li>可以包含任意数量的 <code>binary crate</code></li>\n<li>但必须至少包含一个 <code>crate(library或binary)</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"cargo的惯例\"><a class=\"anchor\" href=\"#cargo的惯例\">#</a> Cargo 的惯例</h2>\n<ul>\n<li><code>src/main.rs</code> :\n<ul>\n<li><code>binary crate</code>  的 <code>crate root</code>  (rust 文件的入口)</li>\n<li><code>crate</code>  名与 <code>package</code>  名相同</li>\n</ul>\n</li>\n<li><code>src/lib.rs</code> :\n<ul>\n<li><code>package</code>  包含一个 <code>library crate</code></li>\n<li><code>library crate</code>  的 <code>crate root</code></li>\n<li><code>crate</code>  名与 <code>package</code>  名相闻</li>\n</ul>\n</li>\n<li><code>Cargo</code>  把  <code>crate root</code>  文件交给 <code>rustc</code>  来构建 <code>library</code>  或 <code>binary</code></li>\n<li>一个 <code>Package</code>  可以同时包含 <code>src/main.rs</code>  和 <code>src/lib.rs</code>\n<ul>\n<li>一个 <code>binary crate</code> ，一个  <code>library crate</code></li>\n<li>名称与 <code>package</code>  名相同</li>\n</ul>\n</li>\n<li>一个 <code>Package</code>  可以有多个 <code>binary crate</code> :\n<ul>\n<li>文件放在 <code>src/bin</code></li>\n<li>每个文件是单独的 <code>binary crate</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"crate-的作用\"><a class=\"anchor\" href=\"#crate-的作用\">#</a> Crate 的作用</h2>\n<ul>\n<li>将相关功能组合到一个作用域内，便于在项目间进行共享\n<ul>\n<li>防止冲突</li>\n</ul>\n</li>\n<li>例如  <code>rand crate</code> ，访问它的功能需要通过它的名字: <code>rand</code></li>\n</ul>\n<h2 id=\"定义-module-来控制作用域和私有性\"><a class=\"anchor\" href=\"#定义-module-来控制作用域和私有性\">#</a> 定义 module 来控制作用域和私有性</h2>\n<p><code>Module</code> :<br />\n- 在一个 <code>crate</code>  内，将代码进行分组<br />\n - 增加可读性，易于复用<br />\n - 控制项目 <code>(item)</code>  的私有性。 <code>public</code> 、 <code>private</code></p>\n<ul>\n<li>建立 <code>module</code> :\n<ul>\n<li><code>mod</code>  关键字</li>\n<li>可嵌套</li>\n<li>可包含其它项 ( <code>struct</code> 、 <code>enum</code> 、 <code>常量</code> 、 <code>trait</code> 、 <code>函数</code> 等) 的定义</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight rust\"><figcaption data-lang=\"rust\"><span>module的定义 | lib.rs</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">mod</span> <span class=\"token module-declaration namespace\">front_of_house</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">mod</span> <span class=\"token module-declaration namespace\">hosting</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">add_to_waitlist</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">seat_at_table</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">mod</span> <span class=\"token module-declaration namespace\">serving</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">take_order</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">serve_order</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">take_payment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"p28-72-路径\"><a class=\"anchor\" href=\"#p28-72-路径\">#</a> P28 7.2 路径</h1>\n<h2 id=\"路径path\"><a class=\"anchor\" href=\"#路径path\">#</a> 路径 (Path)</h2>\n<p>为了在 <code>Rust</code>  的模块中找到某个条目，需要使用路径，<br />\n 路径的两种形式:<br />\n- 绝对路径：从 <code>crate root</code>  开始，使用 <code>crate</code>  名或字面值 <code>crate</code> <br />\n- 相对路径：从当前模块开始，使用 <code>self</code> ， <code>super</code>  或当前模块的标识符<br />\n路径至少由一个标识符组成，标识符之间使用 <code>::</code>  分隔。</p>\n<figure class=\"highlight rust\"><figcaption data-lang=\"rust\"><span>路径的例子 | lib.rs</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">mod</span> <span class=\"token module-declaration namespace\">front_of_house</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">mod</span> <span class=\"token module-declaration namespace\">hosting</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">add_to_waitlist</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>   </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">eat_at_restaurant</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">crate</span><span class=\"token module-declaration namespace\"><span class=\"token punctuation\">::</span>front_of_house<span class=\"token punctuation\">::</span>hosting<span class=\"token punctuation\">::</span></span><span class=\"token function\">add_to_waitlist</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token namespace\">front_of_house<span class=\"token punctuation\">::</span>hosting<span class=\"token punctuation\">::</span></span><span class=\"token function\">add_to_waitlist</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"私有边界privacy-boundary\"><a class=\"anchor\" href=\"#私有边界privacy-boundary\">#</a> 私有边界 (privacy boundary)</h2>\n<p>模块不仅可以组织代码，还可以定义私有边界。<br />\n如果想把 函数或  <code>struct</code>  等设为私有，可以将它放到某个模块中。<br />\n <code>Rust</code>  中所有的条目 ( <code>函数</code> ， <code>方法</code> ， <code>struct</code> ， <code>enum</code> ， <code>模块</code> ， <code>常量</code> ) 默认是私有的。<br />\n父级模块无法访问子模块中的私有条目<br />\n子模块里可以使用所有祖先模块中的条目</p>\n<h2 id=\"pub-关键字\"><a class=\"anchor\" href=\"#pub-关键字\">#</a> pub 关键字</h2>\n<p>使用 <code>pub</code>  关键字来将某些条目标记为公共的</p>\n<figure class=\"highlight rust\"><figcaption data-lang=\"rust\"><span>pub关键字 | lib.rs</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">mod</span> <span class=\"token module-declaration namespace\">front_of_house</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">pub</span> <span class=\"token keyword\">mod</span> <span class=\"token module-declaration namespace\">hosting</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">add_to_waitlist</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>   </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">eat_at_restaurant</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">crate</span><span class=\"token module-declaration namespace\"><span class=\"token punctuation\">::</span>front_of_house<span class=\"token punctuation\">::</span>hosting<span class=\"token punctuation\">::</span></span><span class=\"token function\">add_to_waitlist</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token namespace\">front_of_house<span class=\"token punctuation\">::</span>hosting<span class=\"token punctuation\">::</span></span><span class=\"token function\">add_to_waitlist</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"p29-73-路径-super-pub-struct-enum\"><a class=\"anchor\" href=\"#p29-73-路径-super-pub-struct-enum\">#</a> P29 7.3 路径 super、pub、struct、enum</h1>\n<h2 id=\"super-关键字\"><a class=\"anchor\" href=\"#super-关键字\">#</a> super 关键字</h2>\n<p><code>super</code> : 用来访问父级模块路径中的内容，类似文件系统中的。</p>\n<figure class=\"highlight rust\"><figcaption data-lang=\"rust\"><span>super关键字 | lib.rs</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">serve_order</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">mod</span>  <span class=\"token module-declaration namespace\">back_of_house</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">fix_incorrect_order</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">cook_order</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token module-declaration namespace\"><span class=\"token punctuation\">::</span>serve_order</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">cook_order</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"pub-struct\"><a class=\"anchor\" href=\"#pub-struct\">#</a> pub struct</h2>\n<ul>\n<li><code>pub</code>  放在 <code>struct</code>  前:\n<ul>\n<li><code>struct</code>  是公共的</li>\n<li><code>struct</code>  的字段默认是私有的</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight rust\"><figcaption data-lang=\"rust\"><span>pub struct | lib.rs</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">mod</span>  <span class=\"token module-declaration namespace\">back_of_house</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Breakfast</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 公有字段</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">pub</span> toast<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 私有字段，因为没有加 pub 关键字</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        seasonal_fruit<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><code>struct</code>  的字段需要单独设置 <code>pub</code>  来变成公有</li>\n</ul>\n<figure class=\"highlight rust\"><figcaption data-lang=\"rust\"><span>设置公有struct字段 | lib.rs</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">mod</span>  <span class=\"token module-declaration namespace\">back_of_house</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Breakfast</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">pub</span> toast<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        seasonal_fruit<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">impl</span> <span class=\"token class-name\">Breakfast</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">summer</span><span class=\"token punctuation\">(</span>toast<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Breakfast</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token class-name\">Breakfast</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                toast<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>toast<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                seasonal_fruit<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"peaches\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">eat_at_restaurant</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> meal <span class=\"token operator\">=</span> <span class=\"token namespace\">back_of_house<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Breakfast</span><span class=\"token punctuation\">::</span><span class=\"token function\">summer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Rye\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 可以通过编译，因为 toast 是公有的</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    meal<span class=\"token punctuation\">.</span>toast <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Wheat\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I‘d like &#123;&#125; toast please\"</span><span class=\"token punctuation\">,</span>meal<span class=\"token punctuation\">.</span>toast<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// 无法通过编译，因为 seasonal_fruit 是私有的</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    meal<span class=\"token punctuation\">.</span>seasonal_fruit <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"blueberries\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"pub-enum\"><a class=\"anchor\" href=\"#pub-enum\">#</a> pub enum</h2>\n<p><code>pub</code>  放在 <code>enum</code>  前:<br />\n-  <code>enum</code>  是公共的<br />\n -  <code>enum</code>  的变体也都是公共的</p>\n<figure class=\"highlight rust\"><figcaption data-lang=\"rust\"><span>pub enum | lib.rs</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">mod</span> <span class=\"token module-declaration namespace\">back_of_house</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">//enum 前面加上 pub 使其在外部可见，里面的变体则不需要加 pub</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 公共的枚举里面的变体也都是公共的</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">pub</span> <span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">Appetizer</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Soup</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">Salad</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "https://rainrem.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/anaconda/Anaconda%20Navigator%E6%89%93%E5%BC%80%E6%B2%A1%E5%8F%8D%E5%BA%94%E9%97%AE%E9%A2%98/",
            "url": "https://rainrem.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/anaconda/Anaconda%20Navigator%E6%89%93%E5%BC%80%E6%B2%A1%E5%8F%8D%E5%BA%94%E9%97%AE%E9%A2%98/",
            "title": "Anaconda Navigator打开没反应问题",
            "date_published": "2024-06-03T16:26:00.000Z",
            "content_html": "<blockquote>\n<p>关于 <code>Anaconda Navigator</code>  在第一次安装完成后或用过 <code>Anaconda Navigator</code>  图形化页面，但在后续使用中突然打不开程序的问题。</p>\n</blockquote>\n<h1 id=\"解决方法\"><a class=\"anchor\" href=\"#解决方法\">#</a> 解决方法</h1>\n<ol>\n<li>\n<p>打开 <code>Anaconda Navigator</code>  文件所在位置，找到一个名为 <code>Anaconda Prompt</code>  的程序右键➡️以管理员运行。<br />\n<img data-src=\"https://s2.loli.net/2024/06/04/DeCxu8cH4KlR5Gm.png\" alt=\"QQ20240604003448.png\" /></p>\n</li>\n<li>\n<p>升级 <code>navigator</code> ，执行 <code>conda update anaconda-navigator</code></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>升级navigator</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] $\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> C:<span class=\"token punctuation\">\\</span>Windows<span class=\"token punctuation\">\\</span>System3<span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span>conda update anaconda-navigator</pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"\"></td><td><pre>Channels:</pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"\"></td><td><pre> - defaults</pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"\"></td><td><pre> - conda-forge</pre></td></tr><tr><td data-num=\"5\"></td><td data-command=\"\"></td><td><pre>Platform: win-64</pre></td></tr><tr><td data-num=\"6\"></td><td data-command=\"\"></td><td><pre>Collecting package metadata <span class=\"token punctuation\">(</span>repodata.json<span class=\"token punctuation\">)</span>: <span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"7\"></td><td data-command=\"\"></td><td><pre>Solving environment: <span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"8\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\">## Package Plan ##</span></pre></td></tr><tr><td data-num=\"10\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td data-command=\"\"></td><td><pre>  environment location: D:<span class=\"token punctuation\">\\</span>Software<span class=\"token punctuation\">\\</span>Anaconda3</pre></td></tr><tr><td data-num=\"12\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td data-command=\"\"></td><td><pre>  added / updated specs:</pre></td></tr><tr><td data-num=\"14\"></td><td data-command=\"\"></td><td><pre>    - anaconda-navigator</pre></td></tr><tr><td data-num=\"15\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td data-command=\"\"></td><td><pre>The following packages will be downloaded:</pre></td></tr><tr><td data-num=\"18\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td data-command=\"\"></td><td><pre>    package                    <span class=\"token operator\">|</span>            build</pre></td></tr><tr><td data-num=\"20\"></td><td data-command=\"\"></td><td><pre>    ---------------------------<span class=\"token operator\">|</span>-----------------</pre></td></tr><tr><td data-num=\"21\"></td><td data-command=\"\"></td><td><pre>    anaconda-cloud-auth-0.5.1  <span class=\"token operator\">|</span>  py311haa95532_0          <span class=\"token number\">50</span> KB</pre></td></tr><tr><td data-num=\"22\"></td><td data-command=\"\"></td><td><pre>    anaconda-navigator-2.6.0   <span class=\"token operator\">|</span>  py311haa95532_0         <span class=\"token number\">5.7</span> MB</pre></td></tr><tr><td data-num=\"23\"></td><td data-command=\"\"></td><td><pre>    ------------------------------------------------------------</pre></td></tr><tr><td data-num=\"24\"></td><td data-command=\"\"></td><td><pre>                                           Total:         <span class=\"token number\">5.7</span> MB</pre></td></tr><tr><td data-num=\"25\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td data-command=\"\"></td><td><pre>The following packages will be UPDATED:</pre></td></tr><tr><td data-num=\"27\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td data-command=\"\"></td><td><pre>  anaconda-cloud-au~                  <span class=\"token number\">0.1</span>.4-py311haa95532_0 --<span class=\"token operator\">></span> <span class=\"token number\">0.5</span>.1-py311haa95532_0</pre></td></tr><tr><td data-num=\"29\"></td><td data-command=\"\"></td><td><pre>  anaconda-navigator                  <span class=\"token number\">2.5</span>.2-py311haa95532_0 --<span class=\"token operator\">></span> <span class=\"token number\">2.6</span>.0-py311haa95532_0</pre></td></tr><tr><td data-num=\"30\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td data-command=\"\"></td><td><pre>Proceed <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span>/n<span class=\"token punctuation\">)</span>? y</pre></td></tr><tr><td data-num=\"33\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td data-command=\"\"></td><td><pre>Downloading and Extracting Packages:</pre></td></tr><tr><td data-num=\"36\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td data-command=\"\"></td><td><pre>Preparing transaction: <span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"38\"></td><td data-command=\"\"></td><td><pre>Verifying transaction: <span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"39\"></td><td data-command=\"\"></td><td><pre>Executing transaction: <span class=\"token keyword\">done</span></pre></td></tr></table></figure></li>\n<li>\n<p>重置 <code>navigator</code> ，执行 <code>anaconda-navigator --reset</code></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>重置navigator</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] $\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> C:<span class=\"token punctuation\">\\</span>Windows<span class=\"token punctuation\">\\</span>System3<span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span>anaconda-navigator <span class=\"token parameter variable\">--reset</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"\"></td><td><pre>Anaconda Navigator configuration reset<span class=\"token punctuation\">..</span>.</pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td data-command=\"\"></td><td><pre>Anaconda Navigator configuration reset successful<span class=\"token operator\">!</span></pre></td></tr></table></figure></li>\n<li>\n<p>升级客户端，执行 <code>conda update anaconda-client</code></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>升级客户端</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] $\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> C:<span class=\"token punctuation\">\\</span>Windows<span class=\"token punctuation\">\\</span>System3<span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span>conda update anaconda-client</pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"\"></td><td><pre>Channels:</pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"\"></td><td><pre> - defaults</pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"\"></td><td><pre> - conda-forge</pre></td></tr><tr><td data-num=\"5\"></td><td data-command=\"\"></td><td><pre>Platform: win-64</pre></td></tr><tr><td data-num=\"6\"></td><td data-command=\"\"></td><td><pre>Collecting package metadata <span class=\"token punctuation\">(</span>repodata.json<span class=\"token punctuation\">)</span>: <span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"7\"></td><td data-command=\"\"></td><td><pre>Solving environment: <span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"8\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># All requested packages already installed.</span></pre></td></tr></table></figure></li>\n<li>\n<p>升级安装依赖包，执行  <code>conda update -f anaconda-client</code></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>升级安装依赖包</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] $\"></td><td><pre><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span> C:<span class=\"token punctuation\">\\</span>Windows<span class=\"token punctuation\">\\</span>System3<span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span>conda update <span class=\"token parameter variable\">-f</span> anaconda-client</pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"\"></td><td><pre>WARNING: The <span class=\"token parameter variable\">--force</span> flag will be removed <span class=\"token keyword\">in</span> a future conda release.</pre></td></tr><tr><td data-num=\"5\"></td><td data-command=\"\"></td><td><pre>         See <span class=\"token string\">'conda update --help'</span> <span class=\"token keyword\">for</span> details about the --force-reinstall</pre></td></tr><tr><td data-num=\"6\"></td><td data-command=\"\"></td><td><pre>         and <span class=\"token parameter variable\">--clobber</span> flags.</pre></td></tr><tr><td data-num=\"7\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td data-command=\"\"></td><td><pre>Channels:</pre></td></tr><tr><td data-num=\"10\"></td><td data-command=\"\"></td><td><pre> - defaults</pre></td></tr><tr><td data-num=\"11\"></td><td data-command=\"\"></td><td><pre> - conda-forge</pre></td></tr><tr><td data-num=\"12\"></td><td data-command=\"\"></td><td><pre>Platform: win-64</pre></td></tr><tr><td data-num=\"13\"></td><td data-command=\"\"></td><td><pre>Collecting package metadata <span class=\"token punctuation\">(</span>repodata.json<span class=\"token punctuation\">)</span>: <span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"14\"></td><td data-command=\"\"></td><td><pre>Solving environment: <span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"15\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\">## Package Plan ##</span></pre></td></tr><tr><td data-num=\"17\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td data-command=\"\"></td><td><pre>  environment location: D:<span class=\"token punctuation\">\\</span>Software<span class=\"token punctuation\">\\</span>Anaconda3</pre></td></tr><tr><td data-num=\"19\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td data-command=\"\"></td><td><pre>  added / updated specs:</pre></td></tr><tr><td data-num=\"21\"></td><td data-command=\"\"></td><td><pre>    - anaconda-client</pre></td></tr><tr><td data-num=\"22\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td data-command=\"\"></td><td><pre>Proceed <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span>/n<span class=\"token punctuation\">)</span>? y</pre></td></tr><tr><td data-num=\"26\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td data-command=\"\"></td><td><pre>Downloading and Extracting Packages:</pre></td></tr><tr><td data-num=\"29\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td data-command=\"\"></td><td><pre>Preparing transaction: <span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"31\"></td><td data-command=\"\"></td><td><pre>Verifying transaction: <span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"32\"></td><td data-command=\"\"></td><td><pre>Executing transaction: <span class=\"token keyword\">done</span></pre></td></tr></table></figure></li>\n<li>\n<p>这样就可以重新启动 <code>Anaconda Navigator</code>  图形化页面了，到此问题解决。</p>\n<p><img data-src=\"https://s2.loli.net/2024/06/04/GVR5paiTYLMKDXP.png\" alt=\"QQ20240604004120.png\" /></p>\n</li>\n</ol>\n",
            "tags": [
                "计算机科学",
                "Python",
                "Anaconda",
                "计算机科学",
                "Python",
                "Anaconda",
                "图形化页面"
            ]
        },
        {
            "id": "https://rainrem.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/anaconda/Anaconda%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/",
            "url": "https://rainrem.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/anaconda/Anaconda%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/",
            "title": "Anaconda安装与环境配置",
            "date_published": "2024-06-03T13:48:00.000Z",
            "content_html": "<h1 id=\"anaconda介绍\"><a class=\"anchor\" href=\"#anaconda介绍\">#</a> Anaconda 介绍</h1>\n<blockquote>\n<p><code>Anaconda</code>  是一个功能强大的数据科学平台，其中 <code>Anaconda</code>  包含了像 <code>conda</code> 、 <code>python</code> 、 <code>numpy</code> 、 <code>pandas</code>  等强大的数据科学工具包， <code>conda</code>  可以实现包的安装与版本管理，最重要的一点是使用 <code>conda</code>  可以避免多个项目直接的环境管理，避免破坏环境的情况，因此安装 <code>Anaconda</code>  有以下几点好处：</p>\n</blockquote>\n<ol>\n<li><code>conda</code> : <code>conda</code>  是一个环境管理器，其功能依靠 <code>conda</code>  包来实现，该环境管理器与 <code>pip</code>  类似，但是它不可以通过使用 <code>pip</code>  来安装 <code>conda</code>  包来实现 <code>conda</code>  环境管理器效果， <code>conda</code>  包的实现离不开 <code>conda</code>  环境管理器。</li>\n<li>大量工具包: <code>Anaconda</code>  会自动安装一个基本的 <code>python</code>  环境，该 <code>python</code>  版本与 <code>Anaconda</code>  版本有关，在该 <code>python</code>  环境下已经安装好了一些工具包，这对于科学分析工作者是一大便利，这样就不用再使用 <code>pip</code>  去一个个安对应的包了。</li>\n<li>多版本切换：使用 <code>Anaconda</code>  可以创建使用和管理多个不同的 <code>python</code>  版本，比如想要新建一个框架或项目再或者使用 <code>Anaconda</code>  装的不同版本的 <code>python</code> ， <code>Anaconda</code>  就可以实现多个 <code>python</code>  版本的管理。</li>\n<li>跨平台移植：由于 <code>conda</code>  支持跨平台安装和管理软件包，因此可以方便地将一个环境从一台计算机转移到另一台计算机，而不需要手动安装软件包和依赖项。</li>\n</ol>\n<h1 id=\"anaconda下载\"><a class=\"anchor\" href=\"#anaconda下载\">#</a> Anaconda 下载</h1>\n<p><code>Anaconda</code>  的下载可以选择官网或者镜像网站，<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYW5hY29uZGEuY29tL2Rvd25sb2Fk\">Anaconda 官网</span>。<br />\n<img data-src=\"https://s21.ax1x.com/2024/06/03/pkJQmRI.png\" alt=\"pkJQmRI.png\" /><br />\n<img data-src=\"https://s21.ax1x.com/2024/06/03/pkJQQL8.png\" alt=\"pkJQQL8.png\" /></p>\n<h1 id=\"anaconda安装\"><a class=\"anchor\" href=\"#anaconda安装\">#</a> Anaconda 安装</h1>\n<p><img data-src=\"https://s21.ax1x.com/2024/06/03/pkJQaQ0.png\" alt=\"pkJQaQ0.png\" /><br />\n<img data-src=\"https://s21.ax1x.com/2024/06/03/pkJQyFJ.png\" alt=\"pkJQyFJ.png\" /></p>\n<blockquote>\n<p>注意这个文件夹不要使用中文或者空格、特殊字符，选择对应安装目录，点 <code>Next</code> 。</p>\n</blockquote>\n<p><img data-src=\"https://s21.ax1x.com/2024/06/03/pkJQ2S1.png\" alt=\"pkJQ2S1.png\" /></p>\n<blockquote>\n<p>默认就行，直接点击 <code>Install</code>  进行安装操作，等待安装完成即可。</p>\n</blockquote>\n<p><img data-src=\"https://s21.ax1x.com/2024/06/03/pkJQ4eO.png\" alt=\"pkJQ4eO.png\" /></p>\n<blockquote>\n<p>弹出下面这个窗口后就代表安装完成了。</p>\n</blockquote>\n<p><img data-src=\"https://s21.ax1x.com/2024/06/03/pkJQLlt.png\" alt=\"pkJQLlt.png\" /></p>\n<h1 id=\"anaconda环境配置\"><a class=\"anchor\" href=\"#anaconda环境配置\">#</a> Anaconda 环境配置</h1>\n<blockquote>\n<p>找到 <code>此电脑</code> ➡️ <code>属性</code> ➡️ <code>高级系统设置</code> ➡️ <code>环境变量</code> ➡️ <code>path</code> ➡️ <code>编辑</code> ➡️ <code>新建</code> ，也可以直接按 <code>win</code>  键，搜索 <code>环境变量</code> 。</p>\n</blockquote>\n<p><img data-src=\"https://s21.ax1x.com/2024/06/03/pkJle7F.png\" alt=\"pkJle7F.png\" /></p>\n<p><img data-src=\"https://s2.loli.net/2024/06/03/U1g7Jd6xw3vtPNL.png\" alt=\"pkJle7s.png\" /></p>\n<p><img data-src=\"https://s2.loli.net/2024/06/03/jhqt5uNbYLW1y7p.png\" alt=\"QQ截图20240603231501.png\" /></p>\n<blockquote>\n<p>根据自己实际安装目录进行改动，比如装在 <code>C</code>  盘根目录，就把所有 <code>D</code>  改成 <code>C</code>  就行。</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>D:<span class=\"token punctuation\">\\</span>Software<span class=\"token punctuation\">\\</span>Anaconda3</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>D:<span class=\"token punctuation\">\\</span>Software<span class=\"token punctuation\">\\</span>Anaconda3<span class=\"token punctuation\">\\</span>Scripts</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>D:<span class=\"token punctuation\">\\</span>Software<span class=\"token punctuation\">\\</span>Anaconda3<span class=\"token punctuation\">\\</span>Library<span class=\"token punctuation\">\\</span>mingw-w64<span class=\"token punctuation\">\\</span>bin</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>D:<span class=\"token punctuation\">\\</span>Software<span class=\"token punctuation\">\\</span>Anaconda3<span class=\"token punctuation\">\\</span>Library<span class=\"token punctuation\">\\</span>usr<span class=\"token punctuation\">\\</span>bin</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>D:<span class=\"token punctuation\">\\</span>Software<span class=\"token punctuation\">\\</span>Anaconda3<span class=\"token punctuation\">\\</span>Library<span class=\"token punctuation\">\\</span>bin</pre></td></tr></table></figure><blockquote>\n<p><code>win+r</code>  输入 <code>cmd</code>  打开终端面板，输入 <code>python</code>  查看是否有 <code>python</code>  环境。</p>\n</blockquote>\n<p><img data-src=\"https://s2.loli.net/2024/06/03/sq68DzoTlFBwAx9.png\" alt=\"QQ截图20240603232750.png\" /></p>\n<blockquote>\n<p>继续在 <code>cmd</code>  中输入  <code>conda --version</code>  查看当前的 <code>conda</code>  版本。</p>\n</blockquote>\n<p><img data-src=\"https://s2.loli.net/2024/06/03/RfgFOalDwWY8qAj.png\" alt=\"QQ截图20240603233038.png\" /></p>\n<blockquote>\n<p>输入 <code>conda info</code>  可以查询 <code>conda</code>  详细信息，请看下图。</p>\n</blockquote>\n<p><img data-src=\"https://s2.loli.net/2024/06/03/V4jDxGbiRkCaXYN.png\" alt=\"QQ截图20240603233224.png\" /></p>\n<blockquote>\n<p>如果提示 <code>conda</code>  不是内部或外部命令，那么一般是 <code>Anaconda</code>  的环境变量没有配置好。</p>\n</blockquote>\n<p><img data-src=\"https://s2.loli.net/2024/06/03/lwPLTQ6JHyvra9R.png\" alt=\"QQ截图20240603235012.png\" /><br />\n<img data-src=\"https://s2.loli.net/2024/06/03/HhDFUcrjvyQ5dM6.png\" alt=\"QQ截图20240603235052.png\" /></p>\n<blockquote>\n<p>这样 <code>Anaconda</code>  就安装完成了，可以通过使用 <code>Anaconda Navigator</code>  的图形化页面来操作。</p>\n</blockquote>\n<h1 id=\"anaconda常用命令\"><a class=\"anchor\" href=\"#anaconda常用命令\">#</a> Anaconda 常用命令</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>conda常用命令</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 创建虚拟环境，环境名为 myEnv</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>conda create <span class=\"token parameter variable\">-n</span> myEnv <span class=\"token assign-left variable\">python</span><span class=\"token operator\">=</span><span class=\"token number\">3.8</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 激活 / 进入 myEnv 环境</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>conda activate myEnv </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 列出 / 查看当前环境的文件</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>conda list </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 安装指定的包</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>conda <span class=\"token function\">install</span> numpy pandas matplotlib </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 卸载指定的包</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>conda uninstall torch</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 查看 conda 版本</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>conda <span class=\"token parameter variable\">--version</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 更新 anaconda 所有组件</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>conda upgrade <span class=\"token parameter variable\">--all</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># 导出当前环境的依赖信息</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>conda <span class=\"token function\">env</span> <span class=\"token builtin class-name\">export</span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># 导出依赖信息到 yaml 文件</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>conda <span class=\"token function\">env</span> <span class=\"token builtin class-name\">export</span> <span class=\"token operator\">></span> myEnv.yaml </pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># 基于 yaml 文件创建环境</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>conda <span class=\"token function\">env</span> create <span class=\"token parameter variable\">-f</span> myEnv.yaml </pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\"># 列出当前机器的环境</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>conda <span class=\"token function\">env</span> list </pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\"># 移除特定环境</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>conda <span class=\"token function\">env</span> remove <span class=\"token parameter variable\">-n</span> ENV_NAME </pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\"># 切换虚拟环境</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>conda info <span class=\"token parameter variable\">-e</span>  <span class=\"token operator\">|</span>  conda-env list</pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\"># 关闭当前活动的 conda 环境</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>conda deactivate ChatTTS</pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\"># 卸载一个或多个已安装的软件包</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>conda remove numpy pandas matplotlib</pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "Python",
                "Anaconda",
                "计算机科学",
                "Python",
                "Anaconda"
            ]
        },
        {
            "id": "https://rainrem.top/%E4%BC%81%E4%B8%9A%E7%AE%A1%E7%90%86%E4%B8%8E%E8%90%A5%E9%94%80/%E7%A7%81%E5%9F%9F%E6%B5%81%E9%87%8F%E8%BF%90%E8%90%A5/",
            "url": "https://rainrem.top/%E4%BC%81%E4%B8%9A%E7%AE%A1%E7%90%86%E4%B8%8E%E8%90%A5%E9%94%80/%E7%A7%81%E5%9F%9F%E6%B5%81%E9%87%8F%E8%BF%90%E8%90%A5/",
            "title": "《私域流量运营》",
            "date_published": "2024-04-14T18:35:40.000Z",
            "content_html": "<h1 id=\"企业需要打造自己的私域流量池\"><a class=\"anchor\" href=\"#企业需要打造自己的私域流量池\">#</a> 企业需要打造自己的私域流量池</h1>\n<h2 id=\"什么是私域流量\"><a class=\"anchor\" href=\"#什么是私域流量\">#</a> 什么是私域流量？</h2>\n<blockquote>\n<p>私域流量是一种新兴的营销策略，主要是指企业通过微信、QQ 等社交平台，建立属于自己的私人流量池，实现对客户的精准管理和运营。在这个流量池中，企业可以直接与用户进行互动，更好地了解用户需求，提供个性化的服务。</p>\n</blockquote>\n<h2 id=\"私域流量的重要性是什么\"><a class=\"anchor\" href=\"#私域流量的重要性是什么\">#</a> 私域流量的重要性是什么？</h2>\n<blockquote>\n<p>随着市场竞争的加剧，获取和保留客户变得越来越困难。私域流量通过精准的用户画像，更好地满足用户需求，提高用户粘性，从而提高转化率，减少营销成本。此外，私域流量也可以帮助企业建立品牌忠诚度，提升用户的复购率。</p>\n</blockquote>\n<h2 id=\"如何有效的运营私域流量\"><a class=\"anchor\" href=\"#如何有效的运营私域流量\">#</a> 如何有效的运营私域流量？</h2>\n<blockquote>\n<p>要有效运营私域流量，首先需要建立并且维护好自己的私域流量池。这包括选择合适的社交平台，创建有吸引力的内容，建立用户互动机制等。其次，要通过数据分析，了解用户需求，提供个性化的服务。这可能涉及到用户行为分析，用户偏好调查等。最后，要定期进行营销活动，激励用户参与，提高用户活跃度。这可以通过优惠券，折扣，积分奖励等方式实现。</p>\n</blockquote>\n<h2 id=\"私域流量运营的常见策略有哪些\"><a class=\"anchor\" href=\"#私域流量运营的常见策略有哪些\">#</a> 私域流量运营的常见策略有哪些？</h2>\n<blockquote>\n<p>常见的私域流量运营策略包括：内容营销、社群营销、KOL 营销、会员营销等。内容营销主要是通过创建有价值的内容，吸引并留住用户；社群营销则是通过建立社区，促进用户互动，增强用户的归属感；KOL 营销是通过与影响者的合作，扩大品牌影响力；会员营销则是通过会员制度，提供会员专享的优惠和服务，提高用户粘性。这些策略的运用，都需要根据企业的实际情况和用户需求，进行灵活的调整和优化。</p>\n</blockquote>\n<h2 id=\"私域流量运营的挑战和解决方案是什么\"><a class=\"anchor\" href=\"#私域流量运营的挑战和解决方案是什么\">#</a> 私域流量运营的挑战和解决方案是什么？</h2>\n<blockquote>\n<p>对于私域流量运营来说，也存在一些挑战。例如，如何持续产生有吸引力的内容，如何保持用户的活跃度，如何提高转化率等。针对这些问题，企业可以尝试以下解决方案：一是定期进行用户调研，了解用户的最新需求，以生成相关的内容；二是建立用户激励机制，如积分系统，奖励活跃的用户；三是利用数据分析，优化营销策略，提高转化率。</p>\n</blockquote>\n<h2 id=\"私域流量的未来发展趋势是什么\"><a class=\"anchor\" href=\"#私域流量的未来发展趋势是什么\">#</a> 私域流量的未来发展趋势是什么？</h2>\n<blockquote>\n<p>随着社交平台的不断发展和用户行为的改变，私域流量的运营方式也会不断发展和变化。未来，我们预期私域流量将更加注重用户体验，更加精准的用户画像，以及更加个性化的营销策略。同时，随着大数据和人工智能的应用，私域流量的运营也将更加智能化和自动化。</p>\n</blockquote>\n",
            "tags": [
                "企业管理",
                "商业模式",
                "市场营销",
                "企业管理",
                "商业模式",
                "市场营销"
            ]
        },
        {
            "id": "https://rainrem.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/kali/kali/",
            "url": "https://rainrem.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/kali/kali/",
            "title": "Kali基础配置",
            "date_published": "2024-03-06T16:51:00.000Z",
            "content_html": "<h1 id=\"kali基本设置\"><a class=\"anchor\" href=\"#kali基本设置\">#</a> Kali 基本设置</h1>\n<blockquote>\n<p>首先将 <code>kali</code> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zpbmd1ZS9hcnRpY2xlL2RldGFpbHMvMTI3NTU5MzUzIzp+OnRleHQ9JUU0JUJBJThDJUUzJTgwJTgxJUU4JTk5JTlBJUU2JThCJTlGJUU2JTlDJUJBJUU3JTlBJTg0JUU1JUFFJTg5JUU4JUEzJTg1JTIwMSVFMyU4MCU4MSVFNiU4OSU5MyVFNSVCQyU4MHZtd2FyZSVFOSVBNiU5NiVFOSVBMSVCNSVFRiVCQyU4QyVFNSU4OCU5QiVFNSVCQiVCQSVFNiU5NiVCMCVFNyU5QSU4NCVFOCU5OSU5QSVFNiU4QiU5RiVFNiU5QyVCQSUyMDIlRTMlODAlODElRTklODAlODklRTYlOEIlQTklRTIlODAlOUQlRTglODclQUElRTUlQUUlOUElRTQlQjklODklRTIlODAlOUMlMjAlRTklODAlODklRTYlOEIlQTklMjAlRTIlODAlOUQlRTQlQjglOEIlRTQlQjglODAlRTYlQUQlQTUlRTIlODAlOUMlMjAzJUUzJTgwJTgxJUU5JTgwJTg5JUU2JThCJUE5JUUyJTgwJTlDJUU0JUI4JThCJUU0JUI4JTgwJUU2JUFEJUE1JUUyJTgwJTlELDQlRTMlODAlODElRTklODAlODklRTYlOEIlQTklMjAlRTIlODAlOUMlRTUlQUUlODklRTglQTMlODUlRTclQTglOEIlRTUlQkElOEYlRTUlODUlODklRTclOUIlOTglRTYlOTglQTAlRTUlODMlOEYlRTYlOTYlODclRTQlQkIlQjYlRTIlODAlOUQlMjAlRTklODAlOUElRTglQkYlODclRTYlQjUlOEYlRTglQTclODglRTclOUIlQUUlRTUlQkQlOTUlRTklODAlODklRTYlOEIlQTklRTUlODglOUElRTUlODglOUElRTQlQjglOEIlRTglQkQlQkQlRTclOUElODQlRTklOTUlOUMlRTUlODMlOEYlRTYlOTYlODclRTQlQkIlQjYlRUYlQkMlOEMlRTclODQlQjYlRTUlOTAlOEUlRTIlODAlOUQlRTQlQjglOEIlRTQlQjglODAlRTYlQUQlQTUlRTIlODAlOUMlMjA1JUUzJTgwJTgxJUU5JTgwJTg5JUU2JThCJUE5JUUyJTgwJTlDTGludXglRTIlODAlOUQlRUYlQkMlOEMlRTclODklODglRTYlOUMlQUMlRTklOUElOEYlRTYlODQlOEYlRUYlQkMlOEMlRTclODQlQjYlRTUlOTAlOEUlRTclODIlQjklRTUlODclQkIlMjAlRTIlODAlOUMlRTQlQjglOEIlRTQlQjglODAlRTYlQUQlQTUlRTIlODAlOUQlMjA2JUUzJTgwJTgxJUU3JUJCJTk5JUU4JTk5JTlBJUU2JThCJTlGJUU2JTlDJUJBJUU4JUI1JUI3JUU0JUI4JUFBJUU1JTkwJThEJUU1JUFEJTk3JUVGJUJDJTg4JUU1JUE2JTgya2FsaTIwMjMlRUYlQkMlODklRUYlQkMlOEMlRTclODIlQjklRTUlODclQkIlRTIlODAlOUMlRTYlQjUlOEYlRTglQTclODglRTIlODAlOUQlRTklODAlODklRTYlOEIlQTklRTQlQjglODAlRTQlQjglQUElRTYlOTYlODclRTQlQkIlQjYlRTUlQTQlQjklRTYlOUQlQTUlRTUlQUUlODklRTglQTMlODVrYWxpJUVGJUJDJTg4JUU0JUJEJThEJUU3JUJEJUFFJUU0JUI4JUJBJUU4JTg3JUFBJUU1JUFFJTlBJUU0JUI5JTg5JUVGJUJDJThDJUU1JUIwJUJEJUU5JTg3JThGJUU0JUI4JThEJUU4JUE2JTgxJUU1JUFFJTg5JUU4JUEzJTg1JUU1JTg4JUIwYyVFNyU5QiU5OCVFRiVCQyU4OSVFRiVCQyU4QyVFNyU4MiVCOSVFNSU4NyVCQiVFMiU4MCU5RCVFNCVCOCU4QiVFNCVCOCU4MCVFNiVBRCVBNSVFMiU4MCU5Qw==\"> 安装</span>完成后的基础操作如下：</p>\n</blockquote>\n<h2 id=\"更换源\"><a class=\"anchor\" href=\"#更换源\">#</a> 更换源</h2>\n<ol>\n<li><code>sudo su root</code> ：使用管理员权限并输入密码。</li>\n<li><code>vim /ect/apt/sources.list</code> ：更换源， <code>i</code>  代表插入，使用键盘 <code>exit</code>  退出然后输入 <code>:wq</code>  关闭编辑器。<details class=\"danger\"><summary>Kali源</summary><div>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>kali官方源</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># kali 官方源 </span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root] $\"></td><td><pre>deb http://http.kali.org/ moto main non-free contrib</pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"[root] $\"></td><td><pre>deb-src http://http.kali.org/ moto main non-free contrib</pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"[root] $\"></td><td><pre>deb http://security.kali.org/ moto/updates main contrib non-free</pre></td></tr><tr><td data-num=\"5\"></td><td data-command=\"[root] $\"></td><td><pre>deb-src http://security.kali.org/ moto/updates main contrib non-free</pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>阿里云镜像源</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># 阿里云镜像源</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root] $\"></td><td><pre>deb http://mirrors.aliyun.com/kali kali-rolling main non-free contrib</pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"[root] $\"></td><td><pre>deb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib</pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>中科大kali源</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># 中科大 kali 源 </span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root] $\"></td><td><pre>deb http://mirrors.ustc.edu.cn/kali kali main non-free contrib</pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"[root] $\"></td><td><pre>deb-src http://mirrors.ustc.edu.cn/kali kali main non-free contrib</pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"[root] $\"></td><td><pre>deb http://mirrors.ustc.edu.cn/kali-security kali/updates main contrib non-free</pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>阿里云kali源</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># 阿里云 kali 源</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root] $\"></td><td><pre>deb http://mirrors.aliyun.com/kali kali main non-free contrib</pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"[root] $\"></td><td><pre>deb-src http://mirrors.aliyun.com/kali kali main non-free contrib</pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"[root] $\"></td><td><pre>deb http://mirrors.aliyun.com/kali-security kali/updates main contrib non-free</pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>清华大学</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># 清华大学</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root] $\"></td><td><pre>deb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free</pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"[root] $\"></td><td><pre>deb-src https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free</pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>浙江大学</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># 浙江大学</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root] $\"></td><td><pre>deb http://mirrors.zju.edu.cn/kali kali-rolling main contrib non-free</pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"[root] $\"></td><td><pre>deb-src http://mirrors.zju.edu.cn/kali kali-rolling main contrib non-free</pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>东软大学</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># 东软大学</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root] $\"></td><td><pre>deb http://mirrors.neusoft.edu.cn/kali kali-rolling/main non-free contrib</pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"[root] $\"></td><td><pre>deb-src http://mirrors.neusoft.edu.cn/kali kali-rolling/main non-free contrib</pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>中科大</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># 中科大</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root] $\"></td><td><pre>deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"[root] $\"></td><td><pre>deb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</pre></td></tr></table></figure></div></details>\n</li>\n<li><code>apt-get update</code> ：更新源。</li>\n</ol>\n<h2 id=\"设置中文\"><a class=\"anchor\" href=\"#设置中文\">#</a> 设置中文</h2>\n<ol>\n<li><code>apt install ttf-wqy-zenhei</code> ：安装中文字体</li>\n<li><code>dpkg-reconfigure locales</code> ：修改为中文语言，使用空格选择 <code>*</code>  代表勾选，找到 <code>zh_CN.UTF-8</code>  进行勾选其它的一律取消，按 <code>enter</code>  后再选择 <code>zh_CN.UTF-8</code>  进行回车，并重启即可，重启指令为 <code>roboot</code> ，重启后保留旧的名称。</li>\n<li><code>reboot</code> ：重启。</li>\n</ol>\n<h2 id=\"开启ssh\"><a class=\"anchor\" href=\"#开启ssh\">#</a> 开启 SSH</h2>\n<ol>\n<li><code>ifconfig</code> ：查看 <code>ip</code>  地址。</li>\n<li><code>netstat -all</code> ：查看所有正在运行的端口。</li>\n<li><code>vim /etc/ssh/sshd_config</code> ：修改配置，把 <code>PermitRootLogin prohibit-password</code> 、 <code>PubkeyAuthentication yes</code> 、 <code>PasswordAuthentication yes</code>  前面的 <code>#</code> 去掉并保存，使用键盘 <code>exit</code>  退出并输入 <code>:wq</code>  关闭编辑器。</li>\n<li><code>service ssh start</code> ：启动 <code>SSH</code>  服务</li>\n<li><code>service ssh status</code> ：查看启动状态。</li>\n<li><code>update-rc.d ssh enable</code> ：开启自启动 <code>SSH</code>  服务。</li>\n<li><code>sysmtectl restart ssh</code> ：重启 <code>SSH</code>  服务。</li>\n</ol>\n<h2 id=\"安装中文输入法\"><a class=\"anchor\" href=\"#安装中文输入法\">#</a> 安装中文输入法</h2>\n<ol>\n<li><code>apt install fcitx</code> : 小企鹅输入法。</li>\n<li><code>apt-get install fcitx-googlepinyin</code> : 安装谷歌中文输入法。</li>\n</ol>\n",
            "tags": [
                "计算机科学",
                "网络安全",
                "渗透测试",
                "网络安全",
                "渗透测试"
            ]
        },
        {
            "id": "https://rainrem.top/%E4%BC%81%E4%B8%9A%E7%AE%A1%E7%90%86%E4%B8%8E%E8%90%A5%E9%94%80/%E5%85%A8%E6%B0%91%E8%90%A5%E9%94%80/",
            "url": "https://rainrem.top/%E4%BC%81%E4%B8%9A%E7%AE%A1%E7%90%86%E4%B8%8E%E8%90%A5%E9%94%80/%E5%85%A8%E6%B0%91%E8%90%A5%E9%94%80/",
            "title": "《全民营销》",
            "date_published": "2024-03-02T12:42:00.000Z",
            "content_html": "<blockquote>\n<p>智能互联网时代企业营销的进化与突破，以坚持人格化营销为基本原则，以坚持企业超级大 IP 矩阵网为基本策略。</p>\n</blockquote>\n<h1 id=\"序章\"><a class=\"anchor\" href=\"#序章\">#</a> 序章</h1>\n<blockquote>\n<p>未来提前到来，疫情给互联网带来的十大变革如下：</p>\n</blockquote>\n<ol>\n<li>5G 技术的大规模商用加速推进。</li>\n<li>人工智能、区块链、云计算、大数据、边缘计算、物联网数字技术 (简称： <code>ABCDEI</code>  数字技术) 进入大规模应用阶段。</li>\n<li>“数字鸿沟” 有望加速填平。</li>\n<li>网络视频步入发展的黄金时期。</li>\n<li>电子商务将迎来整体升级换代。</li>\n<li>远程协同办公软件迎来新机遇。</li>\n<li>医疗健康网络应用发展红火。</li>\n<li>网络媒体格局变革将进一步深化。</li>\n<li>互联网将进一步推动政府工作。</li>\n<li>数字技术将创新社会治理方式。</li>\n</ol>\n<h1 id=\"竞争战略催生全民营销\"><a class=\"anchor\" href=\"#竞争战略催生全民营销\">#</a> 竞争战略催生全民营销</h1>\n<ol>\n<li>优胜劣汰，适者生存。</li>\n<li>竞争战略是全球所有经济体的生产法则。</li>\n<li>智能互联网新时代的九大竞争态势。\n<ol>\n<li>人工智能 <code>PK</code>  人类技能。</li>\n<li>线上平台 <code>PK</code>  线下平台。</li>\n<li>主动优选 <code>PK</code>  被动选择。</li>\n<li>深度内容 <code>PK</code>  广而告知。</li>\n<li>全名网红 <code>PK</code>  大牌明星。</li>\n<li>万物皆媒 <code>PK</code>  传统媒体。</li>\n<li>娱乐购物 <code>PK</code>  计划购买。</li>\n<li>知民品牌 <code>PK</code>  知名品牌。</li>\n<li>全民营销 <code>PK</code>  全员营销。</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"企业应战新思维的人格化营销\"><a class=\"anchor\" href=\"#企业应战新思维的人格化营销\">#</a> 企业应战新思维的人格化营销</h1>\n<ul>\n<li>重构以后的新人货场模式有三个特点：\n<ul>\n<li>一是以我 (人格) 为中心展开。</li>\n<li>二是关注初心原点 (开展人格化营销)。</li>\n<li>三是三大要素的对应关系发生改变，也就是谁喜欢我 (顾客)，我的价值是什么 (货)，我适合在哪里销售 (场)。</li>\n<li><img data-src=\"https://s11.ax1x.com/2024/03/02/pFB9n4e.png\" alt=\"pFB9n4e.png\" /></li>\n</ul>\n</li>\n<li>人性的根本需求形成了 “人格化营销” 的基础。</li>\n<li>人人要有发言权、人人要有参与感、人人追求存在感、人人追求优越感。</li>\n<li>这是人的本性，这是全民营销以智能互联网营销战略为中心。</li>\n<li>以坚持人格化营销为基本原则。</li>\n<li>人格化营销的核心是品牌人格化，人格化营销的标签是 IP。</li>\n<li>什么是人格化营销？\n<ul>\n<li>直白讲述为：赋予产品人的性格和情感特征。</li>\n<li>形成品牌特有的价值：态度、格调、从而进行沟通。</li>\n</ul>\n</li>\n<li>品牌人格化就是赋予品牌人的情感，与人共鸣与人拉近关系，进而更有效地销售。</li>\n<li><img data-src=\"https://s11.ax1x.com/2024/03/02/pFBC6sI.jpg\" alt=\"pFBC6sI.jpg\" /></li>\n<li>创始人是企业 IP 重要的个性基础。</li>\n<li>全民营销的四大原则如下：\n<ol>\n<li>以智能互联网营销战略为中心。</li>\n<li>坚持人格营销。</li>\n<li>坚持以企业超级大 IP 矩阵网为基本策略。</li>\n<li>团结和影响企业内外网民达成新时期的营销战略。</li>\n</ol>\n</li>\n</ul>\n<h1 id=\"矩阵网的高度搭建\"><a class=\"anchor\" href=\"#矩阵网的高度搭建\">#</a> 矩阵网的高度搭建</h1>\n<ol>\n<li>纵向矩阵。</li>\n<li>横向矩阵。</li>\n<li>横纵联合矩阵。</li>\n</ol>\n<h1 id=\"全民营销平台算法x视频内容x社交裂变\"><a class=\"anchor\" href=\"#全民营销平台算法x视频内容x社交裂变\">#</a> 全民营销 = 平台算法 x 视频内容 x 社交裂变</h1>\n<ul>\n<li>找到自己的绝对优势，才会被关注。</li>\n<li>可以有很多方向，关键在于我们要主动创造和发现。</li>\n<li>一个好名字能带来 <code>500</code>  倍的流量增长。</li>\n<li>从本质上来讲营销不是卖东西，而是卖客户心中的认同与感动。</li>\n<li>让更多人相信才是全民营销的精髓。</li>\n<li>标志 <code>=</code>  图腾。</li>\n<li>人格定位的价值感、独特感才会实际落地。</li>\n<li>六句箴言：\n<ol>\n<li>打击对手。</li>\n<li>区隔同类。</li>\n<li>引发关注。</li>\n<li>增进感情。</li>\n<li>关联产品。</li>\n<li>专家背书。</li>\n</ol>\n</li>\n<li>好故事的脚本 <code>=</code>  秒引发关注 <code>x</code>  秒反转 <code>x</code>  秒涨粉。</li>\n</ul>\n<h1 id=\"为什么要做私域流量\"><a class=\"anchor\" href=\"#为什么要做私域流量\">#</a> 为什么要做私域流量</h1>\n<ol>\n<li>能变现。</li>\n<li>抗风险。</li>\n</ol>\n",
            "tags": [
                "企业管理",
                "商业模式",
                "市场营销",
                "企业管理",
                "商业模式",
                "市场营销"
            ]
        },
        {
            "id": "https://rainrem.top/%E4%BC%81%E4%B8%9A%E7%AE%A1%E7%90%86%E4%B8%8E%E8%90%A5%E9%94%80/%E7%90%86%E8%A7%A3%E5%92%8C%E8%BF%90%E8%90%A5%E5%95%86%E4%B8%9A%E6%A8%A1%E5%BC%8F/",
            "url": "https://rainrem.top/%E4%BC%81%E4%B8%9A%E7%AE%A1%E7%90%86%E4%B8%8E%E8%90%A5%E9%94%80/%E7%90%86%E8%A7%A3%E5%92%8C%E8%BF%90%E8%90%A5%E5%95%86%E4%B8%9A%E6%A8%A1%E5%BC%8F/",
            "title": "《理解和运营商业模式》",
            "date_published": "2024-02-25T12:16:00.000Z",
            "content_html": "<h1 id=\"商业模式\"><a class=\"anchor\" href=\"#商业模式\">#</a> 商业模式</h1>\n<ol>\n<li>客户需求。</li>\n<li>客户导向。</li>\n</ol>\n<blockquote>\n<p>从源头上强调把握客户需求至关重要。</p>\n</blockquote>\n<h1 id=\"什么是商业模式\"><a class=\"anchor\" href=\"#什么是商业模式\">#</a> 什么是商业模式？</h1>\n<ol>\n<li>在资源使用方面，强调利用一切可以利用的资源，而不见得只是利用所属所控的资源。</li>\n<li>在商业目的实现上，强调实现独特的功能而不是盈利。</li>\n<li>在盈利方式上并不排斥直接盈利，但更多的是间接盈利。</li>\n</ol>\n<h1 id=\"商业模式的特点\"><a class=\"anchor\" href=\"#商业模式的特点\">#</a> 商业模式的特点</h1>\n<ol>\n<li>利用一切可以利用的资源。\n<ul>\n<li>只有利用好一切可以利用的资源才可以让盈利最大化。</li>\n</ul>\n</li>\n<li>重要的是实现功能。\n<ul>\n<li>商业模式最核心的就是你为客户实现了什么样的独特价值。</li>\n</ul>\n</li>\n<li>盈利方式更多的是间接化和多元化。\n<ul>\n<li>在商业模式经营思维下直接盈利，但更多的是间接盈利和多元化盈利。</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"商业模式的定义\"><a class=\"anchor\" href=\"#商业模式的定义\">#</a> 商业模式的定义</h1>\n<ol>\n<li>在资源使用上强调利用一切可以利用的资源，而不是强调利用自己所控的资源。</li>\n<li>更好地为使用者实现某种功能或某种服务。</li>\n<li>在商业目的实现上更多的是强调多元化盈利方式。</li>\n</ol>\n<h1 id=\"不同创新程度的商业模式\"><a class=\"anchor\" href=\"#不同创新程度的商业模式\">#</a> 不同创新程度的商业模式</h1>\n<ul>\n<li>第一种状态是企业只对内部的生产要素进行调整。</li>\n<li>第二种状态是企业结合外部资源客户情况一起创新，更加深入地解决客户需求。</li>\n<li>第三种状态是创新程度最为强烈就是解决一个市场空白点或创造了一个更为新颖的品类。</li>\n<li>第四种状态是前瞻性地看市场发现市场空白点需求，根据需求创造一个符合需求的产品或服务。</li>\n</ul>\n<h1 id=\"客户消费的四个阶段\"><a class=\"anchor\" href=\"#客户消费的四个阶段\">#</a> 客户消费的四个阶段</h1>\n<ol>\n<li>定位阶段：明确产品定位和优势。</li>\n<li>传播阶段：通过有效的渠道让客户知道我们的优势和定位。</li>\n<li>销售阶段：确定价格渠道和终端布局。</li>\n<li>售后阶段：对客户使用效果追踪。</li>\n</ol>\n<h1 id=\"c2b阶段\"><a class=\"anchor\" href=\"#c2b阶段\">#</a> C2B 阶段</h1>\n<blockquote>\n<p>从粗糙的创意雏形，到产生一个相对完美，并且有一定商业价值的产品是需要一个流程的。</p>\n</blockquote>\n<ul>\n<li>市场趋势 / 客户需求预测\n<ul>\n<li>第一步前瞻性地看市场，发现市场的空白点或者寻找客户需求，没有得到满足的地方。</li>\n<li>并不是每一个空白点都值得去做创新，因为创新也存在风险和成本。</li>\n<li>空白市场容量是否足够大，这也是需要考虑的重要因素。</li>\n</ul>\n</li>\n<li>倾听真实想法\n<ul>\n<li>如果想快速去抢占市场，规避目前行业中的强大对手，精准地了解真实情况，了解客户的真实需求是什么。</li>\n<li>所以想在这些市场领先者做得好的领域，来挑战他们那无疑是找死。</li>\n<li>领先者也存在薄弱的地方，这个就是后者可以进行大力创新的地方。</li>\n<li>商业进攻总是从竞争对手薄弱处下手，也是从用户没有得到满足的地方开始的。</li>\n<li>一旦到了成品阶段就要强化自己的特色大力宣传。</li>\n<li>收集有效意见。</li>\n<li>定位思路。</li>\n<li>社会化营销。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"覆盖和渗透\"><a class=\"anchor\" href=\"#覆盖和渗透\">#</a> 覆盖和渗透</h1>\n<ul>\n<li>最为严重的情况就是企业原来的价值被覆盖。</li>\n<li>企业的核心利润受到了攻击，企业没有了存在的基础。</li>\n<li>信息不对称走向信息对称是完全不可逆的，所以在这一点上是连转型的机会都没有。</li>\n<li>新生代企业以颠覆的方法，去攻击旧生代去企业核心利润的时候，它能否成功的关键在于，能不能给原来的用户带来相当好的体验和效果。</li>\n</ul>\n<h1 id=\"丰富多彩的盈利方法\"><a class=\"anchor\" href=\"#丰富多彩的盈利方法\">#</a> 丰富多彩的盈利方法</h1>\n<ul>\n<li>需要强调的是商业模式思维，首先强调的并不是盈利而是解决用户需求的思想。</li>\n<li>重点是你要清晰地知道要解决什么问题，用什么方式合适地去解决这个问题。</li>\n</ul>\n<blockquote>\n<p>往前拓展一步思路会更加开阔，在互联网时代需要新技术、新思维。</p>\n</blockquote>\n",
            "tags": [
                "企业管理",
                "商业模式",
                "市场营销",
                "企业管理",
                "商业模式",
                "市场营销"
            ]
        },
        {
            "id": "https://rainrem.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/java/spring/SpringBoot%E6%97%A5%E5%BF%97%E6%89%93%E5%8D%B0/",
            "url": "https://rainrem.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/java/spring/SpringBoot%E6%97%A5%E5%BF%97%E6%89%93%E5%8D%B0/",
            "title": "SpringBoot日志打印",
            "date_published": "2024-02-09T21:41:00.000Z",
            "content_html": "",
            "tags": [
                "计算机科学",
                "Java",
                "Java深入理解",
                "计算机科学",
                "Java深入理解",
                "Spring",
                "SpringBoot",
                "注解"
            ]
        },
        {
            "id": "https://rainrem.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/java/spring/SpringBoot&%E5%85%B6%E5%AE%83%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/",
            "url": "https://rainrem.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/java/spring/SpringBoot&%E5%85%B6%E5%AE%83%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/",
            "title": "SpringBoot&其它常用注解",
            "date_published": "2024-01-31T17:42:00.000Z",
            "content_html": "<blockquote>\n<p>SpringBoot 提供了很多个注解，可以帮助我们快速构建应用程序，以下是 SpringBoot 和其它的一些常用注解。</p>\n</blockquote>\n<h1 id=\"注解详情表\"><a class=\"anchor\" href=\"#注解详情表\">#</a> 注解详情表</h1>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">注解名称</th>\n<th style=\"text-align:center\">参数类型</th>\n<th style=\"text-align:center\">注解简介</th>\n<th style=\"text-align:center\">框架</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><a href=\"#springbootapplication\"> <code>@SpringBootApplication</code> </a></td>\n<td style=\"text-align:center\">可空</td>\n<td style=\"text-align:center\">用于标识 <code>SpringBoot</code>  应用程序的入口类</td>\n<td style=\"text-align:center\"><code>SpringBoot</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#restcontroller\"> <code>@RestController</code> </a></td>\n<td style=\"text-align:center\">可空</td>\n<td style=\"text-align:center\">用于自动将返回值转换为 <code>JSON</code>  格式</td>\n<td style=\"text-align:center\"><code>SpringWeb</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#requestmapping\"> <code>@RequestMapping</code> </a></td>\n<td style=\"text-align:center\"><code>String/String[]</code></td>\n<td style=\"text-align:center\">用于映射 <code>URL</code>  请求</td>\n<td style=\"text-align:center\"><code>SpringWeb</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#getmapping\"> <code>@GetMapping</code> </a></td>\n<td style=\"text-align:center\"><code>String/String[]</code></td>\n<td style=\"text-align:center\">用于映射 <code>HTTP</code>  的 <code>GET</code>  请求</td>\n<td style=\"text-align:center\"><code>SpringWeb</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#postmapping\"> <code>@PostMapping</code> </a></td>\n<td style=\"text-align:center\"><code>String/String[]</code></td>\n<td style=\"text-align:center\">用于映射 <code>HTTP</code>  的 <code>POST</code>  请求</td>\n<td style=\"text-align:center\"><code>SpringWeb</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#deletemapping\"> <code>@DeleteMapping</code> </a></td>\n<td style=\"text-align:center\"><code>String/String[]</code></td>\n<td style=\"text-align:center\">用于映射 <code>HTTP</code>  的 <code>DELETE</code>  请求</td>\n<td style=\"text-align:center\"><code>SpringWeb</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#requestparam\"> <code>@RequestParam</code> </a></td>\n<td style=\"text-align:center\"><code>String</code></td>\n<td style=\"text-align:center\">用于获取请求参数的值</td>\n<td style=\"text-align:center\"><code>SpringWeb</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#pathvariable\"> <code>@PathVariable</code> </a></td>\n<td style=\"text-align:center\">可空</td>\n<td style=\"text-align:center\">用于获取 <code>URL</code>  中的参数值</td>\n<td style=\"text-align:center\"><code>SpringWeb</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#requestbody\"> <code>@RequestBody</code> </a></td>\n<td style=\"text-align:center\">可空</td>\n<td style=\"text-align:center\">用于将 <code>HTTP</code>  请求的主体转换为方法的参数</td>\n<td style=\"text-align:center\"><code>SpringWeb</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#responsebody\"> <code>@ResponseBody</code> </a></td>\n<td style=\"text-align:center\">无</td>\n<td style=\"text-align:center\">用于将方法的返回值转换为 <code>HTTP</code>  响应的主体</td>\n<td style=\"text-align:center\"><code>SpringWeb</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#autowired\"> <code>@Autowired</code> </a></td>\n<td style=\"text-align:center\">无</td>\n<td style=\"text-align:center\">用于自动装配 <code>Spring</code>  容器中的 <code>Bean</code>  对象</td>\n<td style=\"text-align:center\"><code>Spring</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#component\"> <code>@Component</code> </a></td>\n<td style=\"text-align:center\">可空</td>\n<td style=\"text-align:center\">用于标识一个类是 <code>Spring</code>  容器中的组件</td>\n<td style=\"text-align:center\"><code>Spring</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#service\"> <code>@Service</code> </a></td>\n<td style=\"text-align:center\">可空</td>\n<td style=\"text-align:center\">用于标识一个类是 <code>Spring</code>  容器中的服务组件</td>\n<td style=\"text-align:center\"><code>Spring</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#repository\"> <code>@Repository</code> </a></td>\n<td style=\"text-align:center\">可空</td>\n<td style=\"text-align:center\">用于标识一个类是 <code>Spring</code>  容器中的数据访问组件</td>\n<td style=\"text-align:center\"><code>Spring</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#configuration\"> <code>@Configuration</code> </a></td>\n<td style=\"text-align:center\">可空</td>\n<td style=\"text-align:center\">用于标识一个类是 <code>Spring</code>  的配置类</td>\n<td style=\"text-align:center\"><code>Spring</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#value\"> <code>@Value</code> </a></td>\n<td style=\"text-align:center\"><code>String</code></td>\n<td style=\"text-align:center\">用于获取配置文件中的属性值</td>\n<td style=\"text-align:center\"><code>Spring</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#bean\"> <code>@Bean</code> </a></td>\n<td style=\"text-align:center\">可空</td>\n<td style=\"text-align:center\">用于将一个方法返回的对象注册到 <code>Spring</code>  容器中</td>\n<td style=\"text-align:center\"><code>Spring</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#import\"> <code>@Import</code> </a></td>\n<td style=\"text-align:center\"><code>Class&lt;?&gt;/Class&lt;?&gt;[]</code></td>\n<td style=\"text-align:center\">用于导入其他配置类或 <code>Bean</code></td>\n<td style=\"text-align:center\"><code>Spring</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#conditional\"> <code>@Conditional</code> </a></td>\n<td style=\"text-align:center\"><code>Class&lt;? extends Condition&gt;/Class&lt;? extends Condition&gt;[]</code></td>\n<td style=\"text-align:center\">用于根据条件判断是否创建 <code>Bean</code>  或执行配置</td>\n<td style=\"text-align:center\"><code>Spring</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#profile\"> <code>@Profile</code> </a></td>\n<td style=\"text-align:center\"><code>String/String[]</code></td>\n<td style=\"text-align:center\">用于指定配置的环境</td>\n<td style=\"text-align:center\"><code>Spring</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#propertysource\"> <code>@PropertySource</code> </a></td>\n<td style=\"text-align:center\"><code>String/String[]</code></td>\n<td style=\"text-align:center\">用于指定配置文件的位置</td>\n<td style=\"text-align:center\"><code>Spring</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#qualifier\"> <code>@Qualifier</code> </a></td>\n<td style=\"text-align:center\"><code>String</code></td>\n<td style=\"text-align:center\">用于指定注入的 <code>Bean</code>  的名称</td>\n<td style=\"text-align:center\"><code>Spring</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#exceptionhandler\"> <code>@ExceptionHandler</code> </a></td>\n<td style=\"text-align:center\"><code>Class&lt;? extends Throwable&gt;/Class&lt;? extends Throwable&gt;[]</code></td>\n<td style=\"text-align:center\">用于处理异常</td>\n<td style=\"text-align:center\"><code>SpringWeb</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#responsestatus\"> <code>@ResponseStatus</code> </a></td>\n<td style=\"text-align:center\"><code>HttpStatus</code></td>\n<td style=\"text-align:center\">用于指定异常的 <code>HTTP</code>  响应状态码</td>\n<td style=\"text-align:center\"><code>SpringWeb</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#controlleradvice\"> <code>@ControllerAdvice</code> </a></td>\n<td style=\"text-align:center\">可空</td>\n<td style=\"text-align:center\">用于全局处理异常</td>\n<td style=\"text-align:center\"><code>SpringWeb</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#crossorigin\"> <code>@CrossOrigin</code> </a></td>\n<td style=\"text-align:center\"><code>String/String[]</code></td>\n<td style=\"text-align:center\">用于解决跨域问题</td>\n<td style=\"text-align:center\"><code>SpringWeb</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#async\"> <code>@Async</code> </a></td>\n<td style=\"text-align:center\">可空</td>\n<td style=\"text-align:center\">用于将方法标记为异步执行</td>\n<td style=\"text-align:center\"><code>Spring</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#cacheable\"> <code>@Cacheable</code> </a></td>\n<td style=\"text-align:center\"><code>String/String[]</code></td>\n<td style=\"text-align:center\">用于缓存方法的返回值</td>\n<td style=\"text-align:center\"><code>Spring</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#cacheevict\"> <code>@CacheEvict</code> </a></td>\n<td style=\"text-align:center\"><code>String/String[]</code></td>\n<td style=\"text-align:center\">用于清除缓存</td>\n<td style=\"text-align:center\"><code>Spring</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#cacheput\"> <code>@CachePut</code> </a></td>\n<td style=\"text-align:center\"><code>String/String[]</code></td>\n<td style=\"text-align:center\">用于更新缓存中的数据</td>\n<td style=\"text-align:center\"><code>Spring</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#transactional\"> <code>@Transactional</code> </a></td>\n<td style=\"text-align:center\">可空</td>\n<td style=\"text-align:center\">用于标识一个方法或类需要使用事务进行操作</td>\n<td style=\"text-align:center\"><code>Spring</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#enabletransactionmanagement\"> <code>@EnableTransactionManagement</code> </a></td>\n<td style=\"text-align:center\">可空</td>\n<td style=\"text-align:center\">此注解用于启用事物管理功能</td>\n<td style=\"text-align:center\"><code>Spring</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#enableaspectjautoproxy\"> <code>@EnableAspectJAutoProxy</code> </a></td>\n<td style=\"text-align:center\">可空</td>\n<td style=\"text-align:center\">用于启用 <code>AOP</code>  功能</td>\n<td style=\"text-align:center\"><code>Spring</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#aspect\"> <code>@Aspect</code> </a></td>\n<td style=\"text-align:center\">可空</td>\n<td style=\"text-align:center\">用于定义切面</td>\n<td style=\"text-align:center\"><code>SpringAop</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#pointcut\"> <code>@Pointcut</code> </a></td>\n<td style=\"text-align:center\"><code>String</code></td>\n<td style=\"text-align:center\">用于定义切点</td>\n<td style=\"text-align:center\"><code>SpringAop</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#before\"> <code>@Before</code> </a></td>\n<td style=\"text-align:center\"><code>String</code></td>\n<td style=\"text-align:center\">用于在方法执行前执行通知</td>\n<td style=\"text-align:center\"><code>SpringAop</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#after\"> <code>@After</code> </a></td>\n<td style=\"text-align:center\"><code>String</code></td>\n<td style=\"text-align:center\">用于在方法执行后执行通知</td>\n<td style=\"text-align:center\"><code>SpringAop</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#around\"> <code>@Around</code> </a></td>\n<td style=\"text-align:center\"><code>String</code></td>\n<td style=\"text-align:center\">用于在方法执行前后执行通知</td>\n<td style=\"text-align:center\"><code>SpringAop</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#afterreturning\"> <code>@AfterReturning</code> </a></td>\n<td style=\"text-align:center\"><code>String</code></td>\n<td style=\"text-align:center\">用于在方法返回结果后执行通知</td>\n<td style=\"text-align:center\"><code>SpringAop</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#afterthrowing\"> <code>@AfterThrowing</code> </a></td>\n<td style=\"text-align:center\"><code>String</code></td>\n<td style=\"text-align:center\">用于在方法抛出异常后执行通知</td>\n<td style=\"text-align:center\"><code>SpringAop</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#order\"> <code>@Order</code> </a></td>\n<td style=\"text-align:center\"><code>int</code></td>\n<td style=\"text-align:center\">用于指定切面的执行顺序</td>\n<td style=\"text-align:center\"><code>Spring</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#slf4j\"> <code>@Slf4j</code> </a></td>\n<td style=\"text-align:center\">可空</td>\n<td style=\"text-align:center\">用于简化日志记录</td>\n<td style=\"text-align:center\"><code>Lombok</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#data\"> <code>@Data</code> </a></td>\n<td style=\"text-align:center\">可空</td>\n<td style=\"text-align:center\">用于自动生成 <code>JavaBean</code>  的 <code>get</code> 、 <code>set</code> 、 <code>toString</code> 、 <code>hashCode</code>  和 <code>equals</code>  方法</td>\n<td style=\"text-align:center\"><code>Lombok</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#noargsconstructor\"> <code>@NoArgsConstructor</code> </a></td>\n<td style=\"text-align:center\">可空</td>\n<td style=\"text-align:center\">用于生成无参构造函数</td>\n<td style=\"text-align:center\"><code>Lombok</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#allargsconstructor\"> <code>@AllArgsConstructor</code> </a></td>\n<td style=\"text-align:center\">可空</td>\n<td style=\"text-align:center\">用于生成全参构造函数</td>\n<td style=\"text-align:center\"><code>Lombok</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#builder\"> <code>@Builder</code> </a></td>\n<td style=\"text-align:center\">可空</td>\n<td style=\"text-align:center\">用于生成 <code>Builder</code>  模式的构造函数</td>\n<td style=\"text-align:center\"><code>Lombok</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#equalsandhashcode\"> <code>@EqualsAndHashCode</code> </a></td>\n<td style=\"text-align:center\">可空</td>\n<td style=\"text-align:center\">用于生成 <code>hashCode</code>  和 <code>equals</code>  方法</td>\n<td style=\"text-align:center\"><code>Lombok</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#tostring\"> <code>@ToString</code> </a></td>\n<td style=\"text-align:center\">可空</td>\n<td style=\"text-align:center\">用于生成 <code>toString</code>  方法</td>\n<td style=\"text-align:center\"><code>Lombok</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#getter\"> <code>@Getter</code> </a></td>\n<td style=\"text-align:center\">可空</td>\n<td style=\"text-align:center\">用于生成 <code>get</code>  方法</td>\n<td style=\"text-align:center\"><code>Lombok</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#setter\"> <code>@Setter</code> </a></td>\n<td style=\"text-align:center\">可空</td>\n<td style=\"text-align:center\">用于生成 <code>set</code>  方法</td>\n<td style=\"text-align:center\"><code>Lombok</code></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"springbootapplication\"><a class=\"anchor\" href=\"#springbootapplication\">#</a> @SpringBootApplication</h1>\n<ul>\n<li>这是一个组合注解，其中包括了 <code>@Configuration</code> 、 <code>@EnableAutoConfiguration</code> 、 <code>@ComponentScan</code>  这三个注解，用于标识在 <code>SpringBoot</code>  应用程序的入口类。</li>\n<li><code>@Configuration</code> ：表示这个类是一个配置类，它定义了一个或多个 <code>@Bean</code>  方法，用于创建和配置 <code>Spring</code>  应用程序上线文中的 <code>Bean</code> 。</li>\n<li><code>@EnableAutoConfiguration</code> ：表示启用 <code>SpringBoot</code>  的自动配置机制，它会自动添加所需要的依赖和配置，以使应用程序能够运行。</li>\n<li><code>@ComponentScan</code> ：表示 <code>SpringBoot</code>  扫描当前包及其子包中的所有 <code>@Component</code> 、 <code>@Service</code> 、 <code>@Repository</code>  和 <code>@Controller</code>  的注解类并将它们注册为 <code>Spring</code>  所需要的 <code>Bean</code> 。</li>\n<li><code>SpringBootApplication</code> ：这个注解通常用于在 <code>SpringBoot</code>  的应用程序入口类上，用于启动 <code>SpringBoot</code>  应用程序，它是简化 <code>Spring</code>  应用程序的配置和启动过程。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Springboot3DemoApplication.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>springboot3demo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringApplication</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootApplication</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringBoot3DemoApplication</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringBoot3DemoApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"restcontroller\"><a class=\"anchor\" href=\"#restcontroller\">#</a> @RestController</h1>\n<ul>\n<li><code>@RestController</code>  与 <code>@Controller</code>  注解类似，但是 <code>@RestController</code>  会自动将返回值转换为 <code>JSON</code>  格式。</li>\n<li><code>@RestController</code>  是 <code>SpringFramework 4.0</code>  版本引入的一个注解，它是 <code>@Controller</code>  和 <code>@ResponseBody</code>  注解的组合。</li>\n<li>它用于标注一个类，表示这个类是一个 <code>RESTful</code>  风格的控制器，可以处理 <code>HTTP</code>  请求并返回 <code>JSON/XML</code>  格式的响应。</li>\n<li><code>@RestController</code>  用于代替原来的 <code>@Controller</code>  注解，它默认情况下会将控制器方法的返回值转换为 <code>JSON</code>  格式，并以 <code>HTTP</code>  响应的方式返回给客户端。</li>\n<li>如果需要返回 <code>XML</code>  格式的响应，可以使用其它注解如： <code>@Produces</code>  和 <code>@Consumes</code>  注解。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>HelloController.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>springboot3demo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GetMapping</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RestController</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hello\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hello, World!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"requestmapping\"><a class=\"anchor\" href=\"#requestmapping\">#</a> @RequestMapping</h1>\n<blockquote>\n<p>此注解用于映射请求 <code>URL</code>  和处理方法，它是 <code>SpringMVC</code>  框架中的一个核心注解，它用于映射 <code>HTTP</code>  请求和控制器方法之间的关系，它可以用于类级别和方法级别，用于指定请求 <code>URL</code>  和 <code>HTTP</code>  方法如： <code>GET</code> 、 <code>POST</code> 、 <code>PUT</code> 、 <code>DELETE</code>  等。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserController.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>springboot3demo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/users\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getUsers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 获取用户列表</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/users\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">createUser</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 创建新用户</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/users/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">getUserById</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 根据 ID 获取用户信息</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token annotation punctuation\">@PutMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/users/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">updateUser</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// 更新用户信息</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token annotation punctuation\">@DeleteMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/users/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">deleteUser</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">// 根据 ID 删除用户</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"getmapping\"><a class=\"anchor\" href=\"#getmapping\">#</a> @GetMapping</h1>\n<blockquote>\n<p>此注解用于映射 <code>HTTP</code>  的 <code>GET</code>  请求。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserController.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>springboot3demo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/users\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getUsers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 获取用户列表</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/users/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">getUserById</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 根据 ID 获取用户信息</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"postmapping\"><a class=\"anchor\" href=\"#postmapping\">#</a> @PostMapping</h1>\n<blockquote>\n<p>此注解用于映射 <code>HTTP</code>  的 <code>POST</code>  请求。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserController.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>springboot3demo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/users\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">createUser</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 创建新用户</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"putmapping\"><a class=\"anchor\" href=\"#putmapping\">#</a> @PutMapping</h1>\n<blockquote>\n<p>此注解用于映射 <code>HTTP</code>  的 <code>PUT</code>  请求。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserController.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>springboot3demo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@PutMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/users/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">updateUser</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 更新用户信息</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"deletemapping\"><a class=\"anchor\" href=\"#deletemapping\">#</a> @DeleteMapping</h1>\n<blockquote>\n<p>此注解用于映射 <code>HTTP</code>  的 <code>DELETE</code>  请求。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserController.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>springboot3demo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@DeleteMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/users/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">deleteUser</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 根据 ID 删除用户</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"requestparam\"><a class=\"anchor\" href=\"#requestparam\">#</a> @RequestParam</h1>\n<blockquote>\n<p>此注解用于获取请求参数的值。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserController.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>springboot3demo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/users\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getUsers</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestParam</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"page\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">int</span> page<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@RequestParam</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"size\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 分页获取用户列表</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"pathvariable\"><a class=\"anchor\" href=\"#pathvariable\">#</a> @PathVariable</h1>\n<blockquote>\n<p>此注解用于获取 <code>URL</code>  中的参数值，它是 <code>SpringMVC</code>  框架中的一个注解，用于将 <code>HTTP</code>  请求路径中的变量绑定到控制器方法的参数上。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserController.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>springboot3demo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/users/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 根据 ID 获取用户信息</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"requestbody\"><a class=\"anchor\" href=\"#requestbody\">#</a> @RequestBody</h1>\n<blockquote>\n<p>此注解用于将 <code>HTTP</code>  请求的主体转换为方法的参数，它是 <code>SpringMVC</code>  框架中的一个注解，用于将 <code>HTTP</code>  请求体中的数据绑定到控制器方法的参数上。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserController.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>springboot3demo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/users\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">createUser</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 创建用户</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"responsebody\"><a class=\"anchor\" href=\"#responsebody\">#</a> @ResponseBody</h1>\n<blockquote>\n<p>此注解用于将方法的返回值转换为 <code>HTTP</code>  响应的主体， <code>@ResponseBody</code>  是 <code>Spring MVC</code>  框架中的一个注解，用于将控制器方法的返回值转换为 <code>HTTP</code>  响应体中的数据。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserController.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/users/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 从数据库或其他地方获取用户数据</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> userService<span class=\"token punctuation\">.</span><span class=\"token function\">getUserById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> user<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"autowired\"><a class=\"anchor\" href=\"#autowired\">#</a> @Autowired</h1>\n<blockquote>\n<p>此注解用于自动装配 <code>Spring</code>  容器中的 <code>Bean</code> 。</p>\n</blockquote>\n<blockquote>\n<p>如果不推荐使用 <code>@Autowired</code>  注解也可以使用 <code>jakarta</code>  的 <code>@Resource</code>  注解代替 <code>@Autowired</code>  进行资源的注入。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserServiceImpl.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">UserService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserRepository</span> userRepository<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 实现 UserService 接口中的方法</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"component\"><a class=\"anchor\" href=\"#component\">#</a> @Component</h1>\n<blockquote>\n<p>此注解用于标识一个类是 <code>Spring</code>  容器中的组件， <code>@Component</code>  是 <code>Spring</code>  框架中的一个通用注解，用于标注一个类作为 <code>Spring</code>  组件中的 <code>Bean</code> 。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserServiceImpl.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">UserService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 实现 UserService 接口中的方法</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"service\"><a class=\"anchor\" href=\"#service\">#</a> @Service</h1>\n<blockquote>\n<p>此注解用于标识一个类是 <code>Spring</code>  容器中的服务组件， <code>@Service</code>  是 <code>Spring</code>  框架中的一个注解，用于标注一个类作为服务类 ( <code>Service</code> )。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserServiceImpl.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">UserService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 实现 UserService 接口中的方法</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"repository\"><a class=\"anchor\" href=\"#repository\">#</a> @Repository</h1>\n<blockquote>\n<p>此注解用于标识一个类是 <code>Spring</code>  容器中的数据访问组件， <code>@Repository</code>  是 <code>Spring</code>  框架中的一个注解，用于标注一个类作为数据访问对象 ( <code>DAO</code> )。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserRepositoryImpl.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Repository</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserRepositoryImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">UserRepository</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 实现 UserRepository 接口中的方法</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"configuration\"><a class=\"anchor\" href=\"#configuration\">#</a> @Configuration</h1>\n<blockquote>\n<p>此注解用于标识一个类是 <code>Spring</code>  的配置类， <code>@Configuration</code>  是 <code>Spring</code>  框架中的一个注解，用于标注一个类作为配置类。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>AppConfig.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">UserService</span> <span class=\"token function\">userService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserServiceImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">UserRepository</span> <span class=\"token function\">userRepository</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserRepositoryImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"value\"><a class=\"anchor\" href=\"#value\">#</a> @Value</h1>\n<blockquote>\n<p>此注解用于获取配置文件中的属性值， <code>@Value</code>  是 <code>Spring</code>  框架中的一个注解，用于将配置文件中的属性值注入到 <code>Bean</code>  对象中。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>MyComponent.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 这个类使用 @Component 注解标注，表示这个类是一个 Spring Bean，可以被其他的 Spring Bean 自动装配。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 在属性级别上，@Value 注解指定了需要注入的属性值，这个属性值可以通过 $&#123;...&#125; 的方式引用配置文件中的属性值。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 在这个例子中，MyComponent 类中的 myProperty 属性使用 @Value 注解指定了需要注入的属性值，Spring 会自动将配置文件中名为 my.property 的属性值注入到这个属性中。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Value 注解用于注入配置文件中的属性值，使得开发者可以方便地从配置文件中获取属性值，并将其注入到 Bean 对象中。同时，使用 @Value 注解还可以方便地处理不同环境下的配置文件，如开发环境和生产环境的配置文件。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * Value 注解是 Spring 框架中比较常用的注解之一，可以让开发者更加专注于业务逻辑的实现，而不必关心属性值的获取和注入细节。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;my.property&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> myProperty<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 其他方法</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"bean\"><a class=\"anchor\" href=\"#bean\">#</a> @Bean</h1>\n<blockquote>\n<p>此注解用于将一个方法返回的对象注册到 <code>Spring</code>  容器中， <code>@Bean</code>  是 <code>Spring</code>  框架中的一个注解，用于将一个方法返回的对象注册为一个 <code>Spring Bean</code> 。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>AppConfig.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">UserService</span> <span class=\"token function\">userService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserServiceImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">UserRepository</span> <span class=\"token function\">userRepository</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserRepositoryImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"import\"><a class=\"anchor\" href=\"#import\">#</a> @Import</h1>\n<blockquote>\n<p>此注解用于导入其它配置类或 <code>Bean</code> 。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>AppConfig.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Import</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">AppConfig1</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">AppConfig2</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 其他方法</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"conditional\"><a class=\"anchor\" href=\"#conditional\">#</a> @Conditional</h1>\n<blockquote>\n<p>此注解用于根据条件判断是否创建 <code>Bean</code>  或执行配置。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>AppConfig.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Conditional</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DatabaseTypeCondition</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">UserRepository</span> <span class=\"token function\">userRepository</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserRepositoryImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 其他方法</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"profile\"><a class=\"anchor\" href=\"#profile\">#</a> @Profile</h1>\n<blockquote>\n<p>此注解用于指定配置的环境，如开发环境、测试环境或生产环境。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>AppConfig.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Profile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dev\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">UserService</span> <span class=\"token function\">userServiceDev</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserServiceDevImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@Profile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prod\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">UserService</span> <span class=\"token function\">userServiceProd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserServiceProdImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 其他方法</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"propertysource\"><a class=\"anchor\" href=\"#propertysource\">#</a> @PropertySource</h1>\n<blockquote>\n<p>此注解用于指定配置文件的位置， <code>@PropertySource</code>  是 <code>Spring</code>  框架中的一个注解，用于指定一组属性文件的位置，从而可以在 <code>Spring</code>  应用程序中使用这些属性。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>AppConfig.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 这个类使用 @Configuration 注解标注，表示这个类是一个配置类，用于配置应用程序的 Bean 对象。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 在类级别上，使用 @PropertySource 注解可以指定一个属性文件的位置。在这个例子中，使用 @PropertySource 注解指定了一个名为 application.properties 的属性文件，它位于 classpath 下。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 在方法级别上，使用 @Bean 注解标注方法，表示这个方法返回一个 Bean 对象。在这个例子中，使用 Environment 对象从属性文件中读取属性值，并将这些属性值传递给 UserService 实例的构造方法。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @PropertySource 注解用于指定一组属性文件的位置，使得开发者可以在 Spring 应用程序中使用这些属性。同时，使用 Environment 对象可以方便地读取属性文件中的属性值，并将这些属性值传递给 Bean 对象的构造方法或属性。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @PropertySource 注解是 Spring 框架中比较常用的注解之一，可以让开发者更加灵活地管理和配置 Spring Bean。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token annotation punctuation\">@PropertySource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"classpath:application.properties\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Environment</span> environment<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">UserService</span> <span class=\"token function\">userService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserServiceImpl</span><span class=\"token punctuation\">(</span>environment<span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userService.name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 其他方法</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"qualifier\"><a class=\"anchor\" href=\"#qualifier\">#</a> @Qualifier</h1>\n<blockquote>\n<p>此注解用于指定注入的 <code>Bean</code>  的名称。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserServiceImpl.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">UserService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Qualifier</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userRepositoryImpl\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserRepository</span> userRepository<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 其他方法</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"exceptionhandler\"><a class=\"anchor\" href=\"#exceptionhandler\">#</a> @ExceptionHandler</h1>\n<blockquote>\n<p>此注解用于处理异常。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>GlobalExceptionHandler.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 这个类使用 @ControllerAdvice 注解标注，表示这个类是一个全局异常处理器。在方法级别上，使用 @ExceptionHandler 注解可以指定一个方法来处理控制器中抛出的异常。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 在这个例子中，使用 @ExceptionHandler 注解指定了一个名为 handleException 的方法，它处理所有类型的异常。当控制器中抛出异常时，会调用这个方法，并将异常对象作为参数传递给这个方法。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 在这个方法中，使用 ModelAndView 对象来封装错误信息，并将视图名称设置为 error。最后，返回这个 ModelAndView 对象，将错误信息显示到用户界面上。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @ExceptionHandler 注解用于处理控制器中抛出的异常，使得开发者可以根据需要灵活地处理异常。同时，使用 @ControllerAdvice 注解可以将这个异常处理器应用于所有的控制器中。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @ExceptionHandler 注解是 Spring 框架中比较常用的注解之一，可以让开发者更加灵活地处理控制器中的异常。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@ControllerAdvice</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GlobalExceptionHandler</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@ExceptionHandler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ModelAndView</span> <span class=\"token function\">handleException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">ModelAndView</span> modelAndView <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ModelAndView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        modelAndView<span class=\"token punctuation\">.</span><span class=\"token function\">addObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"errorMessage\"</span><span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        modelAndView<span class=\"token punctuation\">.</span><span class=\"token function\">setViewName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> modelAndView<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"responsestatus\"><a class=\"anchor\" href=\"#responsestatus\">#</a> @ResponseStatus</h1>\n<blockquote>\n<p>此注解用于指定异常的 <code>HTTP</code>  响应状态码。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserController.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/user/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseStatus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span><span class=\"token constant\">OK</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">UserDetails</span> <span class=\"token function\">getUserDetails</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 查询用户信息</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">UserDetails</span> userDetails <span class=\"token operator\">=</span> userService<span class=\"token punctuation\">.</span><span class=\"token function\">getUserDetails</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>userDetails <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserNotFoundException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"User not found\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> userDetails<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token annotation punctuation\">@ExceptionHandler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserNotFoundException</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseStatus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NOT_FOUND</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">handleUserNotFoundException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserNotFoundException</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> ex<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"controlleradvice\"><a class=\"anchor\" href=\"#controlleradvice\">#</a> @ControllerAdvice</h1>\n<blockquote>\n<p>此注解用于处理全局异常， <code>@ControllerAdvice</code>  是 <code>Spring</code>  框架中的一个注解，用于定义全局控制器通知。</p>\n</blockquote>\n<blockquote>\n<p>在 <code>Spring MVC</code>  框架中，控制器通知是一些特殊的组件，它们可以在控制器方法执行前或执行后抛出异常时执行一些额外的逻辑处理，使用 <code>@ControllerAdvice</code>  注解可以定义全局控制器通知，它可以应用于所有的控制器。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>GlobalControllerAdvice.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 这个类使用 @ControllerAdvice 注解标注，表示这个类是一个全局控制器通知。在方法级别上，使用 @ModelAttribute 注解标注方法，表示这个方法会在所有控制器方法执行前执行，用于将当前登录用户信息添加到模型中。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 使用 @InitBinder 注解标注方法，表示这个方法会在所有控制器方法执行前执行，用于注册自定义的属性编辑器。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 使用 @ExceptionHandler 注解标注方法，表示这个方法会在控制器中抛出异常时执行，用于处理控制器方法中抛出的异常。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @ControllerAdvice 注解用于定义全局控制器通知，使得开发者可以在所有控制器方法执行前、执行后或抛出异常时执行一些额外的逻辑处理。同时，使用 @ModelAttribute 注解可以将一些公共的模型数据添加到模型中，使用 @InitBinder 注解可以注册自定义的属性编辑器，使用 @ExceptionHandler 注解可以处理控制器方法中抛出的异常。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @ControllerAdvice 注解是 Spring 框架中比较常用的注解之一，可以让开发者更加灵活地定义全局控制器通知。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@ControllerAdvice</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GlobalControllerAdvice</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@ModelAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"currentUser\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">getCurrentUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 获取当前登录用户信息</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">User</span> currentUser <span class=\"token operator\">=</span> userService<span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> currentUser<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@InitBinder</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">initBinder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WebDataBinder</span> binder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 注册自定义的属性编辑器</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        binder<span class=\"token punctuation\">.</span><span class=\"token function\">registerCustomEditor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Date</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CustomDateEditor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-MM-dd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token annotation punctuation\">@ExceptionHandler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ModelAndView</span> <span class=\"token function\">handleException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">ModelAndView</span> modelAndView <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ModelAndView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        modelAndView<span class=\"token punctuation\">.</span><span class=\"token function\">addObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"errorMessage\"</span><span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        modelAndView<span class=\"token punctuation\">.</span><span class=\"token function\">setViewName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">return</span> modelAndView<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"crossorigin\"><a class=\"anchor\" href=\"#crossorigin\">#</a> @CrossOrigin</h1>\n<blockquote>\n<p>此注解用于解决跨域问题， <code>@CrossOrigin</code>  注解是 <code>Spring</code>  框架中的一个注解，用于解决跨域资源共享 ( <code>CORS</code> ) 问题。</p>\n</blockquote>\n<blockquote>\n<p>跨越资源共享是浏览器安全策略的一部分，它限制了浏览器在不同域名之间发送和接收 <code>HTTP</code>  请求，使用 <code>@CrossOrigin</code>  注解可以指定允许跨域访问的域名和 <code>HTTP</code>  方法。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>ApiController.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 这个类使用 @RestController 注解标注，表示这个类是一个 RESTful 风格的控制器。在类级别上，使用 @RequestMapping 注解指定控制器处理的请求路径为 /api。同时，使用 @CrossOrigin 注解可以指定允许跨域访问的域名和 HTTP 方法。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 在这个例子中，使用 @CrossOrigin 注解指定允许来自 http://localhost:8080 域名的 GET 和 POST 请求访问该控制器中的方法。这意味着，在 http://localhost:8080 域名下的网页可以通过 XMLHttpRequest 对象发送 GET 和 POST 请求，访问该控制器中的方法。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @CrossOrigin 注解用于解决跨域资源共享（CORS）问题，使得开发者可以更加灵活地控制允许跨域访问的域名和 HTTP 方法。它是一种简单但非常有效的解决方案，可以使得前端开发者更加轻松地开发跨域应用程序。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @CrossOrigin 注解是 Spring 框架中比较常用的注解之一，可以让开发者更加灵活地解决跨域资源共享（CORS）问题。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token annotation punctuation\">@CrossOrigin</span><span class=\"token punctuation\">(</span>origins <span class=\"token operator\">=</span> <span class=\"token string\">\"http://localhost:8080\"</span><span class=\"token punctuation\">,</span> methods <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">GET</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span><span class=\"token constant\">POST</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ApiController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/users\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getUsers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 查询用户信息</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> users <span class=\"token operator\">=</span> userService<span class=\"token punctuation\">.</span><span class=\"token function\">getUsers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> users<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"async\"><a class=\"anchor\" href=\"#async\">#</a> @Async</h1>\n<blockquote>\n<p>此注解用于将方法标记为异步执行，在 <code>Spring</code>  框架中，如果有一个方法需要执行一些比较耗时的操作，此时如果这个方法是在主线程中执行，就会导致主线程被阻塞，用户界面将无法响应用户的操作。</p>\n</blockquote>\n<blockquote>\n<p>此时就可以使用 <code>@Async</code>  注解来将这个方法的执行异步化，让主线程继续执行其它任务，从而提高应用程序的响应性能。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserService.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 这个类使用 @Service 注解标注，表示这个类是一个服务。在方法级别上，使用 @Async 注解标注方法，表示这个方法需要异步执行。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 在这个例子中，getUserDetailsAsync 方法使用 @Async 注解标注，表示这个方法需要异步执行。查询用户信息的操作在异步线程中执行，不会阻塞主线程。同时，这个方法返回一个 CompletableFuture 对象，表示异步执行的结果。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Async 注解用于异步执行方法，可以提高应用程序的响应性能。它是一种简单但非常有效的解决方案，可以使得开发者更加轻松地编写并发应用程序。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Async 注解是 Spring 框架中比较常用的注解之一，可以让开发者更加灵活地异步执行方法。需要注意的是，异步执行的方法必须在一个独立的线程中执行，因此需要使用线程池来管理异步线程的执行。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@Async</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">CompletableFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UserDetails</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getUserDetailsAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 查询用户信息</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">UserDetails</span> userDetails <span class=\"token operator\">=</span> userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">getUserDetails</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">CompletableFuture</span><span class=\"token punctuation\">.</span><span class=\"token function\">completedFuture</span><span class=\"token punctuation\">(</span>userDetails<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"cacheable\"><a class=\"anchor\" href=\"#cacheable\">#</a> @Cacheable</h1>\n<blockquote>\n<p>此注解用于缓存方法的返回值，在 <code>Spring</code>  框架中，如果一个方法的返回结果是固定的，而且这个方法的执行比较耗时，我们可以使用 <code>@Cacheable</code>  注解将这个方法的返回结果缓存起来，下次执行这个方法时直接从缓存中获取结果即可，避免重复执行。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserService.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 这个类使用 @Service 注解标注，表示这个类是一个服务。在方法级别上，使用 @Cacheable 注解标注方法，表示这个方法返回的结果可以被缓存起来。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 在这个例子中，getUser 方法使用 @Cacheable 注解标注，表示这个方法的返回结果可以被缓存起来。查询用户信息的操作在第一次执行时会被执行，返回结果会被缓存到名为 \"userCache\" 的缓存中。下次执行 getUser 方法时，如果缓存中已经存在这个结果，就直接从缓存中获取结果，不需要再次执行查询操作。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Cacheable 注解用于缓存方法的返回结果，可以提高应用程序的执行效率。它是一种简单但非常有效的解决方案，可以使得开发者更加灵活地使用缓存来优化应用程序的性能。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Cacheable 注解是 Spring 框架中比较常用的注解之一，可以让开发者更加轻松地使用缓存来提高应用程序的性能。需要注意的是，使用缓存需要考虑缓存的生命周期和缓存的一致性，必要时需要使用缓存失效机制和缓存更新机制来维护缓存的一致性。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@Cacheable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userCache\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 查询用户信息</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> user<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"cacheevict\"><a class=\"anchor\" href=\"#cacheevict\">#</a> @CacheEvict</h1>\n<blockquote>\n<p>此注解用于清除缓存， <code>@CacheEvict</code>  注解是 <code>Spring</code>  框架中的一个注解，它主要用于清空缓存中的数据，在 <code>Spring</code>  框架中，如果一个方法的执行会导致缓存数据的失效，我们可以使用 <code>@CacheEvict</code>  注解将这个方法的缓存数据清空，这样下次执行这个方法时就会重新查询数据并缓存起来。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserService.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 这个类使用 @Service 注解标注，表示这个类是一个服务。在方法级别上，使用 @Cacheable 注解标注 getUser 方法，表示这个方法的返回结果可以被缓存起来。同时，使用 @CacheEvict 注解标注 clearCache 方法，表示这个方法会清空名为 \"userCache\" 的缓存。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 在这个例子中，getUser 方法使用 @Cacheable 注解标注，表示这个方法的返回结果可以被缓存起来。查询用户信息的操作在第一次执行时会被执行，返回结果会被缓存到名为 \"userCache\" 的缓存中。下次执行 getUser 方法时，如果缓存中已经存在这个结果，就直接从缓存中获取结果，不需要再次执行查询操作。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 当调用 clearCache 方法时，@CacheEvict 注解会清空名为 \"userCache\" 的缓存，下次执行 getUser 方法时，就需要重新查询数据并缓存起来。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @CacheEvict 注解用于清空缓存中的数据，可以使得开发者更加灵活地控制缓存的生命周期和缓存的一致性。它是一种简单但非常有效的解决方案，可以使得开发者更加轻松地使用缓存来提高应用程序的性能。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @CacheEvict 注解是 Spring 框架中比较常用的注解之一，可以让开发者更加灵活地控制缓存的生命周期和缓存的一致性。需要注意的是，清空缓存需要谨慎操作，必要时需要考虑缓存的失效机制和缓存更新机制来维护缓存的一致性。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@Cacheable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userCache\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 查询用户信息</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> user<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@CacheEvict</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userCache\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">clearCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 清空缓存</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"cacheput\"><a class=\"anchor\" href=\"#cacheput\">#</a> @CachePut</h1>\n<blockquote>\n<p>用于更新缓存中的数据， <code>@CachePut</code>  注解是 <code>Spring</code>  框架中的一个注解，它主要用于更新或添加缓存中的数据，在 <code>Spring</code>  框架中，如果一个方法的执行会导致缓存数据的关系或添加，我们可以使用 <code>@CachePut</code>  注解将这个方法的返回结果更新或添加到缓存中。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserService.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 这个类使用 @Service 注解标注，表示这个类是一个服务。在方法级别上，使用 @Cacheable 注解标注 getUser 方法，表示这个方法的返回结果可以被缓存起来。同时，使用 @CachePut 注解标注 updateUser 方法，表示这个方法会更新或添加名为 \"userCache\" 的缓存。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 在这个例子中，getUser 方法使用 @Cacheable 注解标注，表示这个方法的返回结果可以被缓存起来。查询用户信息的操作在第一次执行时会被执行，返回结果会被缓存到名为 \"userCache\" 的缓存中。下次执行 getUser 方法时，如果缓存中已经存在这个结果，就直接从缓存中获取结果，不需要再次执行查询操作。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 当调用 updateUser 方法时，@CachePut 注解会更新或添加名为 \"userCache\" 的缓存，下次执行 getUser 方法时，就可以从缓存中获取更新后的用户信息。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @CachePut 注解用于更新或添加缓存中的数据，可以使得开发者更加灵活地控制缓存的生命周期和缓存的一致性。它是一种简单但非常有效的解决方案，可以使得开发者更加轻松地使用缓存来提高应用程序的性能。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @CachePut 注解是 Spring 框架中比较常用的注解之一，可以让开发者更加灵活地控制缓存的生命周期和缓存的一致性。需要注意的是，更新或添加缓存需要谨慎操作，必要时需要考虑缓存的失效机制和缓存更新机制来维护缓存的一致性。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@Cacheable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userCache\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 查询用户信息</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> user<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@CachePut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userCache\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">updateUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">,</span> <span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 更新用户信息</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">User</span> updatedUser <span class=\"token operator\">=</span> userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">updateUser</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> updatedUser<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"transactional\"><a class=\"anchor\" href=\"#transactional\">#</a> @Transactional</h1>\n<ul>\n<li><code>@Transactional</code>  是 <code>Spring</code>  框架中的一个注解，用于标识一个方法或类需要使用事务进行操作。</li>\n<li><code>@Transactional</code>  注解在 <code>Spring</code>  框架中用于声明事务管理，它允许开发者通过简单的注解来控制事务的边界，具体来说， <code>@Transactional</code>  注解的作用包括以下五种特性：\n<ul>\n<li><code>只读标记</code> ：通过设置为只读，可以告诉 <code>Spring</code>  事务的类型，这有助于优化事务的性能。</li>\n<li><code>隔离级别</code> ：定义了事务的隔离级别，用于解决并发事务中的问题，如脏读、不可重复读等，例如： <code>ISOLATION_READ_COMMITTED</code>  表示事务只能读取已经提交的数据。</li>\n<li><code>超时时间</code> ：定义了事务的超时时间，超过这个时间，事务将自动回滚，例如： <code>timeout = 30</code>  表示事务最多运行 <code>30</code>  秒。</li>\n<li><code>回滚规则</code> ：定义了哪些异常会导致事务回滚，默认情况下，只有运行时检查的异常会导致事务回滚，而受检异常不会。</li>\n<li><code>事务传播行为</code> ：定义了方法调用时事务如何传播，比如是否新开一个事务，或者加入到已有的事务中，例如： <code>PROPAGATION_REQUIRED</code>  表示如果当前没有事务，就新建一个事务，如果已经存在事务则加入这个事务中。</li>\n</ul>\n</li>\n<li><code>@Transactional</code>  注解通常用于服务层的方法上，以确保业务操作的原子性、一致性、隔离性和持久性，它是实现声明事务管理的一种便捷方式，使得事务管理变得更加简单和直观。</li>\n<li>在 <code>Spring</code>  框架中，如果一个方法需要对数据库进行操作，我们可以使用 <code>@Transactional</code>  注解来确保这个操作在一个事务中进行，从而保证操作的原子性、一致性、隔离性和持久性。</li>\n</ul>\n<blockquote>\n<p>需要引入以下坐标才可以正常使用此注解。</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>pom.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-tx<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.0.8.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserService.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 这个类使用 @Service 注解标注，表示这个类是一个服务。同时，在类级别上使用 @Transactional 注解标注，表示这个类中的所有方法都需要使用事务进行操作。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 在这个例子中，createUser 和 updateUser 方法都需要对数据库进行操作，因此使用 userRepository 来保存或更新用户信息。由于这个类使用了 @Transactional 注解来标识，因此 userRepository 的操作都在一个事务中进行，从而保证操作的原子性、一致性、隔离性和持久性。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Transactional 注解用于标识一个方法或类需要使用事务进行操作，可以使得开发者更加灵活地控制事务的使用。它是一种简单但非常有效的解决方案，可以使得开发者更加轻松地使用事务来提高应用程序的性能和数据一致性。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Transactional 注解是 Spring 框架中比较常用的注解之一，可以让开发者更加灵活地控制事务的使用。需要注意的是，事务的使用需要谨慎操作，必要时需要考虑事务的隔离级别、超时时间和回滚机制等来维护数据的一致性和应用程序的性能。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@Transactional</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserRepository</span> userRepository<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">createUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">updateUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">,</span> <span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">User</span> existingUser <span class=\"token operator\">=</span> userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>existingUser <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            existingUser<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            existingUser<span class=\"token punctuation\">.</span><span class=\"token function\">setEmail</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getEmail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>existingUser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>MyService.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>transaction<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Transactional</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Service</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>propagation <span class=\"token operator\">=</span> <span class=\"token class-name\">Propagation</span><span class=\"token punctuation\">.</span><span class=\"token constant\">REQUIRED</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 仅将事务管理应用于该方法</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 方法体</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>isolation <span class=\"token operator\">=</span> <span class=\"token class-name\">Isolation</span><span class=\"token punctuation\">.</span><span class=\"token constant\">READ_COMMITTED</span><span class=\"token punctuation\">,</span> timeout <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 对该方法应用特定的事务属性</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doSomethingElse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 方法体</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>在 <code>MyService</code>  示例中， <code>doSomething()</code>  方法和 <code>doSomethingElse()</code>  方法分别有不同的事务属性设置， <code>doSomething()</code>  方法使用默认的传播行为 <code>PROPAGATION_REQUIRED</code> , 而 <code>doSomethingElse()</code>  方法指定了隔离级别为 <code>Isolation.READ_COMMITTED</code>  和超时时间为 <code>30</code>  秒。</p>\n</blockquote>\n<blockquote>\n<p>注意：为了让 <code>@Transactional</code>  注解生效，需要在 <code>Spring</code>  配置中启用事务管理，在使用 <code>SpringBoot</code>  时，通常无需额外配置，因为 <code>SpringBoot</code>  自动配置了事务管理器。</p>\n</blockquote>\n<blockquote>\n<p>另外当方法抛出异常时，如果异常不是运行时异常 ( <code>RuntimeException</code>  的子类)，那么默认情况下事务不会自动回滚，如果希望某些受检异常也能触发事务回滚，需要在 <code>@Transactional</code>  注解中指定 <code>rollbackFor</code>  属性。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>rollbackFor <span class=\"token operator\">=</span> <span class=\"token class-name\">MyCustomException</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">someMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">MyCustomException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//  方法体</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"enabletransactionmanagement\"><a class=\"anchor\" href=\"#enabletransactionmanagement\">#</a> @EnableTransactionManagement</h1>\n<blockquote>\n<p>此注解用于启用事物管理功能， <code>@EnableTransactionManagement</code>  在 <code>Spring</code>  框架中用于开启基于注解的事务管理，它主要用于告诉 <code>Spring</code>  容器需要创建一个事务管理器 ( <code>PlatformTransactionManager</code> ), 并将其注册到 <code>Spring</code>  上下文中，一旦事务管理器被创建并配置好，就可以通过 <code>@Transactional</code>  注解在服务层的方法上声明事务的边界了。</p>\n</blockquote>\n<blockquote>\n<p>当你在某个配置类上添加了 <code>@EnableTransactionManagement</code>  注解后， <code>Spring</code>  会根据配置的事务管理器类型如： <code>JPA</code> 、 <code>JDBC</code> 、 <code>Hibernate</code>  等来创建相应的事务管理实例，当应用中的方法被标注为 <code>@Transactional</code>  时， <code>Spring</code>  就能够利用配置好的事务管理器来管理事务，简而言之 <code>@EnableTransactionManagement</code>  注解是用于开启 <code>Spring</code>  声明式事务管理的关键步骤，它使得 <code>@Transactional</code>  注解能够正常工作。</p>\n</blockquote>\n<blockquote>\n<p>需要引入以下坐标才可以正常使用此注解。</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>pom.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-tx<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.0.8.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>AppConfig.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Configuration</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>transaction<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EnableTransactionManagement</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>transaction<span class=\"token punctuation\">.</span>jta<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JtaTransactionManager</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Resource</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DataSource</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>autoconfigure<span class=\"token punctuation\">.</span>jdbc<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DataSourceProperties</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ConfigurationProperties</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Bean</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>transaction<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PlatformTransactionManager</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @ConfigurationProperties：用于将属性文件中的值绑定到一个 Java 对象上，它可以将属性文件中的多个属性值注入到一个 Java 对象中，与 @Value 注解不同的是 @ConfigurationProperties 可以将属性文件中的值注入到多个属性中。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token annotation punctuation\">@EnableTransactionManagement</span> <span class=\"token comment\">// 开启基于注解的事务管理</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@Resource</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">DataSourceProperties</span> dataSourceProperties<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token annotation punctuation\">@ConfigurationProperties</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"spring.datasource\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DataSource</span> <span class=\"token function\">dataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> dataSourceProperties<span class=\"token punctuation\">.</span><span class=\"token function\">initializeDataSourceBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">PlatformTransactionManager</span> <span class=\"token function\">transactionManager</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DataSource</span> dataSource<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">JtaTransactionManager</span> transactionManager <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JtaTransactionManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        transactionManager<span class=\"token punctuation\">.</span><span class=\"token function\">setTransactionManagerName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myTransactionManager\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        transactionManager<span class=\"token punctuation\">.</span><span class=\"token function\">setUserTransactionName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myUserTransaction\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">return</span> transactionManager<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>在 <code>SpringBoot</code>  应用中，由于自动配置的特性，通常不需要手动添加 <code>@EnableTransactionManagement</code>  注解，因为 <code>SpringBoot</code>  会自动配置事务管理，但是如果你需要自定义事务管理器或者需要更细力度的事务控制，就可以在配置类中添加 <code>@EnableTransactionManagement</code>  注解。</p>\n</blockquote>\n<blockquote>\n<p>在 <code>AppConfig</code>  示例中， <code>AppConfig</code>  类被标记为配置类 <code>(通过@Configuration注解)</code> ，然后通过 <code>@EnableTransactionManagement</code>  注解来启用基于注解的事务管理，同时在这个配置类中定义了数据源和事务管理器的 <code>bean</code> , 其中事务管理器是通过 <code>JtaTransactionManager</code>  来创建的，在这个配置类或其它配置类中定义的服务组件里的方法，只要被标注为 <code>@Transactional</code>  注解，它们的事务行为就会被 <code>Spring</code>  容器管理。</p>\n</blockquote>\n<h1 id=\"enableaspectjautoproxy\"><a class=\"anchor\" href=\"#enableaspectjautoproxy\">#</a> @EnableAspectJAutoProxy</h1>\n<blockquote>\n<p>此注解用于启用 <code>AOP</code>  功能， <code>@EnableAspectJAutoProxy</code>  是 <code>Spring</code>  框架中的一个注解，用于启用自动代理功能，以便使用 <code>AOP(面向切面编程)</code>  进行编程。</p>\n</blockquote>\n<blockquote>\n<p>在 <code>Spring</code>  框架中，如果需要使用 <code>AOP</code>  来实现某些功能，就可以使用 <code>@EnableAspectJAutoProxy</code>  注解来启用自动代理功能，从而在运行时自动为我们生成代理对象，以便进行切面编程。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>AppConfig.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 这个类使用 @Configuration 注解标注，表示这个类是一个配置类。同时，在类级别上使用 @EnableAspectJAutoProxy 注解标注，表示这个配置类需要启用自动代理功能。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 在这个例子中，我们定义了一个 MyAspect 类来实现某些功能的切面编程。为了让 Spring 框架能够自动为我们生成代理对象，我们需要将 MyAspect 类加入到 Spring 容器中，并且使用 @Bean 注解标注。另外，我们还定义了一个 UserService 类来实现某些业务功能。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @EnableAspectJAutoProxy 注解用于启用自动代理功能，可以使得开发者更加方便地使用 AOP 来实现某些功能。它是一种简单但非常有效的解决方案，可以让开发者更加轻松地使用切面编程来提高应用程序的性能和可维护性。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @EnableAspectJAutoProxy 注解是 Spring 框架中比较常用的注解之一，可以让开发者更加方便地使用 AOP 来实现某些功能。需要注意的是，AOP 的使用需要谨慎操作，必要时需要考虑 AOP 的切面逻辑、切入点和通知类型等来维护应用程序的性能和可维护性。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@EnableAspectJAutoProxy</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MyAspect</span> <span class=\"token function\">myAspect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyAspect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">UserService</span> <span class=\"token function\">userService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"aspect\"><a class=\"anchor\" href=\"#aspect\">#</a> @Aspect</h1>\n<blockquote>\n<p>此注解用于定义切面， <code>@Aspect</code>  是 <code>Spring</code>  框架中的一个注解，它用于标识一个类为切面类，从而可以在该类中定义切面逻辑以实现 <code>AOP(面向切面编程)</code> 。</p>\n</blockquote>\n<blockquote>\n<p>在 <code>Spring</code>  框架中，如果需要使用 <code>AOP</code>  来实现某些功能，我们可以使用 <code>@Aspect</code>  注解来标识一个类为切面类，在切面类中我们可以定义切面逻辑，包括切入点、通知类型和切面顺序等，从而实现 <code>AOP</code>  编程的功能。</p>\n</blockquote>\n<blockquote>\n<p>需要引入以下坐标才可以正常使用此注解。</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>pom.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-aop<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>MyAspect.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 这个类使用 @Aspect 注解标识，表示这个类是一个切面类。同时，我们还使用 @Component 注解标识这个类，以便 Spring 框架能够自动将它加入到 Spring 容器中。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 在这个例子中，我们定义了一个 MyAspect 类来实现某些功能的切面编程。在这个类中，我们定义了两个通知类型，即 @Before 和 @After，分别表示在目标方法执行前和执行后执行某些操作。这些通知类型的执行条件是通过切入点表达式来定义的。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Aspect 注解用于标识一个类为切面类，可以使得开发者更加方便地使用 AOP 来实现某些功能。它是一种简单但非常有效的解决方案，可以让开发者更加轻松地使用切面编程来提高应用程序的性能和可维护性。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Aspect 注解是 Spring 框架中比较常用的注解之一，用于标识一个类为切面类。需要注意的是，AOP 的使用需要谨慎操作，必要时需要考虑切入点、通知类型和切面顺序等来维护应用程序的性能和可维护性。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@Aspect</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyAspect</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@Before</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(* com.example.UserService.*(..))\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">beforeAdvice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Before advice is executed.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token annotation punctuation\">@After</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(* com.example.UserService.*(..))\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterAdvice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"After advice is executed.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"pointcut\"><a class=\"anchor\" href=\"#pointcut\">#</a> @Pointcut</h1>\n<blockquote>\n<p>此注解用于定义切点， <code>@Pointcut</code>  是 <code>Spring</code>  框架中的一个注解，它用于定义一个切入点，从而可以在该切入点上定义通知类型一实现 <code>AOP(面向切面编程)</code> 。</p>\n</blockquote>\n<blockquote>\n<p>在 <code>Spring</code>  框架中，如果需要使用 <code>AOP</code>  来实现某些功能，我们可以使用 <code>@Pointcut</code>  注解来定义一个切入点，在切入点我们可以定义切面逻辑，包括通知类型和切面顺序等，从而实现 <code>AOP</code>  功能。</p>\n</blockquote>\n<blockquote>\n<p>需要引入以下坐标才可以正常使用此注解。</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>pom.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-aop<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>MyAspect.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 这个类使用 @Aspect 注解标识，表示这个类是一个切面类。同时，我们还使用 @Component 注解标识这个类，以便 Spring 框架能够自动将它加入到 Spring 容器中。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 在这个例子中，我们定义了一个 MyAspect 类来实现某些功能的切面编程。在这个类中，我们使用 @Pointcut 注解定义了一个切入点，即 userServicePointcut () 方法。在这个切入点上，我们定义了两个通知类型，即 @Before 和 @After，分别表示在目标方法执行前和执行后执行某些操作。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Pointcut 注解用于定义一个切入点，可以使得开发者更加方便地使用 AOP 来实现某些功能。它是一种简单但非常有效的解决方案，可以让开发者更加轻松地使用切面编程来提高应用程序的性能和可维护性。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Pointcut 注解是 Spring 框架中比较常用的注解之一，用于定义一个切入点。需要注意的是，AOP 的使用需要谨慎操作，必要时需要考虑切入点、通知类型和切面顺序等来维护应用程序的性能和可维护性。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@Aspect</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyAspect</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(* com.example.UserService.*(..))\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">userServicePointcut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token annotation punctuation\">@Before</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userServicePointcut()\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">beforeAdvice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Before advice is executed.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token annotation punctuation\">@After</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userServicePointcut()\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterAdvice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"After advice is executed.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"before\"><a class=\"anchor\" href=\"#before\">#</a> @Before</h1>\n<blockquote>\n<p>此注解用于在方法执行前执行前置通知， <code>@Before</code>  是 <code>Spring</code>  框架中的一个注解，它用于定义在目标方法执行前执行的通知类型。</p>\n</blockquote>\n<blockquote>\n<p>在 <code>Spring</code>  框架中，如果需要在目标方法执行前执行某些操作，就可以使用 <code>@Before</code>  注解来定义一个通知类型，在这个通知类型中，我们可以编写自己的逻辑代码从而实现 <code>AOP</code>  编程功能。</p>\n</blockquote>\n<blockquote>\n<p>需要引入以下坐标才可以正常使用此注解。</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>pom.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-aop<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>MyAspect.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Aspect</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyAspect</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Before</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(* com.example.UserService.*(..))\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">beforeAdvice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Before advice is executed.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"after\"><a class=\"anchor\" href=\"#after\">#</a> @After</h1>\n<blockquote>\n<p>此注解用于在方法执行后执行后置通知， <code>@After</code>  是 <code>Spring</code>  框架中的一个注解，它用于定义在目标方法执行后执行的通知类型。</p>\n</blockquote>\n<blockquote>\n<p>在 <code>Spring</code>  框架中，如果需要在目标方法执行后执行某些操作，就可以使用 <code>@After</code>  注解来定义一个通知类型，在这个通知类型中，可以编写自己的逻辑代码，从而实现 <code>AOP</code>  编程功能。</p>\n</blockquote>\n<blockquote>\n<p>需要引入以下坐标才可以正常使用此注解。</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>pom.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-aop<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>MyAspect.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Aspect</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyAspect</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@After</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(* com.example.UserService.*(..))\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterAdvice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"After advice is executed.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"around\"><a class=\"anchor\" href=\"#around\">#</a> @Around</h1>\n<blockquote>\n<p>此注解用于在方法执行前和执行后执行通知，也被称为环绕通知， <code>@Around</code>  是 <code>Spring</code>  框架中的一个注解，用于定义在目标方法执行前和执行后执行的通知类型。</p>\n</blockquote>\n<blockquote>\n<p>在 <code>Spring</code>  框架中，如果需要在目标方法执行前后执行某些操作，就可以使用 <code>@Around</code>  注解来定义一个通知类型，在这个通知类型中可以编写自己的逻辑代码，从而实现 <code>AOP</code>  编程功能。</p>\n</blockquote>\n<blockquote>\n<p>需要引入以下坐标才可以正常使用此注解。</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>pom.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-aop<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>MyAspect.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Aspect</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyAspect</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Around</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(* com.example.UserService.*(..))\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">aroundAdvice</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProceedingJoinPoint</span> joinPoint<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Before advice is executed.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Object</span> result <span class=\"token operator\">=</span> joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"After advice is executed.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"afterreturning\"><a class=\"anchor\" href=\"#afterreturning\">#</a> @AfterReturning</h1>\n<blockquote>\n<p>此注解用于在方法返回结果后执行通知，也被称为返回通知， <code>@AfterReturning</code>  是 <code>Spring</code>  框架中的一个注解，它用于在目标方法返回结果后执行的通知类型。</p>\n</blockquote>\n<blockquote>\n<p>在 <code>Spring</code>  框架中如果需要在目标方法返回结果后执行某些操作，就可以使用 <code>@AfterReturning</code>  注解来定义一个通知类型，在这个通知类型可以编写自己的逻辑代码，从而实现 <code>AOP</code>  编程功能。</p>\n</blockquote>\n<blockquote>\n<p>需要引入以下坐标才可以正常使用此注解。</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>pom.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-aop<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>MyAspect.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Aspect</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyAspect</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@AfterReturning</span><span class=\"token punctuation\">(</span>pointcut <span class=\"token operator\">=</span> <span class=\"token string\">\"execution(* com.example.UserService.*(..))\"</span><span class=\"token punctuation\">,</span> returning <span class=\"token operator\">=</span> <span class=\"token string\">\"result\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterReturningAdvice</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"After returning advice is executed. Result is \"</span> <span class=\"token operator\">+</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"afterthrowing\"><a class=\"anchor\" href=\"#afterthrowing\">#</a> @AfterThrowing</h1>\n<blockquote>\n<p>此注解用于在方法抛出异常后执行通知，也被称为异常通知， <code>@AfterThrowing</code>  是 <code>Spring</code>  框架中的一个注解，它用于定义在目标方法抛出异常后执行的通知类型。</p>\n</blockquote>\n<blockquote>\n<p>在 <code>Spring</code>  框架中，如果需要在目标方法抛出异常后执行某些操作，就可以使用 <code>@AfterThrowing</code>  注解来定义一个通知类型，在这个通知类型中可以编写自己的逻辑代码，从而实现 <code>AOP</code>  编程功能。</p>\n</blockquote>\n<blockquote>\n<p>需要引入以下坐标才可以正常使用此注解。</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>pom.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-aop<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>MyAspect.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Aspect</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyAspect</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@AfterThrowing</span><span class=\"token punctuation\">(</span>pointcut <span class=\"token operator\">=</span> <span class=\"token string\">\"execution(* com.example.UserService.*(..))\"</span><span class=\"token punctuation\">,</span> throwing <span class=\"token operator\">=</span> <span class=\"token string\">\"ex\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterThrowingAdvice</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"After throwing advice is executed. Exception is \"</span> <span class=\"token operator\">+</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"order\"><a class=\"anchor\" href=\"#order\">#</a> @Order</h1>\n<blockquote>\n<p>此注解用于指定切面的执行顺序， <code>@Order</code>  是 <code>Spring</code>  框架中的一个注解，它用于定义切面的执行顺序。</p>\n</blockquote>\n<blockquote>\n<p>在 <code>Spring</code>  框架中，如果有多个切面类需要对同一个方法进行切面处理，那么这些切面类的执行顺序可能会影响到最终结果，为了控制这些切面类的执行顺序，可以使用 <code>@Order</code>  注解来定义它们的执行顺序。</p>\n</blockquote>\n<blockquote>\n<p><code>@Order</code>  注解可以应用在切面类上，用于指定切面执行的顺序，它的参数为一个整数，数值越小表示优先级越高，数值相同时将按照类名的自然顺序进行排序。</p>\n</blockquote>\n<blockquote>\n<p>需要引入以下坐标才可以正常使用此注解。</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>pom.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-aop<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>MyAspect1.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Aspect</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@Order</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyAspect1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Before</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(* com.example.UserService.*(..))\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">beforeAdvice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Before advice from MyAspect1 is executed.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>MyAspect2.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Aspect</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@Order</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyAspect2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Before</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(* com.example.UserService.*(..))\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">beforeAdvice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Before advice from MyAspect2 is executed.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"slf4j\"><a class=\"anchor\" href=\"#slf4j\">#</a> @Slf4j</h1>\n<blockquote>\n<p>此注解用于简化日志记录， <code>@Slf4j</code>  是 <code>Lombok</code>  框架中的一个注解，它用于在 <code>Java</code>  类中自动生成日志记录器。</p>\n</blockquote>\n<blockquote>\n<p>在 <code>Java</code>  开发中日志记录是非常重要的一个环节，它可以帮助我们更好地了解程序的运行状况，从而可以更好地进行优化和调试，通常情况下，我们需要手动引入日志框架如： <code>Log4j</code> 、 <code>Slf4j</code>  等，并编写相应的日志记录代码，手动编写这些代码会比较繁琐并且还容易出现错误，为了日志记录过程， <code>Lombok</code>  框架提供了一个 <code>@Slf4j</code>  注解，它可以在 <code>Java</code>  类中自动生成日志记录器。</p>\n</blockquote>\n<blockquote>\n<p>需要引入以下坐标才可以正常使用此注解。</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>pom.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.projectlombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>lombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.18.26<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>MyService.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 在这个例子中，我们定义了一个 MyService 类，并使用 @Slf4j 注解来自动生成日志记录器。然后，在 doSomething () 方法中，我们直接使用 log 变量来记录日志，而不需要再引入其他的日志框架。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 需要注意的是，使用 @Slf4j 注解需要在编译器中安装 Lombok 插件，否则可能会出现编译错误。另外，虽然 @Slf4j 注解非常方便，但在实际应用中，我们还需要根据实际情况选择合适的日志框架，并编写相应的日志记录代码。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 总之，@Slf4j 是 Lombok 框架中的一个注解，可以在 Java 类中自动生成日志记录器，从而简化日志记录的过程。它是一种极为方便的解决方案，可以提高应用程序的可维护性和可读性。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@Slf4j</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is a debug message.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is an info message.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is an error message.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"data\"><a class=\"anchor\" href=\"#data\">#</a> @Data</h1>\n<blockquote>\n<p>此注解用于自动生成 <code>JavaBean</code>  中的 <code>get</code> 、 <code>set</code> 、 <code>toString</code> 、 <code>hashCode</code> 、 <code>equals</code>  方法。</p>\n</blockquote>\n<blockquote>\n<p><code>@Data</code>  是 <code>Lombok</code>  框架中的一个注解，它可以自动生成 <code>Java</code>  类的 <code>get</code> 、 <code>set</code> 、 <code>toString</code> 、 <code>hashCode</code> 、 <code>equals</code>  方法。</p>\n</blockquote>\n<blockquote>\n<p>在日常的 <code>Java</code>  开发中，有时候经常需要编写一些 <code>POJO</code>  类来表示数据结构，这些类通常包含一些成员变量，并且需要编写相应的 <code>get</code> 、 <code>set</code>  等方法，为了简化这个过程 <code>Lombok</code>  框架提供了一个 <code>@Data</code>  注解就可以自动生成这些方法。</p>\n</blockquote>\n<blockquote>\n<p>需要引入以下坐标才可以正常使用此注解。</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>pom.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.projectlombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>lombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.18.26<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>User.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"noargsconstructor\"><a class=\"anchor\" href=\"#noargsconstructor\">#</a> @NoArgsConstructor</h1>\n<blockquote>\n<p>此注解用于生成无参构造函数， <code>@NoArgsConstructor</code>  是 <code>Lombok</code>  框架中的一个注解，它用于自动生成一个无参构造方法。</p>\n</blockquote>\n<blockquote>\n<p>需要引入以下坐标才可以正常使用此注解。</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>pom.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.projectlombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>lombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.18.26<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>User.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 在这个例子中，我们定义了一个 User 类，并使用 @NoArgsConstructor 注解来自动生成一个无参构造方法。然后，在其他的 Java 类中，我们可以直接创建 User 对象的实例，而不需要手动编写无参构造方法。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 需要注意的是，使用 @NoArgsConstructor 注解需要在编译器中安装 Lombok 插件，否则可能会出现编译错误。另外，虽然 @NoArgsConstructor 注解非常方便，但在实际应用中，我们还需要根据实际情况选择合适的构造方法，并编写相应的代码。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 总之，@NoArgsConstructor 是 Lombok 框架中的一个注解，用于自动生成一个无参构造方法，从而简化 Java 开发的过程。它是一种极为方便的解决方案，可以提高应用程序的可维护性和可读性。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@NoArgsConstructor</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"allargsconstructor\"><a class=\"anchor\" href=\"#allargsconstructor\">#</a> @AllArgsConstructor</h1>\n<blockquote>\n<p>此注解用于生成全参构造函数， <code>@AllArgsConstructor</code>  是 <code>Lombok</code>  框架中的一个注解，用于自动生成一个全参构造方法。</p>\n</blockquote>\n<blockquote>\n<p>需要引入以下坐标才可以正常使用此注解。</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>pom.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.projectlombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>lombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.18.26<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>User.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 在这个例子中，我们定义了一个 User 类，并使用 @AllArgsConstructor 注解来自动生成一个全参构造方法。然后，在其他的 Java 类中，我们可以直接创建 User 对象的实例，并传入相应的参数，而不需要手动编写全参构造方法。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 需要注意的是，使用 @AllArgsConstructor 注解需要在编译器中安装 Lombok 插件，否则可能会出现编译错误。另外，虽然 @AllArgsConstructor 注解非常方便，但在实际应用中，我们还需要根据实际情况选择合适的构造方法，并编写相应的代码。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 总之，@AllArgsConstructor 是 Lombok 框架中的一个注解，用于自动生成一个全参构造方法，从而简化 Java 开发的过程。它是一种极为方便的解决方案，可以提高应用程序的可维护性和可读性。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@AllArgsConstructor</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"builder\"><a class=\"anchor\" href=\"#builder\">#</a> @Builder</h1>\n<blockquote>\n<p>此注解用于生成 <code>Builder</code>  模式的构造函数， <code>@Builder</code>  是 <code>Lombok</code>  框架中的一个注解，它用于自动生成一个 <code>Builder</code>  模式的构造器。</p>\n</blockquote>\n<blockquote>\n<p>需要引入以下坐标才可以正常使用此注解。</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>pom.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.projectlombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>lombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.18.26<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>User.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 在这个例子中，我们定义了一个 User 类，并使用 @Builder 注解来自动生成一个 Builder 模式的构造器。然后，在其他的 Java 类中，我们可以使用链式调用的方式设置 User 对象的属性，并最终创建一个不可变的对象。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 需要注意的是，使用 @Builder 注解需要在编译器中安装 Lombok 插件，否则可能会出现编译错误。另外，虽然 @Builder 注解非常方便，但在实际应用中，我们还需要根据实际情况选择合适的构造方法，并编写相应的代码。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 总之，@Builder 是 Lombok 框架中的一个注解，用于自动生成一个 Builder 模式的构造器，从而简化 Java 开发的过程。它是一种极为方便的解决方案，可以提高应用程序的可维护性和可读性。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@Builder</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"equalsandhashcode\"><a class=\"anchor\" href=\"#equalsandhashcode\">#</a> @EqualsAndHashCode</h1>\n<blockquote>\n<p>此注解用于生成 <code>hashCode</code>  和 <code>equals</code>  方法， <code>@EqualsAndHashCode</code>  是 <code>Lombok</code>  框架中的一个注解，它用于自动生成 <code>equals()</code>  和 <code>hashCode()</code>  方法。</p>\n</blockquote>\n<blockquote>\n<p>需要引入以下坐标才可以正常使用此注解。</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>pom.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.projectlombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>lombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.18.26<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>User.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@EqualsAndHashCode</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"tostring\"><a class=\"anchor\" href=\"#tostring\">#</a> @ToString</h1>\n<blockquote>\n<p>此注解用于生成 <code>toString()</code>  方法， <code>@ToString</code>  是 <code>Lombok</code>  框架中的一个注解，它用于自动生成 <code>toString()</code>  方法，如果需要排除某些属性，可以使用 exclude 属性来指定排除的属性。</p>\n</blockquote>\n<blockquote>\n<p>需要引入以下坐标才可以正常使用此注解。</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>pom.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.projectlombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>lombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.18.26<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>User.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@ToString</span><span class=\"token punctuation\">(</span>exclude <span class=\"token operator\">=</span> <span class=\"token string\">\"password\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"getter\"><a class=\"anchor\" href=\"#getter\">#</a> @Getter</h1>\n<blockquote>\n<p>此注解用于生成 <code>get</code>  方法， <code>@Getter</code>  是 <code>Lombok</code>  框架中的一个注解，用于自动生成 <code>getter</code>  方法。</p>\n</blockquote>\n<blockquote>\n<p>需要引入以下坐标才可以正常使用此注解。</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>pom.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.projectlombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>lombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.18.26<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>User.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Getter</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"setter\"><a class=\"anchor\" href=\"#setter\">#</a> @Setter</h1>\n<blockquote>\n<p>此注解用于生成 <code>set</code>  方法， <code>@Setter</code>  是 <code>Lombok</code>  框架中的一个注解，用于自动生成 <code>setter</code>  方法。</p>\n</blockquote>\n<blockquote>\n<p>需要引入以下坐标才可以正常使用此注解。</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>pom.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.projectlombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>lombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.18.26<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>User.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Setter</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "Java",
                "Java深入理解",
                "计算机科学",
                "Java深入理解",
                "Spring",
                "SpringBoot",
                "注解"
            ]
        },
        {
            "id": "https://rainrem.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/java/spring/SpringBoot3%E5%8E%9F%E7%90%86%E4%B8%8E%E6%A0%B8%E5%BF%83/",
            "url": "https://rainrem.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/java/spring/SpringBoot3%E5%8E%9F%E7%90%86%E4%B8%8E%E6%A0%B8%E5%BF%83/",
            "title": "SpringBoot3原理与核心",
            "date_published": "2024-01-16T17:12:58.000Z",
            "content_html": "<h1 id=\"springboot简介\"><a class=\"anchor\" href=\"#springboot简介\">#</a> SpringBoot 简介</h1>\n<blockquote>\n<p><code>SpringBoot</code>  的目标是为所有 <code>Spring</code>  开发者提供一种快速的入门体验，开箱即用，无需编写配置文件， <code>SpringBoot</code>  可以快速创建一个独立的生产级别的 <code>Spring</code>  应用，其实 <code>SpringBoot</code>  底层是靠 <code>Spring</code>  来实现的，使用 <code>SpringBoot</code>  只需要编写少量配置即可快速整合 <code>Spring</code>  以及第三方技术支持。</p>\n</blockquote>\n<h1 id=\"springboot特性\"><a class=\"anchor\" href=\"#springboot特性\">#</a> SpringBoot 特性</h1>\n<ul>\n<li>可以快速创建独立的 <code>Spring</code>  应用。\n<ul>\n<li><code>SSM</code> ：导包、编写配置、启动运行。</li>\n</ul>\n</li>\n<li>直接嵌入 <code>Tomcat</code> 、 <code>Jetty</code> 、 <code>Undertow</code>  等 <code>Servlet</code>  容器，无需部署 <code>war</code>  包。</li>\n<li>提供可选的 <code>starter</code>  来简化应用之间的整合，如： <code>web-starter</code> 、 <code>json-starter</code> 、 <code>mybatis-starter</code>  等。</li>\n<li>按需自动配置 <code>Spring</code>  以及第三方库：\n<ul>\n<li>约定大于配置，每个场景都有很多默认配置。</li>\n<li>如果需要使用这些场景，这个场景的所有配置都会自动配置好。</li>\n</ul>\n</li>\n<li>提供生产级特性如：监控指标、健康检查 <code>(k8s)</code> 、外部化配置等。</li>\n<li>无代码生成，无 <code>xml</code> , 配置文件可以使用 <code>properties</code> 、 <code>ymal</code> 、 <code>yml</code> 。</li>\n</ul>\n<h1 id=\"系统环境最低要求\"><a class=\"anchor\" href=\"#系统环境最低要求\">#</a> 系统环境最低要求</h1>\n<blockquote>\n<p><code>SpringBoot3.0</code>  最低需求为 <code>Java 17</code>  并且还需要 <code>SpringFramework 6.0.0-M2</code>  及以上版本。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">构建工具</th>\n<th style=\"text-align:center\">版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Gradle</td>\n<td style=\"text-align:center\">7.4+</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Maven</td>\n<td style=\"text-align:center\">3.5+</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>开发工具建议使用 <code>IntelliJ IDEA 2021.2.1</code>  及更高版本。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">工具 &amp; 环境</th>\n<th style=\"text-align:center\">版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Java</td>\n<td style=\"text-align:center\">17+</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">IDEA</td>\n<td style=\"text-align:center\">2021.2.1+</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p><code>SpringBoot</code>  支持以下嵌入式 <code>servlet</code>  容器：</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">容器名称</th>\n<th style=\"text-align:center\">Servlet 版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Tomcat 10.0</td>\n<td style=\"text-align:center\">5.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Jetty</td>\n<td style=\"text-align:center\">5.1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Undertow 2.2</td>\n<td style=\"text-align:center\">5.1</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"springboot快速体验\"><a class=\"anchor\" href=\"#springboot快速体验\">#</a> SpringBoot 快速体验</h1>\n<blockquote>\n<p>1️⃣ 创建项目或模块，选择 <code>Spring Initializr</code> , <code>Java</code>  版本最低要求为 <code>17</code> 。</p>\n</blockquote>\n<p><img data-src=\"https://s11.ax1x.com/2024/01/17/pFFO2k9.png\" alt=\"pFFO2k9.png\" /></p>\n<blockquote>\n<p>2️⃣ 选择 <code>SpringBoot</code>  的版本，以及 <code>SpringWeb</code>  依赖。</p>\n</blockquote>\n<p><img data-src=\"https://s11.ax1x.com/2024/01/17/pFFOWf1.png\" alt=\"pFFOWf1.png\" /></p>\n<blockquote>\n<p>3️⃣ 目录结构如下：</p>\n</blockquote>\n<p><img data-src=\"https://s11.ax1x.com/2024/01/17/pFFOhSx.png\" alt=\"pFFOhSx.png\" /></p>\n<blockquote>\n<p>4️⃣  <code>pom.xml</code>  文件解析：</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>pom.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>project</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>modelVersion</span><span class=\"token punctuation\">></span></span>4.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>modelVersion</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 引入 Spring Boot3.x 父项目 --></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>parent</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-parent<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.2.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>relativePath</span><span class=\"token punctuation\">/></span></span> <span class=\"token comment\">&lt;!-- lookup parent from repository --></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>parent</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>top.rem.rain<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>springboot3-demo<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>0.0.1-SNAPSHOT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>springboot3-demo<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>description</span><span class=\"token punctuation\">></span></span>springboot3-demo<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>description</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>properties</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">&lt;!--Java Jdk 版本要求 17 及以上 --></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>java.version</span><span class=\"token punctuation\">></span></span>17<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>java.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>properties</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 引入 spring-boot-starter-web, 支持 web 开发 --></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-web<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 引入单元测试 starter--></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token comment\">&lt;!--SpringBoot maven 插件，支持 maven 的全流程命令以及程序运行 --></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-maven-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>project</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>5️⃣ 在 <code>application.properties</code>  配置文件中指定端口。</p>\n</blockquote>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"><span>application.properties</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#应用启动端口</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key attr-name\">server.port</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">8080</span></pre></td></tr></table></figure><blockquote>\n<p>6️⃣ 编写一个 <code>Controller</code>  类。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>springboot3demo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestMapping</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RestController</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Controller</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/spring\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getSpring</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"hello,my is SpringBoot3.x\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>7️⃣ 启动应用。</p>\n</blockquote>\n<p><img data-src=\"https://s11.ax1x.com/2024/01/17/pFFOjpt.png\" alt=\"pFFOjpt.png\" /></p>\n<blockquote>\n<p>8️⃣ 使用浏览器访问 <code>http://localhost:8080/spring</code> ， 接口结果如下：</p>\n</blockquote>\n<p><img data-src=\"https://s11.ax1x.com/2024/01/17/pFFOv1P.png\" alt=\"pFFOv1P.png\" /></p>\n<h1 id=\"springboot依赖管理机制\"><a class=\"anchor\" href=\"#springboot依赖管理机制\">#</a> SpringBoot 依赖管理机制</h1>\n<ol>\n<li>为什么导入 <code>spring-boot-starter-web</code>  所有相关依赖都导入了进来？\n<ol>\n<li>开发什么场景，导入什么场景启动器。</li>\n<li>导入场景启动器，场景启动器会自动把这个场景的所有核心依赖全部导入进来。</li>\n</ol>\n</li>\n<li>为什么不需要写版本号？\n<ol>\n<li>每个 <code>boot</code>  项目都有一个父项目 <code>spring-boot-starter-parent</code> 。</li>\n<li><code>parent</code>  的父项目是 <code>spring-boot-dependencies</code> 。</li>\n<li>父项目版本仲裁中心， <code>Spring</code>  官方已经把常见 <code>jar</code>  的依赖版本都做好了声明。</li>\n</ol>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>spring-boot-dependencies-3.2.1.pom.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>project</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>modelVersion</span><span class=\"token punctuation\">></span></span>4.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>modelVersion</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-dependencies<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.2.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>packaging</span><span class=\"token punctuation\">></span></span>pom<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>packaging</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>spring-boot-dependencies<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>description</span><span class=\"token punctuation\">></span></span>Spring Boot Dependencies<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>description</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>url</span><span class=\"token punctuation\">></span></span>https://spring.io/projects/spring-boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>url</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>licenses</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>license</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>Apache License, Version 2.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>url</span><span class=\"token punctuation\">></span></span>https://www.apache.org/licenses/LICENSE-2.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>url</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>license</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>licenses</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>developers</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>developer</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>Spring<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>email</span><span class=\"token punctuation\">></span></span>ask@spring.io<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>email</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>organization</span><span class=\"token punctuation\">></span></span>VMware, Inc.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>organization</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>organizationUrl</span><span class=\"token punctuation\">></span></span>https://www.spring.io<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>organizationUrl</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>developer</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>developers</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scm</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>url</span><span class=\"token punctuation\">></span></span>https://github.com/spring-projects/spring-boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>url</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scm</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>properties</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>activemq.version</span><span class=\"token punctuation\">></span></span>5.18.3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>activemq.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>angus-mail.version</span><span class=\"token punctuation\">></span></span>2.0.2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>angus-mail.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artemis.version</span><span class=\"token punctuation\">></span></span>2.31.2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artemis.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>aspectj.version</span><span class=\"token punctuation\">></span></span>1.9.21<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>aspectj.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>assertj.version</span><span class=\"token punctuation\">></span></span>3.24.2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>assertj.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>awaitility.version</span><span class=\"token punctuation\">></span></span>4.2.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>awaitility.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>brave.version</span><span class=\"token punctuation\">></span></span>5.16.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>brave.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build-helper-maven-plugin.version</span><span class=\"token punctuation\">></span></span>3.4.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build-helper-maven-plugin.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>byte-buddy.version</span><span class=\"token punctuation\">></span></span>1.14.10<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>byte-buddy.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>cache2k.version</span><span class=\"token punctuation\">></span></span>2.6.1.Final<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>cache2k.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>caffeine.version</span><span class=\"token punctuation\">></span></span>3.1.8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>caffeine.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>cassandra-driver.version</span><span class=\"token punctuation\">></span></span>4.17.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>cassandra-driver.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>classmate.version</span><span class=\"token punctuation\">></span></span>1.6.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>classmate.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>commons-codec.version</span><span class=\"token punctuation\">></span></span>1.16.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>commons-codec.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>commons-dbcp2.version</span><span class=\"token punctuation\">></span></span>2.10.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>commons-dbcp2.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>commons-lang3.version</span><span class=\"token punctuation\">></span></span>3.13.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>commons-lang3.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>commons-pool.version</span><span class=\"token punctuation\">></span></span>1.6<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>commons-pool.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>commons-pool2.version</span><span class=\"token punctuation\">></span></span>2.12.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>commons-pool2.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    //..........配置太多此处省略，只展示一部分，知道这个事就可以</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>properties</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencyManagement</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      //.........</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencyManagement</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pluginManagement</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        //.........</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pluginManagement</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>project</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>第三方 <code>jar</code>  包。\n<ol>\n<li>父项目中没有进行管理的自行声明即可。</li>\n</ol>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba.fastjson2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>fastjson2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.0.25<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"springboot自动配置机制\"><a class=\"anchor\" href=\"#springboot自动配置机制\">#</a> SpringBoot 自动配置机制</h1>\n<h2 id=\"初步理解\"><a class=\"anchor\" href=\"#初步理解\">#</a> 初步理解</h2>\n<ol>\n<li>自动配置 <code>Tomcat</code> 、 <code>SpringMVC</code>  等。\n<ol>\n<li>导入场景后容器就会自动配置好这个场景的核心组件。</li>\n<li>之前需要自己手动去写 <code>DispatcherServlet</code> 、 <code>ViewResolver</code>  等配置，现在这些配置已经自动配置好了，容器中有了什么组件就具备什么功能。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Springboot3DemoApplication.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>springboot3demo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringApplication</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>autoconfigure<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringBootApplication</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootApplication</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Springboot3DemoApplication</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 1. 局部变量类型的自动推断</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">var</span> ioc <span class=\"token operator\">=</span> <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Springboot3DemoApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 2. 获取容器中所有组件的名字</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> names <span class=\"token operator\">=</span> ioc<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanDefinitionNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 3. 挨个遍历：</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// dispatcherServlet、beanNameViewResolver、characterEncodingFilter、multipartResolver</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// SpringBoot 把以前配置的核心组件现在都给我们自动配置好了。</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name <span class=\"token operator\">:</span> names<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>执行结果如下：</li>\n</ol>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"><span>执行结果</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>C:\\LightRainData\\IDEA\\JDK\\JDK-17.0.6\\bin\\java.exe -XX:TieredStopAtLevel&#x3D;1 -Dspring.output.ansi.enabled&#x3D;always -Dcom.sun.management.jmxremote -Dspring.jmx.enabled&#x3D;true -Dspring.liveBeansView.mbeanDomain -Dspring.application.admin.enabled&#x3D;true &quot;-Dmanagement.endpoints.jmx.exposure.include&#x3D;*&quot; &quot;-javaagent:C:\\LightRainData\\IDEA\\IntelliJ IDEA 2022.3.2\\lib\\idea_rt.jar&#x3D;1541:C:\\LightRainData\\IDEA\\IntelliJ IDEA 2022.3.2\\bin&quot; -Dfile.encoding&#x3D;UTF-8 -classpath D:\\ 项目 \\gitee\\springboot3-demo\\target\\classes;C:\\Users\\LightRain\\.m2\\repository\\org\\springframework\\boot\\spring-boot-starter-web\\3.2.1\\spring-boot-starter-web-3.2.1.jar;C:\\Users\\LightRain\\.m2\\repository\\org\\springframework\\boot\\spring-boot-starter\\3.2.1\\spring-boot-starter-3.2.1.jar;C:\\Users\\LightRain\\.m2\\repository\\org\\springframework\\boot\\spring-boot\\3.2.1\\spring-boot-3.2.1.jar;C:\\Users\\LightRain\\.m2\\repository\\org\\springframework\\boot\\spring-boot-autoconfigure\\3.2.1\\spring-boot-autoconfigure-3.2.1.jar;C:\\Users\\LightRain\\.m2\\repository\\org\\springframework\\boot\\spring-boot-starter-logging\\3.2.1\\spring-boot-starter-logging-3.2.1.jar;C:\\Users\\LightRain\\.m2\\repository\\ch\\qos\\logback\\logback-classic\\1.4.14\\logback-classic-1.4.14.jar;C:\\Users\\LightRain\\.m2\\repository\\ch\\qos\\logback\\logback-core\\1.4.14\\logback-core-1.4.14.jar;C:\\Users\\LightRain\\.m2\\repository\\org\\apache\\logging\\log4j\\log4j-to-slf4j\\2.21.1\\log4j-to-slf4j-2.21.1.jar;C:\\Users\\LightRain\\.m2\\repository\\org\\apache\\logging\\log4j\\log4j-api\\2.21.1\\log4j-api-2.21.1.jar;C:\\Users\\LightRain\\.m2\\repository\\org\\slf4j\\jul-to-slf4j\\2.0.9\\jul-to-slf4j-2.0.9.jar;C:\\Users\\LightRain\\.m2\\repository\\jakarta\\annotation\\jakarta.annotation-api\\2.1.1\\jakarta.annotation-api-2.1.1.jar;C:\\Users\\LightRain\\.m2\\repository\\org\\yaml\\snakeyaml\\2.2\\snakeyaml-2.2.jar;C:\\Users\\LightRain\\.m2\\repository\\org\\springframework\\boot\\spring-boot-starter-json\\3.2.1\\spring-boot-starter-json-3.2.1.jar;C:\\Users\\LightRain\\.m2\\repository\\com\\fasterxml\\jackson\\core\\jackson-databind\\2.15.3\\jackson-databind-2.15.3.jar;C:\\Users\\LightRain\\.m2\\repository\\com\\fasterxml\\jackson\\core\\jackson-annotations\\2.15.3\\jackson-annotations-2.15.3.jar;C:\\Users\\LightRain\\.m2\\repository\\com\\fasterxml\\jackson\\core\\jackson-core\\2.15.3\\jackson-core-2.15.3.jar;C:\\Users\\LightRain\\.m2\\repository\\com\\fasterxml\\jackson\\datatype\\jackson-datatype-jdk8\\2.15.3\\jackson-datatype-jdk8-2.15.3.jar;C:\\Users\\LightRain\\.m2\\repository\\com\\fasterxml\\jackson\\datatype\\jackson-datatype-jsr310\\2.15.3\\jackson-datatype-jsr310-2.15.3.jar;C:\\Users\\LightRain\\.m2\\repository\\com\\fasterxml\\jackson\\module\\jackson-module-parameter-names\\2.15.3\\jackson-module-parameter-names-2.15.3.jar;C:\\Users\\LightRain\\.m2\\repository\\org\\springframework\\boot\\spring-boot-starter-tomcat\\3.2.1\\spring-boot-starter-tomcat-3.2.1.jar;C:\\Users\\LightRain\\.m2\\repository\\org\\apache\\tomcat\\embed\\tomcat-embed-core\\10.1.17\\tomcat-embed-core-10.1.17.jar;C:\\Users\\LightRain\\.m2\\repository\\org\\apache\\tomcat\\embed\\tomcat-embed-el\\10.1.17\\tomcat-embed-el-10.1.17.jar;C:\\Users\\LightRain\\.m2\\repository\\org\\apache\\tomcat\\embed\\tomcat-embed-websocket\\10.1.17\\tomcat-embed-websocket-10.1.17.jar;C:\\Users\\LightRain\\.m2\\repository\\org\\springframework\\spring-web\\6.1.2\\spring-web-6.1.2.jar;C:\\Users\\LightRain\\.m2\\repository\\org\\springframework\\spring-beans\\6.1.2\\spring-beans-6.1.2.jar;C:\\Users\\LightRain\\.m2\\repository\\io\\micrometer\\micrometer-observation\\1.12.1\\micrometer-observation-1.12.1.jar;C:\\Users\\LightRain\\.m2\\repository\\io\\micrometer\\micrometer-commons\\1.12.1\\micrometer-commons-1.12.1.jar;C:\\Users\\LightRain\\.m2\\repository\\org\\springframework\\spring-webmvc\\6.1.2\\spring-webmvc-6.1.2.jar;C:\\Users\\LightRain\\.m2\\repository\\org\\springframework\\spring-aop\\6.1.2\\spring-aop-6.1.2.jar;C:\\Users\\LightRain\\.m2\\repository\\org\\springframework\\spring-context\\6.1.2\\spring-context-6.1.2.jar;C:\\Users\\LightRain\\.m2\\repository\\org\\springframework\\spring-expression\\6.1.2\\spring-expression-6.1.2.jar;C:\\Users\\LightRain\\.m2\\repository\\org\\slf4j\\slf4j-api\\2.0.9\\slf4j-api-2.0.9.jar;C:\\Users\\LightRain\\.m2\\repository\\org\\springframework\\spring-core\\6.1.2\\spring-core-6.1.2.jar;C:\\Users\\LightRain\\.m2\\repository\\org\\springframework\\spring-jcl\\6.1.2\\spring-jcl-6.1.2.jar top.rem.rain.springboot3demo.Springboot3DemoApplication</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  .   ____          _            __ _ _</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> &#x2F;\\\\ &#x2F;___&#39;_ __ _ _(_)_ __  __ _ \\ \\ \\ \\</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>( ( )\\___ | &#39;_ | &#39;_| | &#39;_ \\&#x2F;_&#96; | \\ \\ \\ \\</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> \\\\&#x2F;  ___)| |_)| | | | | || (_| |  ) ) ) )</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  &#39;  |____| .__|_| |_|_| |_\\__, | &#x2F;&#x2F;&#x2F;&#x2F;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;|_|&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;|___&#x2F;&#x3D;&#x2F;_&#x2F;_&#x2F;_&#x2F;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> :: Spring Boot ::                (v3.2.1)</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>2024-01-17T03:42:52.148+08:00  INFO 75548 --- [           main] t.r.r.s.Springboot3DemoApplication       : Starting Springboot3DemoApplication using Java 17.0.6 with PID 75548 (D:\\ 项目 \\gitee\\springboot3-demo\\target\\classes started by LightRain in D:\\ 项目 \\gitee\\springboot3-demo)</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>2024-01-17T03:42:52.150+08:00  INFO 75548 --- [           main] t.r.r.s.Springboot3DemoApplication       : No active profile set, falling back to 1 default profile: &quot;default&quot;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>2024-01-17T03:42:52.721+08:00  INFO 75548 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 8080 (http)</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>2024-01-17T03:42:52.730+08:00  INFO 75548 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>2024-01-17T03:42:52.730+08:00  INFO 75548 --- [           main] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat&#x2F;10.1.17]</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>2024-01-17T03:42:52.780+08:00  INFO 75548 --- [           main] o.a.c.c.C.[Tomcat].[localhost].[&#x2F;]       : Initializing Spring embedded WebApplicationContext</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>2024-01-17T03:42:52.780+08:00  INFO 75548 --- [           main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 595 ms</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>2024-01-17T03:42:53.009+08:00  INFO 75548 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8080 (http) with context path &#39;&#39;</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>2024-01-17T03:42:53.015+08:00  INFO 75548 --- [           main] t.r.r.s.Springboot3DemoApplication       : Started Springboot3DemoApplication in 1.127 seconds (process running for 1.617)</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>org.springframework.context.annotation.internalConfigurationAnnotationProcessor</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>org.springframework.context.annotation.internalAutowiredAnnotationProcessor</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>org.springframework.context.annotation.internalCommonAnnotationProcessor</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>org.springframework.context.event.internalEventListenerProcessor</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>org.springframework.context.event.internalEventListenerFactory</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>springboot3DemoApplication</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>org.springframework.boot.autoconfigure.internalCachingMetadataReaderFactory</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>controller</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>org.springframework.boot.autoconfigure.AutoConfigurationPackages</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>propertySourcesPlaceholderConfigurer</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>org.springframework.boot.autoconfigure.ssl.SslAutoConfiguration</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>fileWatcher</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>sslPropertiesSslBundleRegistrar</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>sslBundleRegistry</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>org.springframework.boot.context.internalConfigurationPropertiesBinder</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>org.springframework.boot.context.properties.BoundConfigurationProperties</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>org.springframework.boot.context.properties.EnableConfigurationPropertiesRegistrar.methodValidationExcludeFilter</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>spring.ssl-org.springframework.boot.autoconfigure.ssl.SslProperties</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration$TomcatWebSocketConfiguration</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>websocketServletWebServerCustomizer</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryConfiguration$EmbeddedTomcat</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>tomcatServletWebServerFactory</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>servletWebServerFactoryCustomizer</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>tomcatServletWebServerFactoryCustomizer</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>server-org.springframework.boot.autoconfigure.web.ServerProperties</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>webServerFactoryCustomizerBeanPostProcessor</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>errorPageRegistrarBeanPostProcessor</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletConfiguration</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>dispatcherServlet</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>spring.mvc-org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletRegistrationConfiguration</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>dispatcherServletRegistration</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>org.springframework.boot.autoconfigure.task.TaskExecutorConfigurations$ThreadPoolTaskExecutorBuilderConfiguration</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>threadPoolTaskExecutorBuilder</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>org.springframework.boot.autoconfigure.task.TaskExecutorConfigurations$TaskExecutorBuilderConfiguration</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>taskExecutorBuilder</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>org.springframework.boot.autoconfigure.task.TaskExecutorConfigurations$SimpleAsyncTaskExecutorBuilderConfiguration</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>simpleAsyncTaskExecutorBuilder</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>org.springframework.boot.autoconfigure.task.TaskExecutorConfigurations$TaskExecutorConfiguration</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>applicationTaskExecutor</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>spring.task.execution-org.springframework.boot.autoconfigure.task.TaskExecutionProperties</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$WhitelabelErrorViewConfiguration</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>error</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>beanNameViewResolver</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$DefaultErrorViewResolverConfiguration</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>conventionErrorViewResolver</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>spring.web-org.springframework.boot.autoconfigure.web.WebProperties</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>errorAttributes</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>basicErrorController</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>errorPageCustomizer</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>preserveErrorControllerTargetClassPostProcessor</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>welcomePageHandlerMapping</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>welcomePageNotAcceptableHandlerMapping</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>localeResolver</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>themeResolver</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>flashMapManager</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>mvcConversionService</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>mvcValidator</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>mvcContentNegotiationManager</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>requestMappingHandlerMapping</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>mvcPatternParser</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>mvcUrlPathHelper</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>mvcPathMatcher</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>viewControllerHandlerMapping</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>beanNameHandlerMapping</pre></td></tr><tr><td data-num=\"93\"></td><td><pre>routerFunctionMapping</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>resourceHandlerMapping</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>mvcResourceUrlProvider</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>defaultServletHandlerMapping</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>requestMappingHandlerAdapter</pre></td></tr><tr><td data-num=\"98\"></td><td><pre>handlerFunctionAdapter</pre></td></tr><tr><td data-num=\"99\"></td><td><pre>mvcUriComponentsContributor</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>httpRequestHandlerAdapter</pre></td></tr><tr><td data-num=\"101\"></td><td><pre>simpleControllerHandlerAdapter</pre></td></tr><tr><td data-num=\"102\"></td><td><pre>handlerExceptionResolver</pre></td></tr><tr><td data-num=\"103\"></td><td><pre>mvcViewResolver</pre></td></tr><tr><td data-num=\"104\"></td><td><pre>mvcHandlerMappingIntrospector</pre></td></tr><tr><td data-num=\"105\"></td><td><pre>viewNameTranslator</pre></td></tr><tr><td data-num=\"106\"></td><td><pre>org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter</pre></td></tr><tr><td data-num=\"107\"></td><td><pre>defaultViewResolver</pre></td></tr><tr><td data-num=\"108\"></td><td><pre>viewResolver</pre></td></tr><tr><td data-num=\"109\"></td><td><pre>requestContextFilter</pre></td></tr><tr><td data-num=\"110\"></td><td><pre>org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration</pre></td></tr><tr><td data-num=\"111\"></td><td><pre>formContentFilter</pre></td></tr><tr><td data-num=\"112\"></td><td><pre>org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration</pre></td></tr><tr><td data-num=\"113\"></td><td><pre>mbeanExporter</pre></td></tr><tr><td data-num=\"114\"></td><td><pre>objectNamingStrategy</pre></td></tr><tr><td data-num=\"115\"></td><td><pre>mbeanServer</pre></td></tr><tr><td data-num=\"116\"></td><td><pre>spring.jmx-org.springframework.boot.autoconfigure.jmx.JmxProperties</pre></td></tr><tr><td data-num=\"117\"></td><td><pre>org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration</pre></td></tr><tr><td data-num=\"118\"></td><td><pre>springApplicationAdminRegistrar</pre></td></tr><tr><td data-num=\"119\"></td><td><pre>org.springframework.boot.autoconfigure.aop.AopAutoConfiguration$ClassProxyingConfiguration</pre></td></tr><tr><td data-num=\"120\"></td><td><pre>forceAutoProxyCreatorToUseClassProxying</pre></td></tr><tr><td data-num=\"121\"></td><td><pre>org.springframework.boot.autoconfigure.aop.AopAutoConfiguration</pre></td></tr><tr><td data-num=\"122\"></td><td><pre>org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration</pre></td></tr><tr><td data-num=\"123\"></td><td><pre>applicationAvailability</pre></td></tr><tr><td data-num=\"124\"></td><td><pre>org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration</pre></td></tr><tr><td data-num=\"125\"></td><td><pre>standardJacksonObjectMapperBuilderCustomizer</pre></td></tr><tr><td data-num=\"126\"></td><td><pre>spring.jackson-org.springframework.boot.autoconfigure.jackson.JacksonProperties</pre></td></tr><tr><td data-num=\"127\"></td><td><pre>org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration</pre></td></tr><tr><td data-num=\"128\"></td><td><pre>jacksonObjectMapperBuilder</pre></td></tr><tr><td data-num=\"129\"></td><td><pre>org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration</pre></td></tr><tr><td data-num=\"130\"></td><td><pre>parameterNamesModule</pre></td></tr><tr><td data-num=\"131\"></td><td><pre>org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration</pre></td></tr><tr><td data-num=\"132\"></td><td><pre>jacksonObjectMapper</pre></td></tr><tr><td data-num=\"133\"></td><td><pre>org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonMixinConfiguration</pre></td></tr><tr><td data-num=\"134\"></td><td><pre>jsonMixinModuleEntries</pre></td></tr><tr><td data-num=\"135\"></td><td><pre>jsonMixinModule</pre></td></tr><tr><td data-num=\"136\"></td><td><pre>org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration</pre></td></tr><tr><td data-num=\"137\"></td><td><pre>jsonComponentModule</pre></td></tr><tr><td data-num=\"138\"></td><td><pre>org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration</pre></td></tr><tr><td data-num=\"139\"></td><td><pre>org.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration</pre></td></tr><tr><td data-num=\"140\"></td><td><pre>lifecycleProcessor</pre></td></tr><tr><td data-num=\"141\"></td><td><pre>spring.lifecycle-org.springframework.boot.autoconfigure.context.LifecycleProperties</pre></td></tr><tr><td data-num=\"142\"></td><td><pre>org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration$StringHttpMessageConverterConfiguration</pre></td></tr><tr><td data-num=\"143\"></td><td><pre>stringHttpMessageConverter</pre></td></tr><tr><td data-num=\"144\"></td><td><pre>org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration$MappingJackson2HttpMessageConverterConfiguration</pre></td></tr><tr><td data-num=\"145\"></td><td><pre>mappingJackson2HttpMessageConverter</pre></td></tr><tr><td data-num=\"146\"></td><td><pre>org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration</pre></td></tr><tr><td data-num=\"147\"></td><td><pre>org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration</pre></td></tr><tr><td data-num=\"148\"></td><td><pre>messageConverters</pre></td></tr><tr><td data-num=\"149\"></td><td><pre>org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration</pre></td></tr><tr><td data-num=\"150\"></td><td><pre>spring.info-org.springframework.boot.autoconfigure.info.ProjectInfoProperties</pre></td></tr><tr><td data-num=\"151\"></td><td><pre>org.springframework.boot.autoconfigure.sql.init.SqlInitializationAutoConfiguration</pre></td></tr><tr><td data-num=\"152\"></td><td><pre>spring.sql.init-org.springframework.boot.autoconfigure.sql.init.SqlInitializationProperties</pre></td></tr><tr><td data-num=\"153\"></td><td><pre>org.springframework.boot.sql.init.dependency.DatabaseInitializationDependencyConfigurer$DependsOnDatabaseInitializationPostProcessor</pre></td></tr><tr><td data-num=\"154\"></td><td><pre>org.springframework.boot.autoconfigure.task.TaskSchedulingConfigurations$ThreadPoolTaskSchedulerBuilderConfiguration</pre></td></tr><tr><td data-num=\"155\"></td><td><pre>threadPoolTaskSchedulerBuilder</pre></td></tr><tr><td data-num=\"156\"></td><td><pre>org.springframework.boot.autoconfigure.task.TaskSchedulingConfigurations$TaskSchedulerBuilderConfiguration</pre></td></tr><tr><td data-num=\"157\"></td><td><pre>taskSchedulerBuilder</pre></td></tr><tr><td data-num=\"158\"></td><td><pre>org.springframework.boot.autoconfigure.task.TaskSchedulingConfigurations$SimpleAsyncTaskSchedulerBuilderConfiguration</pre></td></tr><tr><td data-num=\"159\"></td><td><pre>simpleAsyncTaskSchedulerBuilder</pre></td></tr><tr><td data-num=\"160\"></td><td><pre>org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration</pre></td></tr><tr><td data-num=\"161\"></td><td><pre>spring.task.scheduling-org.springframework.boot.autoconfigure.task.TaskSchedulingProperties</pre></td></tr><tr><td data-num=\"162\"></td><td><pre>org.springframework.boot.autoconfigure.web.client.RestClientAutoConfiguration</pre></td></tr><tr><td data-num=\"163\"></td><td><pre>httpMessageConvertersRestClientCustomizer</pre></td></tr><tr><td data-num=\"164\"></td><td><pre>restClientSsl</pre></td></tr><tr><td data-num=\"165\"></td><td><pre>restClientBuilderConfigurer</pre></td></tr><tr><td data-num=\"166\"></td><td><pre>restClientBuilder</pre></td></tr><tr><td data-num=\"167\"></td><td><pre>org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration</pre></td></tr><tr><td data-num=\"168\"></td><td><pre>restTemplateBuilderConfigurer</pre></td></tr><tr><td data-num=\"169\"></td><td><pre>restTemplateBuilder</pre></td></tr><tr><td data-num=\"170\"></td><td><pre>org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration$TomcatWebServerFactoryCustomizerConfiguration</pre></td></tr><tr><td data-num=\"171\"></td><td><pre>tomcatWebServerFactoryCustomizer</pre></td></tr><tr><td data-num=\"172\"></td><td><pre>org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration</pre></td></tr><tr><td data-num=\"173\"></td><td><pre>org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration</pre></td></tr><tr><td data-num=\"174\"></td><td><pre>characterEncodingFilter</pre></td></tr><tr><td data-num=\"175\"></td><td><pre>localeCharsetMappingsCustomizer</pre></td></tr><tr><td data-num=\"176\"></td><td><pre>org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration</pre></td></tr><tr><td data-num=\"177\"></td><td><pre>multipartConfigElement</pre></td></tr><tr><td data-num=\"178\"></td><td><pre>multipartResolver</pre></td></tr><tr><td data-num=\"179\"></td><td><pre>spring.servlet.multipart-org.springframework.boot.autoconfigure.web.servlet.MultipartProperties</pre></td></tr><tr><td data-num=\"180\"></td><td><pre>org.springframework.aop.config.internalAutoProxyCreator</pre></td></tr></table></figure></li>\n<li>默认包扫描规则\n<ol>\n<li><code>@SpringBootApplication</code>  标注的类就是主程序类。</li>\n<li><code>SpringBoot</code>  只会扫描主程序所在的包及其下面的子包，自动 <code>component-scan</code>  功能，在主程序的包之外，哪怕写了 <code>MVC</code>  组件，注解也无法扫描并交由 <code>IOC</code>  容器来处理。</li>\n<li>自定义扫描路径，如果非要放在默认之外，需要给注解加上内容配置。\n<ol>\n<li><code>@SpringBootApplication(scanBasePackages = &quot;top.rem.rain&quot;)</code></li>\n<li><code>@ComponentScan(&quot;top.rem.rain&quot;)</code>  直接指定扫描的路径，这是因为上面的 <code>@SpringBootApplication</code>  注解包含内嵌了三个注解分别是： <code>@SpringBootConfiguration</code> 、 <code>@EnableAutoConfiguration</code> 、 <code>@ComponentScan</code> 。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>默认配置值\n<ol>\n<li>配置文件的所有配置项是和某个类的对象值进行绑定的，可以在配置文件中利用 <code>servier.port=8080</code>  配置，然后使用 <code>ctrl+鼠标左键</code> 进入对应的配置类中。</li>\n<li>绑定了配置文件中每一项值的类那就是属性类。</li>\n<li>比如：\n<ol>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmctYm9vdC9kb2NzL2N1cnJlbnQvcmVmZXJlbmNlL2h0bWwvYXBwbGljYXRpb24tcHJvcGVydGllcy5odG1sI2FwcGVuZGl4LmFwcGxpY2F0aW9uLXByb3BlcnRpZXMuc2VydmVy\">官方属性文档</span>。</li>\n<li><code>MultipartProperties</code>  绑定了所有文件上传相关的配置。</li>\n<li><code>ServerProperties</code>  绑定了所有 <code>Tomcat</code>  服务器有关的配置。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>按需要自动加载配置。\n<ol>\n<li>导入场景 <code>spring-boot-starter-web</code> 。</li>\n<li>场景启动器除了会导入相关功能依赖，还会导入一个 <code>spring-boot-starter</code>  它是所有 <code>starter</code>  的基础核心。</li>\n<li><code>spring-boot-starter</code>  导入了一个 <code>spring-boot-autoconfigure</code>  包，这个包里面都是各种场景的 <code>AutoConfiguration</code>  自动配置类。</li>\n<li>虽然全场景的自动配置都在 <code>spring-boot-autoconfigure</code>  这个包中，但不全是开启的，导入哪个场景就开启哪个自动配置。</li>\n</ol>\n</li>\n<li>总结：导入场景启动器会触发 <code>spring-boot-autoconfigure</code>  这个包的自动配置，在容器中就会具有相应场景的功能。</li>\n</ol>\n<h2 id=\"自动配置\"><a class=\"anchor\" href=\"#自动配置\">#</a> 自动配置</h2>\n<ol>\n<li>\n<p>导入 <code>starter-web</code>  后就代表导入了 <code>web</code>  开发场景。</p>\n<ol>\n<li>场景启动器会导入相关场景的所有依赖： <code>starter-json</code> 、 <code>starter-tomcat</code> 、 <code>springmvc</code> 。</li>\n<li>每个场景启动器都会引入一个 <code>spring-boot-starter</code>  的核心场景启动器。</li>\n<li>核心场景启动器引入了 <code>spring-boot-autoconfigure</code>  包。</li>\n<li><code>spring-boot-autoconfigure</code>  包里包含了所有场景的所有配置。</li>\n<li>只要这个包下的所有类都能生效，那么就相当于 <code>SpringBoot</code>  官方写好的整合功能就生效。</li>\n<li><code>SpringBoot</code>  默认扫不到 <code>spring-boot-autoconfigure</code>  下写好的所有配置类，默认只扫描主程序所在的包，但利用下面主程序的注解就做到了导入。</li>\n</ol>\n</li>\n<li>\n<p>主程序： <code>@SpringBootApplication</code>  注解源码如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>SpringBootApplication.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>autoconfigure</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Documented</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ElementType</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Inherited</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Retention</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RetentionPolicy</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Target</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BeanNameGenerator</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringBootConfiguration</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TypeExcludeFilter</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ComponentScan</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Configuration</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FilterType</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ComponentScan</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Filter</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AliasFor</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TYPE</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RUNTIME</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token annotation punctuation\">@Documented</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token annotation punctuation\">@Inherited</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootConfiguration</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token annotation punctuation\">@EnableAutoConfiguration</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        excludeFilters <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token annotation punctuation\">@Filter</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                type <span class=\"token operator\">=</span> <span class=\"token class-name\">FilterType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">CUSTOM</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                classes <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">TypeExcludeFilter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Filter</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                type <span class=\"token operator\">=</span> <span class=\"token class-name\">FilterType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">CUSTOM</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                classes <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">AutoConfigurationExcludeFilter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">SpringBootApplication</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>   <span class=\"token annotation punctuation\">@AliasFor</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>           annotation <span class=\"token operator\">=</span> <span class=\"token class-name\">EnableAutoConfiguration</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>   <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">exclude</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>   <span class=\"token annotation punctuation\">@AliasFor</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>           annotation <span class=\"token operator\">=</span> <span class=\"token class-name\">EnableAutoConfiguration</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>   <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>   <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">excludeName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>   <span class=\"token annotation punctuation\">@AliasFor</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>           annotation <span class=\"token operator\">=</span> <span class=\"token class-name\">ComponentScan</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>           attribute <span class=\"token operator\">=</span> <span class=\"token string\">\"basePackages\"</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>   <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>   <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">scanBasePackages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>   <span class=\"token annotation punctuation\">@AliasFor</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>           annotation <span class=\"token operator\">=</span> <span class=\"token class-name\">ComponentScan</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>           attribute <span class=\"token operator\">=</span> <span class=\"token string\">\"basePackageClasses\"</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>   <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>   <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">scanBasePackageClasses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>   <span class=\"token annotation punctuation\">@AliasFor</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>           annotation <span class=\"token operator\">=</span> <span class=\"token class-name\">ComponentScan</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>           attribute <span class=\"token operator\">=</span> <span class=\"token string\">\"nameGenerator\"</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>   <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>   <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BeanNameGenerator</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">nameGenerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token class-name\">BeanNameGenerator</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>   <span class=\"token annotation punctuation\">@AliasFor</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>           annotation <span class=\"token operator\">=</span> <span class=\"token class-name\">Configuration</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>   <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>   <span class=\"token keyword\">boolean</span> <span class=\"token function\">proxyBeanMethods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li><code>@SpringBootApplication</code>  是由三个注解组成的： <code>SpringBootConfiguration</code> 、 <code>EnableAutoConfiguration</code> 、 <code>ComponentScan</code> 。</li>\n<li><code>SpringBoot</code>  默认只扫描自己主程序所在的包及其下面的子包。</li>\n<li><code>@EnableAutoConfiguration</code>  注解是 <code>SpringBoot</code>  开启自动配置的核心。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>EnableAutoConfiguration.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>autoconfigure</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Documented</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ElementType</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Inherited</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Retention</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RetentionPolicy</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Target</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Import</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TYPE</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RUNTIME</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token annotation punctuation\">@Documented</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token annotation punctuation\">@Inherited</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token annotation punctuation\">@AutoConfigurationPackage</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token annotation punctuation\">@Import</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">AutoConfigurationImportSelector</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">EnableAutoConfiguration</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token class-name\">String</span> <span class=\"token constant\">ENABLED_OVERRIDE_PROPERTY</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"spring.boot.enableautoconfiguration\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">exclude</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">excludeName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<blockquote>\n<p>在上面这个注解中可以看到有一个 <code>@Import</code>  注解， <code>@Import</code>  注解导入了一个 <code>AutoConfigurationImportSelector</code>  类，这个类的作用是批量导入组件， <code>@Import</code>  将指定的类或配置文件导入到当前类中，可以用于导入其它自定义类、配置文件等，但不会将其加入到 <code>IOC</code>  中，这个类内部的方法还获取了一些注册信息，其调试发现就是主程序所在的包路径，故帮助我们扫描主程序所在的包和子包路径下的所有组件。</p>\n</blockquote>\n<blockquote>\n<p><code>@AutoConfigurationPackage</code>  注解代表自动配置包，源码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>AutoConfigurationPackage.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>autoconfigure</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Documented</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ElementType</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Inherited</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Retention</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RetentionPolicy</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Target</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Import</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TYPE</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RUNTIME</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token annotation punctuation\">@Documented</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token annotation punctuation\">@Inherited</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token annotation punctuation\">@Import</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">AutoConfigurationPackages<span class=\"token punctuation\">.</span>Registrar</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">AutoConfigurationPackage</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">basePackages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">basePackageClasses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>使用 <code>ctrl+鼠标左键</code> 进入 <code>AutoConfigurationImportSelector</code>  类中找到一个名为 <code>getAutoConfigurationEntry</code>  的方法，利用 <code>getAutoConfigurationEntry(annotationMetadata);</code>  给容器中批量导入一些组件，调用 <code>getCandidateConfigurations(annotationMetadata, attributes);</code>  获取所有需要导入到容器中的配置类，最后使用 <code>ImportCandidates.load(Class&lt;?&gt; annotation, ClassLoader classLoader)</code>  方法得到所有组件，将会从 <code>META-INF/spring/%s.imports</code>  位置来加载一个文件，文件位置在 <code>spring-boot-autoconfigure:3.2.1</code>  版本下的 <code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code> 。</p>\n</blockquote>\n<blockquote>\n<p><code>SpringBoot</code>  启动时会默认加载 <code>152</code>  个配置类，这些配置来自于 <code>spring-boot-autoconfigure:3.2.1</code>  下的 <code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code>  文件中指定的。</p>\n</blockquote>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"><span>org.springframework.boot.autoconfigure.AutoConfiguration.imports</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>org.springframework.boot.autoconfigure.aop.AopAutoConfiguration</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>org.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveDataAutoConfiguration</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveRepositoriesAutoConfiguration</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveDataAutoConfiguration</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveRepositoriesAutoConfiguration</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>org.springframework.boot.autoconfigure.data.elasticsearch.ReactiveElasticsearchRepositoriesAutoConfiguration</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>org.springframework.boot.autoconfigure.data.jdbc.JdbcRepositoriesAutoConfiguration</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>org.springframework.boot.autoconfigure.data.mongo.MongoReactiveDataAutoConfiguration</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>org.springframework.boot.autoconfigure.data.mongo.MongoReactiveRepositoriesAutoConfiguration</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>org.springframework.boot.autoconfigure.data.neo4j.Neo4jReactiveDataAutoConfiguration</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>org.springframework.boot.autoconfigure.data.neo4j.Neo4jReactiveRepositoriesAutoConfiguration</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>org.springframework.boot.autoconfigure.data.r2dbc.R2dbcDataAutoConfiguration</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>org.springframework.boot.autoconfigure.data.r2dbc.R2dbcRepositoriesAutoConfiguration</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchClientAutoConfiguration</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchRestClientAutoConfiguration</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>org.springframework.boot.autoconfigure.elasticsearch.ReactiveElasticsearchClientAutoConfiguration</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>org.springframework.boot.autoconfigure.graphql.GraphQlAutoConfiguration</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>org.springframework.boot.autoconfigure.graphql.data.GraphQlReactiveQueryByExampleAutoConfiguration</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>org.springframework.boot.autoconfigure.graphql.data.GraphQlReactiveQuerydslAutoConfiguration</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>org.springframework.boot.autoconfigure.graphql.data.GraphQlQueryByExampleAutoConfiguration</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>org.springframework.boot.autoconfigure.graphql.data.GraphQlQuerydslAutoConfiguration</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>org.springframework.boot.autoconfigure.graphql.reactive.GraphQlWebFluxAutoConfiguration</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>org.springframework.boot.autoconfigure.graphql.rsocket.GraphQlRSocketAutoConfiguration</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>org.springframework.boot.autoconfigure.graphql.rsocket.RSocketGraphQlClientAutoConfiguration</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>org.springframework.boot.autoconfigure.graphql.security.GraphQlWebFluxSecurityAutoConfiguration</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>org.springframework.boot.autoconfigure.graphql.security.GraphQlWebMvcSecurityAutoConfiguration</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>org.springframework.boot.autoconfigure.graphql.servlet.GraphQlWebMvcAutoConfiguration</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>org.springframework.boot.autoconfigure.influx.InfluxDbAutoConfiguration</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>org.springframework.boot.autoconfigure.jdbc.JdbcClientAutoConfiguration</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>org.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>org.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration</pre></td></tr><tr><td data-num=\"93\"></td><td><pre>org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>org.springframework.boot.autoconfigure.neo4j.Neo4jAutoConfiguration</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>org.springframework.boot.autoconfigure.netty.NettyAutoConfiguration</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>org.springframework.boot.autoconfigure.pulsar.PulsarAutoConfiguration</pre></td></tr><tr><td data-num=\"98\"></td><td><pre>org.springframework.boot.autoconfigure.pulsar.PulsarReactiveAutoConfiguration</pre></td></tr><tr><td data-num=\"99\"></td><td><pre>org.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>org.springframework.boot.autoconfigure.r2dbc.R2dbcAutoConfiguration</pre></td></tr><tr><td data-num=\"101\"></td><td><pre>org.springframework.boot.autoconfigure.r2dbc.R2dbcTransactionManagerAutoConfiguration</pre></td></tr><tr><td data-num=\"102\"></td><td><pre>org.springframework.boot.autoconfigure.reactor.ReactorAutoConfiguration</pre></td></tr><tr><td data-num=\"103\"></td><td><pre>org.springframework.boot.autoconfigure.rsocket.RSocketMessagingAutoConfiguration</pre></td></tr><tr><td data-num=\"104\"></td><td><pre>org.springframework.boot.autoconfigure.rsocket.RSocketRequesterAutoConfiguration</pre></td></tr><tr><td data-num=\"105\"></td><td><pre>org.springframework.boot.autoconfigure.rsocket.RSocketServerAutoConfiguration</pre></td></tr><tr><td data-num=\"106\"></td><td><pre>org.springframework.boot.autoconfigure.rsocket.RSocketStrategiesAutoConfiguration</pre></td></tr><tr><td data-num=\"107\"></td><td><pre>org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration</pre></td></tr><tr><td data-num=\"108\"></td><td><pre>org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration</pre></td></tr><tr><td data-num=\"109\"></td><td><pre>org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration</pre></td></tr><tr><td data-num=\"110\"></td><td><pre>org.springframework.boot.autoconfigure.security.reactive.ReactiveSecurityAutoConfiguration</pre></td></tr><tr><td data-num=\"111\"></td><td><pre>org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration</pre></td></tr><tr><td data-num=\"112\"></td><td><pre>org.springframework.boot.autoconfigure.security.rsocket.RSocketSecurityAutoConfiguration</pre></td></tr><tr><td data-num=\"113\"></td><td><pre>org.springframework.boot.autoconfigure.security.saml2.Saml2RelyingPartyAutoConfiguration</pre></td></tr><tr><td data-num=\"114\"></td><td><pre>org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration</pre></td></tr><tr><td data-num=\"115\"></td><td><pre>org.springframework.boot.autoconfigure.session.SessionAutoConfiguration</pre></td></tr><tr><td data-num=\"116\"></td><td><pre>org.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientAutoConfiguration</pre></td></tr><tr><td data-num=\"117\"></td><td><pre>org.springframework.boot.autoconfigure.security.oauth2.client.reactive.ReactiveOAuth2ClientAutoConfiguration</pre></td></tr><tr><td data-num=\"118\"></td><td><pre>org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerAutoConfiguration</pre></td></tr><tr><td data-num=\"119\"></td><td><pre>org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerAutoConfiguration</pre></td></tr><tr><td data-num=\"120\"></td><td><pre>org.springframework.boot.autoconfigure.security.oauth2.server.servlet.OAuth2AuthorizationServerAutoConfiguration</pre></td></tr><tr><td data-num=\"121\"></td><td><pre>org.springframework.boot.autoconfigure.security.oauth2.server.servlet.OAuth2AuthorizationServerJwtAutoConfiguration</pre></td></tr><tr><td data-num=\"122\"></td><td><pre>org.springframework.boot.autoconfigure.sql.init.SqlInitializationAutoConfiguration</pre></td></tr><tr><td data-num=\"123\"></td><td><pre>org.springframework.boot.autoconfigure.ssl.SslAutoConfiguration</pre></td></tr><tr><td data-num=\"124\"></td><td><pre>org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration</pre></td></tr><tr><td data-num=\"125\"></td><td><pre>org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration</pre></td></tr><tr><td data-num=\"126\"></td><td><pre>org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration</pre></td></tr><tr><td data-num=\"127\"></td><td><pre>org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration</pre></td></tr><tr><td data-num=\"128\"></td><td><pre>org.springframework.boot.autoconfigure.transaction.TransactionManagerCustomizationAutoConfiguration</pre></td></tr><tr><td data-num=\"129\"></td><td><pre>org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration</pre></td></tr><tr><td data-num=\"130\"></td><td><pre>org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration</pre></td></tr><tr><td data-num=\"131\"></td><td><pre>org.springframework.boot.autoconfigure.web.client.RestClientAutoConfiguration</pre></td></tr><tr><td data-num=\"132\"></td><td><pre>org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration</pre></td></tr><tr><td data-num=\"133\"></td><td><pre>org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration</pre></td></tr><tr><td data-num=\"134\"></td><td><pre>org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration</pre></td></tr><tr><td data-num=\"135\"></td><td><pre>org.springframework.boot.autoconfigure.web.reactive.ReactiveMultipartAutoConfiguration</pre></td></tr><tr><td data-num=\"136\"></td><td><pre>org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration</pre></td></tr><tr><td data-num=\"137\"></td><td><pre>org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration</pre></td></tr><tr><td data-num=\"138\"></td><td><pre>org.springframework.boot.autoconfigure.web.reactive.WebSessionIdResolverAutoConfiguration</pre></td></tr><tr><td data-num=\"139\"></td><td><pre>org.springframework.boot.autoconfigure.web.reactive.error.ErrorWebFluxAutoConfiguration</pre></td></tr><tr><td data-num=\"140\"></td><td><pre>org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorAutoConfiguration</pre></td></tr><tr><td data-num=\"141\"></td><td><pre>org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration</pre></td></tr><tr><td data-num=\"142\"></td><td><pre>org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration</pre></td></tr><tr><td data-num=\"143\"></td><td><pre>org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration</pre></td></tr><tr><td data-num=\"144\"></td><td><pre>org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration</pre></td></tr><tr><td data-num=\"145\"></td><td><pre>org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration</pre></td></tr><tr><td data-num=\"146\"></td><td><pre>org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration</pre></td></tr><tr><td data-num=\"147\"></td><td><pre>org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration</pre></td></tr><tr><td data-num=\"148\"></td><td><pre>org.springframework.boot.autoconfigure.websocket.reactive.WebSocketReactiveAutoConfiguration</pre></td></tr><tr><td data-num=\"149\"></td><td><pre>org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration</pre></td></tr><tr><td data-num=\"150\"></td><td><pre>org.springframework.boot.autoconfigure.websocket.servlet.WebSocketMessagingAutoConfiguration</pre></td></tr><tr><td data-num=\"151\"></td><td><pre>org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration</pre></td></tr><tr><td data-num=\"152\"></td><td><pre>org.springframework.boot.autoconfigure.webservices.client.WebServiceTemplateAutoConfiguration</pre></td></tr></table></figure><blockquote>\n<p>项目启动时会利用 <code>@Import</code>  批量导入组件，会把 <code>autoconfigure</code>  包下的 <code>xxxAutoConfiguration</code>  类导入进来，这就是自动配置类，虽然导入了这么多配置类，这些配置类并不会都将生效，而是在每一个自动配置类中都有一个条件注解 <code>@ConditionalOnxxx</code> , 只有条件成立才会生效。</p>\n</blockquote>\n<h2 id=\"核心流程总结\"><a class=\"anchor\" href=\"#核心流程总结\">#</a> 核心流程总结</h2>\n<ol>\n<li>导入 <code>starter</code>  就会导入 <code>autoconfigure</code>  包。</li>\n<li>在 <code>autoconfigure</code>  包下面有一个 <code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code>  文件，里面指定了所有启动要加载的自动配置类。</li>\n<li><code>@EnableAutoConfiguration</code>  注解会自动把上面文件里面的自动配置类导入进来，根据条件注解进行按需加载。</li>\n<li>符合条件的情况下 <code>xxxAutoConfiguration</code>  就会给容器中导入一堆组件，组件都是从 <code>xxxProperties</code>  中提取属性值， <code>xxxProperties</code>  和配置文件进行了绑定。</li>\n</ol>\n<h1 id=\"springboot核心技能\"><a class=\"anchor\" href=\"#springboot核心技能\">#</a> SpringBoot 核心技能</h1>\n<blockquote>\n<p><code>SpringBoot</code>  抛弃了传统的 <code>XML</code>  配置方式，改为全注解开发流程。</p>\n</blockquote>\n<h2 id=\"常用注解\"><a class=\"anchor\" href=\"#常用注解\">#</a> 常用注解</h2>\n<p><a href=\"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/java/spring/SpringBoot&amp;%E5%85%B6%E5%AE%83%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/\">🚀SpringBoot &amp; 其它常用注解</a></p>\n<h2 id=\"组件注册\"><a class=\"anchor\" href=\"#组件注册\">#</a> 组件注册</h2>\n<blockquote>\n<p>以前的步骤：通过 <code>Spring</code>  配置文件，进行组件注册，如果是纯 <code>XML</code>  配置方式还需要声明 <code>Bean</code>  对象，赋予唯一标识和全类名，然后通过 <code>set</code>  方法进行注入或其它注入方式来注入默认属性值。</p>\n</blockquote>\n<blockquote>\n<p>现在的步骤如下：</p>\n</blockquote>\n<ol>\n<li>编写一个配置类并在类上使用 <code>@Configuration</code>  注解进行标注，这将表示此类是 <code>SpringBoot</code>  的配置类，配置类也会被加入到 <code>IOC</code>  容器中 (可以通过 <code>ctrl+鼠标左键</code> 点击这个注解就可以看到里面内嵌了 <code>@Component</code>  注解)，也可以使用 <code>SpringBootConfiguration</code>  注解进行标注，其本质是一样的，所以 <code>Spring</code>  相关的核心配置使用 <code>SpringBoot</code>  的，而通用配置使用默认的。</li>\n<li>在配置类中，自定义方法配合 <code>Bean</code>  给容器中注册组件，如果是第三方的可以直接根据类型，写入配置类的方法，返回它的类型然后直接 <code>return new</code>  出来的对象。</li>\n<li><code>@Configuration</code>  注解在 <code>spring 5.2</code>  以后多了一个 <code>proxyBeanMethods</code>  属性，它是 <code>boolean</code>  类型的属性可以设置为 <code>true</code>  或 <code>false</code> , 默认值为 <code>true</code>  (代表是否代理 <code>Bean</code>  方法)，如果为 <code>true</code>  说明为代理对象调用方法，在获取这个对象的时候会从容器中检查有没有这个类对象，如果有就直接获取，没有就会创建一个类对象 (保持组件单实例)，其主要用于解决组件依赖问题，当不更改这个值，组件在配置类配置依赖时可以直接通过 <code>set</code>  方法然后传入配置类的其它组件的注入方法 (即带有 <code>Bean</code>  的方法)。如果不想有这种依赖关系，可以将值设置为 <code>false</code>  就是轻量级模式，设置为 <code>false</code>  对于单个 <code>Bean</code>  从容器中获取多次还是单实例的，但依赖的情况下， <code>Bean</code>  内部其它的 <code>Bean</code>  就不是 <code>IOC</code>  容器中的那个，而是一个新 <code>new</code>  的。</li>\n<li>使用 <code>Import</code>  注解导入第三方组件 (可以写在组件类 ( <code>@Conponent</code> 、 <code>@Controller</code>  等) 或配置类上面，与配置类的注解放在一起)，在括号中写入对应的 <code>.class</code>  字节码文件 (默认 <code>value</code>  值不用写属性，且是一个数组，可以导入多个组件到容器)，也可以使用全类名，对应 <code>name</code>  属性，其实不管怎么样默认 <code>IOC</code>  容器在注入组件的 <code>id</code>  时扔是使用全类名。</li>\n</ol>\n<blockquote>\n<p>因为在开发过程中可能会修改依赖，如果导入 <code>IOC</code>  的时候删掉之前一些用不到的依赖，这种情况下，本身靠字符串的全类名不会引起报错，但是使用字节码文件的时候，如果不存在这个类就会大面积报错。</p>\n</blockquote>\n<h2 id=\"条件注解\"><a class=\"anchor\" href=\"#条件注解\">#</a> 条件注解</h2>\n<blockquote>\n<p>如果注解指定的条件成立则触发指定行为，可以写在配置类或组件注解和配置类内部的 <code>@Bean</code>  方法上。</p>\n</blockquote>\n<ul>\n<li><code>@ConditionalOnClass</code> ：如果类路径中存在这个类则触发指定行为。</li>\n<li><code>@ConditionalOnMissingClass</code> ：如果类路径中不存在这个类则触发执行行为。</li>\n<li><code>@ConditionalOnBean</code> ：如果容器中存在这个 <code>Bean</code>  组件则触发指定行为。</li>\n<li><code>@ConditionalOnMissingBean</code> ：如果容器中不存在这个 <code>Bean</code>  组件则触发指定行为。</li>\n</ul>\n<blockquote>\n<p>比如：如果存在 <code>Pet</code>  这个类就给容器中放一个 <code>Cat</code>  组件并命名为 <code>cat1</code> , 否则就给容器中放一个 <code>Dog</code>  组件并命名为 <code>dog1</code> 。</p>\n</blockquote>\n<blockquote>\n<p>如果系统中有 <code>cat1</code>  这个组件就给容器中放一个 <code>PetDetails</code>  组件，命名为 <code>zhangsan</code> , 否则就命名为 <code>lisi</code> 。</p>\n</blockquote>\n<blockquote>\n<p>自定义实现 <code>Condition</code>  接口并编写相应规则即可。</p>\n</blockquote>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>@ConditionalOnBean（value &#x3D; 组件类型，name &#x3D; 组件名字）：判断容器中是否有这个类型的组件，并且名字是指定的值</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>@ConditionalOnRepositoryType (org.springframework.boot.autoconfigure.data)</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>@ConditionalOnDefaultWebSecurity (org.springframework.boot.autoconfigure.security)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>@ConditionalOnSingleCandidate (org.springframework.boot.autoconfigure.condition)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>@ConditionalOnWebApplication (org.springframework.boot.autoconfigure.condition)</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>@ConditionalOnWarDeployment (org.springframework.boot.autoconfigure.condition)</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>@ConditionalOnJndi (org.springframework.boot.autoconfigure.condition)</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>@ConditionalOnResource (org.springframework.boot.autoconfigure.condition)</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>@ConditionalOnExpression (org.springframework.boot.autoconfigure.condition)</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>@ConditionalOnClass (org.springframework.boot.autoconfigure.condition)</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>@ConditionalOnEnabledResourceChain (org.springframework.boot.autoconfigure.web)</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>@ConditionalOnMissingClass (org.springframework.boot.autoconfigure.condition)</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>@ConditionalOnNotWebApplication (org.springframework.boot.autoconfigure.condition)</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>@ConditionalOnProperty (org.springframework.boot.autoconfigure.condition)</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>@ConditionalOnCloudPlatform (org.springframework.boot.autoconfigure.condition)</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>@ConditionalOnBean (org.springframework.boot.autoconfigure.condition)</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>@ConditionalOnMissingBean (org.springframework.boot.autoconfigure.condition)</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>@ConditionalOnMissingFilterBean (org.springframework.boot.autoconfigure.web.servlet)</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>@Profile (org.springframework.context.annotation)</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>@ConditionalOnInitializedRestarter (org.springframework.boot.devtools.restart)</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>@ConditionalOnGraphQlSchema (org.springframework.boot.autoconfigure.graphql)</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>@ConditionalOnJava (org.springframework.boot.autoconfigure.condition)</pre></td></tr></table></figure><h2 id=\"属性绑定\"><a class=\"anchor\" href=\"#属性绑定\">#</a> 属性绑定</h2>\n<ol>\n<li><code>@ConfigurationProperties</code> ：声明组件的属性和配置文件哪些前缀开始项进行绑定，可以写在组件 <code>Bean</code>  上也可以写在配置类中的配置 <code>Bean</code>  的方法上。\n<ol>\n<li>将容器中任意组件 <code>(Bean)</code>  的属性值和配置文件的配置项的值进行绑定。\n<ol>\n<li>给容器中注册组件\n<ol>\n<li>在配置类外使用 <code>@ConfigurationProperties</code>  结合 <code>@Component</code> ，配置类内无需写任何方法。</li>\n<li>配置类内使用 <code>@Bean</code>  结合 <code>@ConfigurationProperties</code> ，配置类外不用写任何注解。</li>\n</ol>\n</li>\n<li>使用 <code>@ConfigurationProperties</code>  声明组件和配置文件的哪些配置项进行绑定。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li><code>@EnableConfigurationProperties</code> ：快速注册注解 (这是写于配置类上的注解，使用 <code>@Import</code>  注解导入的 <code>Bean</code>  不会进行属性绑定)。\n<ol>\n<li><code>SpringBoot</code>  默认只扫描自己主程序所在的包，如果导入第三方包，即使组件上标注了 <code>@Component</code>  和 <code>@ConfigurationProperties</code>  注解也没有用，此时就可以使用这个注解快速进行属性绑定并把组件注册到 <code>IOC</code>  容器中。</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"冷门注解\"><a class=\"anchor\" href=\"#冷门注解\">#</a> 冷门注解</h2>\n<h3 id=\"scope\"><a class=\"anchor\" href=\"#scope\">#</a> @Scope</h3>\n<blockquote>\n<p><code>@Scope</code>  注解源码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Scope.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Documented</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ElementType</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Retention</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RetentionPolicy</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Target</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AliasFor</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TYPE</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">METHOD</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RUNTIME</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token annotation punctuation\">@Documented</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Scope</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token annotation punctuation\">@AliasFor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"scopeName\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token class-name\">String</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token annotation punctuation\">@AliasFor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token class-name\">String</span> <span class=\"token function\">scopeName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token class-name\">ScopedProxyMode</span> <span class=\"token function\">proxyMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token class-name\">ScopedProxyMode</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DEFAULT</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><code>scopeName</code> ：是为了声明 <code>Bean</code>  的作用域，在 <code>Spring 4.2</code>  版本之前有两种模式分别是： <code>singleton</code>  和 <code>prototype</code>  两种模式，在 <code>4.2</code>  之后新增了 <code>web</code>  作用域： <code>request</code> 、 <code>session</code> 、 <code>globalsession</code> 。\n<ul>\n<li><code>singleton</code> ：单例模式，即 <code>SpringIOC</code>  容器中只会有一个共享的 <code>Bean</code>  实例，这一个单一的实例会被存储到单例缓存中，当有请求或是引用时， <code>IOC</code>  容器都会返回存储在单例缓存中的同一个实例。</li>\n<li><code>prototype</code> ：多实例模式，即每次客户端向容器获取 <code>Bean</code>  时， <code>IOC</code>  容器都会创建一个新实例进行返回，与单例模式不同的是在 <code>IOC</code>  容器启动的时候并不会创建 <code>Bean</code>  实例，并且在有请求创建 <code>Bean</code>  实例之后也不会管理该实例的生命周期，而是由客户端来处理。</li>\n<li><code>request</code> ： <code>web</code>  应用针对每一次 <code>HTTP</code>  请求都会创建一个新的 <code>Bean</code>  实例，且该实例仅在这次 <code>HTTP</code>  请求中有效。</li>\n<li><code>session</code> ：针对每一个 <code>session</code>  都会创建一个 <code>Bean</code>  实例且生命周期为该 <code>session</code>  有效期间。</li>\n<li><code>globalsession</code> ：仅基于 <code>portlet</code>  的 <code>web</code>  应用才有意义，否则可以当作 <code>session</code>  来使用。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 也可以直接写对应的字符串，无视大小写</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Scope</span><span class=\"token punctuation\">(</span>scopeName <span class=\"token operator\">=</span> <span class=\"token class-name\">ConfigurableBeanFactory</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SCOPE_SINGLETON</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@Scope</span><span class=\"token punctuation\">(</span>scopeName <span class=\"token operator\">=</span> <span class=\"token class-name\">ConfigurableBeanFactory</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SCOPE_PROTOTYPE</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@Scope</span><span class=\"token punctuation\">(</span>scopeName <span class=\"token operator\">=</span> <span class=\"token class-name\">WebApplicationContext</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SCOPE_REQUEST</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@Scope</span><span class=\"token punctuation\">(</span>scopeName <span class=\"token operator\">=</span> <span class=\"token class-name\">WebApplicationContext</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SCOPE_SESSION</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@Scope</span><span class=\"token punctuation\">(</span>scopeName <span class=\"token operator\">=</span> <span class=\"token string\">\"globalSession\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"scopeproxymode\"><a class=\"anchor\" href=\"#scopeproxymode\">#</a> ScopeProxyMode</h4>\n<ul>\n<li><code>proxyMode</code>  表明了 <code>@Scope</code>  注解的 <code>Bean</code>  是否需要代理。\n<ul>\n<li><code>DEFAULT</code> ：它是 <code>proxyMode</code>  的默认值，一般情况下等同于 <code>NO</code> , 即不需要动态代理。</li>\n<li><code>NO</code> ：不需要动态代理，即返回的是 <code>Bean</code>  实例对象。</li>\n<li><code>INTERFACES</code> ：代理的对象是一个接口，即 <code>@Scope</code>  的作用对象是接口，这种情况是基于 <code>JDK</code>  实现的动态代理。</li>\n<li><code>TARGET_CLASS</code> ：代理的对象是一个类，即 <code>@Scope</code>  的作用对象是个类，是以生成目标类扩展的方式创建代理，基于 <code>CGLib</code>  实现动态代理。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Scope</span><span class=\"token punctuation\">(</span>proxyMode <span class=\"token operator\">=</span> <span class=\"token class-name\">ScopedProxyMode</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DEFAULT</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Scope</span><span class=\"token punctuation\">(</span>proxyMode <span class=\"token operator\">=</span> <span class=\"token class-name\">ScopedProxyMode</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NO</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@Scope</span><span class=\"token punctuation\">(</span>proxyMode <span class=\"token operator\">=</span> <span class=\"token class-name\">ScopedProxyMode</span><span class=\"token punctuation\">.</span><span class=\"token constant\">INTERFACES</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@Scope</span><span class=\"token punctuation\">(</span>proxyMode <span class=\"token operator\">=</span> <span class=\"token class-name\">ScopedProxyMode</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TARGET_CLASS</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"componentscan\"><a class=\"anchor\" href=\"#componentscan\">#</a> @ComponentScan</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>ComponentScan.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Documented</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ElementType</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Repeatable</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Retention</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RetentionPolicy</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Target</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BeanNameGenerator</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AliasFor</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RUNTIME</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TYPE</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token annotation punctuation\">@Documented</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token annotation punctuation\">@Repeatable</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ComponentScans</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">ComponentScan</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token annotation punctuation\">@AliasFor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"basePackages\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token annotation punctuation\">@AliasFor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">basePackages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">basePackageClasses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BeanNameGenerator</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">nameGenerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token class-name\">BeanNameGenerator</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ScopeMetadataResolver</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">scopeResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token class-name\">AnnotationScopeMetadataResolver</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token class-name\">ScopedProxyMode</span> <span class=\"token function\">scopedProxy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token class-name\">ScopedProxyMode</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DEFAULT</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token class-name\">String</span> <span class=\"token function\">resourcePattern</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"**/*.class\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">useDefaultFilters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token class-name\">Filter</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">includeFilters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token class-name\">Filter</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">excludeFilters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">lazyInit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RUNTIME</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Filter</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token class-name\">FilterType</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token class-name\">FilterType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ANNOTATION</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token annotation punctuation\">@AliasFor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"classes\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token annotation punctuation\">@AliasFor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">classes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">pattern</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><code>value</code> ： <code>value</code>  值对应要扫描的包名，可以是一个数组，放入要扫描的包名即可。</li>\n<li><code>excludeFilters</code> ：可以填入一个数组，类型为 <code>@Filter</code>  注解的数组，可以排除要扫描的包，示例： <code>excludeFilters = &#123;@Filter(type = FilterType.xxxx, classes=&#123;xxx,xxx,xxx&#125;) …&#125;</code> ， <code>type = FilterType.ASSUGNABLE_TYPE</code>  是按照类型排除。</li>\n<li><code>includeFIlters</code> ：需要进行设置属性关闭默认扫描规则 <code>useDefaultFilters = false</code> ，用法和上面没有什么区别。</li>\n</ul>\n<h3 id=\"lazy\"><a class=\"anchor\" href=\"#lazy\">#</a> @Lazy</h3>\n<blockquote>\n<p>可以给配置类中加载的 <code>Bean</code>  加上此注解，即便是单实例 <code>Bean</code>  也可以实现懒加载， <code>IOC</code>  创建时不加载，在第一次获取时才进行加载。</p>\n</blockquote>\n<h3 id=\"configurationproperties\"><a class=\"anchor\" href=\"#configurationproperties\">#</a> @ConfigurationProperties</h3>\n<blockquote>\n<p><code>@ConfigurationProperties</code> ：用于将属性文件中的值绑定到一个 <code>Java</code>  对象上，它可以将属性文件中的多个属性值注入到一个 <code>Java</code>  对象中，与 <code>@Value</code>  注解不同的是 <code>@ConfigurationProperties</code>  可以将属性文件中的值注入到多个属性中。</p>\n</blockquote>\n<h2 id=\"自定义类型扫描\"><a class=\"anchor\" href=\"#自定义类型扫描\">#</a> 自定义类型扫描</h2>\n<blockquote>\n<p>首先定义一个类实现 <code>TypeFilter</code>  接口并重写相应的方法，第一个参数 <code>metadataReader</code> ：通过它可以获取正在扫描的类信息如：注解、类信息、类资源，第二个参数 <code>metadataReaderFactory</code> ：它可以获取其它容器组件的信息，在使用的时候只需要 <code>@Filter(type=FilterType.CUSTOM,classes=&#123;MyFilter&#125;)</code>  指定使用我们的过滤规则。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>MyFilter.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>springboot3demo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">.</span>classreading<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MetadataReader</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">.</span>classreading<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MetadataReaderFactory</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">.</span>filter<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TypeFilter</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @Description: 自定义类型扫描</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @DateTime: 2024-01-26 13:59</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyFilter</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">TypeFilter</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MetadataReader</span> metadataReader<span class=\"token punctuation\">,</span> <span class=\"token class-name\">MetadataReaderFactory</span> metadataReaderFactory<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        metadataReader<span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotationMetadata</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        metadataReader<span class=\"token punctuation\">.</span><span class=\"token function\">getClassMetadata</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        metadataReader<span class=\"token punctuation\">.</span><span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"自定义初始化销毁-注解方式\"><a class=\"anchor\" href=\"#自定义初始化销毁-注解方式\">#</a> 自定义初始化 &amp; 销毁 - 注解方式</h2>\n<ul>\n<li><code>@PostConstruct</code> ：在 <code>Bean</code>  创建完成并在属性赋值之后将执行初始化方法。</li>\n<li><code>@PreDestroy</code> ：在容器销毁之前执行销毁方法。</li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "Java",
                "Java深入理解",
                "计算机科学",
                "Java深入理解",
                "Spring",
                "SpringBoot"
            ]
        },
        {
            "id": "https://rainrem.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/java/java%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8BCallable%E5%92%8CFuture%E6%8E%A5%E5%8F%A3/",
            "url": "https://rainrem.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/java/java%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8BCallable%E5%92%8CFuture%E6%8E%A5%E5%8F%A3/",
            "title": "Java多线程之Callable和Future接口",
            "date_published": "2024-01-11T15:48:06.000Z",
            "content_html": "<blockquote>\n<p>创建线程的方式有两种，一种是实现 <code>Runnable</code>  接口，另一种是继承自 <code>Thread</code> ，但是这两种方式都有个缺点，那就是在任务执行完成之后无法获取返回结果，如果需要获取返回结果，那就需要来实现 <code>Callable</code>  接口。</p>\n</blockquote>\n<blockquote>\n<p>从 <code>JavaSE 5.0</code>  开始引入了 <code>Callable</code>  和 <code>Future</code>  接口后就可以通过它们来构建带有返回结果的线程，在任务执行完成后就可以获取执行结果。</p>\n</blockquote>\n<h1 id=\"callablev接口\"><a class=\"anchor\" href=\"#callablev接口\">#</a> Callable&lt;V&gt; 接口</h1>\n<blockquote>\n<p>先来看一下 <code>Runnable</code>  接口中的 <code>run()</code>  方法其返回值为 <code>void</code> , 当然就无法获取结果了。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Runnable.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>而 <code>Callable</code>  接口定义如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Callable.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">V</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>该接口声明了一个名为 <code>call()</code>  的方法，同时这个方法的返回值是 <code>V</code> , 无论是 <code>Runnable</code>  接口的实现类还是 <code>Callable</code>  接口的实现类，都可以被 <code>ThreadPoolExecutor</code>  或 <code>ScheduledThreadPoolExecutor</code>  来执行， <code>ThreadPoolExecutor</code>  和 <code>ScheduledThreadExecutor</code>  都实现了 <code>ExecutorService</code>  接口，因此 <code>Callable</code>  需要和 <code>Executor</code>  框架中的 <code>ExecutorService</code>  结合来使用，下面是 <code>ExecutorService</code>  提供的方法：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>ExecutorService.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Future</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Future</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> task<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Future</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"futurev接口\"><a class=\"anchor\" href=\"#futurev接口\">#</a> Future&lt;V&gt; 接口</h1>\n<blockquote>\n<p><code>Future</code>  接口是用来获取异步计算结果的，简单来说就是对具体的 <code>Runnable</code>  或 <code>Callable</code>  对象任务执行的结果进行获取，下面是 <code>Future</code>  接口中的方法。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Future.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Future</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> mayInterruptIfRunning<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">isCancelled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">isDone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">V</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ExecutionException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token class-name\">V</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> timeout<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span> unit<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ExecutionException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeoutException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><code>get()</code> ：获取异步执行的结果，如果没有结果此方法会阻塞直到异步计算完成。</li>\n<li><code>get(Long timeout,TimeUnit unit)</code> ：获取异步执行结果，如果没有结果，此方法会阻塞，但是会有时间限制，如果阻塞时间超过了设定的 <code>timeout</code>  该方法将会抛出异常。</li>\n<li><code>isDone()</code> ：如果任务执行结束，无论是正常结束或是中途取消还是发生异常，都返回 <code>true</code> 。</li>\n<li><code>isCanceller()</code> ：如果任务完成前被取消则返回 <code>true</code> 。</li>\n<li><code>cancel(boolean mayInterruptIfRunning)</code> ：如果任务还没开始执行 <code>cancel()</code>  方法将返回 <code>false</code> , 如果任务已经启动，执行 <code>cancel(true)</code>  方法将以中断执行此任务线程的方式来试图停止任务，如果停止成功返回 <code>true</code> ，当任务已经启动并执行 <code>cancle(false)</code>  方法，将不会对正在执行的任务线程产生影响，此时返回 <code>false</code> ，当任务已经完成，执行 <code>cancel()</code>  方法将返回 <code>false</code> ， <code>mayInterruptIfRunning</code>  参数表示是否中断执行中的线程。</li>\n<li><code>Future</code>  提供了三种功能：\n<ol>\n<li>能够中断执行中的任务。</li>\n<li>判断任务是否执行完成。</li>\n<li>获取任务执行完成后的结果。</li>\n</ol>\n</li>\n<li>但是必需要明白 <code>Future</code>  只是一个结果，无法直接来创建对象，因此现在就需要其实现 <code>Future</code>  接口的 <code>FutureTask</code>  类了。</li>\n</ul>\n<h1 id=\"futuretask\"><a class=\"anchor\" href=\"#futuretask\">#</a> FutureTask</h1>\n<blockquote>\n<p>先来看一下 <code>FutureTask</code>  的实现：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>FutureTask.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FutureTask</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">RunnableFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p><code>FutureTask</code>  类实现了一个 <code>RunnableFuture</code>  接口，先看一下 <code>RunnableFuture</code>  接口中的方法：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>RunnableFuture.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">RunnableFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Future</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><code>FutureTask</code>  除了实现 <code>Future</code>  接口外还实现了 <code>Runnable</code>  接口，因此 <code>FutureTask</code>  也可以直接提交给 <code>Executor</code>  来执行，当然也可以调用线程直接执行 <code>(FutureTask.run())</code> 。</li>\n<li><code>FutureTask.run()</code>  执行时的三种状态：\n<ol>\n<li>未启动： <code>FutureTask.run()</code>  方法还没有被执行之前， <code>FutureTask</code>  处于未启动状态，当创建一个 <code>FutureTask</code>  而且没有执行 <code>FutureTask.run()</code>  方法前，这个 <code>FutureTask</code>  也是处于未启动状态。</li>\n<li>已启动： <code>FutureTask.run()</code>  被执行的过程中， <code>FutureTask</code>  处于已启动状态。</li>\n<li>已完成： <code>FutureTask.run()</code>  方法执行完正常结束或被取消或抛出异常结束， <code>FutureTask</code>  都处于完成状态。</li>\n</ol>\n</li>\n</ul>\n<p><img data-src=\"https://s11.ax1x.com/2024/01/12/pFC1AMT.png\" alt=\"pFC1AMT.png\" /></p>\n<blockquote>\n<p>下面是 <code>FutureTask</code>  的方法执行流程图。</p>\n</blockquote>\n<p><img data-src=\"https://s11.ax1x.com/2024/01/12/pFC1eZ4.png\" alt=\"pFC1eZ4.png\" /></p>\n<blockquote>\n<p>当 <code>FutureTask</code>  处于未启动或已启动状态时，如果此时我们执行 <code>FutureTask.get()</code>  方法将导致调用线程阻塞，当 <code>FutureTask</code>  处于已完成状态时，执行 <code>FutureTask.get()</code>  方法将导致线程立即返回结果或抛出异常。</p>\n</blockquote>\n<blockquote>\n<p>当 <code>FutureTask</code>  处于未启动状态时，执行 <code>FutureTask.cancel()</code>  方法将导致此任务永远不会执行。</p>\n</blockquote>\n<blockquote>\n<p>当 <code>FutureTask</code>  处于已启动状态时，执行 <code>cancel(true)</code>  方法将以中断执行此任务线程的方式来试图停止任务，如果任务取消成功， <code>cancel()</code>  方法将返回 <code>true</code> ，但如果执行 <code>cancel(false)</code>  方法将不会对正在执行的任务线程产生影响，此时 <code>cancel()</code>  方法返回 <code>false</code> , 当任务已经完成，执行 <code>cancel()</code>  方法将返回 <code>false</code> 。</p>\n</blockquote>\n<blockquote>\n<p><code>FutureTask</code>  的两种构造方法：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">FutureTask</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> callable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">FutureTask</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> runnable<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"futuretask的使用方式\"><a class=\"anchor\" href=\"#futuretask的使用方式\">#</a> FutureTask 的使用方式</h1>\n<blockquote>\n<p>现在对 <code>Callable</code> 、 <code>Future</code> 、 <code>FutureTask</code>  有了一定得了解之后，那么它们到底有什么用？通过这样的方式去创建线程，最大的好处就是能够返回结果，如：有这么一个场景，现在需要计算一个数据，而这个数据的计算比较耗时，并且后面的程序也需要用到这个数据结果，那么这个时候 <code>Callable</code>  岂不是最好的选择。</p>\n</blockquote>\n<blockquote>\n<p>现在可以开设一个线程去执行计算，而主线程继续做其它事情，而后面需要使用到这个数据时，再通过 <code>Future</code>  来获取就可以了。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>CallableDemo.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Callable</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ExecutorService</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Executors</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Future</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @Description: 使用 Callable+Future 获取执行结果</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @DateTime: 2024-01-12 01:25</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CallableDemo</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> sum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Callable子线程开始计算啦！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            sum <span class=\"token operator\">=</span> sum <span class=\"token operator\">+</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Callable子线程计算结束！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">// 创建线程池</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">ExecutorService</span> es <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newSingleThreadExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">// 创建 Callable 对象任务</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\">CallableDemo</span> calTask <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CallableDemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">// 提交任务并获取执行结果</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token class-name\">Future</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> future <span class=\"token operator\">=</span> es<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span>calTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token comment\">// 关闭线程池</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        es<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"主线程在执行其它任务\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>future<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token comment\">// 输出获取到的结果</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"future.get()--> \"</span> <span class=\"token operator\">+</span> future<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token comment\">// 输出获取到的结果</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"future.get()未获取到结果\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"主线程在执行完成\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight raw\"><figcaption data-lang=\"\"><span>执行结果</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Callable 子线程开始计算啦！</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>主线程在执行其它任务</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Callable 子线程计算结束！</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>future.get ()--&gt; 12497500</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>主线程在执行完成</pre></td></tr></table></figure><blockquote>\n<p>使用 <code>Callable+FutureTask</code>  获取执行结果</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>CallableDemo.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Description: 使用 Callable+FutureTask 获取执行结果</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @DateTime: 2024-01-12 01:25</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CallableDemo</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> sum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Callable子线程开始计算啦！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            sum <span class=\"token operator\">=</span> sum <span class=\"token operator\">+</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Callable子线程计算结束！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">// 创建线程池</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">ExecutorService</span> es <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newSingleThreadExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">// 创建 Callable 对象任务</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">CallableDemo</span> calTask <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CallableDemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">// 创建 FutureTask</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token class-name\">FutureTask</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> futureTask <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FutureTask</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>calTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token comment\">// 提交任务</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        es<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>futureTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\">// 关闭线程池</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        es<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"主线程在执行其它任务\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>futureTask<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token comment\">// 输出获取到的结果</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"future.get()--> \"</span> <span class=\"token operator\">+</span> futureTask<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token comment\">// 输出获取到的结果</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"future.get()未获取到结果\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"主线程在执行完成\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight raw\"><figcaption data-lang=\"\"><span>执行结果</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Callable 子线程开始计算啦！</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>主线程在执行其它任务</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Callable 子线程计算结束！</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>future.get ()--&gt; 12497500</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>主线程在执行完成</pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "Java",
                "Java深入理解",
                "计算机科学",
                "Java",
                "多线程",
                "Callable",
                "Future"
            ]
        },
        {
            "id": "https://rainrem.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/java/java%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8BExecutor%E6%A1%86%E6%9E%B6/",
            "url": "https://rainrem.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/java/java%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8BExecutor%E6%A1%86%E6%9E%B6/",
            "title": "Java多线程-Executor框架",
            "date_published": "2024-01-09T17:29:08.000Z",
            "content_html": "<blockquote>\n<p>不管是在 <code>Java</code>  中还是在 <code>Android</code>  中使用到的线程池都是一样的，那就是 <code>Executor</code>  线程池框架。</p>\n</blockquote>\n<h1 id=\"executor框架是什么\"><a class=\"anchor\" href=\"#executor框架是什么\">#</a> Executor 框架是什么？</h1>\n<blockquote>\n<p><code>Executor</code>  框架是实现线程池的功能，我们知道线程池就是线程的集合，在线程池中来管理线程，以实现线程的重用性，降低资源消耗，提高响应速度，线程用于执行异步任务，单个线程既是工作单元也是执行机制，从 <code>JDK 1.5</code>  开始为了把工作单元与执行机制分离开，然后就诞生了 <code>Executor</code>  框架，它是一个用于统一创建与运行的接口。</p>\n</blockquote>\n<blockquote>\n<p><code>Executor</code>  框架是 <code>Java</code>  并发编程中的一个重要组成部分，它提供了一种标准的方式来执行任务，它包含 <code>Executor</code> 、 <code>ExecutorService</code> 、 <code>Callable</code> 、 <code>Future</code>  等接口和类，可以有效地管理线程的生命周期、执行任务以及获取任务的执行结果。</p>\n</blockquote>\n<blockquote>\n<p>我们还需要明白另一个问题，为什么需要线程池？在 <code>Java</code>  中使用线程来执行异步任务时，线程的创建和销毁需要一定的开销，如果我们为每一个任务创建一个新线程来执行的话，那么这些线程的创建与销毁将消耗大量的计算资源，同时为每一个任务创建一个新线程来执行，这样的方式可能会使处于高负荷状态的应用产生崩溃。</p>\n</blockquote>\n<blockquote>\n<p>此时线程池的出现将为解决这个问题带来了曙光，我们可以在线程池中创建若干条线程，当有任务需要执行时就从该线程池中获取一条线程来执行任务，如果一时间的任务过多并超出了线程池中的数量，那么后面的线程任务将进入一个等待队列进行等待，直到线程池中有线程处于空闲时才从等待队列获取要执行的任务进行处理，以此循环，这样就大大减少了线程创建与销毁的开销，当然也会缓解应用处于超负荷时的情况。</p>\n</blockquote>\n<h1 id=\"executor两级调度模型\"><a class=\"anchor\" href=\"#executor两级调度模型\">#</a> Executor 两级调度模型</h1>\n<blockquote>\n<p>在 <code>Java</code>  线程启动时会创建一个本地操作系统线程，当该 <code>Java</code>  线程终止时，这个操作系统线程也将会被回收，而每一个 <code>Java</code>  线程都会被一对一映射为本地操作系统的线程，操作系统会调度所有的线程并将它们分给可用的 <code>CPU</code> 。</p>\n</blockquote>\n<blockquote>\n<p>所谓的映射方式的实现，在上层 <code>Java</code>  多线程程序通过把应用分为若干个任务，然后使用用户级的调度器 <code>(Executor框架)</code>  将这些任务映射为固定数量的线程，在底层操作系统内核将这些线程映射到硬件处理器上，两级调度模型示意图如下：</p>\n</blockquote>\n<p><img data-src=\"https://s11.ax1x.com/2024/01/10/pFpTG1s.png\" alt=\"pFpTG1s.png\" /></p>\n<blockquote>\n<p>从上图中可以看出应用程序通过 <code>Executor</code>  框架控制上层的调度，而下层的调度由操作系统内核来控制，下层的调度不受应用程序的控制。</p>\n</blockquote>\n<h1 id=\"executor框架结构\"><a class=\"anchor\" href=\"#executor框架结构\">#</a> Executor 框架结构</h1>\n<ul>\n<li><code>Executor</code>  框架结构主要包括三个部分：\n<ol>\n<li>任务：包括被执行任务需要实现的接口 <code>Runnable</code>  或 <code>Callable</code>  接口。</li>\n<li>任务的执行：包括任务执行机制的核心接口 <code>Executor</code>  以及继承自 <code>Executor</code>  的 <code>ExecutorService</code>  接口， <code>Executor</code>  有两个关键类实现了 <code>ExecutorService</code>  接口，它们分别是 <code>ThreadPoolExecutor</code>  和 <code>ScheduledThreadPoolExecutor</code>  类。</li>\n<li>异步计算的结果：包括接口 <code>Future</code>  和实现 <code>Future</code>  接口的 <code>FutureTask</code>  类。</li>\n</ol>\n</li>\n<li>下面是通过 <code>UML</code>  类图展示这些类之间的关系，关系图如下：</li>\n</ul>\n<p><img data-src=\"https://s11.ax1x.com/2024/01/10/pFpT0NF.png\" alt=\"pFpT0NF.png\" /></p>\n<ul>\n<li><code>Extecutor</code>  是一个接口，它是 <code>Executor</code>  框架的基础，它将任务的提交与任务的执行分离开来。</li>\n<li><code>ThreadPoolExecutor</code>  是线程池的核心实现类，它用来执行被提交的任务。</li>\n<li><code>ScheduledThreadPoolExecutor</code>  是一个实现类，它可以在给定的延迟后运行命令或定期执行命令，它比 <code>Timer</code>  更灵活，功能更强大。</li>\n<li><code>Future</code>  接口和实现 <code>Future</code>  接口的 <code>FutureTask</code>  类代表异步计算的结果。</li>\n<li><code>Runnable</code>  接口和 <code>Callable</code>  接口的实现类都可以被 <code>ThreadPoolExecutor</code>  或 <code>ScheduleThreadPoolExecutor</code>  类执行，区别就是 <code>Runnable</code>  无法返回执行结果，而 <code>Callable</code>  可以返回执行结果。</li>\n<li>执行关系图如下：</li>\n</ul>\n<p><img data-src=\"https://s11.ax1x.com/2024/01/10/pFpTgnx.png\" alt=\"pFpTgnx.png\" /></p>\n<blockquote>\n<p>在上图中主线程首先创建实现 <code>Runnable</code>  或 <code>Callable</code>  接口的任务对象，工具类 <code>Executors</code>  可以把一个 <code>Runnable</code>  对象封装成一个 <code>Callable</code>  对象，可以使用如下两种方式：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">callable</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">callable</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> task<span class=\"token punctuation\">,</span><span class=\"token class-name\">Object</span> resule<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>也可以把 <code>Runnable</code>  对象直接提交给 <code>ExecutorService</code>  来执行，方法如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ExecutorService</span><span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>或者也可以把 <code>Runnable</code>  对象或 <code>Callable</code>  对象提交给 <code>ExecutorService</code>  执行，可以使用如下两种方式：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ExecutorService</span><span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">ExecutorService</span><span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>注意如果要执行 <code>ExecutorService.submit(Runnable task)</code>  或 <code>ExecutorService.submit(Callable&lt;T&gt; task)</code>  方法，那么 <code>ExecutorService</code>  将返回一个实现 <code>Future</code>  接口的对象 (也就是 <code>FutureTask</code> )。</p>\n</blockquote>\n<blockquote>\n<p>当然由于 <code>FutureTask</code>  实现了 <code>Runnable</code>  接口，也可以直接创建 <code>FutureTask</code>  类然后提交给 <code>ExecutorService</code>  来执行。此时 <code>Executor</code>  框架的主要结构体系就介绍完了，下面将是两个主要的线程池实现类的解析。</p>\n</blockquote>\n<h1 id=\"threadpoolexecutor\"><a class=\"anchor\" href=\"#threadpoolexecutor\">#</a> ThreadPoolExecutor</h1>\n<blockquote>\n<p><code>ThreadPoolExecutor</code>  是线程的真正实现，通常使用工厂类 <code>Executor</code>  来创建，但它的构造方法提供了一系列参数来配置线程池，下面是 <code>ThreadPoolExecutor</code>  构造方法中的各个参数表示的含义。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">ThreadPoolExecutor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> corePoolSize<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> maximumPoolSize<span class=\"token punctuation\">,</span><span class=\"token keyword\">long</span> keepAliveTime<span class=\"token punctuation\">,</span><span class=\"token class-name\">TimeUnit</span> unit<span class=\"token punctuation\">,</span><span class=\"token class-name\">BlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">></span></span> workQueue<span class=\"token punctuation\">,</span><span class=\"token class-name\">ThreadFactory</span> threadFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span>corePoolSize<span class=\"token punctuation\">,</span>maximumPoolSize<span class=\"token punctuation\">,</span>keepAliveTime<span class=\"token punctuation\">,</span>unit<span class=\"token punctuation\">,</span>workQueue<span class=\"token punctuation\">,</span>threadFactory<span class=\"token punctuation\">,</span>defaultHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><code>corePoolSize</code> ：线程池的核心线程数，在默认情况下，核心线程数会一直在线程池中存活，即使它们处于闲置状态。\n<ul>\n<li>如果将 <code>ThreadPoolExecutor</code>  的 <code>allowCoreThreadTimeOut</code>  属性设置为 <code>true</code> ，那么闲置的核心线程在等待新任务到来时会执行超时策略，这个时间间隔由 <code>keepAliveTime</code>  所指定，当等待时间超过 <code>keepAliveTime</code>  所指定的时长后，核心线程将被终止。</li>\n</ul>\n</li>\n<li><code>maximumPoolSize</code> ：线程池所能容纳的最大线程数量，当活动线程数到达这个数值后，后续的新任务将会被阻塞。</li>\n<li><code>keepAliveTime</code> ：非核心线程闲置时的超时时长，超过这个时长，非核心线程就会被回收。\n<ul>\n<li>当 <code>ThreadPoolExecutor</code>  的 <code>allowCoreThreadTimeOut</code>  属性设置为 <code>true</code>  时， <code>keepAliveTime</code>  同样会作用于核心线程。</li>\n</ul>\n</li>\n<li><code>unit</code> ：用于指定 <code>keepAliveTime</code>  参数的时间单位，它是一个枚举类型，常用的有 <code>TimeUnit.MILLISECONDS(毫秒)</code> 、 <code>TimeUnit.SECONDS(秒)</code>  以及 <code>TimeUnit.MINUTES(分钟)</code>  等。</li>\n<li><code>workQueue</code> ：线程池中的任务队列，通过线程池的 <code>execute</code>  方法提交 <code>Runnable</code>  对象会存储在这个队列中。</li>\n<li><code>threadFactory</code> ：线程工厂，为线程池提供创建新线程的功能。\n<ul>\n<li><code>ThreadFactory</code>  是一个接口，它只有一个 <code>newThread(Runnable r)</code>  方法。</li>\n<li>还有一个不常用的参数那就是 <code>RejectExecutionHandler</code> ，它表示当 <code>ThreadPoolExecutor</code>  已经关闭或 <code>ThreadPoolExecutor</code>  已经达到了最大线程池大小而且工作队列已满， <code>execute</code>  方法将会调用 <code>Handler</code>  的 <code>rejectExecution</code>  方法来通知调用者，默认情况下会抛出一个 <code>RejectExecutionExeception</code>  异常。</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>下面是 <code>ThreadPoolExecutor</code>  的任务执行规则：</p>\n</blockquote>\n<ol>\n<li>如果线程池的数量还未到达核心线程数量，那么会直接启动一个核心线程来执行任务。</li>\n<li>如果线程池中的线程数量已经达到或者超出核心线程的数量，那么任务会被插入到任务队列中等待执行。</li>\n<li>如果在步骤 <code>2</code>  中无法将任务插入到任务队列中，这往往是由于任务队列已满，这个时候如果线程数量未达到线程池规定的最大值，那么会立即启动一个非核心线程来执行任务。</li>\n<li>如果在步骤 <code>3</code>  中线程数量已经达到线程池规定的最大值，那么就会拒绝执行此任务， <code>ThreadPoolExecutor</code>  会调用 <code>RejectExecutionHandler</code>  的 <code>rejectExecution</code>  方法来通知调用者。</li>\n</ol>\n<h2 id=\"线程池的适用场景\"><a class=\"anchor\" href=\"#线程池的适用场景\">#</a> 线程池的适用场景</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">返回类型</th>\n<th style=\"text-align:center\">方法名称</th>\n<th style=\"text-align:center\">适用场景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>ExecutorService</code></td>\n<td style=\"text-align:center\"><code>newFixedThreadPool(int nThreads)</code></td>\n<td style=\"text-align:center\">适用于为了满足资源管理需求，而需要限制当前线程的数量的应用场景，它适用于负载比较重的服务器。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>ExecutorService</code></td>\n<td style=\"text-align:center\"><code>newCachedThreadPool()</code></td>\n<td style=\"text-align:center\">大小无界的线程池适用于执行很多的短期异步任务的小程序，或负载较轻的服务器。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>ExecutorService</code></td>\n<td style=\"text-align:center\"><code>newSingleThreadExecutor()</code></td>\n<td style=\"text-align:center\">适用于需要保证执行顺序得执行各个任务，并且在任意时间点，不会有多个线程是活动的场景。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"三种常见线程池\"><a class=\"anchor\" href=\"#三种常见线程池\">#</a> 三种常见线程池</h2>\n<blockquote>\n<p>三种常见的线程池，它们都直接或间接地通过配置 <code>ThreadPoolExecutor</code>  来实现自己的功能特性，这三种常见线程池分别是 <code>FixedThreadPool</code> 、 <code>CachedThreadPool</code> 、 <code>SingleThreadExecutor</code> ，下面分别来介绍。</p>\n</blockquote>\n<h3 id=\"fixedthreadpool\"><a class=\"anchor\" href=\"#fixedthreadpool\">#</a> FixedThreadPool</h3>\n<blockquote>\n<p><code>FixedThreadPool</code>  模式会使用一个优先固定数量的线程，来处理若干数量任务，规定数量的线程处理所有任务，一旦有线程处理完了任务就会被用来处理新任务，当然是需要有新任务的前提下。 <code>FixedThreadPool</code>  模式下最多的线程数量是一定的， <code>FixedThreadPool</code>  对象创建代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ExecutorService</span> fixedThreadPool <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newFixedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p><code>FixedThreadPool</code>  创建方法的源码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Executors.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Executors</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ExecutorService</span> <span class=\"token function\">newFixedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> nThreads<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolExecutor</span><span class=\"token punctuation\">(</span>nThreads<span class=\"token punctuation\">,</span> nThreads<span class=\"token punctuation\">,</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MILLISECONDS</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedBlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p><code>FixedThreadPool</code>  的 <code>corePoolSize</code>  和 <code>maximumPoolSize</code>  参数都被设置为 <code>nThreads</code> ，当线程池中的线程数量大于 <code>corePoolSize</code>  时 <code>keepAliveTime</code>  为非核心空闲线程等待新任务的最长时间，超过这个时间后非核心线程将会被终止， <code>keepAliveTime</code>  设置为 <code>0L</code>  说明非核心线程会立即被终止，实际了也并没有非核心线程创建，因为核心线程和最大线程数都是一样的。</p>\n</blockquote>\n<blockquote>\n<p>下图为 <code>FixedThreadPool</code>  的 <code>execute()</code>  方法的执行流程。</p>\n</blockquote>\n<p><img data-src=\"https://s11.ax1x.com/2024/01/11/pF9BQZq.png\" alt=\"pF9BQZq.png\" /></p>\n<ol>\n<li>如果当前运行线程数小于 <code>corePoolSize</code>  时，则创建一个新线程来执行任务。</li>\n<li>如果当前线程池的运行线程数等于 <code>corePoolSize</code> ，那么后面提交的任务将加入到 <code>LinkedBlockingQueue</code>  队列中进行等待。</li>\n<li>线程在执行完图中的 <code>1</code>  后，会在循环中反复从 <code>LinkedBlockingQueue</code>  队列中获取任务来执行。\n<ul>\n<li>另外需要知道的一点是 <code>FixedThreadPool</code>  使用的是无界队列 <code>LinkedBlockingQueue</code>  作为线程池的工作队列，队列容量为 <code>Integer.MAX_VALUE</code> 。</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>当然使用该队列作为工作队列会对线程池产生如下影响。</p>\n</blockquote>\n<ol>\n<li>当前线程池中的线程数量达到 <code>corePoolSize</code>  后，新的任务将在无界队列中等待。</li>\n<li>由于使用的是无界队列，所以参数 <code>maximumPoolSize</code>  和 <code>keepAliveTime</code>  无效。</li>\n<li>由于使用无界队列，运行中的 <code>FixedThreadPool</code>  不会拒绝任务，当然此时是未执行 <code>shutdown</code>  和 <code>shutdownNow</code>  方法，所以不会去调用 <code>RejectExecutionHandler</code>  的 <code>rejectExecution</code>  方法抛出异常。</li>\n</ol>\n<blockquote>\n<p>下面示例原文出自 <code>《Java编程思想》</code> 。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>FixedThreadPoolDemo.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ExecutorService</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Executors</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @Description: 使用 FixedThreadPool 设置三个线程来执行五个任务</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @DateTime: 2024-01-11 03:31</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FixedThreadPoolDemo</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">int</span> countDown <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> taskCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> id <span class=\"token operator\">=</span> taskCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">FixedThreadPoolDemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">FixedThreadPoolDemo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> countDown<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>countDown <span class=\"token operator\">=</span> countDown<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"#\"</span> <span class=\"token operator\">+</span> id <span class=\"token operator\">+</span> <span class=\"token string\">\"(\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>countDown <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> countDown <span class=\"token operator\">:</span> <span class=\"token string\">\"FixedThreadPoolDemo!\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\") \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>countDown<span class=\"token operator\">--</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">// 三个线程来执行五个任务</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token class-name\">ExecutorService</span> exec <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newFixedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            exec<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FixedThreadPoolDemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        exec<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"cachedthreadpool\"><a class=\"anchor\" href=\"#cachedthreadpool\">#</a> CachedThreadPool</h3>\n<blockquote>\n<p><code>CachedThreadPool</code>  首先会按照需要创建足够多的线程来执行任务 <code>(Task)</code> , 随着程序执行的过程，有的线程执行完了任务可以被重新循环使用时，才不会再创建先的线程来执行任务，创建方式如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ExecutorService</span> cachedThreadPool <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newCachedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p><code>CachedThreadPool</code>  创建方法的源码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ExecutorService</span> <span class=\"token function\">newCachedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolExecutor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_VALUE</span><span class=\"token punctuation\">,</span><span class=\"token number\">60L</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SECONDS</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">SynchronousQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>从该静态方法中可以看出 <code>CachedThreadPool</code>  的 <code>corePoolSize</code>  被设置为 <code>0</code> , 而 <code>maximumPoolSize</code>  被设置为 <code>Integer.MAX_VALUE</code> , 即 <code>maximumPoolSize</code>  是无界的，而 <code>keepAliveTime</code>  被设置为 <code>60L</code>  单位为秒，也就是空闲线程的等待时间最长为 <code>60</code>  秒，超过该时间将会被终止。</p>\n</blockquote>\n<blockquote>\n<p>而且在这里 <code>CachedThreadPool</code>  使用的是没有容量的 <code>SynchronousQueue</code>  作为线程池的工作队列，但其 <code>maximumPoolSize</code>  是无界的，这也就意味着如果主线程提交任务的速度高于 <code>maximumPoolSize</code>  中线程处理任务的速度时 <code>CachedThreadPool</code>  将会不断的创建新的线程，在极端情况下 <code>CachedThreadPool</code>  会因为创建过多线程而耗尽 <code>CPU</code>  和内存资源。</p>\n</blockquote>\n<blockquote>\n<p>下图为 <code>CachedThreadPool</code>  的 <code>execute()</code>  方法的执行流程。</p>\n</blockquote>\n<p><img data-src=\"https://s11.ax1x.com/2024/01/11/pF9BGJU.png\" alt=\"pF9BGJU.png\" /></p>\n<ol>\n<li>首先执行 <code>SynchronousQueue.offer(Runnable task)</code>  添加一个任务，如果当前 <code>CachedThreadPool</code>  中有空闲线程正在执行 <code>SynchronousQueue.poll(keepAliveTime,TimeUnit.NANOSECONDS)</code> , 其中 <code>NANOSECONDS</code>  是微毫秒 <code>(微妙/1000)</code> ，那么主线程执行 <code>offer</code>  操作与空闲线程执行 <code>poll</code>  操作配对成功后，主线程会把任务交给空闲线程来执行，然此时 <code>execute()</code>  方法执行完成，否则将进入第 <code>2</code>  步。</li>\n<li>当 <code>CachedThreadPool</code>  初始线程数为空时或者当前没有空闲线程，将没有线程去执行 <code>SynchronousQueue.poll(keepAliveTime,TimeUnit.NANOSECONDS)</code> , 这样的情况下步骤 <code>1</code>  将会失败，此时 <code>CachedThreadPool</code>  会创建一个新的线程来执行任务，此时 <code>execute()</code>  方法执行完成。</li>\n<li>在步骤 <code>2</code>  中创建的新线程将任务执行完成后，会执行 <code>SynchronousQueue.poll(keepAliveTime,TimeUnit.NANOSECONDS)</code> , 这个 <code>poll</code>  操作会让空闲线程最多在 <code>SynchronousQueue</code>  中等待 <code>60</code>  秒，如果 <code>60</code>  秒内主线程提交了一个新任务，那么这个空闲线程将会执行主线程提交的新任务，否则这个空闲线程将被终止，由于 <code>60</code>  秒的空闲线程会被终止，因此长时间保持空闲的 <code>CachedThreadPoll</code>  是不会使用任何资源的。</li>\n</ol>\n<blockquote>\n<p><code>SynchronousQueue</code>  是一个没有容量的阻塞队列，因为时间到了之后空闲线程就会被移除，每个插入操作必须等到一个线程与之对应。 <code>CachedThreadPool</code>  使用 <code>SynchronousQueue</code>  队列把主线程的任务传递给空闲线程执行，执行流程如下。</p>\n</blockquote>\n<p><img data-src=\"https://s11.ax1x.com/2024/01/11/pF9BoY8.png\" alt=\"pF9BoY8.png\" /></p>\n<blockquote>\n<p>示例代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>CachedThreadPoolDemo.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ExecutorService</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Executors</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @Description: CachedThreadPool 的使用</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @DateTime: 2024-01-11 03:31</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CachedThreadPoolDemo</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">int</span> countDown <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> taskCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> id <span class=\"token operator\">=</span> taskCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">CachedThreadPoolDemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">CachedThreadPoolDemo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> countDown<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>countDown <span class=\"token operator\">=</span> countDown<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"#\"</span> <span class=\"token operator\">+</span> id <span class=\"token operator\">+</span> <span class=\"token string\">\"(\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>countDown <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> countDown <span class=\"token operator\">:</span> <span class=\"token string\">\"FixedThreadPoolDemo!\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\") \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>countDown<span class=\"token operator\">--</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">// 三个线程来执行五个任务</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token class-name\">ExecutorService</span> exec <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newCachedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            exec<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">CachedThreadPoolDemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        exec<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"singlethreadexecutor\"><a class=\"anchor\" href=\"#singlethreadexecutor\">#</a> SingleThreadExecutor</h3>\n<blockquote>\n<p><code>SingleThreadExecutor</code>  模式只会创建一个线程，它和 <code>FixedThreadPool</code>  比较类似，不过线程数是一个。如果多个任务被提交给 <code>SingleThreadExecutor</code>  的话，那么这些任务会被保存在一个队列中，并且会按照任务提交的顺序来一个个的执行。</p>\n</blockquote>\n<blockquote>\n<p><code>SingleThreadExecutor</code>  模式可以保证只有一个任务会被执行，这种特性可以被用来处理共享资源的问题从而不需要考虑同步问题，创建方式如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ExecutorService</span> singleThreadExecutor <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newSingleThreadExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p><code>SingleThreadExecutor</code>  创建方法的源码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ExecutorService</span> <span class=\"token function\">newSingleThreadExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FinalizableDelegatedExecutorService</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolExecutor</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0L</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MILLISECONDS</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedBlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>从静态方法中可以看出 <code>SingleThreadExecutor</code>  的 <code>corePoolSize</code>  和 <code>maximumPoolSize</code>  被设置为 <code>1</code> , 其它参数则与 <code>FixedThreadPool</code>  相同。</p>\n</blockquote>\n<blockquote>\n<p><code>SingleThreadExecutor</code>  使用的工作队也是 <code>LinkedBlockingQueue</code>  无界队，由于 <code>SingleThreadExecutor</code>  采用无界队列对线程池的影响与 <code>FixedThreadPool</code>  是一样的，执行流程如下：</p>\n</blockquote>\n<p><img data-src=\"https://s11.ax1x.com/2024/01/11/pF9zAKS.png\" alt=\"pF9zAKS.png\" /></p>\n<ol>\n<li>如果当前线程数少于 <code>corePoolSize</code>  即线程池中没有线程运行，则创建一个新的线程来执行任务。</li>\n<li>如果当前线程数等于 <code>corePoolSize</code>  时，会将任务加入到 <code>LinkedBlockingQueue</code>  队列中。</li>\n<li>线程执行完成步骤 <code>1</code>  中的任务后，会在一个无限循环中反复从 <code>LinkedBlockingQueue</code>  队列中获取任务来执行。</li>\n</ol>\n<blockquote>\n<p>示例代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>SingleThreadExecutorDemo.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ExecutorService</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Executors</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @Description: SingleThreadExecutor 的使用</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @DateTime: 2024-01-11 03:31</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SingleThreadExecutorDemo</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">int</span> countDown <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> taskCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> id <span class=\"token operator\">=</span> taskCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SingleThreadExecutorDemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SingleThreadExecutorDemo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> countDown<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>countDown <span class=\"token operator\">=</span> countDown<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"#\"</span> <span class=\"token operator\">+</span> id <span class=\"token operator\">+</span> <span class=\"token string\">\"(\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>countDown <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> countDown <span class=\"token operator\">:</span> <span class=\"token string\">\"FixedThreadPoolDemo!\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\") \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>countDown<span class=\"token operator\">--</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">// 三个线程来执行五个任务</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token class-name\">ExecutorService</span> exec <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newSingleThreadExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            exec<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">SingleThreadExecutorDemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        exec<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"scheduledthreadpoolexecutor\"><a class=\"anchor\" href=\"#scheduledthreadpoolexecutor\">#</a> ScheduledThreadPoolExecutor</h1>\n<h2 id=\"执行机制\"><a class=\"anchor\" href=\"#执行机制\">#</a> 执行机制</h2>\n<blockquote>\n<p><code>ScheduledThreadPoolExecutor</code>  继承自 <code>ThreadPoolExecutor</code> ，它主要用来在给定的延迟之后执行任务或定期执行任务。</p>\n</blockquote>\n<blockquote>\n<p><code>ScheduledThreadPoolExecutor</code>  的功能与 <code>Timer</code>  类似，但它比 <code>Timer</code>  更强大更灵活， <code>Timer</code>  对应的是单个后台线程，而 <code>ScheduledThreadPoolExecutor</code>  可以在构造函数中指定多个对应的后台线程数。</p>\n</blockquote>\n<blockquote>\n<p><code>ScheduledThreadPoolExecutor</code>  执行机制如下：</p>\n</blockquote>\n<p><img data-src=\"https://s11.ax1x.com/2024/01/11/pFC9zsf.png\" alt=\"pFC9zsf.png\" /></p>\n<blockquote>\n<p><code>DelayQueue</code>  是一个无界队列，所以 <code>ThreadPoolExecutor</code>  的 <code>maximumPoolSize</code>  在 <code>ScheduledThreadPoolExecutor</code>  中无效， <code>ScheduledThreadPoolExecutor</code>  的执行主要分为以下两部分：</p>\n</blockquote>\n<ol>\n<li>当调用 <code>ScheduledThreadPoolExecutor</code>  的 <code>scheduleAtFixedRate()</code>  或 <code>scheduleWithFixedDelay()</code>  方法时会向 <code>ScheduleThreadPoolExecutor</code>  的 <code>DelayQueue</code>  中添加一个实现了 <code>RunnableScheduledFuture</code>  接口的 <code>ScheduleFutureTask</code> 。</li>\n<li>线程池中的线程从 <code>DelayQueue</code>  中获取 <code>ScheduleFutureTask</code>  然后来执行任务。</li>\n</ol>\n<h2 id=\"scheduledthreadpoolexecutor的创建\"><a class=\"anchor\" href=\"#scheduledthreadpoolexecutor的创建\">#</a> ScheduledThreadPoolExecutor 的创建</h2>\n<blockquote>\n<p><code>ScheduledThreadPoolExecutor</code>  通常使用工厂类 <code>Executors</code>  来创建， <code>Executors</code>  可以创建两种类型的 <code>ScheduledThreadPoolExecutor</code> 。</p>\n</blockquote>\n<ol>\n<li><code>ScheduledThreadPoolExecutor</code> ：可以执行并行任务也就是多条线程同时执行。</li>\n<li><code>SingleThreadScheduledExecutor</code> ：可以执行单条线程。</li>\n</ol>\n<blockquote>\n<p><code>ScheduledThreadPoolExecutor</code>  构造方法如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ScheduledExecutorService</span> <span class=\"token function\">newScheduledThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> corePoolSize<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ScheduledExecutorService</span> <span class=\"token function\">newScheduledThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> corePoolSize<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ThreadFactory</span> threadFactory<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p><code>SingleThreadScheduledExecutor</code>  构造方法如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ScheduledExecutorService</span> <span class=\"token function\">newSingleThreadScheduledExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ScheduledExecutorService</span> <span class=\"token function\">newSingleThreadScheduledExecutor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ThreadFactory</span> threadFactory<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>创建实例对象代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建 ScheduledThreadPool</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">ScheduledExecutorService</span> scheduledThreadPoolExecutor <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newScheduledThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 创建 SingleThreadScheduledExecutor</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">ScheduledExecutorService</span> singleThreadScheduledExecutor <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newSingleThreadScheduledExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"适用场景\"><a class=\"anchor\" href=\"#适用场景\">#</a> 适用场景</h2>\n<blockquote>\n<p><code>ScheduledThreadPoolExecutor</code> ：适用于多个后台线程执行周期性任务，同时为了满足资源管理的需求而需要限制后台线程数量的应用程序。<br />\n <code>SingleThreadScheduledExecutor</code> ：适用于需要单个后台线程执行周期任务，同时需要保证任务顺序执行的应用场景。</p>\n</blockquote>\n<h2 id=\"scheduledthreadpoolexecutor的使用\"><a class=\"anchor\" href=\"#scheduledthreadpoolexecutor的使用\">#</a> ScheduledThreadPoolExecutor 的使用</h2>\n<blockquote>\n<p>首先创建一个 <code>Runnable</code>  的对象，然后使用 <code>ScheduledThreadPoolExecutor</code>  的 <code>schedule()</code>  方法来执行延迟任务。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">ScheduledFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> command<span class=\"token punctuation\">,</span><span class=\"token keyword\">long</span> delay<span class=\"token punctuation\">,</span><span class=\"token class-name\">TimeUnit</span> unit<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li><code>command</code> ：实现 <code>Runnable</code>  接口的类。</li>\n<li><code>delay</code> ：延迟多久后执行。</li>\n<li><code>unit</code> ：用于指定 <code>keepAliveTime</code>  参数的时间单位，这是一个枚举，常用的有 <code>TimeUnit.MILLISECONDS(毫秒)</code> 、 <code>TimeUnit.SECONDS(秒)</code>  以及 <code>TimeUnit.MINUTES(分钟)</code>  等。</li>\n<li>注意：此方法会返回一个 <code>ScheduledFuture</code>  实例，可以用于获取线程状态信息和延迟时间。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>ScheduledThreadPoolDemo.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo3</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SimpleDateFormat</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Date</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Executors</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ScheduledExecutorService</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TimeUnit</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @Description: 延迟执行</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @DateTime: 2024-01-11 19:18</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ScheduledThreadPoolDemo</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" Start. Time = \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">getNowDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token function\">threadSleep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" End. Time = \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">getNowDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     * 睡 3 秒</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">threadSleep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>     * 获取现在时间</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>     * @return 返回时间类型 yyyy-MM-dd HH:mm:ss</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getNowDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token class-name\">Date</span> currentTime <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token class-name\">SimpleDateFormat</span> formatter<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        formatter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-MM-dd HH:mm:ss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">return</span> formatter<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>currentTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token class-name\">ScheduledExecutorService</span> scheduledThreadPool <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newScheduledThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token comment\">// 计划在某个时间之后运行</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Current Time = \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">getNowDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                <span class=\"token class-name\">ScheduledThreadPoolDemo</span> worker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ScheduledThreadPoolDemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                <span class=\"token comment\">// 延迟 10 秒后执行</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                scheduledThreadPool<span class=\"token punctuation\">.</span><span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span>worker<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SECONDS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        scheduledThreadPool<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>scheduledThreadPool<span class=\"token punctuation\">.</span><span class=\"token function\">isTerminated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token comment\">// 等待所有任务完成</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"已完成所有线程\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight raw\"><figcaption data-lang=\"\"><span>执行结果</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>当前时间 &#x3D; 2024-01-11 19:27:10</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pool-1-thread-1 Start. Time &#x3D; 2024-01-11 19:27:21</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>pool-1-thread-3 Start. Time &#x3D; 2024-01-11 19:27:22</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>pool-1-thread-2 Start. Time &#x3D; 2024-01-11 19:27:23</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>pool-1-thread-1 End. Time &#x3D; 2024-01-11 19:27:24</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>pool-1-thread-3 End. Time &#x3D; 2024-01-11 19:27:25</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>pool-1-thread-2 End. Time &#x3D; 2024-01-11 19:27:26</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>已完成所有线程</pre></td></tr></table></figure><blockquote>\n<p>从执行结果可以看出，线程任务确实在 <code>10</code>  秒延迟后才开始执行，这就是 <code>schedule()</code>  方法的使用，下面是两个可用于周期性执行任务的方法。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">ScheduledFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">scheduleAtFixedRate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> command<span class=\"token punctuation\">,</span><span class=\"token keyword\">long</span> initialDelay<span class=\"token punctuation\">,</span><span class=\"token keyword\">long</span> period<span class=\"token punctuation\">,</span><span class=\"token class-name\">TimeUnit</span> unit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p><code>scheduleAtFixedRate()</code>  方法的作用是预定在初始的延迟结束后，周期性得执行给定的任务，周期长度为 <code>period</code>  其中 <code>initialDelay</code>  为初始延迟，将按照固定的时间来执行，即到点执行。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">ScheduledFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">scheduleWithFixedDelay</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> command<span class=\"token punctuation\">,</span><span class=\"token keyword\">long</span> initialDelay<span class=\"token punctuation\">,</span><span class=\"token keyword\">long</span> delay<span class=\"token punctuation\">,</span><span class=\"token class-name\">TimeUnit</span> unit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p><code>scheduleWithFixedDelay</code>  方法的作用是预定在初始的延迟结束后周期性得执行给定任务，在因此调用完成和下一次调用开始之间有长度为 <code>delay</code>  的延迟，其中 <code>initialDelay</code>  为初始延迟，可以简单的理解为等上一个任务结束后，在等固定的时间然后执行。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Date</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ScheduledThreadPoolExecutor</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TimeUnit</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @Description: 周期方法测试类</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @DateTime: 2024-01-11 19:51 </pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ScheduledTask</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ScheduledThreadPoolExecutor</span> se <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ScheduledThreadPoolExecutor</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fixedPeriodSchedule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 设定可以循环执行的 runnable, 初始延迟为 0，这里设置的任务的间隔为 3 秒</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            se<span class=\"token punctuation\">.</span><span class=\"token function\">scheduleAtFixedRate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FixedSchedule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SECONDS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ScheduledTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token function\">fixedPeriodSchedule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FixedSchedule</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前线程：\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"  当前时间：\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">ScheduledTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight raw\"><figcaption data-lang=\"\"><span>执行结果</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>当前线程：pool-1-thread-4  当前时间：Thu Jan 11 19:52:52 CST 2024</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>当前线程：pool-1-thread-3  当前时间：Thu Jan 11 19:52:52 CST 2024</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>当前线程：pool-1-thread-5  当前时间：Thu Jan 11 19:52:52 CST 2024</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>当前线程：pool-1-thread-2  当前时间：Thu Jan 11 19:52:52 CST 2024</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>当前线程：pool-1-thread-1  当前时间：Thu Jan 11 19:52:52 CST 2024</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>当前线程：pool-1-thread-5  当前时间：Thu Jan 11 19:52:55 CST 2024</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>当前线程：pool-1-thread-3  当前时间：Thu Jan 11 19:52:55 CST 2024</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>当前线程：pool-1-thread-1  当前时间：Thu Jan 11 19:52:55 CST 2024</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>当前线程：pool-1-thread-4  当前时间：Thu Jan 11 19:52:55 CST 2024</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>当前线程：pool-1-thread-2  当前时间：Thu Jan 11 19:52:55 CST 2024</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>当前线程：pool-1-thread-1  当前时间：Thu Jan 11 19:52:58 CST 2024</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>当前线程：pool-1-thread-2  当前时间：Thu Jan 11 19:52:58 CST 2024</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>当前线程：pool-1-thread-5  当前时间：Thu Jan 11 19:52:58 CST 2024</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>当前线程：pool-1-thread-1  当前时间：Thu Jan 11 19:52:58 CST 2024</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>当前线程：pool-1-thread-4  当前时间：Thu Jan 11 19:52:58 CST 2024</pre></td></tr></table></figure><blockquote>\n<p>而 <code>SingleThreadScheduledExecutor</code>  的使用的方法基本是类似的，只不过是单线程罢了。</p>\n</blockquote>\n",
            "tags": [
                "计算机科学",
                "Java",
                "Java深入理解",
                "计算机科学",
                "Java",
                "并发",
                "多线程",
                "线程池"
            ]
        },
        {
            "id": "https://rainrem.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/java/java%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/",
            "url": "https://rainrem.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/java/java%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/",
            "title": "Java多线程深入理解",
            "date_published": "2024-01-07T08:34:48.000Z",
            "content_html": "<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vUmFpblNhdWNlL211bHRpLXRocmVhZGVkLWV4YW1wbGUtZGVtbw==\">🚀本篇章代码 Demo</span></p>\n</blockquote>\n<h1 id=\"多线程概念\"><a class=\"anchor\" href=\"#多线程概念\">#</a> 多线程概念</h1>\n<ul>\n<li>在现代操作系统中启动某一个程序时，操作系统就会为其创建一个进程，而在操作系统中调度最小单位是线程，也被称为轻量级进程，在一个进程里面可以创建多个线程，它们都拥有各自的计数器、栈、堆、局部变量等属性，并且可以访问共享内存变量。</li>\n<li>进程：操作系统中正在运行的程序，是系统进行资源分配和调用的独立单位，每一个进程都拥有它自己的内存空间和系统资源。</li>\n<li>线程：线程是进程中的单个顺序控制流，一个进程如果只有一条执行路径则被称为单线程程序，而如果一个进程有多条执行路径则被称为多线程程序。</li>\n</ul>\n<h1 id=\"多线程创建启动\"><a class=\"anchor\" href=\"#多线程创建启动\">#</a> 多线程创建 &amp; 启动</h1>\n<blockquote>\n<p>多线程有两种创建方法，第一种是继承 <code>Thread</code>  类并重写 <code>run</code>  方法，第二种是实现 <code>Runnable</code>  接口并重写 <code>run</code>  方法。</p>\n</blockquote>\n<blockquote>\n<p>第一种继承 <code>Thread</code>  类并重写 <code>run</code>  方法，示例代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>InheritThread.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: 继承 Thread 实现线程</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2024-01-07 17:52</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InheritThread</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * 重写 run 方法</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第一种继承Thread实现线程。\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>第二种实现 <code>Runnable</code>  接口并重写 <code>run</code>  方法，示例代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>ImplementRunnable.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: 实现 Runnable 接口来实现线程</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2024-01-07 17:54</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ImplementRunnable</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * 使用 Runnable 接口必须重写 run 方法</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第二种实现Runnable接口并重写run方法。\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>线程启动代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>ThreadTest.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: 线程测试</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2024-01-07 17:58</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 第一种继承 Thread 的启动方法</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">InheritThread</span> inheritThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InheritThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 启动线程</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        inheritThread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 第二种实现 Runnable 接口的启动方法</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">ImplementRunnable</span> implementRunnable <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ImplementRunnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">Thread</span> thread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>implementRunnable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 启动线程</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        thread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        执行结果：</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        第一种继承 Thread 并重写 run 方法实现线程。</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        第二种实现 Runnable 接口并重写 run 方法。</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>冷知识：当调用 <code>start()</code>  方法时并不是立即执行多线程的代码，而是使该线程变为可运行状态，什么时候运行多线程代码是由操作系统来决定的。</p>\n</blockquote>\n<h1 id=\"中断线程\"><a class=\"anchor\" href=\"#中断线程\">#</a> 中断线程</h1>\n<blockquote>\n<p>首先什么是中断线程？当线程的 <code>run()</code>  方法执行方法体中的最后一条语句后并经由执行 <code>return</code>  语句返回时，或出现方法中没有捕获的异常时线程将终止。在 <code>Java</code>  早期版本中有一个 <code>stop()</code>  方法，其它线程可以调用它进行终止操作，但现在这个方法已经被弃用了，原因是这个方法会造成一些线程不安全问题。</p>\n</blockquote>\n<blockquote>\n<p>可以将中断理解为一个 <code>flag</code>  属性，它表示一个运行中的线程是否被其它线程进行了中断操作，其它线程通过调用该线程的 <code>interrupt()</code>  方法对其进行中断操作，当一个线程调用 <code>interrupt()</code>  方法时，线程中断状态的 <code>flag</code>  将被改变，这是每个线程都具有的 <code>boolean</code>  类型的标志，每个线程都应该不时的检查这个标志来判断线程是否被中断，判断线程是否被中断的代码是： <code>Thread.currentThread().isInterrupted()</code>  默认没有被中断的状态下是 <code>false</code> 。</p>\n</blockquote>\n<blockquote>\n<p>如果当前线程处于阻塞状态 <code>(sleep|wait)</code> , 就会无法检测中断状态，此时将会抛出 <code>InterruptedException(中断异常)</code> 。如果在每次迭代之后都调用 <code>sleep()</code>  方法或其它线程中断方法，此时 <code>isInterrupted()</code>  检测就没有必要了，如果在中断状态被改变时调用 <code>sleep()</code>  方法，它不会休眠反而会清除这一休眠状态并抛出 <code>InterruptedException</code>  异常。所以如果在循环中调用 <code>sleep()</code>  方法时不要去检测中断状态，只需要捕获 <code>InterruptedException</code>  异常即可，示例代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token comment\">// 线程在睡眠期间中断</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>           <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>注意：在捕捉中断异常时，不要在 <code>catch</code>  块中什么都不处理。</p>\n</blockquote>\n<p><span class=\"red\">不正确的处理方式如下：</span></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><span class=\"red\">正确的处理方式 1：</span></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">throw</span> <span class=\"token class-name\">InterruptedException</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><span class=\"red\">正确的处理方式 2：</span></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 中断当前线程</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">interrupt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>关于中断线程的一些主要方法：</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">返回类型</th>\n<th style=\"text-align:center\">方法名称</th>\n<th style=\"text-align:center\">方法说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>void</code></td>\n<td style=\"text-align:center\"><code>interrupt()</code></td>\n<td style=\"text-align:center\">向线程发送中断请求，线程中断状态将被设置为 <code>true</code> , 如果当前线程被一个 <code>sleep()</code>  调用阻塞，将会抛出 <code>InterruptedException(中断异常)</code> 。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>static boolean</code></td>\n<td style=\"text-align:center\"><code>interrupted()</code></td>\n<td style=\"text-align:center\">测试当前正在执行的线程是否被中断，这是一个静态方法，调用这个方法将会产生一个副作用，那就是它会将当前线程的中断重置为 <code>false</code> 。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>boolean</code></td>\n<td style=\"text-align:center\"><code>isInterrupted()</code></td>\n<td style=\"text-align:center\">判断线程是否被中断，当前方法调用不会产生副作用 (不会改变线程当前的中断状态)。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code> static native Thread</code></td>\n<td style=\"text-align:center\"><code>currentThread()</code></td>\n<td style=\"text-align:center\">返回当前执行线程的 <code>Thread</code>  对象。</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"守护线程\"><a class=\"anchor\" href=\"#守护线程\">#</a> 守护线程</h1>\n<blockquote>\n<p>守护线程的唯一作用就是为其它线程提供服务，可以使用 <code>thread.setDaemon(true)</code>  的方法将线程转为守护线程，计时线程就是一个典型例子，它定时发送 (计时器) 信号来告诉其它线程去执行某项任务。当只剩下守护线程时，虚拟机将会退出，因为如果只剩下守护线程，程序就没有必要执行了。</p>\n</blockquote>\n<blockquote>\n<p>另外 <code>JVM</code>  的垃圾回收、内存管理等都是守护线程，最后要注意的就是在 <code>Java</code>  虚拟机退出时线程中的 <code>finally</code>  代码块并不一定会执行，因此在使用线程时，不能依靠 <code>finally</code>  代码块来确保执行关闭或清理占用资源的逻辑，代码示例如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>GuardianThread.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: 守护线程示例</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2024-01-08 01:26</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GuardianThread</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">Thread</span> thread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">GuardianThreadRunner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GuardianThreadRunner\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 设置为守护线程</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        thread<span class=\"token punctuation\">.</span><span class=\"token function\">setDaemon</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 启动线程</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        thread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GuardianThreadRunner</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"线程中的finally代码块并不一定会执行。\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"线程优先级\"><a class=\"anchor\" href=\"#线程优先级\">#</a> 线程优先级</h1>\n<blockquote>\n<p>什么是线程优先级？在现代操作系统中基本采用时分的形式调度运行的线程，操作系统会分出一个个时间片，线程会分配到若干时间片，当线程的时间片用完了就会发生线程调度，并等待着下一次分配。线程分配到的时间片多少也决定了线程使用处理器资源的多少，而线程优先级就是决定线程需要多少或者少分配一些处理器资源的线程属性。</p>\n</blockquote>\n<blockquote>\n<p>在 <code>Java</code>  线程中，通过一个整形成员变量 <code>priority</code>  来控制优先级，优先级的范围从 <code>1 ~ 10</code> ，在线程构建的时候可以通过 <code>serPriority()</code>  方法来修改优先级，默认优先级是 <code>5</code> ，优先级高的线程分配时间片的数量要多于优先级低的线程。设置线程优先级时，针对频繁阻塞 (休眠或者 <code>I/O</code>  操作) 的线程需要设置较高优先级，而偏重计算 (需要较多 <code>CPU</code>  时间或者偏运算) 的线程则设置较低的优先级，确保处理器不会被独占。在不同的 <code>JVM</code>  以及操作系统上，线程规划会存在差异，有些操作系统甚至会忽略对线程优先级的设定。 <code>(Java并发编程的艺术)</code></p>\n</blockquote>\n<blockquote>\n<p>在 <code>Thread</code>  类中有三种静态常量的优先级，分别是： <code>Thread.MIN_PRIORITY = 1</code> 、 <code>Thread.NORM_PRIORITY = 5</code> 、 <code>Thread.MAX_PRIORITY = 10</code> 。</p>\n</blockquote>\n<blockquote>\n<p>需要注意的是：不要太过于依赖优先级，如果确实要用，则应该避免常犯的一个错误，如果有几个高优先级的线程没有进入非活动状态，优先级低的线程可能永远也不会执行。每当调度器决定运行一个新线程时，首先会在具有高优先级的线程中进行选择，尽管这样使低优先级的线程可能永远不会被执行到。因此我们需要在设置优先级时，针对频繁阻塞的线程需要设置较高的优先级，而偏重计算的线程则设置较低的优先级，这样才能确保处理器不会被长久独占。</p>\n</blockquote>\n<h1 id=\"线程状态转化关系\"><a class=\"anchor\" href=\"#线程状态转化关系\">#</a> 线程状态转化关系</h1>\n<ul>\n<li><code>New(新建状态)</code> ：新建一个线程对象。</li>\n<li><code>Runnable(就绪状态)</code> ：在线程对象创建后，其它线程调用该对象的 <code>start()</code>  方法，该状态的线程位于可运行线程池中变得可运行并等待 <code>CPU</code>  的使用权。</li>\n<li><code>Running(运行状态)</code> ：就绪状态的线程获取了 <code>CPU</code>  并执行程序代码。</li>\n<li><code>Blocked(阻塞状态)</code> ：阻塞状态是线程因为某种原因放弃 <code>CPU</code>  使用权，暂时停止运行，直到线程进入就绪状态下才有机会转到运行状态。阻塞状态分为三种情况：\n<ul>\n<li><code>Waiting(等待阻塞)</code> ：运行的线程执行 <code>wait()</code>  方法， <code>JVM</code>  会把该线程放入等待池中。</li>\n<li><code>Blocked(同步阻塞)</code> ：运行的线程在获取对象的同步锁时，若该同步锁被别的线程占用则 <code>JVM</code>  会把该线程放入锁池中。</li>\n<li><code>TimeWaiting(超时阻塞)</code> ：运行的线程执行 <code>sleep()</code>  或 <code>join()</code>  方法以及发出 <code>I/O</code>  请求时， <code>JVM</code>  会把该线程置为阻塞状态。</li>\n</ul>\n</li>\n<li><code>Dead(死亡状态)</code> ：线程执行完毕或因异常退出了 <code>run()</code>  方法时该线程将结束生命周期。</li>\n</ul>\n<p><img data-src=\"https://s11.ax1x.com/2024/01/08/pFSNgzt.png\" alt=\"pFSNgzt.png\" /></p>\n<blockquote>\n<p>上图中的方法解析如下：</p>\n</blockquote>\n<ul>\n<li><code>Thread.sleep()</code> ：在指定时间内让当前正在执行的线程暂停工作，但不会释放 <code>锁标志</code> ，不推荐使用。</li>\n<li><code>Thread.sleep(long)</code> ：使当前线程进入阻塞状态，在指定时间内不会执行。</li>\n<li><code>Object.notify()</code> ：从对象等待池中唤醒其中一个线程。</li>\n<li><code>Object.notifyAll()</code> ：从对象等待池中唤醒所有等待线程。</li>\n<li><code>Thread.yieId()</code> ：暂停当前正在执行的线程对象， <code>yieId()</code>  方法只是使当前线程重新回到可执行状态，所以执行 <code>yieId()</code>  方法的线程有可能再进入到可执行状态后马上又被执行， <code>yieId()</code>  方法只能使同优先级或更高优先级的线程有机会执行。</li>\n<li><code>Thread.join()</code> ：把指定的线程加入到当前线程，可以将两个交替执行的线程合并为顺序执行的线程。如：在线程 <code>B</code>  中调用了线程 <code>A</code>  的 <code>join()</code>  方法，那么直到线程 <code>A</code>  执行完毕后才会继续执行线程 <code>B</code> 。</li>\n<li><code>Object.wait()/Object.wait(long)</code> ：在其它线程调用对象的 <code>notify()</code>  或 <code>notifyAll()</code>  方法前，导致当前线程等待，线程会释放掉他所占用的 <code>锁标志</code> ，从而使别的线程有机会抢占该锁，当前线程必须拥有当前对象锁，如果当前线程不是此锁的拥有者将会抛出 <code>IllegalMonitorStateException</code>  异常。唤醒当前对象锁的等待线程使用 <code>notify()</code>  或 <code>notifyAll()</code>  方法，也必须拥有相同的对象锁否则也会抛出 <code>IllegalMonitorStateException</code>  异常， <code>waite()</code>  和 <code>notify()</code>  方法必须在 <code>synchronized</code>  方法或者是 <code>synchronized</code>  代码块中调用，如果不在 <code>synchronized</code>  方法或代码块中进行调用则会在运行期间抛出 <code>IllegalMonitorStateException</code>  异常。</li>\n</ul>\n<h1 id=\"线程同步问题\"><a class=\"anchor\" href=\"#线程同步问题\">#</a> 线程同步问题</h1>\n<blockquote>\n<p>线程同步问题的产生，先来看下面示例代码的卖票系统：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: 卖票类 会产生线程同步问题</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2024-01-08 18:47</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SellTicket</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   * 当前票数</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>          <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>          <span class=\"token comment\">// 打印卖票信息</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>          <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"......\"</span> <span class=\"token operator\">+</span> num<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> ignored<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token class-name\">SellTicket</span> sellTicket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SellTicket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">// 创建 4 个线程同时卖票</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>sellTicket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token class-name\">Thread</span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>sellTicket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token class-name\">Thread</span> t3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>sellTicket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token class-name\">Thread</span> t4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>sellTicket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\">// 启动线程</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    t1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    t2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    t3<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    t4<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight raw\"><figcaption data-lang=\"\"><span>执行结果</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>...............</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Thread-2......6</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Thread-0......5</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Thread-1......4</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Thread-0......2</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Thread-2......3</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Thread-3......4</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Thread-0......1</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Thread-2......1</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Thread-1......1</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Thread-3......0</pre></td></tr></table></figure><blockquote>\n<p>从执行结果中可以看出三个售票窗口同时卖出了 <code>1</code>  号票，这当然是不正确的逻辑，这个问题就是线程同步问题，不同的线程都对同一个数据进行操作就很容易导致数据错乱问题，也就是所谓的线程不同步。</p>\n</blockquote>\n<blockquote>\n<p>在解决这个问题之前先来分析一下为什么会产生这种结果？当声明一个 <code>SellTicket</code>  线程类，在这个类中又声明了一个成员变量 <code>num</code> , 然后通过 <code>run()</code>  方法不断的去获取 <code>num</code>  的值并输出，在输出时并且又进行了 <code>num-1</code>  操作，最后在 <code>main</code>  方法中创建了四个线程同时操作这个数据，当程序运行后就出现了线程同步问题，可以看出产生线程同步问题的条件有两个：第一种是多个线程在操作共享数据 <code>(num)</code> , 第二种是操作共享数据的线程有多条。</p>\n</blockquote>\n<blockquote>\n<p>在 <code>Java</code>  中有两种防止线程安全问题的发生， <code>Java</code>  提供了一个 <code>synchronized</code>  关键字来解决这个问题，同时在 <code>JavaSE 5.0</code>  中还引入了 <code>Lock</code>  锁对象的相关类。<a href=\"#%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3\">线程同步问题的解决</a></p>\n</blockquote>\n<h1 id=\"锁对象的介绍\"><a class=\"anchor\" href=\"#锁对象的介绍\">#</a> 锁对象的介绍</h1>\n<h2 id=\"lock-通过锁\"><a class=\"anchor\" href=\"#lock-通过锁\">#</a> Lock - 通过锁</h2>\n<blockquote>\n<p><code>Lock</code>  锁对象，在 <code>Java</code>  中锁是用来控制多个线程访问共享数据的方式，一个锁能够防止多个线程同时访问共享数据 (但读写锁可以允许多个线程同时访问共享数据)，在 <code>LOck</code>  接口出现之前， <code>Java</code>  是靠 <code>synchronized</code>  关键字实现的锁功能，在 <code>JavaSE 5.0</code>  之后并发包中新增了 <code>Lock</code>  接口用来实现锁功能，它提供了与 <code>synchronized</code>  关键字类似的同步功能，只是在使用时需要显式地获取和释放锁，缺点就是缺少像 <code>synchronized</code>  那样隐式获取释放锁的便捷性，但是却拥有了锁获取与释放的可操作性，可中断获取锁以及超时获取锁等多种 <code>synchronized</code>  关键字所不具备的同步特性。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">返回类型</th>\n<th style=\"text-align:center\">方法名称</th>\n<th style=\"text-align:center\">方法说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>void</code></td>\n<td style=\"text-align:center\"><code>lock()</code></td>\n<td style=\"text-align:center\">获取锁，调用该方法会使当前线程获取锁，当获取锁后从该方法返回。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>void</code></td>\n<td style=\"text-align:center\"><code>lockInterruptibly()</code></td>\n<td style=\"text-align:center\">可中断获取锁和 <code>lock()</code>  方法不同的是该方法会响应中断，即在获取锁中可以中断当前线程。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>boolean </code></td>\n<td style=\"text-align:center\"><code>tryLock()</code></td>\n<td style=\"text-align:center\">尝试非阻塞获取锁，调用该方法后立即返回，如果能够获取锁则返回 <code>true</code>  否则返回 <code>false</code> 。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>boolean </code></td>\n<td style=\"text-align:center\"><code>tryLock(long time, TimeUnit unit)</code></td>\n<td style=\"text-align:center\">超时获取锁，当前线程会在三种情况下返回，1. 当前线程在超时时间内获取了锁，2. 当前线程在超时时间被中断，3. 当前线程超时时间结束将返回 <code>false</code> 。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>void</code></td>\n<td style=\"text-align:center\"><code>unlock()</code></td>\n<td style=\"text-align:center\">释放锁。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>Condition</code></td>\n<td style=\"text-align:center\"><code>newCondition()</code></td>\n<td style=\"text-align:center\">条件对象，获取等待通知组件，该组件和当前的锁绑定，当前线程只有获取了锁，才可以调用该组件的 <code>await()</code>  方法，在调用后当前线程将释放锁。</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>在后面将结合 <code>Lock</code>  接口的子实现类 <code>ReentrantLock</code>  类来使用某些方法。</p>\n</blockquote>\n<h2 id=\"reentrantlock-重入锁\"><a class=\"anchor\" href=\"#reentrantlock-重入锁\">#</a> ReentrantLock - 重入锁</h2>\n<blockquote>\n<p>重入锁就是支持重新进入的锁，它表示该锁能够支持一个线程对资源的重复加锁，就是说在调用 <code>lock()</code>  方法时，已经获取到锁的线程并且能够再次调用 <code>lock()</code>  方法获取锁而不被阻塞，同时还支持获取锁的公平性和非公平性。公平性是在绝对时间上，先对锁进行获取的请求一定先被满足，那么这个锁是公平锁反之是不公平锁，示例代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>ReentrantLockDemo.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ReentrantLock</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Description: 类似于 synchronized 的同步执行</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @DateTime: 2024-01-09 01:50</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ReentrantLockDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">/// 参数默认 false，不公平锁  </span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">ReentrantLock</span> lock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 公平锁</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">ReentrantLock</span> lock2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 如果被其它资源锁定，会在此等待锁释放，达到暂停效果</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token comment\">// 操作  </span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 释放锁</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>ReentrantLockDemo2.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ReentrantLock</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Description: 防止重复执行代码</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @DateTime: 2024-01-09 01:53</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ReentrantLockDemo2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">ReentrantLock</span> lock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 如果已经被 lock，则立即返回 false 不会等待，达到忽略操作的效果</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">tryLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token comment\">// 操作</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>ReentrantLockDemo3.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TimeUnit</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ReentrantLock</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @Description: 尝试等待执行</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @DateTime: 2024-01-09 02:03</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ReentrantLockDemo3</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 公平锁</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">ReentrantLock</span> lock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">tryLock</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SECONDS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token comment\">// 如果已经被 lock，尝试等待 3s，看是否可以获得锁，如果 5s 后仍然无法获得锁则返回 false 继续执行</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    <span class=\"token comment\">// 操作</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                    lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token comment\">// 当前线程被中断时 (interrupt)，会抛 InterruptedException</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>注意：需要把解锁操作放在 <code>finally</code>  代码块中的第一行的位置这个十分重要。如在临界区的代码抛出异常，锁必须被释放否则其它线程将永远被阻塞。</p>\n</blockquote>\n<h1 id=\"线程同步问题的解决\"><a class=\"anchor\" href=\"#线程同步问题的解决\">#</a> 线程同步问题的解决</h1>\n<h2 id=\"reentrantlock\"><a class=\"anchor\" href=\"#reentrantlock\">#</a> ReentrantLock</h2>\n<blockquote>\n<p>下面是通过 <code>ReentrantLock</code>  来解决卖票的线程同步问题，代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>SellTicketLock.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Lock</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ReentrantLock</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @Description: 卖票类：使用 ReentrantLock 解决线程同步问题</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @DateTime: 2024-01-08 18:47</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SellTicketLock</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     * 创建锁对象</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Lock</span> lock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     * 当前票数</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token comment\">// 获取锁</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                    <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    <span class=\"token comment\">// 打印卖票信息</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"......\"</span> <span class=\"token operator\">+</span> num<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token comment\">// 出现异常就中断</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">interrupt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token comment\">// 释放锁</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token class-name\">SellTicketLock</span> sellTicket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SellTicketLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token comment\">// 创建 4 个线程同时卖票</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>sellTicket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>sellTicket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>sellTicket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>sellTicket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token comment\">// 启动线程</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        t1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        t2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        t3<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        t4<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight raw\"><figcaption data-lang=\"\"><span>执行结果</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Thread-0......100</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Thread-0......99</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Thread-0......98</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Thread-0......97</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Thread-0......96</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Thread-0......95</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Thread-0......94</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Thread-0......93</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Thread-0......92</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Thread-0......91</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Thread-0......90</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Thread-0......89</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Thread-0......88</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>Thread-0......87</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Thread-0......86</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>Thread-0......85</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>Thread-0......84</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>Thread-0......83</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>Thread-0......82</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>Thread-0......81</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>Thread-0......80</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>Thread-0......79</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>Thread-0......78</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>Thread-0......77</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>Thread-0......76</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>Thread-0......75</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>Thread-0......74</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>Thread-0......73</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>Thread-0......72</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>Thread-0......71</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>Thread-0......70</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>Thread-0......69</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>Thread-0......68</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>Thread-0......67</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>Thread-0......66</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>Thread-0......65</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>Thread-0......64</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>Thread-0......63</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>Thread-0......62</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>Thread-0......61</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>Thread-0......60</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>Thread-0......59</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>Thread-0......58</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>Thread-0......57</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>Thread-0......56</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>Thread-0......55</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>Thread-0......54</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>Thread-0......53</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>Thread-0......52</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>Thread-0......51</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>Thread-0......50</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>Thread-0......49</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>Thread-0......48</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>Thread-0......47</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>Thread-0......46</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>Thread-0......45</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>Thread-0......44</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>Thread-0......43</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>Thread-0......42</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>Thread-0......41</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>Thread-0......40</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>Thread-0......39</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>Thread-0......38</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>Thread-0......37</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>Thread-0......36</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>Thread-0......35</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>Thread-0......34</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>Thread-0......33</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>Thread-0......32</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>Thread-0......31</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>Thread-0......30</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>Thread-0......29</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>Thread-0......28</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>Thread-0......27</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>Thread-0......26</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>Thread-0......25</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>Thread-0......24</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>Thread-0......23</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>Thread-0......22</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>Thread-0......21</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>Thread-0......20</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>Thread-0......19</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>Thread-0......18</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>Thread-0......17</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>Thread-0......16</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>Thread-0......15</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>Thread-0......14</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>Thread-0......13</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>Thread-0......12</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>Thread-0......11</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>Thread-0......10</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>Thread-0......9</pre></td></tr><tr><td data-num=\"93\"></td><td><pre>Thread-0......8</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>Thread-0......7</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>Thread-0......6</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>Thread-0......5</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>Thread-0......4</pre></td></tr><tr><td data-num=\"98\"></td><td><pre>Thread-0......3</pre></td></tr><tr><td data-num=\"99\"></td><td><pre>Thread-0......2</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>Thread-0......1</pre></td></tr><tr><td data-num=\"101\"></td><td><pre></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>进程已结束，退出代码 0</pre></td></tr></table></figure><blockquote>\n<p>从执行结果中可以看出当前的执行结果没有卖出重复的车票，线程安全问题就此解决。</p>\n</blockquote>\n<h2 id=\"synchronized\"><a class=\"anchor\" href=\"#synchronized\">#</a> synchronized</h2>\n<blockquote>\n<p>在 <code>Java</code>  中可以使用 <code>synchronized</code>  关键字来简化多线程中的代码，并且还可以解决线程安全问题，自 <code>JavaSE 1.0</code>  开始， <code>Java</code>  中的每一个对象都有一个内部锁，如果一个方法使用 <code>synchronized</code>  关键字进行声明，那么这个对象将会保护整个方法，也就是说在调用该方法时线程必须获得内部对象锁才可以进一步执行。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">//...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// ↑等价于↓</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">Lock</span> lock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">//.......</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>可以看的出来使用 <code>synchronized</code>  关键字代码简洁很多，我们必须知道每个对象都有一个内部锁，并且该锁有一个内部条件，由锁来管理那些试图进入 <code>synchronized</code>  方法的线程，由条件来管理那些调用 <code>wait()/notify()/notifyAll()</code>  的线程。同时还需要明白另一件事就是一旦有一个线程通过 <code>synchronized</code>  方法获取到内部锁，该类的所有 <code>synchronized</code>  方法或代码块都无法被其它线程访问，直到当前线程释放了内部锁。</p>\n</blockquote>\n<blockquote>\n<p><code>synchronized</code>  同步代码块如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Object</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 需要同步的代码</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//obj 是对象锁，它可以是任意对象，也可以使用 this 则代表使用当前对象作为锁对象</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 需要同步的代码</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>下面是使用 <code>synchronized</code>  代码块来解决线程同步问题，代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>SellTicketSynchronized.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: 卖票类 使用 synchronized 解决线程同步问题</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2024-01-08 18:47</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SellTicketSynchronized</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * 当前票数</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                        <span class=\"token comment\">// 打印卖票信息</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"......\"</span> <span class=\"token operator\">+</span> num<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> ignored<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\">SellTicketSynchronized</span> sellTicket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SellTicketSynchronized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\">// 创建 4 个线程同时卖票</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>sellTicket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>sellTicket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>sellTicket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>sellTicket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token comment\">// 启动线程</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        t1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        t2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        t3<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        t4<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight raw\"><figcaption data-lang=\"\"><span>执行结果</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>C:\\LightRainData\\IDEA\\JDK\\JDK-17.0.6\\bin\\java.exe &quot;-javaagent:C:\\LightRainData\\IDEA\\IntelliJ IDEA 2022.3.2\\lib\\idea_rt.jar&#x3D;1866:C:\\LightRainData\\IDEA\\IntelliJ IDEA 2022.3.2\\bin&quot; -Dfile.encoding&#x3D;UTF-8 -classpath D:\\ 项目 \\gitee\\multi-threaded-example\\target\\classes top.rem.rain.demo1.SellTicketSynchronized</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Thread-0......100</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Thread-0......99</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Thread-0......98</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Thread-0......97</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Thread-0......96</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Thread-0......95</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Thread-0......94</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Thread-0......93</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Thread-0......92</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Thread-0......91</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Thread-0......90</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Thread-0......89</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>Thread-0......88</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Thread-0......87</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>Thread-0......86</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>Thread-0......85</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>Thread-0......84</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>Thread-0......83</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>Thread-0......82</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>Thread-0......81</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>Thread-0......80</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>Thread-0......79</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>Thread-0......78</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>Thread-0......77</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>Thread-0......76</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>Thread-0......75</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>Thread-0......74</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>Thread-0......73</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>Thread-0......72</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>Thread-0......71</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>Thread-0......70</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>Thread-0......69</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>Thread-0......68</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>Thread-0......67</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>Thread-0......66</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>Thread-0......65</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>Thread-0......64</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>Thread-0......63</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>Thread-0......62</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>Thread-0......61</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>Thread-0......60</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>Thread-0......59</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>Thread-0......58</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>Thread-0......57</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>Thread-0......56</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>Thread-0......55</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>Thread-0......54</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>Thread-0......53</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>Thread-0......52</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>Thread-0......51</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>Thread-0......50</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>Thread-0......49</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>Thread-0......48</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>Thread-0......47</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>Thread-0......46</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>Thread-0......45</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>Thread-0......44</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>Thread-0......43</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>Thread-0......42</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>Thread-0......41</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>Thread-0......40</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>Thread-0......39</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>Thread-0......38</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>Thread-0......37</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>Thread-0......36</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>Thread-0......35</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>Thread-0......34</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>Thread-0......33</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>Thread-0......32</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>Thread-0......31</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>Thread-0......30</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>Thread-0......29</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>Thread-0......28</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>Thread-0......27</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>Thread-0......26</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>Thread-0......25</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>Thread-0......24</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>Thread-0......23</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>Thread-0......22</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>Thread-0......21</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>Thread-0......20</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>Thread-0......19</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>Thread-0......18</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>Thread-0......17</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>Thread-0......16</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>Thread-0......15</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>Thread-0......14</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>Thread-0......13</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>Thread-0......12</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>Thread-0......11</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>Thread-0......10</pre></td></tr><tr><td data-num=\"93\"></td><td><pre>Thread-0......9</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>Thread-0......8</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>Thread-0......7</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>Thread-0......6</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>Thread-0......5</pre></td></tr><tr><td data-num=\"98\"></td><td><pre>Thread-0......4</pre></td></tr><tr><td data-num=\"99\"></td><td><pre>Thread-0......3</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>Thread-0......2</pre></td></tr><tr><td data-num=\"101\"></td><td><pre>Thread-0......1</pre></td></tr><tr><td data-num=\"102\"></td><td><pre></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>进程已结束，退出代码 0</pre></td></tr></table></figure><blockquote>\n<p>这样就可以解决线程安全问题了，当然代码同步是要牺牲效率为前提的，同步的好处是解决了线程安全问题，同步的弊端是降低了执行效率，因为同步外的线程都会判断同步锁，同步的前提是同步中必须有多个线程并使用同一个锁。</p>\n</blockquote>\n<h1 id=\"线程间的通信\"><a class=\"anchor\" href=\"#线程间的通信\">#</a> 线程间的通信</h1>\n<blockquote>\n<p>线程在运行时都拥有自动的栈空间，但如果每个线程在运行中仅仅是孤立地运行，那么这就将会变得毫无价值，如果多线程能够相互配合完成工作，这将带来巨大的价值，这也就是所谓的线程间的通信，在 <code>Java</code>  中多线程的通信使用的是等待 / 通知机制来实现的。</p>\n</blockquote>\n<h2 id=\"等待通知-synchronized\"><a class=\"anchor\" href=\"#等待通知-synchronized\">#</a> 等待 / 通知 - synchronized</h2>\n<blockquote>\n<p><code>synchronized</code>  等待 / 通知是指一个线程 <code>A</code>  调用了 <code>Object</code>  类中的 <code>wait()</code>  方法进入等待状态，而另一个线程 <code>B</code>  调用了 <code>Object</code>  类中的 <code>notify()/notifyAll()</code>  方法，当线程 <code>A</code>  收到通知后从对象 <code>Object</code>  的 <code>wait()</code>  方法返回进而执行后续操作。</p>\n</blockquote>\n<blockquote>\n<p>上述中的两个线程通过 <code>Object</code>  对象来完成交互，而对象上的 <code>wait()/notify()/notifyAll()</code>  的关系就跟信号开关一样，用来完成等待方和通知方之间的交互。</p>\n</blockquote>\n<blockquote>\n<p>等待 / 通知的机制主要用到的是 <code>notify()</code> 、 <code>notifyAll()</code> 、 <code>wait()</code> 、 <code>wait(long)</code> 、 <code>wait(long,int)</code>  这些方法，当然这是针对 <code>synchronized</code>  关键字修饰的方法或者代码块，因为要使用这些方法的前提是对调用对象加锁，也就是只能在同步方法或同步代码块中来使用。</p>\n</blockquote>\n<h2 id=\"等待通知-条件对象\"><a class=\"anchor\" href=\"#等待通知-条件对象\">#</a> 等待 / 通知 - 条件对象</h2>\n<blockquote>\n<p>条件对象就是前面的 <code>Lock</code>  锁对象，通过锁对象的条件来实现等待 / 通知机制。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建条件对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Condition</span> condition <span class=\"token operator\">=</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">newCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>返回的对象就是与该锁 <code>(lock)</code>  相关的条件对象，条件对象 <code>API</code>  如下：</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">返回类型</th>\n<th style=\"text-align:center\">方法名称</th>\n<th style=\"text-align:center\">方法说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>void</code></td>\n<td style=\"text-align:center\"><code>await()</code></td>\n<td style=\"text-align:center\">将该线程放到条件等待池中 (对应 <code>wait()</code>  方法)。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>void</code></td>\n<td style=\"text-align:center\"><code>signal()</code></td>\n<td style=\"text-align:center\">从该条件等待池中随机选择一个线程解除其阻塞状态 (对应 <code>notify()</code>  方法)。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>void</code></td>\n<td style=\"text-align:center\"><code>signalAll()</code></td>\n<td style=\"text-align:center\">解除该条件等待池中的所有线程阻塞状态 (对应 <code>notifyAll()</code>  方法)。</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>上述方法过程分析：当一个线程 <code>A</code>  调用了条件对象的 <code>await()</code>  方法进入等待状态，而另一个线程 <code>B</code>  调用了条件对象的 <code>signal()</code>  或 <code>signalAll()</code>  方法，线程 <code>A</code>  收到通知后从条件对象的 <code>await()</code>  方法返回并执行后续操作。</p>\n</blockquote>\n<blockquote>\n<p>这就是两个线程通过条件对象来完成交互，而对象上的 <code>await()</code>  和 <code>signal()</code>  以及 <code>signalAll()</code>  的关系如同信号开关一样，用来完成等待方和通知方之间的交互。当然这样的操作都是必须基于对象锁，当前线程只有获取了锁才可以调用该条件对象的 <code>await()</code>  方法，调用后当前线程将释放锁。</p>\n</blockquote>\n<blockquote>\n<p>注意：在上述两种等待 / 通知机制中无论是调用 <code>signal()</code>  或 <code>signalAll()</code>  方法还是调用 <code>notify()</code>  以及 <code>notifyAll()</code>  方法都不会立即激活一个等待线程，它们仅仅只是解除等待线程的阻塞状态，以便这些线程可以在当前线程解锁或退出同步方法后，通过争夺 <code>CPU</code>  执行权来实现对象的访问。</p>\n</blockquote>\n<h1 id=\"生产者消费者模式\"><a class=\"anchor\" href=\"#生产者消费者模式\">#</a> 生产者 &amp; 消费者模式</h1>\n<h2 id=\"单生产者单消费者\"><a class=\"anchor\" href=\"#单生产者单消费者\">#</a> 单生产者 &amp; 单消费者</h2>\n<blockquote>\n<p>单生产者与单消费者模式就是一个线程生产一个线程消费，下面是等待 / 通知机制下的单生产者与单消费者模式，如是卖北京烤鸭的一个店铺，现在只有一条生产线并只有一条消费路径，就是说只能等生产线生产完成后再通知消费路径去卖，如果消费路径没有烤鸭了就必须通知生产线去生产，此时消费路径将进入等待状态。</p>\n</blockquote>\n<blockquote>\n<p>在这种场景下我们不仅要保证共享数据 (烤鸭数量) 的线程安全，而且还要保证烤鸭数量在消费之前必须有烤鸭，代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>PekingDuck.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: 北京烤鸭 - 单生产者与单消费者</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2024-01-09 15:38</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PekingDuck</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * 烤鸭数量</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     * 烤鸭名称</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> pekingDuckName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     * 线程等待标志</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>     * 生产烤鸭</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>     * @param pekingDuckName 烤鸭名称</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">production</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> pekingDuckName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token comment\">// 有烤鸭进入等待状态</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token comment\">// 设置烤鸭名称和数量</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pekingDuckName <span class=\"token operator\">=</span> pekingDuckName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token comment\">// 数量 + 1</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".生产者：\"</span> <span class=\"token operator\">+</span> pekingDuckName <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token comment\">// 有烤鸭后改变状态</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token comment\">// 通知消费线程来消费烤鸭</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>     * 消费烤鸭</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">consumption</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token comment\">// 没有烤鸭就进入等待状态</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token comment\">// 消费一只烤鸭</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".消费者：\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pekingDuckName <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token comment\">// 没有烤鸭后改变状态</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token comment\">// 通知生产线程来生产烤鸭</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>     * 生产者线程</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ProducerThread</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">PekingDuck</span> pekingDuck<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">ProducerThread</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PekingDuck</span> pekingDuck<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pekingDuck <span class=\"token operator\">=</span> pekingDuck<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                pekingDuck<span class=\"token punctuation\">.</span><span class=\"token function\">production</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"北京烤鸭\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>     * 消费者线程</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConsumerThread</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">PekingDuck</span> pekingDuck<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">ConsumerThread</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PekingDuck</span> pekingDuck<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pekingDuck <span class=\"token operator\">=</span> pekingDuck<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>                pekingDuck<span class=\"token punctuation\">.</span><span class=\"token function\">consumption</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        <span class=\"token comment\">// 创建烤鸭店铺对象</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        <span class=\"token class-name\">PekingDuck</span> pekingDuck <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PekingDuck</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>        <span class=\"token comment\">// 创建生产者</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>        <span class=\"token class-name\">ProducerThread</span> producerThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ProducerThread</span><span class=\"token punctuation\">(</span>pekingDuck<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>        <span class=\"token comment\">// 创建消费者</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        <span class=\"token class-name\">ConsumerThread</span> consumerThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConsumerThread</span><span class=\"token punctuation\">(</span>pekingDuck<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token comment\">// 创建生产者线程</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>producerThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>        <span class=\"token comment\">// 创建消费者线程</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>consumerThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>        <span class=\"token comment\">// 启动线程</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>        t1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>        t2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>在上面的类中有两个 <code>synchronized</code>  同步方法，一个是生产烤鸭，另一个是消费烤鸭，之所以需要使用同步是因为我们操作了共享数据 <code>count</code> ，同时为了保证生产烤鸭后才可以进行消费，使用了等待 / 通知机制的 <code>wait()</code>  和 <code>notify()</code>  方法。</p>\n</blockquote>\n<blockquote>\n<p>当第一次运行生产时调用了生产方法，此时有 <code>0</code>  只烤鸭，即 <code>flag = false</code>  此时不需要等待消费者来消费，因为当前没有可消费的烤鸭，设置烤鸭名称然后烤鸭数量 <code>+1</code> ，此时就生产了一只烤鸭，随后改变 <code>flag = true</code> , 同时通知消费线程可以来消费烤鸭了，即使此时生产线程再次抢到了执行权因为当前的 <code>flag = true</code> , 所以生产线程会进入等待的阻塞状态，消费者线程被唤醒后进入消费方法，等消费完成后又将 <code>flag</code>  的值设置为了 <code>false</code>  状态，通知生产线程可以再生产烤鸭了，以此循环，只要卖出一只我就生产一只。</p>\n</blockquote>\n<blockquote>\n<p>在 <code>main</code>  方法中创建了两个线程，一个是生产线程，一个是消费线程，当开启这两个线程后就会不断的生产消费一直循环，下面是执行结果。</p>\n</blockquote>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"><span>执行结果</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>C:\\LightRainData\\IDEA\\JDK\\JDK-17.0.6\\bin\\java.exe &quot;-javaagent:C:\\LightRainData\\IDEA\\IntelliJ IDEA 2022.3.2\\lib\\idea_rt.jar&#x3D;8168:C:\\LightRainData\\IDEA\\IntelliJ IDEA 2022.3.2\\bin&quot; -Dfile.encoding&#x3D;UTF-8 -classpath D:\\ 项目 \\gitee\\multi-threaded-example\\target\\classes top.rem.rain.demo2.PekingDuck</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Thread-0. 生产者：北京烤鸭 1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Thread-1. 消费者：北京烤鸭 1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Thread-0. 生产者：北京烤鸭 2</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Thread-1. 消费者：北京烤鸭 2</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Thread-0. 生产者：北京烤鸭 3</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Thread-1. 消费者：北京烤鸭 3</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Thread-0. 生产者：北京烤鸭 4</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Thread-1. 消费者：北京烤鸭 4</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Thread-0. 生产者：北京烤鸭 5</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Thread-1. 消费者：北京烤鸭 5</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Thread-0. 生产者：北京烤鸭 6</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Thread-1. 消费者：北京烤鸭 6</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>Thread-0. 生产者：北京烤鸭 7</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Thread-1. 消费者：北京烤鸭 7</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>........................</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>进程已结束，退出代码 130</pre></td></tr></table></figure><blockquote>\n<p>从执行结果中可以看出当生产一只烤鸭就会消费一只烤鸭，运行完全正常，这就是单生产者与单消费者模式，下面将使用对象锁的方式来修改，代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>PekingDuckLock.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Condition</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Lock</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ReentrantLock</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @Description: 北京烤鸭 - 单生产者与单消费者</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @DateTime: 2024-01-09 15:38</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PekingDuckLock</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     * 烤鸭数量</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     * 烤鸭名称</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> pekingDuckName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>     * 线程等待标志</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>     * 创建锁对象</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Lock</span> lock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>     * 创建条件对象</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Condition</span> condition <span class=\"token operator\">=</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">newCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>     * 生产烤鸭</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>     * @param pekingDuckName 烤鸭名称</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">production</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> pekingDuckName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token comment\">// 获取锁</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                    <span class=\"token comment\">// 有烤鸭进入等待状态</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                    condition<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token comment\">// 设置烤鸭名称和数量</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pekingDuckName <span class=\"token operator\">=</span> pekingDuckName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token comment\">// 数量 + 1</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".生产者：\"</span> <span class=\"token operator\">+</span> pekingDuckName <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token comment\">// 有烤鸭后改变状态</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token comment\">// 通知消费线程来消费烤鸭</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            condition<span class=\"token punctuation\">.</span><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token comment\">// 释放锁</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>     * 消费烤鸭</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">consumption</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token comment\">// 获取锁</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>            <span class=\"token comment\">// 没有烤鸭就进入等待状态</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>                    condition<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            <span class=\"token comment\">// 消费一只烤鸭</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".消费者：\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pekingDuckName <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>            <span class=\"token comment\">// 没有烤鸭后改变状态</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            <span class=\"token comment\">// 通知生产线程来生产烤鸭</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>            condition<span class=\"token punctuation\">.</span><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>            <span class=\"token comment\">// 释放锁</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>            lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>     * 生产者线程</pre></td></tr><tr><td data-num=\"101\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ProducerThread</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">PekingDuckLock</span> pekingDuck<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">ProducerThread</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PekingDuckLock</span> pekingDuck<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pekingDuck <span class=\"token operator\">=</span> pekingDuck<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>                pekingDuck<span class=\"token punctuation\">.</span><span class=\"token function\">production</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"北京烤鸭\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"118\"></td><td><pre>     * 消费者线程</pre></td></tr><tr><td data-num=\"119\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConsumerThread</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">PekingDuckLock</span> pekingDuck<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">ConsumerThread</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PekingDuckLock</span> pekingDuck<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pekingDuck <span class=\"token operator\">=</span> pekingDuck<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>                pekingDuck<span class=\"token punctuation\">.</span><span class=\"token function\">consumption</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>        <span class=\"token comment\">// 创建烤鸭店铺对象</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>        <span class=\"token class-name\">PekingDuckLock</span> pekingDuck <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PekingDuckLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>        <span class=\"token comment\">// 创建生产者</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>        <span class=\"token class-name\">ProducerThread</span> producerThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ProducerThread</span><span class=\"token punctuation\">(</span>pekingDuck<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>        <span class=\"token comment\">// 创建消费者</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>        <span class=\"token class-name\">ConsumerThread</span> consumerThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConsumerThread</span><span class=\"token punctuation\">(</span>pekingDuck<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>        <span class=\"token comment\">// 创建生产者线程</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>producerThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>        <span class=\"token comment\">// 创建消费者线程</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>consumerThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>        <span class=\"token comment\">// 启动线程</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>        t1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>        t2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>通过使用对象锁的方式来实现，首先创建一个对象锁，这里使用是 <code>ReentrantLock</code>  重入锁，需要手动设置 <code>lock()</code>  和 <code>unlock()</code>  方法去获取锁和释放锁，为了实现等待 / 通知机制，此时还需要通过锁对象去创建一个条件对象 <code>Condition</code> ，然后通过锁对象的 <code>await()</code>  和 <code>signal()</code>  方法来实现等待和通知操作，执行结果和上面使用 <code>synchronized</code>  关键字是一样的结果就不贴了。</p>\n</blockquote>\n<h2 id=\"多生产者多消费者模式\"><a class=\"anchor\" href=\"#多生产者多消费者模式\">#</a> 多生产者 &amp; 多消费者模式</h2>\n<blockquote>\n<p>多生产者与多消费者模式就是多条生产线与多条消费路径，在上面示例代码中的 <code>main</code>  方法中新添加两条线程即可，其它地方并未修改，代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>PekingDuck2.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: 北京烤鸭 - 多生产者与多消费者</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2024-01-09 15:38</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PekingDuck2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * 烤鸭数量</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     * 烤鸭名称</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> pekingDuckName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     * 线程等待标志</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>     * 生产烤鸭</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>     * @param pekingDuckName 烤鸭名称</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">production</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> pekingDuckName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token comment\">// 有烤鸭进入等待状态</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token comment\">// 设置烤鸭名称和数量</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pekingDuckName <span class=\"token operator\">=</span> pekingDuckName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token comment\">// 数量 + 1</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".生产者：\"</span> <span class=\"token operator\">+</span> pekingDuckName <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token comment\">// 有烤鸭后改变状态</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token comment\">// 通知消费线程来消费烤鸭</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token function\">notifyAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>     * 消费烤鸭</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">consumption</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token comment\">// 没有烤鸭就进入等待状态</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token comment\">// 消费一只烤鸭</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".消费者：\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pekingDuckName <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token comment\">// 没有烤鸭后改变状态</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token comment\">// 通知生产线程来生产烤鸭</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token function\">notifyAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>     * 生产者线程</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ProducerThread</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">PekingDuck</span> pekingDuck<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">ProducerThread</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PekingDuck</span> pekingDuck<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pekingDuck <span class=\"token operator\">=</span> pekingDuck<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                pekingDuck<span class=\"token punctuation\">.</span><span class=\"token function\">production</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"北京烤鸭\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>     * 消费者线程</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConsumerThread</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">PekingDuck</span> pekingDuck<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">ConsumerThread</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PekingDuck</span> pekingDuck<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pekingDuck <span class=\"token operator\">=</span> pekingDuck<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>                pekingDuck<span class=\"token punctuation\">.</span><span class=\"token function\">consumption</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        <span class=\"token comment\">// 创建烤鸭店铺对象</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        <span class=\"token class-name\">PekingDuck</span> pekingDuck <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PekingDuck</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>        <span class=\"token comment\">// 创建生产者</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>        <span class=\"token class-name\">ProducerThread</span> producerThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ProducerThread</span><span class=\"token punctuation\">(</span>pekingDuck<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>        <span class=\"token comment\">// 创建消费者</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        <span class=\"token class-name\">ConsumerThread</span> consumerThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConsumerThread</span><span class=\"token punctuation\">(</span>pekingDuck<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token comment\">// 创建生产者线程</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>producerThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>producerThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>        <span class=\"token comment\">// 创建消费者线程</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>consumerThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>consumerThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>        <span class=\"token comment\">// 启动线程</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>        t1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>        t2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>        t3<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>        t4<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>新增了两条线程后来看下面的执行结果：</p>\n</blockquote>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"><span>执行结果</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>C:\\LightRainData\\IDEA\\JDK\\JDK-17.0.6\\bin\\java.exe &quot;-javaagent:C:\\LightRainData\\IDEA\\IntelliJ IDEA 2022.3.2\\lib\\idea_rt.jar&#x3D;9761:C:\\LightRainData\\IDEA\\IntelliJ IDEA 2022.3.2\\bin&quot; -Dfile.encoding&#x3D;UTF-8 -classpath D:\\ 项目 \\gitee\\multi-threaded-example\\target\\classes top.rem.rain.demo2.PekingDuck</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Thread-0. 生产者：北京烤鸭 1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Thread-3. 消费者：北京烤鸭 1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Thread-1. 生产者：北京烤鸭 2</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Thread-3. 消费者：北京烤鸭 2</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Thread-2. 消费者：北京烤鸭 2</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Thread-1. 生产者：北京烤鸭 3</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Thread-3. 消费者：北京烤鸭 3</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Thread-2. 消费者：北京烤鸭 3</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Thread-1. 生产者：北京烤鸭 4</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Thread-3. 消费者：北京烤鸭 4</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Thread-2. 消费者：北京烤鸭 4</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Thread-1. 生产者：北京烤鸭 5</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>Thread-3. 消费者：北京烤鸭 5</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Thread-2. 消费者：北京烤鸭 5</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>........................</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>Thread-1. 生产者：北京烤鸭 63710</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>Thread-0. 生产者：北京烤鸭 63711</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>Thread-1. 生产者：北京烤鸭 63712</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>Thread-0. 生产者：北京烤鸭 63713</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>Thread-2. 消费者：北京烤鸭 63713</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>Thread-3. 消费者：北京烤鸭 63713</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>Thread-2. 消费者：北京烤鸭 63713</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>Thread-3. 消费者：北京烤鸭 63713</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>Thread-2. 消费者：北京烤鸭 63713</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>Thread-3. 消费者：北京烤鸭 63713</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>Thread-2. 消费者：北京烤鸭 63713</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>Thread-3. 消费者：北京烤鸭 63713</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>Thread-2. 消费者：北京烤鸭 63713</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>Thread-3. 消费者：北京烤鸭 63713</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>Thread-2. 消费者：北京烤鸭 63713</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>Thread-3. 消费者：北京烤鸭 63713</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>Thread-2. 消费者：北京烤鸭 63713</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>............................</pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>进程已结束，退出代码 - 1</pre></td></tr></table></figure><blockquote>\n<p>仅仅新增了两条线程后从执行结果中就可以看出明显的不对了，生产到第 <code>5</code>  只烤鸭的时候第 <code>5</code>  只烤鸭居然被消费了两次，然后当生产到第 <code>63713</code>  只的时候紧接着当前烤鸭被消费了 <code>n</code>  次，有的烤鸭还没有被消费，难道共享数据没有进行线程同步么？先来看下面代码：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>PekingDuck2.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: 北京烤鸭 - 多生产者与多消费者</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2024-01-09 15:38</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PekingDuck2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * 烤鸭数量</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     * 烤鸭名称</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> pekingDuckName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     * 线程等待标志</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>     * 生产烤鸭</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>     * @param pekingDuckName 烤鸭名称</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">production</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> pekingDuckName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token comment\">// 有烤鸭进入等待状态</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token comment\">// 设置烤鸭名称和数量</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pekingDuckName <span class=\"token operator\">=</span> pekingDuckName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token comment\">// 数量 + 1</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".生产者：\"</span> <span class=\"token operator\">+</span> pekingDuckName <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token comment\">// 有烤鸭后改变状态</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token comment\">// 通知消费线程来消费烤鸭</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token function\">notifyAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>     * 消费烤鸭</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">consumption</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token comment\">// 没有烤鸭就进入等待状态</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token comment\">// 消费一只烤鸭</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".消费者：\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pekingDuckName <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token comment\">// 没有烤鸭后改变状态</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token comment\">// 通知生产线程来生产烤鸭</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token function\">notifyAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token comment\">// ....</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>从代码中可以看出共享数据 <code>count</code>  的获取方法都使用了 <code>synchronized</code>  关键字进行了同步，为什么还会出现数据错误的现象呢？</p>\n</blockquote>\n<blockquote>\n<p>分析：确实对共享数据采用了同步措施，而且也应用了等待 / 通知机制，但是这样的措施只能在单生产者与单消费者的情况下才可以正确应用，从执行结果中可以看出之前的单生产者与单消费者安全处理措施就不适合多生产者与多消费者的情况了，看下图：</p>\n</blockquote>\n<p><img data-src=\"https://s11.ax1x.com/2024/01/09/pFpyrL9.png\" alt=\"pFpyrL9.png\" /></p>\n<blockquote>\n<p>修正：上图中的 <code>notify()</code>  方法需要修改为 <code>notifyAll()</code>  才可正常执行， <code>notify()</code>  方法只适合在单生产者与单消费者模式中，在多生产者与多消费者中需要使用 <code>notifyAll()</code>  方法来唤醒所有的线程，并且两处的 <code>if</code>  都需要修改为 <code>while</code>  判断，修改后的正确代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>PekingDuck2.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: 北京烤鸭 - 多生产者与多消费者</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2024-01-09 18:38</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PekingDuck2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   * 烤鸭数量</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   * 烤鸭名称</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> pekingDuckName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   * 线程等待标志</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   * 生产烤鸭</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   *</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   * @param pekingDuckName 烤鸭名称</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">production</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> pekingDuckName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">// 有烤鸭进入等待状态</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">// 设置烤鸭名称和数量</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pekingDuckName <span class=\"token operator\">=</span> pekingDuckName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\">// 数量 + 1</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".生产者：\"</span> <span class=\"token operator\">+</span> pekingDuckName <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token comment\">// 有烤鸭后改变状态</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token comment\">// 通知消费线程来消费烤鸭</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token function\">notifyAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>   * 消费烤鸭</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">consumption</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token comment\">// 没有烤鸭就进入等待状态</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token comment\">// 消费一只烤鸭</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".消费者：\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pekingDuckName <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token comment\">// 没有烤鸭后改变状态</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token comment\">// 通知生产线程来生产烤鸭</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token function\">notifyAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>   * 生产者线程</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>  <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ProducerThread</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">PekingDuck2</span> pekingDuck<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ProducerThread</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PekingDuck2</span> pekingDuck<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pekingDuck <span class=\"token operator\">=</span> pekingDuck<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        pekingDuck<span class=\"token punctuation\">.</span><span class=\"token function\">production</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"北京烤鸭\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>   * 消费者线程</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>  <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConsumerThread</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">PekingDuck2</span> pekingDuck<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ConsumerThread</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PekingDuck2</span> pekingDuck<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pekingDuck <span class=\"token operator\">=</span> pekingDuck<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        pekingDuck<span class=\"token punctuation\">.</span><span class=\"token function\">consumption</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token comment\">// 创建烤鸭店铺对象</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    <span class=\"token class-name\">PekingDuck2</span> pekingDuck <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PekingDuck2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    <span class=\"token comment\">// 创建生产者</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token class-name\">ProducerThread</span> producerThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ProducerThread</span><span class=\"token punctuation\">(</span>pekingDuck<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    <span class=\"token comment\">// 创建消费者</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token class-name\">ConsumerThread</span> consumerThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConsumerThread</span><span class=\"token punctuation\">(</span>pekingDuck<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    <span class=\"token comment\">// 创建生产者线程</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    <span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>producerThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>    <span class=\"token class-name\">Thread</span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>producerThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    <span class=\"token comment\">// 创建消费者线程</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>    <span class=\"token class-name\">Thread</span> t3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>consumerThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>    <span class=\"token class-name\">Thread</span> t4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>consumerThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>    <span class=\"token comment\">// 启动线程</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    t1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    t2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    t3<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>    t4<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>执行结果如下：</p>\n</blockquote>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"><span>执行结果</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Thread-0. 生产者：北京烤鸭 1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Thread-3. 消费者：北京烤鸭 1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Thread-1. 生产者：北京烤鸭 2</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Thread-3. 消费者：北京烤鸭 2</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Thread-1. 生产者：北京烤鸭 3</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Thread-3. 消费者：北京烤鸭 3</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Thread-1. 生产者：北京烤鸭 4</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Thread-3. 消费者：北京烤鸭 4</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Thread-1. 生产者：北京烤鸭 5</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Thread-3. 消费者：北京烤鸭 5</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Thread-1. 生产者：北京烤鸭 6</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Thread-3. 消费者：北京烤鸭 6</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Thread-1. 生产者：北京烤鸭 7</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>Thread-3. 消费者：北京烤鸭 7</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Thread-1. 生产者：北京烤鸭 8</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>Thread-3. 消费者：北京烤鸭 8</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>Thread-1. 生产者：北京烤鸭 9</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>Thread-3. 消费者：北京烤鸭 9</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>Thread-1. 生产者：北京烤鸭 10</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>Thread-3. 消费者：北京烤鸭 10</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>Thread-1. 生产者：北京烤鸭 11</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>Thread-3. 消费者：北京烤鸭 11</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>Thread-1. 生产者：北京烤鸭 12</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>Thread-3. 消费者：北京烤鸭 12</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>Thread-1. 生产者：北京烤鸭 13</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>Thread-3. 消费者：北京烤鸭 13</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>Thread-1. 生产者：北京烤鸭 14</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>Thread-3. 消费者：北京烤鸭 14</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>Thread-1. 生产者：北京烤鸭 15</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>Thread-3. 消费者：北京烤鸭 15</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>Thread-1. 生产者：北京烤鸭 16</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>Thread-3. 消费者：北京烤鸭 16</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>Thread-1. 生产者：北京烤鸭 17</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>Thread-3. 消费者：北京烤鸭 17</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>Thread-1. 生产者：北京烤鸭 18</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>Thread-3. 消费者：北京烤鸭 18</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>Thread-1. 生产者：北京烤鸭 19</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>Thread-3. 消费者：北京烤鸭 19</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>Thread-1. 生产者：北京烤鸭 20</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>Thread-3. 消费者：北京烤鸭 20</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>Thread-1. 生产者：北京烤鸭 21</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>Thread-3. 消费者：北京烤鸭 21</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>Thread-1. 生产者：北京烤鸭 22</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>Thread-3. 消费者：北京烤鸭 22</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>Thread-1. 生产者：北京烤鸭 23</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>Thread-3. 消费者：北京烤鸭 23</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>Thread-1. 生产者：北京烤鸭 24</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>Thread-3. 消费者：北京烤鸭 24</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>Thread-1. 生产者：北京烤鸭 25</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>Thread-3. 消费者：北京烤鸭 25</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>Thread-1. 生产者：北京烤鸭 26</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>Thread-3. 消费者：北京烤鸭 26</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>Thread-1. 生产者：北京烤鸭 27</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>Thread-3. 消费者：北京烤鸭 27</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>Thread-1. 生产者：北京烤鸭 28</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>Thread-3. 消费者：北京烤鸭 28</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>Thread-1. 生产者：北京烤鸭 29</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>Thread-3. 消费者：北京烤鸭 29</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>Thread-1. 生产者：北京烤鸭 30</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>Thread-3. 消费者：北京烤鸭 30</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>Thread-1. 生产者：北京烤鸭 31</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>Thread-3. 消费者：北京烤鸭 31</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>Thread-1. 生产者：北京烤鸭 32</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>Thread-3. 消费者：北京烤鸭 32</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>Thread-1. 生产者：北京烤鸭 33</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>Thread-3. 消费者：北京烤鸭 33</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>Thread-1. 生产者：北京烤鸭 34</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>Thread-3. 消费者：北京烤鸭 34</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>Thread-1. 生产者：北京烤鸭 35</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>Thread-3. 消费者：北京烤鸭 35</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>Thread-1. 生产者：北京烤鸭 36</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>Thread-3. 消费者：北京烤鸭 36</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>Thread-1. 生产者：北京烤鸭 37</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>Thread-3. 消费者：北京烤鸭 37</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>Thread-1. 生产者：北京烤鸭 38</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>Thread-3. 消费者：北京烤鸭 38</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>Thread-1. 生产者：北京烤鸭 39</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>Thread-3. 消费者：北京烤鸭 39</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>Thread-1. 生产者：北京烤鸭 40</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>Thread-3. 消费者：北京烤鸭 40</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>.........................</pre></td></tr></table></figure><blockquote>\n<p>从当前执行结果中可以看出当前数据是没有错乱的，这样数据就正常了，而锁对象的解决方法与此相同。</p>\n</blockquote>\n<blockquote>\n<p>下面将介绍一种更有效得锁对象解决方法，使用两组条件对象 <code>(Condition也被称为监视器)</code>  来实现等待 / 通知机制，也就是通过已有的锁获取两组监视器，一组监视生产者，一组监视消费者，代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>PekingDuckLockCondition.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Condition</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Lock</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ReentrantLock</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @Description: 北京烤鸭 - 多生产者与多消费者，通过已有的锁获取两组监视器，一组监视生产者，一组监视消费者</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @DateTime: 2024-01-09 19:10</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PekingDuckLockCondition</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     * 烤鸭数量</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     * 烤鸭名称</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> pekingDuckName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>     * 线程等待标志</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>     * 创建锁对象</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Lock</span> lock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>     * 监视生产者的监视器</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Condition</span> productionCondition <span class=\"token operator\">=</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">newCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>     * 监视消费者的监视器</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Condition</span> consumptionCondition <span class=\"token operator\">=</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">newCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>     * 生产烤鸭</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>     * @param pekingDuckName 烤鸭名称</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">production</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> pekingDuckName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token comment\">// 获取锁</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                    <span class=\"token comment\">// 有烤鸭进入等待状态</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                    productionCondition<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token comment\">// 设置烤鸭名称和数量</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pekingDuckName <span class=\"token operator\">=</span> pekingDuckName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token comment\">// 数量 + 1</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".生产者：\"</span> <span class=\"token operator\">+</span> pekingDuckName <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token comment\">// 有烤鸭后改变状态</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token comment\">// 直接唤醒消费线程</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            consumptionCondition<span class=\"token punctuation\">.</span><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token comment\">// 释放锁</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>     * 消费烤鸭</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">consumption</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token comment\">// 获取锁</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>            <span class=\"token comment\">// 没有烤鸭就进入等待状态</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>                    consumptionCondition<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>            <span class=\"token comment\">// 消费一只烤鸭</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".消费者：\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pekingDuckName <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>            <span class=\"token comment\">// 没有烤鸭后改变状态</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>            flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>            <span class=\"token comment\">// 直接唤醒生产线程</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>            productionCondition<span class=\"token punctuation\">.</span><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>            <span class=\"token comment\">// 释放锁</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>            lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"105\"></td><td><pre>     * 生产者线程</pre></td></tr><tr><td data-num=\"106\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ProducerThread</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">PekingDuckLockCondition</span> pekingDuck<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">ProducerThread</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PekingDuckLockCondition</span> pekingDuck<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pekingDuck <span class=\"token operator\">=</span> pekingDuck<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>                pekingDuck<span class=\"token punctuation\">.</span><span class=\"token function\">production</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"北京烤鸭\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"123\"></td><td><pre>     * 消费者线程</pre></td></tr><tr><td data-num=\"124\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConsumerThread</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">PekingDuckLockCondition</span> pekingDuck<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">ConsumerThread</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PekingDuckLockCondition</span> pekingDuck<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pekingDuck <span class=\"token operator\">=</span> pekingDuck<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>                pekingDuck<span class=\"token punctuation\">.</span><span class=\"token function\">consumption</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>        <span class=\"token comment\">// 创建烤鸭店铺对象</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>        <span class=\"token class-name\">PekingDuckLockCondition</span> pekingDuck <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PekingDuckLockCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>        <span class=\"token comment\">// 创建生产者</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>        <span class=\"token class-name\">ProducerThread</span> producerThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ProducerThread</span><span class=\"token punctuation\">(</span>pekingDuck<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>        <span class=\"token comment\">// 创建消费者</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>        <span class=\"token class-name\">ConsumerThread</span> consumerThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConsumerThread</span><span class=\"token punctuation\">(</span>pekingDuck<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>        <span class=\"token comment\">// 创建生产者线程</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>producerThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>producerThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>        <span class=\"token comment\">// 创建消费者线程</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>consumerThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>consumerThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>        <span class=\"token comment\">// 启动线程</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>        t1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>        t2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>        t3<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>        t4<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>在上述代码中创建了两个条件对象分别是 <code>productionCondition</code>  和 <code>consumptionCondition</code>  并且分别用于监视生产线程和监视消费线程，在 <code>production()</code>  方法中获取到锁后，此时 <code>flag = true</code>  的话也就是还有烤鸭未被消费，因此生产线程需要进行等待，所以调用生产线程的监视器 <code>productionCondition</code>  的 <code>await()</code>  方法进入阻塞等待池。</p>\n</blockquote>\n<blockquote>\n<p>如果此时的 <code>flag</code>  为 <code>false</code>  的话就说明烤鸭已被消费完，需要生产线程去生产烤鸭，那么生产线程将进行烤鸭的生产并通过消费线程的监视器 <code>consumptionCondition</code>  的 <code>signal()</code>  方法去通知消费线程对烤鸭进行消费，与此同时在 <code>consumption()</code>  方法中也是同样的道理。</p>\n</blockquote>\n<blockquote>\n<p>可以发现使用这种方法比之前使用 <code>synchronized</code>  同步方法或是单监视器的锁对象都要高效和方便，在此之前都是使用 <code>notify()/notifyAll()</code>  和 <code>signal()/signalAll()</code>  方法去唤醒等待池中的线程，然后让池中的线程又进入竞争队列去抢占 <code>CPU</code>  资源，这样不仅唤醒了无关的线程而且又让全部线程进入了竞争队列中。</p>\n</blockquote>\n<blockquote>\n<p>然而当使用两种监视器分别监听生产者线程和消费者线程，这样的方式恰好解决了前面两种方式的问题所在，每次唤醒都只是生产者线程或是消费者线程而不会让两者都同时唤醒，这样不就可以更高效得执行程序了么。</p>\n</blockquote>\n<h1 id=\"线程死锁\"><a class=\"anchor\" href=\"#线程死锁\">#</a> 线程死锁</h1>\n<blockquote>\n<p>关于线程死锁问题，通过上面代码示例，我们知道了锁是一个非常有用的工具，适用的场景非常多，因为他适用起来非常得简单，但它同时也会带来一些不必要的麻烦，那就是可能会引起线程死锁，一旦产生了死锁就会造成系统功能的不可用，下面的示例将演示线程 <code>t1</code>  和线程 <code>t2</code>  互相等待对方释放锁从而引起死锁，代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: 线程死锁示例</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2024-01-09 23:07</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DeadLock</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token class-name\">A</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"A\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token class-name\">B</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DeadLockA</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"static-access\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">A</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                    <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">B</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DeadLockB</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">B</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">A</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">deadLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token class-name\">DeadLockA</span> deadLockA <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DeadLockA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token class-name\">DeadLockB</span> deadLockB <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DeadLockB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>deadLockA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>deadLockB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token comment\">// 启动线程</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        t1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        t2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token class-name\">DeadLock</span> deadLock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DeadLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            deadLock<span class=\"token punctuation\">.</span><span class=\"token function\">deadLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>同步嵌套是产生死锁的常见情景，从上面的代码中可以看出，当线程 <code>t1</code>  获取到锁 <code>(A)</code>  后休眠 <code>2秒</code> ，此时线程 <code>t2</code>  刚好获取到了锁 <code>(B)</code> , 接着要获取锁 <code>(A)</code> , 但此时锁 <code>(A)</code>  正在被 <code>t1</code>  线程所持有，因此只能等待 <code>t1</code>  线程释放锁 <code>(A)</code> , 但遗憾的是在 <code>t1</code>  线程内又请求获取锁 <code>(B)</code> ，而锁 <code>(B)</code>  此时又被 <code>t2</code>  线程所持有，到此结果就是 <code>t1</code>  线程拿到了锁 <code>(A)</code>  同时等待 <code>t2</code>  线程释放锁 <code>(B)</code> ，而 <code>t2</code>  线程获取到了锁 <code>(B)</code>  也同时在等待 <code>t1</code>  线程释放锁 <code>(A)</code> , 然后彼此等待也就造成了线程死锁问题。</p>\n</blockquote>\n<blockquote>\n<p>虽然在一般情况时不会这么写代码，但是有些 较为复杂的场景中，可能就会遇到这种问题，所以在写同步代码时需要多考虑死锁的情况，避免发生线程死锁，避免死锁常见的几种方法：1. 避免一个线程同时获取多个锁。2. 避免在一个资源内占用多个资源，尽量保证每个锁只占用一个资源。3. 尝试使用定时锁，使用 <code>tryLock(timeout)</code>  来代替内部锁机制。4. 对于数据库锁，加锁和解锁必须在同一个数据库连接里面，否则将会出现解锁失败的情况。5. 避免同步嵌套的发生。</p>\n</blockquote>\n<h1 id=\"threadjoin方法\"><a class=\"anchor\" href=\"#threadjoin方法\">#</a> Thread.join () 方法</h1>\n<blockquote>\n<p>如果有一个线程 <code>A</code>  执行了 <code>thread.join()</code>  方法，其含义是当前线程 <code>A</code>  等待 <code>thread</code>  线程终止之后才能从 <code>thread.join()</code>  方法中返回。线程 <code>Thread</code>  除了提供 <code>join()</code>  方法之外，还提供了 <code>join(long millis)</code>  和 <code>join(long millis,int nanos)</code>  两个具备超时特性的方法。</p>\n</blockquote>\n<blockquote>\n<p>这两个超时方法表示如果线程在给定的超时时间里没有终止，那么将会从该超时方法中返回，来看下面代码示例，创建 <code>10</code>  个线程，从 <code>0 ~ 9</code>  每个线程调用前一个线程的 <code>join()</code>  方法，也就是线程 <code>0</code>  结束后线程 <code>1</code>  才能从 <code>join()</code>  方法中返回，而 <code>0</code>  需要等待 <code>main</code>  线程结束。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>JoinDemo.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: join 示例</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2024-01-10 00:05</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JoinDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">Thread</span> previous <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token comment\">// 每个线程拥有前一个线程的引用。需要等待前一个线程终止，才能从等待中返回</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token class-name\">Thread</span> thread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Domino</span><span class=\"token punctuation\">(</span>previous<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            thread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            previous <span class=\"token operator\">=</span> thread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" 线程结束\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        执行结果：</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        main 线程结束</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        0 线程结束</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        1 线程结束</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        2 线程结束</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        3 线程结束</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        4 线程结束</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        5 线程结束</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        6 线程结束</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        7 线程结束</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        8 线程结束</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        9 线程结束</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Domino</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Thread</span> thread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Domino</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span> thread<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>thread <span class=\"token operator\">=</span> thread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            thread<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" 线程结束\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "Java",
                "Java深入理解",
                "计算机科学",
                "Java",
                "并发",
                "多线程"
            ]
        }
    ]
}