{
    "version": "https://jsonfeed.org/version/1",
    "title": "雨的记忆",
    "subtitle": "程序是有生命的精灵",
    "icon": "https://rainrem.top/images/favicon.ico",
    "description": "我还在原地等你，你却已经忘记曾来过这里",
    "home_page_url": "https://rainrem.top",
    "items": [
        {
            "id": "https://rainrem.top/%E4%BC%81%E4%B8%9A%E7%AE%A1%E7%90%86%E4%B8%8E%E8%90%A5%E9%94%80/%E7%A7%81%E5%9F%9F%E6%B5%81%E9%87%8F%E8%BF%90%E8%90%A5/",
            "url": "https://rainrem.top/%E4%BC%81%E4%B8%9A%E7%AE%A1%E7%90%86%E4%B8%8E%E8%90%A5%E9%94%80/%E7%A7%81%E5%9F%9F%E6%B5%81%E9%87%8F%E8%BF%90%E8%90%A5/",
            "title": "《私域流量运营》",
            "date_published": "2024-04-14T18:35:40.000Z",
            "content_html": "<h1 id=\"企业需要打造自己的私域流量池\"><a class=\"anchor\" href=\"#企业需要打造自己的私域流量池\">#</a> 企业需要打造自己的私域流量池</h1>\n<h2 id=\"什么是私域流量\"><a class=\"anchor\" href=\"#什么是私域流量\">#</a> 什么是私域流量？</h2>\n<blockquote>\n<p>私域流量是一种新兴的营销策略，主要是指企业通过微信、QQ 等社交平台，建立属于自己的私人流量池，实现对客户的精准管理和运营。在这个流量池中，企业可以直接与用户进行互动，更好地了解用户需求，提供个性化的服务。</p>\n</blockquote>\n<h2 id=\"私域流量的重要性是什么\"><a class=\"anchor\" href=\"#私域流量的重要性是什么\">#</a> 私域流量的重要性是什么？</h2>\n<blockquote>\n<p>随着市场竞争的加剧，获取和保留客户变得越来越困难。私域流量通过精准的用户画像，更好地满足用户需求，提高用户粘性，从而提高转化率，减少营销成本。此外，私域流量也可以帮助企业建立品牌忠诚度，提升用户的复购率。</p>\n</blockquote>\n<h2 id=\"如何有效的运营私域流量\"><a class=\"anchor\" href=\"#如何有效的运营私域流量\">#</a> 如何有效的运营私域流量？</h2>\n<blockquote>\n<p>要有效运营私域流量，首先需要建立并且维护好自己的私域流量池。这包括选择合适的社交平台，创建有吸引力的内容，建立用户互动机制等。其次，要通过数据分析，了解用户需求，提供个性化的服务。这可能涉及到用户行为分析，用户偏好调查等。最后，要定期进行营销活动，激励用户参与，提高用户活跃度。这可以通过优惠券，折扣，积分奖励等方式实现。</p>\n</blockquote>\n<h2 id=\"私域流量运营的常见策略有哪些\"><a class=\"anchor\" href=\"#私域流量运营的常见策略有哪些\">#</a> 私域流量运营的常见策略有哪些？</h2>\n<blockquote>\n<p>常见的私域流量运营策略包括：内容营销、社群营销、KOL 营销、会员营销等。内容营销主要是通过创建有价值的内容，吸引并留住用户；社群营销则是通过建立社区，促进用户互动，增强用户的归属感；KOL 营销是通过与影响者的合作，扩大品牌影响力；会员营销则是通过会员制度，提供会员专享的优惠和服务，提高用户粘性。这些策略的运用，都需要根据企业的实际情况和用户需求，进行灵活的调整和优化。</p>\n</blockquote>\n<h2 id=\"私域流量运营的挑战和解决方案是什么\"><a class=\"anchor\" href=\"#私域流量运营的挑战和解决方案是什么\">#</a> 私域流量运营的挑战和解决方案是什么？</h2>\n<blockquote>\n<p>对于私域流量运营来说，也存在一些挑战。例如，如何持续产生有吸引力的内容，如何保持用户的活跃度，如何提高转化率等。针对这些问题，企业可以尝试以下解决方案：一是定期进行用户调研，了解用户的最新需求，以生成相关的内容；二是建立用户激励机制，如积分系统，奖励活跃的用户；三是利用数据分析，优化营销策略，提高转化率。</p>\n</blockquote>\n<h2 id=\"私域流量的未来发展趋势是什么\"><a class=\"anchor\" href=\"#私域流量的未来发展趋势是什么\">#</a> 私域流量的未来发展趋势是什么？</h2>\n<blockquote>\n<p>随着社交平台的不断发展和用户行为的改变，私域流量的运营方式也会不断发展和变化。未来，我们预期私域流量将更加注重用户体验，更加精准的用户画像，以及更加个性化的营销策略。同时，随着大数据和人工智能的应用，私域流量的运营也将更加智能化和自动化。</p>\n</blockquote>\n",
            "tags": [
                "企业管理",
                "商业模式",
                "市场营销",
                "企业管理",
                "商业模式",
                "市场营销"
            ]
        },
        {
            "id": "https://rainrem.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/kali/kali/",
            "url": "https://rainrem.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/kali/kali/",
            "title": "kali命令",
            "date_published": "2024-03-06T16:51:00.000Z",
            "content_html": "<h1 id=\"kali基本设置\"><a class=\"anchor\" href=\"#kali基本设置\">#</a> Kali 基本设置</h1>\n<blockquote>\n<p>首先将 <code>kali</code> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Zpbmd1ZS9hcnRpY2xlL2RldGFpbHMvMTI3NTU5MzUzIzp+OnRleHQ9JUU0JUJBJThDJUUzJTgwJTgxJUU4JTk5JTlBJUU2JThCJTlGJUU2JTlDJUJBJUU3JTlBJTg0JUU1JUFFJTg5JUU4JUEzJTg1JTIwMSVFMyU4MCU4MSVFNiU4OSU5MyVFNSVCQyU4MHZtd2FyZSVFOSVBNiU5NiVFOSVBMSVCNSVFRiVCQyU4QyVFNSU4OCU5QiVFNSVCQiVCQSVFNiU5NiVCMCVFNyU5QSU4NCVFOCU5OSU5QSVFNiU4QiU5RiVFNiU5QyVCQSUyMDIlRTMlODAlODElRTklODAlODklRTYlOEIlQTklRTIlODAlOUQlRTglODclQUElRTUlQUUlOUElRTQlQjklODklRTIlODAlOUMlMjAlRTklODAlODklRTYlOEIlQTklMjAlRTIlODAlOUQlRTQlQjglOEIlRTQlQjglODAlRTYlQUQlQTUlRTIlODAlOUMlMjAzJUUzJTgwJTgxJUU5JTgwJTg5JUU2JThCJUE5JUUyJTgwJTlDJUU0JUI4JThCJUU0JUI4JTgwJUU2JUFEJUE1JUUyJTgwJTlELDQlRTMlODAlODElRTklODAlODklRTYlOEIlQTklMjAlRTIlODAlOUMlRTUlQUUlODklRTglQTMlODUlRTclQTglOEIlRTUlQkElOEYlRTUlODUlODklRTclOUIlOTglRTYlOTglQTAlRTUlODMlOEYlRTYlOTYlODclRTQlQkIlQjYlRTIlODAlOUQlMjAlRTklODAlOUElRTglQkYlODclRTYlQjUlOEYlRTglQTclODglRTclOUIlQUUlRTUlQkQlOTUlRTklODAlODklRTYlOEIlQTklRTUlODglOUElRTUlODglOUElRTQlQjglOEIlRTglQkQlQkQlRTclOUElODQlRTklOTUlOUMlRTUlODMlOEYlRTYlOTYlODclRTQlQkIlQjYlRUYlQkMlOEMlRTclODQlQjYlRTUlOTAlOEUlRTIlODAlOUQlRTQlQjglOEIlRTQlQjglODAlRTYlQUQlQTUlRTIlODAlOUMlMjA1JUUzJTgwJTgxJUU5JTgwJTg5JUU2JThCJUE5JUUyJTgwJTlDTGludXglRTIlODAlOUQlRUYlQkMlOEMlRTclODklODglRTYlOUMlQUMlRTklOUElOEYlRTYlODQlOEYlRUYlQkMlOEMlRTclODQlQjYlRTUlOTAlOEUlRTclODIlQjklRTUlODclQkIlMjAlRTIlODAlOUMlRTQlQjglOEIlRTQlQjglODAlRTYlQUQlQTUlRTIlODAlOUQlMjA2JUUzJTgwJTgxJUU3JUJCJTk5JUU4JTk5JTlBJUU2JThCJTlGJUU2JTlDJUJBJUU4JUI1JUI3JUU0JUI4JUFBJUU1JTkwJThEJUU1JUFEJTk3JUVGJUJDJTg4JUU1JUE2JTgya2FsaTIwMjMlRUYlQkMlODklRUYlQkMlOEMlRTclODIlQjklRTUlODclQkIlRTIlODAlOUMlRTYlQjUlOEYlRTglQTclODglRTIlODAlOUQlRTklODAlODklRTYlOEIlQTklRTQlQjglODAlRTQlQjglQUElRTYlOTYlODclRTQlQkIlQjYlRTUlQTQlQjklRTYlOUQlQTUlRTUlQUUlODklRTglQTMlODVrYWxpJUVGJUJDJTg4JUU0JUJEJThEJUU3JUJEJUFFJUU0JUI4JUJBJUU4JTg3JUFBJUU1JUFFJTlBJUU0JUI5JTg5JUVGJUJDJThDJUU1JUIwJUJEJUU5JTg3JThGJUU0JUI4JThEJUU4JUE2JTgxJUU1JUFFJTg5JUU4JUEzJTg1JUU1JTg4JUIwYyVFNyU5QiU5OCVFRiVCQyU4OSVFRiVCQyU4QyVFNyU4MiVCOSVFNSU4NyVCQiVFMiU4MCU5RCVFNCVCOCU4QiVFNCVCOCU4MCVFNiVBRCVBNSVFMiU4MCU5Qw==\"> 安装</span>完成后的基础操作如下：</p>\n</blockquote>\n<h2 id=\"更换源\"><a class=\"anchor\" href=\"#更换源\">#</a> 更换源</h2>\n<ol>\n<li><code>sudo su root</code> ：使用管理员权限并输入密码。</li>\n<li><code>vim /ect/apt/sources.list</code> ：更换源， <code>i</code>  代表插入，使用键盘 <code>exit</code>  退出然后输入 <code>:wq</code>  关闭编辑器。<details class=\"danger\"><summary>Kali源</summary><div>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>kali官方源</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># kali 官方源 </span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root] $\"></td><td><pre>deb http://http.kali.org/ moto main non-free contrib</pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"[root] $\"></td><td><pre>deb-src http://http.kali.org/ moto main non-free contrib</pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"[root] $\"></td><td><pre>deb http://security.kali.org/ moto/updates main contrib non-free</pre></td></tr><tr><td data-num=\"5\"></td><td data-command=\"[root] $\"></td><td><pre>deb-src http://security.kali.org/ moto/updates main contrib non-free</pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>阿里云镜像源</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># 阿里云镜像源</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root] $\"></td><td><pre>deb http://mirrors.aliyun.com/kali kali-rolling main non-free contrib</pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"[root] $\"></td><td><pre>deb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib</pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>中科大kali源</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># 中科大 kali 源 </span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root] $\"></td><td><pre>deb http://mirrors.ustc.edu.cn/kali kali main non-free contrib</pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"[root] $\"></td><td><pre>deb-src http://mirrors.ustc.edu.cn/kali kali main non-free contrib</pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"[root] $\"></td><td><pre>deb http://mirrors.ustc.edu.cn/kali-security kali/updates main contrib non-free</pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>阿里云kali源</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># 阿里云 kali 源</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root] $\"></td><td><pre>deb http://mirrors.aliyun.com/kali kali main non-free contrib</pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"[root] $\"></td><td><pre>deb-src http://mirrors.aliyun.com/kali kali main non-free contrib</pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"[root] $\"></td><td><pre>deb http://mirrors.aliyun.com/kali-security kali/updates main contrib non-free</pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>清华大学</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># 清华大学</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root] $\"></td><td><pre>deb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free</pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"[root] $\"></td><td><pre>deb-src https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free</pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>浙江大学</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># 浙江大学</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root] $\"></td><td><pre>deb http://mirrors.zju.edu.cn/kali kali-rolling main contrib non-free</pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"[root] $\"></td><td><pre>deb-src http://mirrors.zju.edu.cn/kali kali-rolling main contrib non-free</pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>东软大学</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># 东软大学</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root] $\"></td><td><pre>deb http://mirrors.neusoft.edu.cn/kali kali-rolling/main non-free contrib</pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"[root] $\"></td><td><pre>deb-src http://mirrors.neusoft.edu.cn/kali kali-rolling/main non-free contrib</pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>中科大</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># 中科大</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root] $\"></td><td><pre>deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"[root] $\"></td><td><pre>deb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</pre></td></tr></table></figure></div></details>\n</li>\n<li><code>apt-get update</code> ：更新源。</li>\n</ol>\n<h2 id=\"设置中文\"><a class=\"anchor\" href=\"#设置中文\">#</a> 设置中文</h2>\n<ol>\n<li><code>apt install ttf-wqy-zenhei</code> ：安装中文字体</li>\n<li><code>dpkg-reconfigure locales</code> ：修改为中文语言，使用空格选择 <code>*</code>  代表勾选，找到 <code>zh_CN.UTF-8</code>  进行勾选其它的一律取消，按 <code>enter</code>  后再选择 <code>zh_CN.UTF-8</code>  进行回车，并重启即可，重启指令为 <code>roboot</code> ，重启后保留旧的名称。</li>\n<li><code>reboot</code> ：重启。</li>\n</ol>\n<h2 id=\"开启ssh\"><a class=\"anchor\" href=\"#开启ssh\">#</a> 开启 SSH</h2>\n<ol>\n<li><code>ifconfig</code> ：查看 <code>ip</code>  地址。</li>\n<li><code>netstat -all</code> ：查看所有正在运行的端口。</li>\n<li><code>vim /etc/ssh/sshd_config</code> ：修改配置，把 <code>PermitRootLogin prohibit-password</code> 、 <code>PubkeyAuthentication yes</code> 、 <code>PasswordAuthentication yes</code>  前面的 <code>#</code> 去掉并保存，使用键盘 <code>exit</code>  退出并输入 <code>:wq</code>  关闭编辑器。</li>\n<li><code>service ssh start</code> ：启动 <code>SSH</code>  服务</li>\n<li><code>service ssh status</code> ：查看启动状态。</li>\n<li><code>update-rc.d ssh enable</code> ：开启自启动 <code>SSH</code>  服务。</li>\n<li><code>sysmtectl restart ssh</code> ：重启 <code>SSH</code>  服务。</li>\n</ol>\n<h2 id=\"安装中文输入法\"><a class=\"anchor\" href=\"#安装中文输入法\">#</a> 安装中文输入法</h2>\n<ol>\n<li><code>apt install fcitx</code> : 小企鹅输入法。</li>\n<li><code>apt-get install fcitx-googlepinyin</code> : 安装谷歌中文输入法。</li>\n</ol>\n",
            "tags": [
                "计算机科学",
                "网络安全",
                "渗透测试",
                "网络安全",
                "渗透测试"
            ]
        },
        {
            "id": "https://rainrem.top/%E4%BC%81%E4%B8%9A%E7%AE%A1%E7%90%86%E4%B8%8E%E8%90%A5%E9%94%80/%E5%85%A8%E6%B0%91%E8%90%A5%E9%94%80/",
            "url": "https://rainrem.top/%E4%BC%81%E4%B8%9A%E7%AE%A1%E7%90%86%E4%B8%8E%E8%90%A5%E9%94%80/%E5%85%A8%E6%B0%91%E8%90%A5%E9%94%80/",
            "title": "《全民营销》",
            "date_published": "2024-03-02T12:42:00.000Z",
            "content_html": "<blockquote>\n<p>智能互联网时代企业营销的进化与突破，以坚持人格化营销为基本原则，以坚持企业超级大 IP 矩阵网为基本策略。</p>\n</blockquote>\n<h1 id=\"序章\"><a class=\"anchor\" href=\"#序章\">#</a> 序章</h1>\n<blockquote>\n<p>未来提前到来，疫情给互联网带来的十大变革如下：</p>\n</blockquote>\n<ol>\n<li>5G 技术的大规模商用加速推进。</li>\n<li>人工智能、区块链、云计算、大数据、边缘计算、物联网数字技术 (简称： <code>ABCDEI</code>  数字技术) 进入大规模应用阶段。</li>\n<li>“数字鸿沟” 有望加速填平。</li>\n<li>网络视频步入发展的黄金时期。</li>\n<li>电子商务将迎来整体升级换代。</li>\n<li>远程协同办公软件迎来新机遇。</li>\n<li>医疗健康网络应用发展红火。</li>\n<li>网络媒体格局变革将进一步深化。</li>\n<li>互联网将进一步推动政府工作。</li>\n<li>数字技术将创新社会治理方式。</li>\n</ol>\n<h1 id=\"竞争战略催生全民营销\"><a class=\"anchor\" href=\"#竞争战略催生全民营销\">#</a> 竞争战略催生全民营销</h1>\n<ol>\n<li>优胜劣汰，适者生存。</li>\n<li>竞争战略是全球所有经济体的生产法则。</li>\n<li>智能互联网新时代的九大竞争态势。\n<ol>\n<li>人工智能 <code>PK</code>  人类技能。</li>\n<li>线上平台 <code>PK</code>  线下平台。</li>\n<li>主动优选 <code>PK</code>  被动选择。</li>\n<li>深度内容 <code>PK</code>  广而告知。</li>\n<li>全名网红 <code>PK</code>  大牌明星。</li>\n<li>万物皆媒 <code>PK</code>  传统媒体。</li>\n<li>娱乐购物 <code>PK</code>  计划购买。</li>\n<li>知民品牌 <code>PK</code>  知名品牌。</li>\n<li>全民营销 <code>PK</code>  全员营销。</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"企业应战新思维的人格化营销\"><a class=\"anchor\" href=\"#企业应战新思维的人格化营销\">#</a> 企业应战新思维的人格化营销</h1>\n<ul>\n<li>重构以后的新人货场模式有三个特点：\n<ul>\n<li>一是以我 (人格) 为中心展开。</li>\n<li>二是关注初心原点 (开展人格化营销)。</li>\n<li>三是三大要素的对应关系发生改变，也就是谁喜欢我 (顾客)，我的价值是什么 (货)，我适合在哪里销售 (场)。</li>\n<li><img data-src=\"https://s11.ax1x.com/2024/03/02/pFB9n4e.png\" alt=\"pFB9n4e.png\" /></li>\n</ul>\n</li>\n<li>人性的根本需求形成了 “人格化营销” 的基础。</li>\n<li>人人要有发言权、人人要有参与感、人人追求存在感、人人追求优越感。</li>\n<li>这是人的本性，这是全民营销以智能互联网营销战略为中心。</li>\n<li>以坚持人格化营销为基本原则。</li>\n<li>人格化营销的核心是品牌人格化，人格化营销的标签是 IP。</li>\n<li>什么是人格化营销？\n<ul>\n<li>直白讲述为：赋予产品人的性格和情感特征。</li>\n<li>形成品牌特有的价值：态度、格调、从而进行沟通。</li>\n</ul>\n</li>\n<li>品牌人格化就是赋予品牌人的情感，与人共鸣与人拉近关系，进而更有效地销售。</li>\n<li><img data-src=\"https://s11.ax1x.com/2024/03/02/pFBC6sI.jpg\" alt=\"pFBC6sI.jpg\" /></li>\n<li>创始人是企业 IP 重要的个性基础。</li>\n<li>全民营销的四大原则如下：\n<ol>\n<li>以智能互联网营销战略为中心。</li>\n<li>坚持人格营销。</li>\n<li>坚持以企业超级大 IP 矩阵网为基本策略。</li>\n<li>团结和影响企业内外网民达成新时期的营销战略。</li>\n</ol>\n</li>\n</ul>\n<h1 id=\"矩阵网的高度搭建\"><a class=\"anchor\" href=\"#矩阵网的高度搭建\">#</a> 矩阵网的高度搭建</h1>\n<ol>\n<li>纵向矩阵。</li>\n<li>横向矩阵。</li>\n<li>横纵联合矩阵。</li>\n</ol>\n<h1 id=\"全民营销平台算法x视频内容x社交裂变\"><a class=\"anchor\" href=\"#全民营销平台算法x视频内容x社交裂变\">#</a> 全民营销 = 平台算法 x 视频内容 x 社交裂变</h1>\n<ul>\n<li>找到自己的绝对优势，才会被关注。</li>\n<li>可以有很多方向，关键在于我们要主动创造和发现。</li>\n<li>一个好名字能带来 <code>500</code>  倍的流量增长。</li>\n<li>从本质上来讲营销不是卖东西，而是卖客户心中的认同与感动。</li>\n<li>让更多人相信才是全民营销的精髓。</li>\n<li>标志 <code>=</code>  图腾。</li>\n<li>人格定位的价值感、独特感才会实际落地。</li>\n<li>六句箴言：\n<ol>\n<li>打击对手。</li>\n<li>区隔同类。</li>\n<li>引发关注。</li>\n<li>增进感情。</li>\n<li>关联产品。</li>\n<li>专家背书。</li>\n</ol>\n</li>\n<li>好故事的脚本 <code>=</code>  秒引发关注 <code>x</code>  秒反转 <code>x</code>  秒涨粉。</li>\n</ul>\n<h1 id=\"为什么要做私域流量\"><a class=\"anchor\" href=\"#为什么要做私域流量\">#</a> 为什么要做私域流量</h1>\n<ol>\n<li>能变现。</li>\n<li>抗风险。</li>\n</ol>\n",
            "tags": [
                "企业管理",
                "商业模式",
                "市场营销",
                "企业管理",
                "商业模式",
                "市场营销"
            ]
        },
        {
            "id": "https://rainrem.top/%E4%BC%81%E4%B8%9A%E7%AE%A1%E7%90%86%E4%B8%8E%E8%90%A5%E9%94%80/%E7%90%86%E8%A7%A3%E5%92%8C%E8%BF%90%E8%90%A5%E5%95%86%E4%B8%9A%E6%A8%A1%E5%BC%8F/",
            "url": "https://rainrem.top/%E4%BC%81%E4%B8%9A%E7%AE%A1%E7%90%86%E4%B8%8E%E8%90%A5%E9%94%80/%E7%90%86%E8%A7%A3%E5%92%8C%E8%BF%90%E8%90%A5%E5%95%86%E4%B8%9A%E6%A8%A1%E5%BC%8F/",
            "title": "《理解和运营商业模式》",
            "date_published": "2024-02-25T12:16:00.000Z",
            "content_html": "<h1 id=\"商业模式\"><a class=\"anchor\" href=\"#商业模式\">#</a> 商业模式</h1>\n<ol>\n<li>客户需求。</li>\n<li>客户导向。</li>\n</ol>\n<blockquote>\n<p>从源头上强调把握客户需求至关重要。</p>\n</blockquote>\n<h1 id=\"什么是商业模式\"><a class=\"anchor\" href=\"#什么是商业模式\">#</a> 什么是商业模式？</h1>\n<ol>\n<li>在资源使用方面，强调利用一切可以利用的资源，而不见得只是利用所属所控的资源。</li>\n<li>在商业目的实现上，强调实现独特的功能而不是盈利。</li>\n<li>在盈利方式上并不排斥直接盈利，但更多的是间接盈利。</li>\n</ol>\n<h1 id=\"商业模式的特点\"><a class=\"anchor\" href=\"#商业模式的特点\">#</a> 商业模式的特点</h1>\n<ol>\n<li>利用一切可以利用的资源。\n<ul>\n<li>只有利用好一切可以利用的资源才可以让盈利最大化。</li>\n</ul>\n</li>\n<li>重要的是实现功能。\n<ul>\n<li>商业模式最核心的就是你为客户实现了什么样的独特价值。</li>\n</ul>\n</li>\n<li>盈利方式更多的是间接化和多元化。\n<ul>\n<li>在商业模式经营思维下直接盈利，但更多的是间接盈利和多元化盈利。</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"商业模式的定义\"><a class=\"anchor\" href=\"#商业模式的定义\">#</a> 商业模式的定义</h1>\n<ol>\n<li>在资源使用上强调利用一切可以利用的资源，而不是强调利用自己所控的资源。</li>\n<li>更好地为使用者实现某种功能或某种服务。</li>\n<li>在商业目的实现上更多的是强调多元化盈利方式。</li>\n</ol>\n<h1 id=\"不同创新程度的商业模式\"><a class=\"anchor\" href=\"#不同创新程度的商业模式\">#</a> 不同创新程度的商业模式</h1>\n<ul>\n<li>第一种状态是企业只对内部的生产要素进行调整。</li>\n<li>第二种状态是企业结合外部资源客户情况一起创新，更加深入地解决客户需求。</li>\n<li>第三种状态是创新程度最为强烈就是解决一个市场空白点或创造了一个更为新颖的品类。</li>\n<li>第四种状态是前瞻性地看市场发现市场空白点需求，根据需求创造一个符合需求的产品或服务。</li>\n</ul>\n<h1 id=\"客户消费的四个阶段\"><a class=\"anchor\" href=\"#客户消费的四个阶段\">#</a> 客户消费的四个阶段</h1>\n<ol>\n<li>定位阶段：明确产品定位和优势。</li>\n<li>传播阶段：通过有效的渠道让客户知道我们的优势和定位。</li>\n<li>销售阶段：确定价格渠道和终端布局。</li>\n<li>售后阶段：对客户使用效果追踪。</li>\n</ol>\n<h1 id=\"c2b阶段\"><a class=\"anchor\" href=\"#c2b阶段\">#</a> C2B 阶段</h1>\n<blockquote>\n<p>从粗糙的创意雏形，到产生一个相对完美，并且有一定商业价值的产品是需要一个流程的。</p>\n</blockquote>\n<ul>\n<li>市场趋势 / 客户需求预测\n<ul>\n<li>第一步前瞻性地看市场，发现市场的空白点或者寻找客户需求，没有得到满足的地方。</li>\n<li>并不是每一个空白点都值得去做创新，因为创新也存在风险和成本。</li>\n<li>空白市场容量是否足够大，这也是需要考虑的重要因素。</li>\n</ul>\n</li>\n<li>倾听真实想法\n<ul>\n<li>如果想快速去抢占市场，规避目前行业中的强大对手，精准地了解真实情况，了解客户的真实需求是什么。</li>\n<li>所以想在这些市场领先者做得好的领域，来挑战他们那无疑是找死。</li>\n<li>领先者也存在薄弱的地方，这个就是后者可以进行大力创新的地方。</li>\n<li>商业进攻总是从竞争对手薄弱处下手，也是从用户没有得到满足的地方开始的。</li>\n<li>一旦到了成品阶段就要强化自己的特色大力宣传。</li>\n<li>收集有效意见。</li>\n<li>定位思路。</li>\n<li>社会化营销。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"覆盖和渗透\"><a class=\"anchor\" href=\"#覆盖和渗透\">#</a> 覆盖和渗透</h1>\n<ul>\n<li>最为严重的情况就是企业原来的价值被覆盖。</li>\n<li>企业的核心利润受到了攻击，企业没有了存在的基础。</li>\n<li>信息不对称走向信息对称是完全不可逆的，所以在这一点上是连转型的机会都没有。</li>\n<li>新生代企业以颠覆的方法，去攻击旧生代去企业核心利润的时候，它能否成功的关键在于，能不能给原来的用户带来相当好的体验和效果。</li>\n</ul>\n<h1 id=\"丰富多彩的盈利方法\"><a class=\"anchor\" href=\"#丰富多彩的盈利方法\">#</a> 丰富多彩的盈利方法</h1>\n<ul>\n<li>需要强调的是商业模式思维，首先强调的并不是盈利而是解决用户需求的思想。</li>\n<li>重点是你要清晰地知道要解决什么问题，用什么方式合适地去解决这个问题。</li>\n</ul>\n<blockquote>\n<p>往前拓展一步思路会更加开阔，在互联网时代需要新技术、新思维。</p>\n</blockquote>\n",
            "tags": [
                "企业管理",
                "商业模式",
                "市场营销",
                "企业管理",
                "商业模式",
                "市场营销"
            ]
        },
        {
            "id": "https://rainrem.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/java/spring/SpringBoot%E6%97%A5%E5%BF%97%E6%89%93%E5%8D%B0/",
            "url": "https://rainrem.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/java/spring/SpringBoot%E6%97%A5%E5%BF%97%E6%89%93%E5%8D%B0/",
            "title": "SpringBoot日志打印",
            "date_published": "2024-02-09T21:41:00.000Z",
            "content_html": "",
            "tags": [
                "计算机科学",
                "Java",
                "Java深入理解",
                "计算机科学",
                "Java深入理解",
                "Spring",
                "SpringBoot",
                "注解"
            ]
        },
        {
            "id": "https://rainrem.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/java/spring/SpringBoot&%E5%85%B6%E5%AE%83%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/",
            "url": "https://rainrem.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/java/spring/SpringBoot&%E5%85%B6%E5%AE%83%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/",
            "title": "SpringBoot&其它常用注解",
            "date_published": "2024-01-31T17:42:00.000Z",
            "content_html": "<blockquote>\n<p>SpringBoot 提供了很多个注解，可以帮助我们快速构建应用程序，以下是 SpringBoot 和其它的一些常用注解。</p>\n</blockquote>\n<h1 id=\"注解详情表\"><a class=\"anchor\" href=\"#注解详情表\">#</a> 注解详情表</h1>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">注解名称</th>\n<th style=\"text-align:center\">参数类型</th>\n<th style=\"text-align:center\">注解简介</th>\n<th style=\"text-align:center\">框架</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><a href=\"#springbootapplication\"> <code>@SpringBootApplication</code> </a></td>\n<td style=\"text-align:center\">可空</td>\n<td style=\"text-align:center\">用于标识 <code>SpringBoot</code>  应用程序的入口类</td>\n<td style=\"text-align:center\"><code>SpringBoot</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#restcontroller\"> <code>@RestController</code> </a></td>\n<td style=\"text-align:center\">可空</td>\n<td style=\"text-align:center\">用于自动将返回值转换为 <code>JSON</code>  格式</td>\n<td style=\"text-align:center\"><code>SpringWeb</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#requestmapping\"> <code>@RequestMapping</code> </a></td>\n<td style=\"text-align:center\"><code>String/String[]</code></td>\n<td style=\"text-align:center\">用于映射 <code>URL</code>  请求</td>\n<td style=\"text-align:center\"><code>SpringWeb</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#getmapping\"> <code>@GetMapping</code> </a></td>\n<td style=\"text-align:center\"><code>String/String[]</code></td>\n<td style=\"text-align:center\">用于映射 <code>HTTP</code>  的 <code>GET</code>  请求</td>\n<td style=\"text-align:center\"><code>SpringWeb</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#postmapping\"> <code>@PostMapping</code> </a></td>\n<td style=\"text-align:center\"><code>String/String[]</code></td>\n<td style=\"text-align:center\">用于映射 <code>HTTP</code>  的 <code>POST</code>  请求</td>\n<td style=\"text-align:center\"><code>SpringWeb</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#deletemapping\"> <code>@DeleteMapping</code> </a></td>\n<td style=\"text-align:center\"><code>String/String[]</code></td>\n<td style=\"text-align:center\">用于映射 <code>HTTP</code>  的 <code>DELETE</code>  请求</td>\n<td style=\"text-align:center\"><code>SpringWeb</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#requestparam\"> <code>@RequestParam</code> </a></td>\n<td style=\"text-align:center\"><code>String</code></td>\n<td style=\"text-align:center\">用于获取请求参数的值</td>\n<td style=\"text-align:center\"><code>SpringWeb</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#pathvariable\"> <code>@PathVariable</code> </a></td>\n<td style=\"text-align:center\">可空</td>\n<td style=\"text-align:center\">用于获取 <code>URL</code>  中的参数值</td>\n<td style=\"text-align:center\"><code>SpringWeb</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#requestbody\"> <code>@RequestBody</code> </a></td>\n<td style=\"text-align:center\">可空</td>\n<td style=\"text-align:center\">用于将 <code>HTTP</code>  请求的主体转换为方法的参数</td>\n<td style=\"text-align:center\"><code>SpringWeb</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#responsebody\"> <code>@ResponseBody</code> </a></td>\n<td style=\"text-align:center\">无</td>\n<td style=\"text-align:center\">用于将方法的返回值转换为 <code>HTTP</code>  响应的主体</td>\n<td style=\"text-align:center\"><code>SpringWeb</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#autowired\"> <code>@Autowired</code> </a></td>\n<td style=\"text-align:center\">无</td>\n<td style=\"text-align:center\">用于自动装配 <code>Spring</code>  容器中的 <code>Bean</code>  对象</td>\n<td style=\"text-align:center\"><code>Spring</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#component\"> <code>@Component</code> </a></td>\n<td style=\"text-align:center\">可空</td>\n<td style=\"text-align:center\">用于标识一个类是 <code>Spring</code>  容器中的组件</td>\n<td style=\"text-align:center\"><code>Spring</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#service\"> <code>@Service</code> </a></td>\n<td style=\"text-align:center\">可空</td>\n<td style=\"text-align:center\">用于标识一个类是 <code>Spring</code>  容器中的服务组件</td>\n<td style=\"text-align:center\"><code>Spring</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#repository\"> <code>@Repository</code> </a></td>\n<td style=\"text-align:center\">可空</td>\n<td style=\"text-align:center\">用于标识一个类是 <code>Spring</code>  容器中的数据访问组件</td>\n<td style=\"text-align:center\"><code>Spring</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#configuration\"> <code>@Configuration</code> </a></td>\n<td style=\"text-align:center\">可空</td>\n<td style=\"text-align:center\">用于标识一个类是 <code>Spring</code>  的配置类</td>\n<td style=\"text-align:center\"><code>Spring</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#value\"> <code>@Value</code> </a></td>\n<td style=\"text-align:center\"><code>String</code></td>\n<td style=\"text-align:center\">用于获取配置文件中的属性值</td>\n<td style=\"text-align:center\"><code>Spring</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#bean\"> <code>@Bean</code> </a></td>\n<td style=\"text-align:center\">可空</td>\n<td style=\"text-align:center\">用于将一个方法返回的对象注册到 <code>Spring</code>  容器中</td>\n<td style=\"text-align:center\"><code>Spring</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#import\"> <code>@Import</code> </a></td>\n<td style=\"text-align:center\"><code>Class&lt;?&gt;/Class&lt;?&gt;[]</code></td>\n<td style=\"text-align:center\">用于导入其他配置类或 <code>Bean</code></td>\n<td style=\"text-align:center\"><code>Spring</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#conditional\"> <code>@Conditional</code> </a></td>\n<td style=\"text-align:center\"><code>Class&lt;? extends Condition&gt;/Class&lt;? extends Condition&gt;[]</code></td>\n<td style=\"text-align:center\">用于根据条件判断是否创建 <code>Bean</code>  或执行配置</td>\n<td style=\"text-align:center\"><code>Spring</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#profile\"> <code>@Profile</code> </a></td>\n<td style=\"text-align:center\"><code>String/String[]</code></td>\n<td style=\"text-align:center\">用于指定配置的环境</td>\n<td style=\"text-align:center\"><code>Spring</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#propertysource\"> <code>@PropertySource</code> </a></td>\n<td style=\"text-align:center\"><code>String/String[]</code></td>\n<td style=\"text-align:center\">用于指定配置文件的位置</td>\n<td style=\"text-align:center\"><code>Spring</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#qualifier\"> <code>@Qualifier</code> </a></td>\n<td style=\"text-align:center\"><code>String</code></td>\n<td style=\"text-align:center\">用于指定注入的 <code>Bean</code>  的名称</td>\n<td style=\"text-align:center\"><code>Spring</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#exceptionhandler\"> <code>@ExceptionHandler</code> </a></td>\n<td style=\"text-align:center\"><code>Class&lt;? extends Throwable&gt;/Class&lt;? extends Throwable&gt;[]</code></td>\n<td style=\"text-align:center\">用于处理异常</td>\n<td style=\"text-align:center\"><code>SpringWeb</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#responsestatus\"> <code>@ResponseStatus</code> </a></td>\n<td style=\"text-align:center\"><code>HttpStatus</code></td>\n<td style=\"text-align:center\">用于指定异常的 <code>HTTP</code>  响应状态码</td>\n<td style=\"text-align:center\"><code>SpringWeb</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#controlleradvice\"> <code>@ControllerAdvice</code> </a></td>\n<td style=\"text-align:center\">可空</td>\n<td style=\"text-align:center\">用于全局处理异常</td>\n<td style=\"text-align:center\"><code>SpringWeb</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#crossorigin\"> <code>@CrossOrigin</code> </a></td>\n<td style=\"text-align:center\"><code>String/String[]</code></td>\n<td style=\"text-align:center\">用于解决跨域问题</td>\n<td style=\"text-align:center\"><code>SpringWeb</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#async\"> <code>@Async</code> </a></td>\n<td style=\"text-align:center\">可空</td>\n<td style=\"text-align:center\">用于将方法标记为异步执行</td>\n<td style=\"text-align:center\"><code>Spring</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#cacheable\"> <code>@Cacheable</code> </a></td>\n<td style=\"text-align:center\"><code>String/String[]</code></td>\n<td style=\"text-align:center\">用于缓存方法的返回值</td>\n<td style=\"text-align:center\"><code>Spring</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#cacheevict\"> <code>@CacheEvict</code> </a></td>\n<td style=\"text-align:center\"><code>String/String[]</code></td>\n<td style=\"text-align:center\">用于清除缓存</td>\n<td style=\"text-align:center\"><code>Spring</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#cacheput\"> <code>@CachePut</code> </a></td>\n<td style=\"text-align:center\"><code>String/String[]</code></td>\n<td style=\"text-align:center\">用于更新缓存中的数据</td>\n<td style=\"text-align:center\"><code>Spring</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#transactional\"> <code>@Transactional</code> </a></td>\n<td style=\"text-align:center\">可空</td>\n<td style=\"text-align:center\">用于标识一个方法或类需要使用事务进行操作</td>\n<td style=\"text-align:center\"><code>Spring</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#enabletransactionmanagement\"> <code>@EnableTransactionManagement</code> </a></td>\n<td style=\"text-align:center\">可空</td>\n<td style=\"text-align:center\">此注解用于启用事物管理功能</td>\n<td style=\"text-align:center\"><code>Spring</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#enableaspectjautoproxy\"> <code>@EnableAspectJAutoProxy</code> </a></td>\n<td style=\"text-align:center\">可空</td>\n<td style=\"text-align:center\">用于启用 <code>AOP</code>  功能</td>\n<td style=\"text-align:center\"><code>Spring</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#aspect\"> <code>@Aspect</code> </a></td>\n<td style=\"text-align:center\">可空</td>\n<td style=\"text-align:center\">用于定义切面</td>\n<td style=\"text-align:center\"><code>SpringAop</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#pointcut\"> <code>@Pointcut</code> </a></td>\n<td style=\"text-align:center\"><code>String</code></td>\n<td style=\"text-align:center\">用于定义切点</td>\n<td style=\"text-align:center\"><code>SpringAop</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#before\"> <code>@Before</code> </a></td>\n<td style=\"text-align:center\"><code>String</code></td>\n<td style=\"text-align:center\">用于在方法执行前执行通知</td>\n<td style=\"text-align:center\"><code>SpringAop</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#after\"> <code>@After</code> </a></td>\n<td style=\"text-align:center\"><code>String</code></td>\n<td style=\"text-align:center\">用于在方法执行后执行通知</td>\n<td style=\"text-align:center\"><code>SpringAop</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#around\"> <code>@Around</code> </a></td>\n<td style=\"text-align:center\"><code>String</code></td>\n<td style=\"text-align:center\">用于在方法执行前后执行通知</td>\n<td style=\"text-align:center\"><code>SpringAop</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#afterreturning\"> <code>@AfterReturning</code> </a></td>\n<td style=\"text-align:center\"><code>String</code></td>\n<td style=\"text-align:center\">用于在方法返回结果后执行通知</td>\n<td style=\"text-align:center\"><code>SpringAop</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#afterthrowing\"> <code>@AfterThrowing</code> </a></td>\n<td style=\"text-align:center\"><code>String</code></td>\n<td style=\"text-align:center\">用于在方法抛出异常后执行通知</td>\n<td style=\"text-align:center\"><code>SpringAop</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#order\"> <code>@Order</code> </a></td>\n<td style=\"text-align:center\"><code>int</code></td>\n<td style=\"text-align:center\">用于指定切面的执行顺序</td>\n<td style=\"text-align:center\"><code>Spring</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#slf4j\"> <code>@Slf4j</code> </a></td>\n<td style=\"text-align:center\">可空</td>\n<td style=\"text-align:center\">用于简化日志记录</td>\n<td style=\"text-align:center\"><code>Lombok</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#data\"> <code>@Data</code> </a></td>\n<td style=\"text-align:center\">可空</td>\n<td style=\"text-align:center\">用于自动生成 <code>JavaBean</code>  的 <code>get</code> 、 <code>set</code> 、 <code>toString</code> 、 <code>hashCode</code>  和 <code>equals</code>  方法</td>\n<td style=\"text-align:center\"><code>Lombok</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#noargsconstructor\"> <code>@NoArgsConstructor</code> </a></td>\n<td style=\"text-align:center\">可空</td>\n<td style=\"text-align:center\">用于生成无参构造函数</td>\n<td style=\"text-align:center\"><code>Lombok</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#allargsconstructor\"> <code>@AllArgsConstructor</code> </a></td>\n<td style=\"text-align:center\">可空</td>\n<td style=\"text-align:center\">用于生成全参构造函数</td>\n<td style=\"text-align:center\"><code>Lombok</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#builder\"> <code>@Builder</code> </a></td>\n<td style=\"text-align:center\">可空</td>\n<td style=\"text-align:center\">用于生成 <code>Builder</code>  模式的构造函数</td>\n<td style=\"text-align:center\"><code>Lombok</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#equalsandhashcode\"> <code>@EqualsAndHashCode</code> </a></td>\n<td style=\"text-align:center\">可空</td>\n<td style=\"text-align:center\">用于生成 <code>hashCode</code>  和 <code>equals</code>  方法</td>\n<td style=\"text-align:center\"><code>Lombok</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#tostring\"> <code>@ToString</code> </a></td>\n<td style=\"text-align:center\">可空</td>\n<td style=\"text-align:center\">用于生成 <code>toString</code>  方法</td>\n<td style=\"text-align:center\"><code>Lombok</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#getter\"> <code>@Getter</code> </a></td>\n<td style=\"text-align:center\">可空</td>\n<td style=\"text-align:center\">用于生成 <code>get</code>  方法</td>\n<td style=\"text-align:center\"><code>Lombok</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#setter\"> <code>@Setter</code> </a></td>\n<td style=\"text-align:center\">可空</td>\n<td style=\"text-align:center\">用于生成 <code>set</code>  方法</td>\n<td style=\"text-align:center\"><code>Lombok</code></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"springbootapplication\"><a class=\"anchor\" href=\"#springbootapplication\">#</a> @SpringBootApplication</h1>\n<ul>\n<li>这是一个组合注解，其中包括了 <code>@Configuration</code> 、 <code>@EnableAutoConfiguration</code> 、 <code>@ComponentScan</code>  这三个注解，用于标识在 <code>SpringBoot</code>  应用程序的入口类。</li>\n<li><code>@Configuration</code> ：表示这个类是一个配置类，它定义了一个或多个 <code>@Bean</code>  方法，用于创建和配置 <code>Spring</code>  应用程序上线文中的 <code>Bean</code> 。</li>\n<li><code>@EnableAutoConfiguration</code> ：表示启用 <code>SpringBoot</code>  的自动配置机制，它会自动添加所需要的依赖和配置，以使应用程序能够运行。</li>\n<li><code>@ComponentScan</code> ：表示 <code>SpringBoot</code>  扫描当前包及其子包中的所有 <code>@Component</code> 、 <code>@Service</code> 、 <code>@Repository</code>  和 <code>@Controller</code>  的注解类并将它们注册为 <code>Spring</code>  所需要的 <code>Bean</code> 。</li>\n<li><code>SpringBootApplication</code> ：这个注解通常用于在 <code>SpringBoot</code>  的应用程序入口类上，用于启动 <code>SpringBoot</code>  应用程序，它是简化 <code>Spring</code>  应用程序的配置和启动过程。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Springboot3DemoApplication.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>springboot3demo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootApplication</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SpringBoot3DemoApplication</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringBoot3DemoApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"restcontroller\"><a class=\"anchor\" href=\"#restcontroller\">#</a> @RestController</h1>\n<ul>\n<li><code>@RestController</code>  与 <code>@Controller</code>  注解类似，但是 <code>@RestController</code>  会自动将返回值转换为 <code>JSON</code>  格式。</li>\n<li><code>@RestController</code>  是 <code>SpringFramework 4.0</code>  版本引入的一个注解，它是 <code>@Controller</code>  和 <code>@ResponseBody</code>  注解的组合。</li>\n<li>它用于标注一个类，表示这个类是一个 <code>RESTful</code>  风格的控制器，可以处理 <code>HTTP</code>  请求并返回 <code>JSON/XML</code>  格式的响应。</li>\n<li><code>@RestController</code>  用于代替原来的 <code>@Controller</code>  注解，它默认情况下会将控制器方法的返回值转换为 <code>JSON</code>  格式，并以 <code>HTTP</code>  响应的方式返回给客户端。</li>\n<li>如果需要返回 <code>XML</code>  格式的响应，可以使用其它注解如： <code>@Produces</code>  和 <code>@Consumes</code>  注解。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>HelloController.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>springboot3demo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GetMapping</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RestController</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hello\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hello, World!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"requestmapping\"><a class=\"anchor\" href=\"#requestmapping\">#</a> @RequestMapping</h1>\n<blockquote>\n<p>此注解用于映射请求 <code>URL</code>  和处理方法，它是 <code>SpringMVC</code>  框架中的一个核心注解，它用于映射 <code>HTTP</code>  请求和控制器方法之间的关系，它可以用于类级别和方法级别，用于指定请求 <code>URL</code>  和 <code>HTTP</code>  方法如： <code>GET</code> 、 <code>POST</code> 、 <code>PUT</code> 、 <code>DELETE</code>  等。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserController.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>springboot3demo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/users\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getUsers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 获取用户列表</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/users\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">createUser</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 创建新用户</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/users/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">getUserById</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 根据 ID 获取用户信息</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token annotation punctuation\">@PutMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/users/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">updateUser</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// 更新用户信息</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token annotation punctuation\">@DeleteMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/users/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">deleteUser</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">// 根据 ID 删除用户</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"getmapping\"><a class=\"anchor\" href=\"#getmapping\">#</a> @GetMapping</h1>\n<blockquote>\n<p>此注解用于映射 <code>HTTP</code>  的 <code>GET</code>  请求。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserController.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>springboot3demo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/users\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getUsers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 获取用户列表</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/users/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">getUserById</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 根据 ID 获取用户信息</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"postmapping\"><a class=\"anchor\" href=\"#postmapping\">#</a> @PostMapping</h1>\n<blockquote>\n<p>此注解用于映射 <code>HTTP</code>  的 <code>POST</code>  请求。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserController.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>springboot3demo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/users\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">createUser</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 创建新用户</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"putmapping\"><a class=\"anchor\" href=\"#putmapping\">#</a> @PutMapping</h1>\n<blockquote>\n<p>此注解用于映射 <code>HTTP</code>  的 <code>PUT</code>  请求。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserController.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>springboot3demo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@PutMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/users/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">updateUser</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 更新用户信息</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"deletemapping\"><a class=\"anchor\" href=\"#deletemapping\">#</a> @DeleteMapping</h1>\n<blockquote>\n<p>此注解用于映射 <code>HTTP</code>  的 <code>DELETE</code>  请求。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserController.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>springboot3demo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@DeleteMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/users/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">deleteUser</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 根据 ID 删除用户</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"requestparam\"><a class=\"anchor\" href=\"#requestparam\">#</a> @RequestParam</h1>\n<blockquote>\n<p>此注解用于获取请求参数的值。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserController.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>springboot3demo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/users\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getUsers</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestParam</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"page\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">int</span> page<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@RequestParam</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"size\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 分页获取用户列表</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"pathvariable\"><a class=\"anchor\" href=\"#pathvariable\">#</a> @PathVariable</h1>\n<blockquote>\n<p>此注解用于获取 <code>URL</code>  中的参数值，它是 <code>SpringMVC</code>  框架中的一个注解，用于将 <code>HTTP</code>  请求路径中的变量绑定到控制器方法的参数上。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserController.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>springboot3demo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/users/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 根据 ID 获取用户信息</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"requestbody\"><a class=\"anchor\" href=\"#requestbody\">#</a> @RequestBody</h1>\n<blockquote>\n<p>此注解用于将 <code>HTTP</code>  请求的主体转换为方法的参数，它是 <code>SpringMVC</code>  框架中的一个注解，用于将 <code>HTTP</code>  请求体中的数据绑定到控制器方法的参数上。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserController.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>springboot3demo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/users\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">createUser</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 创建用户</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"responsebody\"><a class=\"anchor\" href=\"#responsebody\">#</a> @ResponseBody</h1>\n<blockquote>\n<p>此注解用于将方法的返回值转换为 <code>HTTP</code>  响应的主体， <code>@ResponseBody</code>  是 <code>Spring MVC</code>  框架中的一个注解，用于将控制器方法的返回值转换为 <code>HTTP</code>  响应体中的数据。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserController.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/users/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 从数据库或其他地方获取用户数据</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> userService<span class=\"token punctuation\">.</span><span class=\"token function\">getUserById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> user<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"autowired\"><a class=\"anchor\" href=\"#autowired\">#</a> @Autowired</h1>\n<blockquote>\n<p>此注解用于自动装配 <code>Spring</code>  容器中的 <code>Bean</code> 。</p>\n</blockquote>\n<blockquote>\n<p>如果不推荐使用 <code>@Autowired</code>  注解也可以使用 <code>jakarta</code>  的 <code>@Resource</code>  注解代替 <code>@Autowired</code>  进行资源的注入。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserServiceImpl.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">UserService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserRepository</span> userRepository<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 实现 UserService 接口中的方法</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"component\"><a class=\"anchor\" href=\"#component\">#</a> @Component</h1>\n<blockquote>\n<p>此注解用于标识一个类是 <code>Spring</code>  容器中的组件， <code>@Component</code>  是 <code>Spring</code>  框架中的一个通用注解，用于标注一个类作为 <code>Spring</code>  组件中的 <code>Bean</code> 。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserServiceImpl.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">UserService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 实现 UserService 接口中的方法</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"service\"><a class=\"anchor\" href=\"#service\">#</a> @Service</h1>\n<blockquote>\n<p>此注解用于标识一个类是 <code>Spring</code>  容器中的服务组件， <code>@Service</code>  是 <code>Spring</code>  框架中的一个注解，用于标注一个类作为服务类 ( <code>Service</code> )。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserServiceImpl.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">UserService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 实现 UserService 接口中的方法</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"repository\"><a class=\"anchor\" href=\"#repository\">#</a> @Repository</h1>\n<blockquote>\n<p>此注解用于标识一个类是 <code>Spring</code>  容器中的数据访问组件， <code>@Repository</code>  是 <code>Spring</code>  框架中的一个注解，用于标注一个类作为数据访问对象 ( <code>DAO</code> )。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserRepositoryImpl.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Repository</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserRepositoryImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">UserRepository</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 实现 UserRepository 接口中的方法</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"configuration\"><a class=\"anchor\" href=\"#configuration\">#</a> @Configuration</h1>\n<blockquote>\n<p>此注解用于标识一个类是 <code>Spring</code>  的配置类， <code>@Configuration</code>  是 <code>Spring</code>  框架中的一个注解，用于标注一个类作为配置类。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>AppConfig.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">UserService</span> <span class=\"token function\">userService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserServiceImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">UserRepository</span> <span class=\"token function\">userRepository</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserRepositoryImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"value\"><a class=\"anchor\" href=\"#value\">#</a> @Value</h1>\n<blockquote>\n<p>此注解用于获取配置文件中的属性值， <code>@Value</code>  是 <code>Spring</code>  框架中的一个注解，用于将配置文件中的属性值注入到 <code>Bean</code>  对象中。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>MyComponent.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 这个类使用 @Component 注解标注，表示这个类是一个 Spring Bean，可以被其他的 Spring Bean 自动装配。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 在属性级别上，@Value 注解指定了需要注入的属性值，这个属性值可以通过 $&#123;...&#125; 的方式引用配置文件中的属性值。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 在这个例子中，MyComponent 类中的 myProperty 属性使用 @Value 注解指定了需要注入的属性值，Spring 会自动将配置文件中名为 my.property 的属性值注入到这个属性中。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Value 注解用于注入配置文件中的属性值，使得开发者可以方便地从配置文件中获取属性值，并将其注入到 Bean 对象中。同时，使用 @Value 注解还可以方便地处理不同环境下的配置文件，如开发环境和生产环境的配置文件。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * Value 注解是 Spring 框架中比较常用的注解之一，可以让开发者更加专注于业务逻辑的实现，而不必关心属性值的获取和注入细节。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyComponent</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;my.property&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> myProperty<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 其他方法</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"bean\"><a class=\"anchor\" href=\"#bean\">#</a> @Bean</h1>\n<blockquote>\n<p>此注解用于将一个方法返回的对象注册到 <code>Spring</code>  容器中， <code>@Bean</code>  是 <code>Spring</code>  框架中的一个注解，用于将一个方法返回的对象注册为一个 <code>Spring Bean</code> 。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>AppConfig.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">UserService</span> <span class=\"token function\">userService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserServiceImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">UserRepository</span> <span class=\"token function\">userRepository</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserRepositoryImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"import\"><a class=\"anchor\" href=\"#import\">#</a> @Import</h1>\n<blockquote>\n<p>此注解用于导入其它配置类或 <code>Bean</code> 。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>AppConfig.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Import</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">AppConfig1</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">AppConfig2</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 其他方法</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"conditional\"><a class=\"anchor\" href=\"#conditional\">#</a> @Conditional</h1>\n<blockquote>\n<p>此注解用于根据条件判断是否创建 <code>Bean</code>  或执行配置。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>AppConfig.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Conditional</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DatabaseTypeCondition</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">UserRepository</span> <span class=\"token function\">userRepository</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserRepositoryImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 其他方法</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"profile\"><a class=\"anchor\" href=\"#profile\">#</a> @Profile</h1>\n<blockquote>\n<p>此注解用于指定配置的环境，如开发环境、测试环境或生产环境。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>AppConfig.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Profile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dev\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">UserService</span> <span class=\"token function\">userServiceDev</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserServiceDevImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@Profile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prod\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">UserService</span> <span class=\"token function\">userServiceProd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserServiceProdImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 其他方法</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"propertysource\"><a class=\"anchor\" href=\"#propertysource\">#</a> @PropertySource</h1>\n<blockquote>\n<p>此注解用于指定配置文件的位置， <code>@PropertySource</code>  是 <code>Spring</code>  框架中的一个注解，用于指定一组属性文件的位置，从而可以在 <code>Spring</code>  应用程序中使用这些属性。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>AppConfig.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 这个类使用 @Configuration 注解标注，表示这个类是一个配置类，用于配置应用程序的 Bean 对象。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 在类级别上，使用 @PropertySource 注解可以指定一个属性文件的位置。在这个例子中，使用 @PropertySource 注解指定了一个名为 application.properties 的属性文件，它位于 classpath 下。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 在方法级别上，使用 @Bean 注解标注方法，表示这个方法返回一个 Bean 对象。在这个例子中，使用 Environment 对象从属性文件中读取属性值，并将这些属性值传递给 UserService 实例的构造方法。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @PropertySource 注解用于指定一组属性文件的位置，使得开发者可以在 Spring 应用程序中使用这些属性。同时，使用 Environment 对象可以方便地读取属性文件中的属性值，并将这些属性值传递给 Bean 对象的构造方法或属性。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @PropertySource 注解是 Spring 框架中比较常用的注解之一，可以让开发者更加灵活地管理和配置 Spring Bean。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token annotation punctuation\">@PropertySource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"classpath:application.properties\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Environment</span> environment<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">UserService</span> <span class=\"token function\">userService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserServiceImpl</span><span class=\"token punctuation\">(</span>environment<span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userService.name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 其他方法</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"qualifier\"><a class=\"anchor\" href=\"#qualifier\">#</a> @Qualifier</h1>\n<blockquote>\n<p>此注解用于指定注入的 <code>Bean</code>  的名称。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserServiceImpl.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">UserService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Qualifier</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userRepositoryImpl\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserRepository</span> userRepository<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 其他方法</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"exceptionhandler\"><a class=\"anchor\" href=\"#exceptionhandler\">#</a> @ExceptionHandler</h1>\n<blockquote>\n<p>此注解用于处理异常。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>GlobalExceptionHandler.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 这个类使用 @ControllerAdvice 注解标注，表示这个类是一个全局异常处理器。在方法级别上，使用 @ExceptionHandler 注解可以指定一个方法来处理控制器中抛出的异常。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 在这个例子中，使用 @ExceptionHandler 注解指定了一个名为 handleException 的方法，它处理所有类型的异常。当控制器中抛出异常时，会调用这个方法，并将异常对象作为参数传递给这个方法。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 在这个方法中，使用 ModelAndView 对象来封装错误信息，并将视图名称设置为 error。最后，返回这个 ModelAndView 对象，将错误信息显示到用户界面上。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @ExceptionHandler 注解用于处理控制器中抛出的异常，使得开发者可以根据需要灵活地处理异常。同时，使用 @ControllerAdvice 注解可以将这个异常处理器应用于所有的控制器中。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @ExceptionHandler 注解是 Spring 框架中比较常用的注解之一，可以让开发者更加灵活地处理控制器中的异常。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@ControllerAdvice</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GlobalExceptionHandler</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@ExceptionHandler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ModelAndView</span> <span class=\"token function\">handleException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">ModelAndView</span> modelAndView <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ModelAndView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        modelAndView<span class=\"token punctuation\">.</span><span class=\"token function\">addObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"errorMessage\"</span><span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        modelAndView<span class=\"token punctuation\">.</span><span class=\"token function\">setViewName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> modelAndView<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"responsestatus\"><a class=\"anchor\" href=\"#responsestatus\">#</a> @ResponseStatus</h1>\n<blockquote>\n<p>此注解用于指定异常的 <code>HTTP</code>  响应状态码。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserController.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/user/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseStatus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span>OK<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">UserDetails</span> <span class=\"token function\">getUserDetails</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 查询用户信息</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">UserDetails</span> userDetails <span class=\"token operator\">=</span> userService<span class=\"token punctuation\">.</span><span class=\"token function\">getUserDetails</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>userDetails <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserNotFoundException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"User not found\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> userDetails<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token annotation punctuation\">@ExceptionHandler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserNotFoundException</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseStatus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span>NOT_FOUND<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">handleUserNotFoundException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserNotFoundException</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> ex<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"controlleradvice\"><a class=\"anchor\" href=\"#controlleradvice\">#</a> @ControllerAdvice</h1>\n<blockquote>\n<p>此注解用于处理全局异常， <code>@ControllerAdvice</code>  是 <code>Spring</code>  框架中的一个注解，用于定义全局控制器通知。</p>\n</blockquote>\n<blockquote>\n<p>在 <code>Spring MVC</code>  框架中，控制器通知是一些特殊的组件，它们可以在控制器方法执行前或执行后抛出异常时执行一些额外的逻辑处理，使用 <code>@ControllerAdvice</code>  注解可以定义全局控制器通知，它可以应用于所有的控制器。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>GlobalControllerAdvice.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 这个类使用 @ControllerAdvice 注解标注，表示这个类是一个全局控制器通知。在方法级别上，使用 @ModelAttribute 注解标注方法，表示这个方法会在所有控制器方法执行前执行，用于将当前登录用户信息添加到模型中。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 使用 @InitBinder 注解标注方法，表示这个方法会在所有控制器方法执行前执行，用于注册自定义的属性编辑器。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 使用 @ExceptionHandler 注解标注方法，表示这个方法会在控制器中抛出异常时执行，用于处理控制器方法中抛出的异常。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @ControllerAdvice 注解用于定义全局控制器通知，使得开发者可以在所有控制器方法执行前、执行后或抛出异常时执行一些额外的逻辑处理。同时，使用 @ModelAttribute 注解可以将一些公共的模型数据添加到模型中，使用 @InitBinder 注解可以注册自定义的属性编辑器，使用 @ExceptionHandler 注解可以处理控制器方法中抛出的异常。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @ControllerAdvice 注解是 Spring 框架中比较常用的注解之一，可以让开发者更加灵活地定义全局控制器通知。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@ControllerAdvice</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GlobalControllerAdvice</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@ModelAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"currentUser\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">getCurrentUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 获取当前登录用户信息</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">User</span> currentUser <span class=\"token operator\">=</span> userService<span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> currentUser<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@InitBinder</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">initBinder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WebDataBinder</span> binder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 注册自定义的属性编辑器</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        binder<span class=\"token punctuation\">.</span><span class=\"token function\">registerCustomEditor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Date</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CustomDateEditor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-MM-dd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token annotation punctuation\">@ExceptionHandler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ModelAndView</span> <span class=\"token function\">handleException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">ModelAndView</span> modelAndView <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ModelAndView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        modelAndView<span class=\"token punctuation\">.</span><span class=\"token function\">addObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"errorMessage\"</span><span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        modelAndView<span class=\"token punctuation\">.</span><span class=\"token function\">setViewName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">return</span> modelAndView<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"crossorigin\"><a class=\"anchor\" href=\"#crossorigin\">#</a> @CrossOrigin</h1>\n<blockquote>\n<p>此注解用于解决跨域问题， <code>@CrossOrigin</code>  注解是 <code>Spring</code>  框架中的一个注解，用于解决跨域资源共享 ( <code>CORS</code> ) 问题。</p>\n</blockquote>\n<blockquote>\n<p>跨越资源共享是浏览器安全策略的一部分，它限制了浏览器在不同域名之间发送和接收 <code>HTTP</code>  请求，使用 <code>@CrossOrigin</code>  注解可以指定允许跨域访问的域名和 <code>HTTP</code>  方法。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>ApiController.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 这个类使用 @RestController 注解标注，表示这个类是一个 RESTful 风格的控制器。在类级别上，使用 @RequestMapping 注解指定控制器处理的请求路径为 /api。同时，使用 @CrossOrigin 注解可以指定允许跨域访问的域名和 HTTP 方法。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 在这个例子中，使用 @CrossOrigin 注解指定允许来自 http://localhost:8080 域名的 GET 和 POST 请求访问该控制器中的方法。这意味着，在 http://localhost:8080 域名下的网页可以通过 XMLHttpRequest 对象发送 GET 和 POST 请求，访问该控制器中的方法。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @CrossOrigin 注解用于解决跨域资源共享（CORS）问题，使得开发者可以更加灵活地控制允许跨域访问的域名和 HTTP 方法。它是一种简单但非常有效的解决方案，可以使得前端开发者更加轻松地开发跨域应用程序。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @CrossOrigin 注解是 Spring 框架中比较常用的注解之一，可以让开发者更加灵活地解决跨域资源共享（CORS）问题。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token annotation punctuation\">@CrossOrigin</span><span class=\"token punctuation\">(</span>origins <span class=\"token operator\">=</span> <span class=\"token string\">\"http://localhost:8080\"</span><span class=\"token punctuation\">,</span> methods <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span>POST<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ApiController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/users\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getUsers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 查询用户信息</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> users <span class=\"token operator\">=</span> userService<span class=\"token punctuation\">.</span><span class=\"token function\">getUsers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> users<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"async\"><a class=\"anchor\" href=\"#async\">#</a> @Async</h1>\n<blockquote>\n<p>此注解用于将方法标记为异步执行，在 <code>Spring</code>  框架中，如果有一个方法需要执行一些比较耗时的操作，此时如果这个方法是在主线程中执行，就会导致主线程被阻塞，用户界面将无法响应用户的操作。</p>\n</blockquote>\n<blockquote>\n<p>此时就可以使用 <code>@Async</code>  注解来将这个方法的执行异步化，让主线程继续执行其它任务，从而提高应用程序的响应性能。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserService.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 这个类使用 @Service 注解标注，表示这个类是一个服务。在方法级别上，使用 @Async 注解标注方法，表示这个方法需要异步执行。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 在这个例子中，getUserDetailsAsync 方法使用 @Async 注解标注，表示这个方法需要异步执行。查询用户信息的操作在异步线程中执行，不会阻塞主线程。同时，这个方法返回一个 CompletableFuture 对象，表示异步执行的结果。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Async 注解用于异步执行方法，可以提高应用程序的响应性能。它是一种简单但非常有效的解决方案，可以使得开发者更加轻松地编写并发应用程序。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Async 注解是 Spring 框架中比较常用的注解之一，可以让开发者更加灵活地异步执行方法。需要注意的是，异步执行的方法必须在一个独立的线程中执行，因此需要使用线程池来管理异步线程的执行。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@Async</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">CompletableFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UserDetails</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getUserDetailsAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 查询用户信息</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">UserDetails</span> userDetails <span class=\"token operator\">=</span> userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">getUserDetails</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">CompletableFuture</span><span class=\"token punctuation\">.</span><span class=\"token function\">completedFuture</span><span class=\"token punctuation\">(</span>userDetails<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"cacheable\"><a class=\"anchor\" href=\"#cacheable\">#</a> @Cacheable</h1>\n<blockquote>\n<p>此注解用于缓存方法的返回值，在 <code>Spring</code>  框架中，如果一个方法的返回结果是固定的，而且这个方法的执行比较耗时，我们可以使用 <code>@Cacheable</code>  注解将这个方法的返回结果缓存起来，下次执行这个方法时直接从缓存中获取结果即可，避免重复执行。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserService.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 这个类使用 @Service 注解标注，表示这个类是一个服务。在方法级别上，使用 @Cacheable 注解标注方法，表示这个方法返回的结果可以被缓存起来。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 在这个例子中，getUser 方法使用 @Cacheable 注解标注，表示这个方法的返回结果可以被缓存起来。查询用户信息的操作在第一次执行时会被执行，返回结果会被缓存到名为 \"userCache\" 的缓存中。下次执行 getUser 方法时，如果缓存中已经存在这个结果，就直接从缓存中获取结果，不需要再次执行查询操作。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Cacheable 注解用于缓存方法的返回结果，可以提高应用程序的执行效率。它是一种简单但非常有效的解决方案，可以使得开发者更加灵活地使用缓存来优化应用程序的性能。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Cacheable 注解是 Spring 框架中比较常用的注解之一，可以让开发者更加轻松地使用缓存来提高应用程序的性能。需要注意的是，使用缓存需要考虑缓存的生命周期和缓存的一致性，必要时需要使用缓存失效机制和缓存更新机制来维护缓存的一致性。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@Cacheable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userCache\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 查询用户信息</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> user<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"cacheevict\"><a class=\"anchor\" href=\"#cacheevict\">#</a> @CacheEvict</h1>\n<blockquote>\n<p>此注解用于清除缓存， <code>@CacheEvict</code>  注解是 <code>Spring</code>  框架中的一个注解，它主要用于清空缓存中的数据，在 <code>Spring</code>  框架中，如果一个方法的执行会导致缓存数据的失效，我们可以使用 <code>@CacheEvict</code>  注解将这个方法的缓存数据清空，这样下次执行这个方法时就会重新查询数据并缓存起来。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserService.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 这个类使用 @Service 注解标注，表示这个类是一个服务。在方法级别上，使用 @Cacheable 注解标注 getUser 方法，表示这个方法的返回结果可以被缓存起来。同时，使用 @CacheEvict 注解标注 clearCache 方法，表示这个方法会清空名为 \"userCache\" 的缓存。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 在这个例子中，getUser 方法使用 @Cacheable 注解标注，表示这个方法的返回结果可以被缓存起来。查询用户信息的操作在第一次执行时会被执行，返回结果会被缓存到名为 \"userCache\" 的缓存中。下次执行 getUser 方法时，如果缓存中已经存在这个结果，就直接从缓存中获取结果，不需要再次执行查询操作。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 当调用 clearCache 方法时，@CacheEvict 注解会清空名为 \"userCache\" 的缓存，下次执行 getUser 方法时，就需要重新查询数据并缓存起来。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @CacheEvict 注解用于清空缓存中的数据，可以使得开发者更加灵活地控制缓存的生命周期和缓存的一致性。它是一种简单但非常有效的解决方案，可以使得开发者更加轻松地使用缓存来提高应用程序的性能。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @CacheEvict 注解是 Spring 框架中比较常用的注解之一，可以让开发者更加灵活地控制缓存的生命周期和缓存的一致性。需要注意的是，清空缓存需要谨慎操作，必要时需要考虑缓存的失效机制和缓存更新机制来维护缓存的一致性。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@Cacheable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userCache\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 查询用户信息</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> user<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@CacheEvict</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userCache\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">clearCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 清空缓存</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"cacheput\"><a class=\"anchor\" href=\"#cacheput\">#</a> @CachePut</h1>\n<blockquote>\n<p>用于更新缓存中的数据， <code>@CachePut</code>  注解是 <code>Spring</code>  框架中的一个注解，它主要用于更新或添加缓存中的数据，在 <code>Spring</code>  框架中，如果一个方法的执行会导致缓存数据的关系或添加，我们可以使用 <code>@CachePut</code>  注解将这个方法的返回结果更新或添加到缓存中。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserService.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 这个类使用 @Service 注解标注，表示这个类是一个服务。在方法级别上，使用 @Cacheable 注解标注 getUser 方法，表示这个方法的返回结果可以被缓存起来。同时，使用 @CachePut 注解标注 updateUser 方法，表示这个方法会更新或添加名为 \"userCache\" 的缓存。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 在这个例子中，getUser 方法使用 @Cacheable 注解标注，表示这个方法的返回结果可以被缓存起来。查询用户信息的操作在第一次执行时会被执行，返回结果会被缓存到名为 \"userCache\" 的缓存中。下次执行 getUser 方法时，如果缓存中已经存在这个结果，就直接从缓存中获取结果，不需要再次执行查询操作。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 当调用 updateUser 方法时，@CachePut 注解会更新或添加名为 \"userCache\" 的缓存，下次执行 getUser 方法时，就可以从缓存中获取更新后的用户信息。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @CachePut 注解用于更新或添加缓存中的数据，可以使得开发者更加灵活地控制缓存的生命周期和缓存的一致性。它是一种简单但非常有效的解决方案，可以使得开发者更加轻松地使用缓存来提高应用程序的性能。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @CachePut 注解是 Spring 框架中比较常用的注解之一，可以让开发者更加灵活地控制缓存的生命周期和缓存的一致性。需要注意的是，更新或添加缓存需要谨慎操作，必要时需要考虑缓存的失效机制和缓存更新机制来维护缓存的一致性。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@Cacheable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userCache\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 查询用户信息</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> user<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@CachePut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userCache\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span> <span class=\"token function\">updateUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">,</span> <span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 更新用户信息</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">User</span> updatedUser <span class=\"token operator\">=</span> userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">updateUser</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> updatedUser<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"transactional\"><a class=\"anchor\" href=\"#transactional\">#</a> @Transactional</h1>\n<ul>\n<li><code>@Transactional</code>  是 <code>Spring</code>  框架中的一个注解，用于标识一个方法或类需要使用事务进行操作。</li>\n<li><code>@Transactional</code>  注解在 <code>Spring</code>  框架中用于声明事务管理，它允许开发者通过简单的注解来控制事务的边界，具体来说， <code>@Transactional</code>  注解的作用包括以下五种特性：\n<ul>\n<li><code>只读标记</code> ：通过设置为只读，可以告诉 <code>Spring</code>  事务的类型，这有助于优化事务的性能。</li>\n<li><code>隔离级别</code> ：定义了事务的隔离级别，用于解决并发事务中的问题，如脏读、不可重复读等，例如： <code>ISOLATION_READ_COMMITTED</code>  表示事务只能读取已经提交的数据。</li>\n<li><code>超时时间</code> ：定义了事务的超时时间，超过这个时间，事务将自动回滚，例如： <code>timeout = 30</code>  表示事务最多运行 <code>30</code>  秒。</li>\n<li><code>回滚规则</code> ：定义了哪些异常会导致事务回滚，默认情况下，只有运行时检查的异常会导致事务回滚，而受检异常不会。</li>\n<li><code>事务传播行为</code> ：定义了方法调用时事务如何传播，比如是否新开一个事务，或者加入到已有的事务中，例如： <code>PROPAGATION_REQUIRED</code>  表示如果当前没有事务，就新建一个事务，如果已经存在事务则加入这个事务中。</li>\n</ul>\n</li>\n<li><code>@Transactional</code>  注解通常用于服务层的方法上，以确保业务操作的原子性、一致性、隔离性和持久性，它是实现声明事务管理的一种便捷方式，使得事务管理变得更加简单和直观。</li>\n<li>在 <code>Spring</code>  框架中，如果一个方法需要对数据库进行操作，我们可以使用 <code>@Transactional</code>  注解来确保这个操作在一个事务中进行，从而保证操作的原子性、一致性、隔离性和持久性。</li>\n</ul>\n<blockquote>\n<p>需要引入以下坐标才可以正常使用此注解。</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>pom.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-tx<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.0.8.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserService.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 这个类使用 @Service 注解标注，表示这个类是一个服务。同时，在类级别上使用 @Transactional 注解标注，表示这个类中的所有方法都需要使用事务进行操作。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 在这个例子中，createUser 和 updateUser 方法都需要对数据库进行操作，因此使用 userRepository 来保存或更新用户信息。由于这个类使用了 @Transactional 注解来标识，因此 userRepository 的操作都在一个事务中进行，从而保证操作的原子性、一致性、隔离性和持久性。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Transactional 注解用于标识一个方法或类需要使用事务进行操作，可以使得开发者更加灵活地控制事务的使用。它是一种简单但非常有效的解决方案，可以使得开发者更加轻松地使用事务来提高应用程序的性能和数据一致性。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Transactional 注解是 Spring 框架中比较常用的注解之一，可以让开发者更加灵活地控制事务的使用。需要注意的是，事务的使用需要谨慎操作，必要时需要考虑事务的隔离级别、超时时间和回滚机制等来维护数据的一致性和应用程序的性能。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@Transactional</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserRepository</span> userRepository<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">createUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">updateUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">,</span> <span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">User</span> existingUser <span class=\"token operator\">=</span> userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>existingUser <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            existingUser<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            existingUser<span class=\"token punctuation\">.</span><span class=\"token function\">setEmail</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getEmail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>existingUser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>MyService.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>transaction<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Transactional</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Service</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>propagation <span class=\"token operator\">=</span> <span class=\"token class-name\">Propagation</span><span class=\"token punctuation\">.</span>REQUIRED<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 仅将事务管理应用于该方法</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 方法体</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>isolation <span class=\"token operator\">=</span> <span class=\"token class-name\">Isolation</span><span class=\"token punctuation\">.</span>READ_COMMITTED<span class=\"token punctuation\">,</span> timeout <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 对该方法应用特定的事务属性</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doSomethingElse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 方法体</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>在 <code>MyService</code>  示例中， <code>doSomething()</code>  方法和 <code>doSomethingElse()</code>  方法分别有不同的事务属性设置， <code>doSomething()</code>  方法使用默认的传播行为 <code>PROPAGATION_REQUIRED</code> , 而 <code>doSomethingElse()</code>  方法指定了隔离级别为 <code>Isolation.READ_COMMITTED</code>  和超时时间为 <code>30</code>  秒。</p>\n</blockquote>\n<blockquote>\n<p>注意：为了让 <code>@Transactional</code>  注解生效，需要在 <code>Spring</code>  配置中启用事务管理，在使用 <code>SpringBoot</code>  时，通常无需额外配置，因为 <code>SpringBoot</code>  自动配置了事务管理器。</p>\n</blockquote>\n<blockquote>\n<p>另外当方法抛出异常时，如果异常不是运行时异常 ( <code>RuntimeException</code>  的子类)，那么默认情况下事务不会自动回滚，如果希望某些受检异常也能触发事务回滚，需要在 <code>@Transactional</code>  注解中指定 <code>rollbackFor</code>  属性。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>rollbackFor <span class=\"token operator\">=</span> <span class=\"token class-name\">MyCustomException</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">someMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">MyCustomException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//  方法体</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"enabletransactionmanagement\"><a class=\"anchor\" href=\"#enabletransactionmanagement\">#</a> @EnableTransactionManagement</h1>\n<blockquote>\n<p>此注解用于启用事物管理功能， <code>@EnableTransactionManagement</code>  在 <code>Spring</code>  框架中用于开启基于注解的事务管理，它主要用于告诉 <code>Spring</code>  容器需要创建一个事务管理器 ( <code>PlatformTransactionManager</code> ), 并将其注册到 <code>Spring</code>  上下文中，一旦事务管理器被创建并配置好，就可以通过 <code>@Transactional</code>  注解在服务层的方法上声明事务的边界了。</p>\n</blockquote>\n<blockquote>\n<p>当你在某个配置类上添加了 <code>@EnableTransactionManagement</code>  注解后， <code>Spring</code>  会根据配置的事务管理器类型如： <code>JPA</code> 、 <code>JDBC</code> 、 <code>Hibernate</code>  等来创建相应的事务管理实例，当应用中的方法被标注为 <code>@Transactional</code>  时， <code>Spring</code>  就能够利用配置好的事务管理器来管理事务，简而言之 <code>@EnableTransactionManagement</code>  注解是用于开启 <code>Spring</code>  声明式事务管理的关键步骤，它使得 <code>@Transactional</code>  注解能够正常工作。</p>\n</blockquote>\n<blockquote>\n<p>需要引入以下坐标才可以正常使用此注解。</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>pom.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-tx<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.0.8.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>AppConfig.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Configuration</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>transaction<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EnableTransactionManagement</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>transaction<span class=\"token punctuation\">.</span>jta<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JtaTransactionManager</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Resource</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DataSource</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>autoconfigure<span class=\"token punctuation\">.</span>jdbc<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DataSourceProperties</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ConfigurationProperties</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Bean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>transaction<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PlatformTransactionManager</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @ConfigurationProperties：用于将属性文件中的值绑定到一个 Java 对象上，它可以将属性文件中的多个属性值注入到一个 Java 对象中，与 @Value 注解不同的是 @ConfigurationProperties 可以将属性文件中的值注入到多个属性中。</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token annotation punctuation\">@EnableTransactionManagement</span> <span class=\"token comment\">// 开启基于注解的事务管理</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@Resource</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">DataSourceProperties</span> dataSourceProperties<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token annotation punctuation\">@ConfigurationProperties</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"spring.datasource\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DataSource</span> <span class=\"token function\">dataSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> dataSourceProperties<span class=\"token punctuation\">.</span><span class=\"token function\">initializeDataSourceBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">PlatformTransactionManager</span> <span class=\"token function\">transactionManager</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DataSource</span> dataSource<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">JtaTransactionManager</span> transactionManager <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JtaTransactionManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        transactionManager<span class=\"token punctuation\">.</span><span class=\"token function\">setTransactionManagerName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myTransactionManager\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        transactionManager<span class=\"token punctuation\">.</span><span class=\"token function\">setUserTransactionName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myUserTransaction\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">return</span> transactionManager<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>在 <code>SpringBoot</code>  应用中，由于自动配置的特性，通常不需要手动添加 <code>@EnableTransactionManagement</code>  注解，因为 <code>SpringBoot</code>  会自动配置事务管理，但是如果你需要自定义事务管理器或者需要更细力度的事务控制，就可以在配置类中添加 <code>@EnableTransactionManagement</code>  注解。</p>\n</blockquote>\n<blockquote>\n<p>在 <code>AppConfig</code>  示例中， <code>AppConfig</code>  类被标记为配置类 <code>(通过@Configuration注解)</code> ，然后通过 <code>@EnableTransactionManagement</code>  注解来启用基于注解的事务管理，同时在这个配置类中定义了数据源和事务管理器的 <code>bean</code> , 其中事务管理器是通过 <code>JtaTransactionManager</code>  来创建的，在这个配置类或其它配置类中定义的服务组件里的方法，只要被标注为 <code>@Transactional</code>  注解，它们的事务行为就会被 <code>Spring</code>  容器管理。</p>\n</blockquote>\n<h1 id=\"enableaspectjautoproxy\"><a class=\"anchor\" href=\"#enableaspectjautoproxy\">#</a> @EnableAspectJAutoProxy</h1>\n<blockquote>\n<p>此注解用于启用 <code>AOP</code>  功能， <code>@EnableAspectJAutoProxy</code>  是 <code>Spring</code>  框架中的一个注解，用于启用自动代理功能，以便使用 <code>AOP(面向切面编程)</code>  进行编程。</p>\n</blockquote>\n<blockquote>\n<p>在 <code>Spring</code>  框架中，如果需要使用 <code>AOP</code>  来实现某些功能，就可以使用 <code>@EnableAspectJAutoProxy</code>  注解来启用自动代理功能，从而在运行时自动为我们生成代理对象，以便进行切面编程。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>AppConfig.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 这个类使用 @Configuration 注解标注，表示这个类是一个配置类。同时，在类级别上使用 @EnableAspectJAutoProxy 注解标注，表示这个配置类需要启用自动代理功能。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 在这个例子中，我们定义了一个 MyAspect 类来实现某些功能的切面编程。为了让 Spring 框架能够自动为我们生成代理对象，我们需要将 MyAspect 类加入到 Spring 容器中，并且使用 @Bean 注解标注。另外，我们还定义了一个 UserService 类来实现某些业务功能。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @EnableAspectJAutoProxy 注解用于启用自动代理功能，可以使得开发者更加方便地使用 AOP 来实现某些功能。它是一种简单但非常有效的解决方案，可以让开发者更加轻松地使用切面编程来提高应用程序的性能和可维护性。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @EnableAspectJAutoProxy 注解是 Spring 框架中比较常用的注解之一，可以让开发者更加方便地使用 AOP 来实现某些功能。需要注意的是，AOP 的使用需要谨慎操作，必要时需要考虑 AOP 的切面逻辑、切入点和通知类型等来维护应用程序的性能和可维护性。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@EnableAspectJAutoProxy</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MyAspect</span> <span class=\"token function\">myAspect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyAspect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">UserService</span> <span class=\"token function\">userService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"aspect\"><a class=\"anchor\" href=\"#aspect\">#</a> @Aspect</h1>\n<blockquote>\n<p>此注解用于定义切面， <code>@Aspect</code>  是 <code>Spring</code>  框架中的一个注解，它用于标识一个类为切面类，从而可以在该类中定义切面逻辑以实现 <code>AOP(面向切面编程)</code> 。</p>\n</blockquote>\n<blockquote>\n<p>在 <code>Spring</code>  框架中，如果需要使用 <code>AOP</code>  来实现某些功能，我们可以使用 <code>@Aspect</code>  注解来标识一个类为切面类，在切面类中我们可以定义切面逻辑，包括切入点、通知类型和切面顺序等，从而实现 <code>AOP</code>  编程的功能。</p>\n</blockquote>\n<blockquote>\n<p>需要引入以下坐标才可以正常使用此注解。</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>pom.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-aop<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>MyAspect.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 这个类使用 @Aspect 注解标识，表示这个类是一个切面类。同时，我们还使用 @Component 注解标识这个类，以便 Spring 框架能够自动将它加入到 Spring 容器中。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 在这个例子中，我们定义了一个 MyAspect 类来实现某些功能的切面编程。在这个类中，我们定义了两个通知类型，即 @Before 和 @After，分别表示在目标方法执行前和执行后执行某些操作。这些通知类型的执行条件是通过切入点表达式来定义的。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Aspect 注解用于标识一个类为切面类，可以使得开发者更加方便地使用 AOP 来实现某些功能。它是一种简单但非常有效的解决方案，可以让开发者更加轻松地使用切面编程来提高应用程序的性能和可维护性。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Aspect 注解是 Spring 框架中比较常用的注解之一，用于标识一个类为切面类。需要注意的是，AOP 的使用需要谨慎操作，必要时需要考虑切入点、通知类型和切面顺序等来维护应用程序的性能和可维护性。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@Aspect</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyAspect</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@Before</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(* com.example.UserService.*(..))\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">beforeAdvice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Before advice is executed.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token annotation punctuation\">@After</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(* com.example.UserService.*(..))\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterAdvice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"After advice is executed.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"pointcut\"><a class=\"anchor\" href=\"#pointcut\">#</a> @Pointcut</h1>\n<blockquote>\n<p>此注解用于定义切点， <code>@Pointcut</code>  是 <code>Spring</code>  框架中的一个注解，它用于定义一个切入点，从而可以在该切入点上定义通知类型一实现 <code>AOP(面向切面编程)</code> 。</p>\n</blockquote>\n<blockquote>\n<p>在 <code>Spring</code>  框架中，如果需要使用 <code>AOP</code>  来实现某些功能，我们可以使用 <code>@Pointcut</code>  注解来定义一个切入点，在切入点我们可以定义切面逻辑，包括通知类型和切面顺序等，从而实现 <code>AOP</code>  功能。</p>\n</blockquote>\n<blockquote>\n<p>需要引入以下坐标才可以正常使用此注解。</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>pom.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-aop<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>MyAspect.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 这个类使用 @Aspect 注解标识，表示这个类是一个切面类。同时，我们还使用 @Component 注解标识这个类，以便 Spring 框架能够自动将它加入到 Spring 容器中。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 在这个例子中，我们定义了一个 MyAspect 类来实现某些功能的切面编程。在这个类中，我们使用 @Pointcut 注解定义了一个切入点，即 userServicePointcut () 方法。在这个切入点上，我们定义了两个通知类型，即 @Before 和 @After，分别表示在目标方法执行前和执行后执行某些操作。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Pointcut 注解用于定义一个切入点，可以使得开发者更加方便地使用 AOP 来实现某些功能。它是一种简单但非常有效的解决方案，可以让开发者更加轻松地使用切面编程来提高应用程序的性能和可维护性。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Pointcut 注解是 Spring 框架中比较常用的注解之一，用于定义一个切入点。需要注意的是，AOP 的使用需要谨慎操作，必要时需要考虑切入点、通知类型和切面顺序等来维护应用程序的性能和可维护性。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@Aspect</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyAspect</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(* com.example.UserService.*(..))\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">userServicePointcut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token annotation punctuation\">@Before</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userServicePointcut()\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">beforeAdvice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Before advice is executed.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token annotation punctuation\">@After</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userServicePointcut()\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterAdvice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"After advice is executed.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"before\"><a class=\"anchor\" href=\"#before\">#</a> @Before</h1>\n<blockquote>\n<p>此注解用于在方法执行前执行前置通知， <code>@Before</code>  是 <code>Spring</code>  框架中的一个注解，它用于定义在目标方法执行前执行的通知类型。</p>\n</blockquote>\n<blockquote>\n<p>在 <code>Spring</code>  框架中，如果需要在目标方法执行前执行某些操作，就可以使用 <code>@Before</code>  注解来定义一个通知类型，在这个通知类型中，我们可以编写自己的逻辑代码从而实现 <code>AOP</code>  编程功能。</p>\n</blockquote>\n<blockquote>\n<p>需要引入以下坐标才可以正常使用此注解。</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>pom.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-aop<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>MyAspect.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Aspect</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyAspect</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Before</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(* com.example.UserService.*(..))\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">beforeAdvice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Before advice is executed.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"after\"><a class=\"anchor\" href=\"#after\">#</a> @After</h1>\n<blockquote>\n<p>此注解用于在方法执行后执行后置通知， <code>@After</code>  是 <code>Spring</code>  框架中的一个注解，它用于定义在目标方法执行后执行的通知类型。</p>\n</blockquote>\n<blockquote>\n<p>在 <code>Spring</code>  框架中，如果需要在目标方法执行后执行某些操作，就可以使用 <code>@After</code>  注解来定义一个通知类型，在这个通知类型中，可以编写自己的逻辑代码，从而实现 <code>AOP</code>  编程功能。</p>\n</blockquote>\n<blockquote>\n<p>需要引入以下坐标才可以正常使用此注解。</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>pom.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-aop<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>MyAspect.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Aspect</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyAspect</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@After</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(* com.example.UserService.*(..))\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterAdvice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"After advice is executed.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"around\"><a class=\"anchor\" href=\"#around\">#</a> @Around</h1>\n<blockquote>\n<p>此注解用于在方法执行前和执行后执行通知，也被称为环绕通知， <code>@Around</code>  是 <code>Spring</code>  框架中的一个注解，用于定义在目标方法执行前和执行后执行的通知类型。</p>\n</blockquote>\n<blockquote>\n<p>在 <code>Spring</code>  框架中，如果需要在目标方法执行前后执行某些操作，就可以使用 <code>@Around</code>  注解来定义一个通知类型，在这个通知类型中可以编写自己的逻辑代码，从而实现 <code>AOP</code>  编程功能。</p>\n</blockquote>\n<blockquote>\n<p>需要引入以下坐标才可以正常使用此注解。</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>pom.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-aop<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>MyAspect.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Aspect</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyAspect</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Around</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(* com.example.UserService.*(..))\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">aroundAdvice</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProceedingJoinPoint</span> joinPoint<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Before advice is executed.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Object</span> result <span class=\"token operator\">=</span> joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"After advice is executed.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"afterreturning\"><a class=\"anchor\" href=\"#afterreturning\">#</a> @AfterReturning</h1>\n<blockquote>\n<p>此注解用于在方法返回结果后执行通知，也被称为返回通知， <code>@AfterReturning</code>  是 <code>Spring</code>  框架中的一个注解，它用于在目标方法返回结果后执行的通知类型。</p>\n</blockquote>\n<blockquote>\n<p>在 <code>Spring</code>  框架中如果需要在目标方法返回结果后执行某些操作，就可以使用 <code>@AfterReturning</code>  注解来定义一个通知类型，在这个通知类型可以编写自己的逻辑代码，从而实现 <code>AOP</code>  编程功能。</p>\n</blockquote>\n<blockquote>\n<p>需要引入以下坐标才可以正常使用此注解。</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>pom.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-aop<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>MyAspect.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Aspect</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyAspect</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@AfterReturning</span><span class=\"token punctuation\">(</span>pointcut <span class=\"token operator\">=</span> <span class=\"token string\">\"execution(* com.example.UserService.*(..))\"</span><span class=\"token punctuation\">,</span> returning <span class=\"token operator\">=</span> <span class=\"token string\">\"result\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterReturningAdvice</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"After returning advice is executed. Result is \"</span> <span class=\"token operator\">+</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"afterthrowing\"><a class=\"anchor\" href=\"#afterthrowing\">#</a> @AfterThrowing</h1>\n<blockquote>\n<p>此注解用于在方法抛出异常后执行通知，也被称为异常通知， <code>@AfterThrowing</code>  是 <code>Spring</code>  框架中的一个注解，它用于定义在目标方法抛出异常后执行的通知类型。</p>\n</blockquote>\n<blockquote>\n<p>在 <code>Spring</code>  框架中，如果需要在目标方法抛出异常后执行某些操作，就可以使用 <code>@AfterThrowing</code>  注解来定义一个通知类型，在这个通知类型中可以编写自己的逻辑代码，从而实现 <code>AOP</code>  编程功能。</p>\n</blockquote>\n<blockquote>\n<p>需要引入以下坐标才可以正常使用此注解。</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>pom.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-aop<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>MyAspect.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Aspect</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyAspect</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@AfterThrowing</span><span class=\"token punctuation\">(</span>pointcut <span class=\"token operator\">=</span> <span class=\"token string\">\"execution(* com.example.UserService.*(..))\"</span><span class=\"token punctuation\">,</span> throwing <span class=\"token operator\">=</span> <span class=\"token string\">\"ex\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterThrowingAdvice</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"After throwing advice is executed. Exception is \"</span> <span class=\"token operator\">+</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"order\"><a class=\"anchor\" href=\"#order\">#</a> @Order</h1>\n<blockquote>\n<p>此注解用于指定切面的执行顺序， <code>@Order</code>  是 <code>Spring</code>  框架中的一个注解，它用于定义切面的执行顺序。</p>\n</blockquote>\n<blockquote>\n<p>在 <code>Spring</code>  框架中，如果有多个切面类需要对同一个方法进行切面处理，那么这些切面类的执行顺序可能会影响到最终结果，为了控制这些切面类的执行顺序，可以使用 <code>@Order</code>  注解来定义它们的执行顺序。</p>\n</blockquote>\n<blockquote>\n<p><code>@Order</code>  注解可以应用在切面类上，用于指定切面执行的顺序，它的参数为一个整数，数值越小表示优先级越高，数值相同时将按照类名的自然顺序进行排序。</p>\n</blockquote>\n<blockquote>\n<p>需要引入以下坐标才可以正常使用此注解。</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>pom.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-aop<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>MyAspect1.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Aspect</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@Order</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyAspect1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Before</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(* com.example.UserService.*(..))\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">beforeAdvice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Before advice from MyAspect1 is executed.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>MyAspect2.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Aspect</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@Order</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyAspect2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Before</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(* com.example.UserService.*(..))\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">beforeAdvice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Before advice from MyAspect2 is executed.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"slf4j\"><a class=\"anchor\" href=\"#slf4j\">#</a> @Slf4j</h1>\n<blockquote>\n<p>此注解用于简化日志记录， <code>@Slf4j</code>  是 <code>Lombok</code>  框架中的一个注解，它用于在 <code>Java</code>  类中自动生成日志记录器。</p>\n</blockquote>\n<blockquote>\n<p>在 <code>Java</code>  开发中日志记录是非常重要的一个环节，它可以帮助我们更好地了解程序的运行状况，从而可以更好地进行优化和调试，通常情况下，我们需要手动引入日志框架如： <code>Log4j</code> 、 <code>Slf4j</code>  等，并编写相应的日志记录代码，手动编写这些代码会比较繁琐并且还容易出现错误，为了日志记录过程， <code>Lombok</code>  框架提供了一个 <code>@Slf4j</code>  注解，它可以在 <code>Java</code>  类中自动生成日志记录器。</p>\n</blockquote>\n<blockquote>\n<p>需要引入以下坐标才可以正常使用此注解。</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>pom.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.projectlombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>lombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.18.26<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>MyService.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 在这个例子中，我们定义了一个 MyService 类，并使用 @Slf4j 注解来自动生成日志记录器。然后，在 doSomething () 方法中，我们直接使用 log 变量来记录日志，而不需要再引入其他的日志框架。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 需要注意的是，使用 @Slf4j 注解需要在编译器中安装 Lombok 插件，否则可能会出现编译错误。另外，虽然 @Slf4j 注解非常方便，但在实际应用中，我们还需要根据实际情况选择合适的日志框架，并编写相应的日志记录代码。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 总之，@Slf4j 是 Lombok 框架中的一个注解，可以在 Java 类中自动生成日志记录器，从而简化日志记录的过程。它是一种极为方便的解决方案，可以提高应用程序的可维护性和可读性。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@Slf4j</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is a debug message.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is an info message.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is an error message.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"data\"><a class=\"anchor\" href=\"#data\">#</a> @Data</h1>\n<blockquote>\n<p>此注解用于自动生成 <code>JavaBean</code>  中的 <code>get</code> 、 <code>set</code> 、 <code>toString</code> 、 <code>hashCode</code> 、 <code>equals</code>  方法。</p>\n</blockquote>\n<blockquote>\n<p><code>@Data</code>  是 <code>Lombok</code>  框架中的一个注解，它可以自动生成 <code>Java</code>  类的 <code>get</code> 、 <code>set</code> 、 <code>toString</code> 、 <code>hashCode</code> 、 <code>equals</code>  方法。</p>\n</blockquote>\n<blockquote>\n<p>在日常的 <code>Java</code>  开发中，有时候经常需要编写一些 <code>POJO</code>  类来表示数据结构，这些类通常包含一些成员变量，并且需要编写相应的 <code>get</code> 、 <code>set</code>  等方法，为了简化这个过程 <code>Lombok</code>  框架提供了一个 <code>@Data</code>  注解就可以自动生成这些方法。</p>\n</blockquote>\n<blockquote>\n<p>需要引入以下坐标才可以正常使用此注解。</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>pom.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.projectlombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>lombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.18.26<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>User.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"noargsconstructor\"><a class=\"anchor\" href=\"#noargsconstructor\">#</a> @NoArgsConstructor</h1>\n<blockquote>\n<p>此注解用于生成无参构造函数， <code>@NoArgsConstructor</code>  是 <code>Lombok</code>  框架中的一个注解，它用于自动生成一个无参构造方法。</p>\n</blockquote>\n<blockquote>\n<p>需要引入以下坐标才可以正常使用此注解。</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>pom.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.projectlombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>lombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.18.26<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>User.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 在这个例子中，我们定义了一个 User 类，并使用 @NoArgsConstructor 注解来自动生成一个无参构造方法。然后，在其他的 Java 类中，我们可以直接创建 User 对象的实例，而不需要手动编写无参构造方法。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 需要注意的是，使用 @NoArgsConstructor 注解需要在编译器中安装 Lombok 插件，否则可能会出现编译错误。另外，虽然 @NoArgsConstructor 注解非常方便，但在实际应用中，我们还需要根据实际情况选择合适的构造方法，并编写相应的代码。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 总之，@NoArgsConstructor 是 Lombok 框架中的一个注解，用于自动生成一个无参构造方法，从而简化 Java 开发的过程。它是一种极为方便的解决方案，可以提高应用程序的可维护性和可读性。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@NoArgsConstructor</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"allargsconstructor\"><a class=\"anchor\" href=\"#allargsconstructor\">#</a> @AllArgsConstructor</h1>\n<blockquote>\n<p>此注解用于生成全参构造函数， <code>@AllArgsConstructor</code>  是 <code>Lombok</code>  框架中的一个注解，用于自动生成一个全参构造方法。</p>\n</blockquote>\n<blockquote>\n<p>需要引入以下坐标才可以正常使用此注解。</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>pom.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.projectlombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>lombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.18.26<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>User.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 在这个例子中，我们定义了一个 User 类，并使用 @AllArgsConstructor 注解来自动生成一个全参构造方法。然后，在其他的 Java 类中，我们可以直接创建 User 对象的实例，并传入相应的参数，而不需要手动编写全参构造方法。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 需要注意的是，使用 @AllArgsConstructor 注解需要在编译器中安装 Lombok 插件，否则可能会出现编译错误。另外，虽然 @AllArgsConstructor 注解非常方便，但在实际应用中，我们还需要根据实际情况选择合适的构造方法，并编写相应的代码。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 总之，@AllArgsConstructor 是 Lombok 框架中的一个注解，用于自动生成一个全参构造方法，从而简化 Java 开发的过程。它是一种极为方便的解决方案，可以提高应用程序的可维护性和可读性。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@AllArgsConstructor</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"builder\"><a class=\"anchor\" href=\"#builder\">#</a> @Builder</h1>\n<blockquote>\n<p>此注解用于生成 <code>Builder</code>  模式的构造函数， <code>@Builder</code>  是 <code>Lombok</code>  框架中的一个注解，它用于自动生成一个 <code>Builder</code>  模式的构造器。</p>\n</blockquote>\n<blockquote>\n<p>需要引入以下坐标才可以正常使用此注解。</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>pom.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.projectlombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>lombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.18.26<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>User.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 在这个例子中，我们定义了一个 User 类，并使用 @Builder 注解来自动生成一个 Builder 模式的构造器。然后，在其他的 Java 类中，我们可以使用链式调用的方式设置 User 对象的属性，并最终创建一个不可变的对象。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 需要注意的是，使用 @Builder 注解需要在编译器中安装 Lombok 插件，否则可能会出现编译错误。另外，虽然 @Builder 注解非常方便，但在实际应用中，我们还需要根据实际情况选择合适的构造方法，并编写相应的代码。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 总之，@Builder 是 Lombok 框架中的一个注解，用于自动生成一个 Builder 模式的构造器，从而简化 Java 开发的过程。它是一种极为方便的解决方案，可以提高应用程序的可维护性和可读性。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@Builder</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"equalsandhashcode\"><a class=\"anchor\" href=\"#equalsandhashcode\">#</a> @EqualsAndHashCode</h1>\n<blockquote>\n<p>此注解用于生成 <code>hashCode</code>  和 <code>equals</code>  方法， <code>@EqualsAndHashCode</code>  是 <code>Lombok</code>  框架中的一个注解，它用于自动生成 <code>equals()</code>  和 <code>hashCode()</code>  方法。</p>\n</blockquote>\n<blockquote>\n<p>需要引入以下坐标才可以正常使用此注解。</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>pom.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.projectlombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>lombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.18.26<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>User.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@EqualsAndHashCode</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"tostring\"><a class=\"anchor\" href=\"#tostring\">#</a> @ToString</h1>\n<blockquote>\n<p>此注解用于生成 <code>toString()</code>  方法， <code>@ToString</code>  是 <code>Lombok</code>  框架中的一个注解，它用于自动生成 <code>toString()</code>  方法，如果需要排除某些属性，可以使用 exclude 属性来指定排除的属性。</p>\n</blockquote>\n<blockquote>\n<p>需要引入以下坐标才可以正常使用此注解。</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>pom.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.projectlombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>lombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.18.26<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>User.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@ToString</span><span class=\"token punctuation\">(</span>exclude <span class=\"token operator\">=</span> <span class=\"token string\">\"password\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"getter\"><a class=\"anchor\" href=\"#getter\">#</a> @Getter</h1>\n<blockquote>\n<p>此注解用于生成 <code>get</code>  方法， <code>@Getter</code>  是 <code>Lombok</code>  框架中的一个注解，用于自动生成 <code>getter</code>  方法。</p>\n</blockquote>\n<blockquote>\n<p>需要引入以下坐标才可以正常使用此注解。</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>pom.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.projectlombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>lombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.18.26<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>User.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Getter</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"setter\"><a class=\"anchor\" href=\"#setter\">#</a> @Setter</h1>\n<blockquote>\n<p>此注解用于生成 <code>set</code>  方法， <code>@Setter</code>  是 <code>Lombok</code>  框架中的一个注解，用于自动生成 <code>setter</code>  方法。</p>\n</blockquote>\n<blockquote>\n<p>需要引入以下坐标才可以正常使用此注解。</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>pom.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.projectlombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>lombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.18.26<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>User.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Setter</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "Java",
                "Java深入理解",
                "计算机科学",
                "Java深入理解",
                "Spring",
                "SpringBoot",
                "注解"
            ]
        },
        {
            "id": "https://rainrem.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/java/spring/SpringBoot3%E5%8E%9F%E7%90%86%E4%B8%8E%E6%A0%B8%E5%BF%83/",
            "url": "https://rainrem.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/java/spring/SpringBoot3%E5%8E%9F%E7%90%86%E4%B8%8E%E6%A0%B8%E5%BF%83/",
            "title": "SpringBoot3原理与核心",
            "date_published": "2024-01-16T17:12:58.000Z",
            "content_html": "<h1 id=\"springboot简介\"><a class=\"anchor\" href=\"#springboot简介\">#</a> SpringBoot 简介</h1>\n<blockquote>\n<p><code>SpringBoot</code>  的目标是为所有 <code>Spring</code>  开发者提供一种快速的入门体验，开箱即用，无需编写配置文件， <code>SpringBoot</code>  可以快速创建一个独立的生产级别的 <code>Spring</code>  应用，其实 <code>SpringBoot</code>  底层是靠 <code>Spring</code>  来实现的，使用 <code>SpringBoot</code>  只需要编写少量配置即可快速整合 <code>Spring</code>  以及第三方技术支持。</p>\n</blockquote>\n<h1 id=\"springboot特性\"><a class=\"anchor\" href=\"#springboot特性\">#</a> SpringBoot 特性</h1>\n<ul>\n<li>可以快速创建独立的 <code>Spring</code>  应用。\n<ul>\n<li><code>SSM</code> ：导包、编写配置、启动运行。</li>\n</ul>\n</li>\n<li>直接嵌入 <code>Tomcat</code> 、 <code>Jetty</code> 、 <code>Undertow</code>  等 <code>Servlet</code>  容器，无需部署 <code>war</code>  包。</li>\n<li>提供可选的 <code>starter</code>  来简化应用之间的整合，如： <code>web-starter</code> 、 <code>json-starter</code> 、 <code>mybatis-starter</code>  等。</li>\n<li>按需自动配置 <code>Spring</code>  以及第三方库：\n<ul>\n<li>约定大于配置，每个场景都有很多默认配置。</li>\n<li>如果需要使用这些场景，这个场景的所有配置都会自动配置好。</li>\n</ul>\n</li>\n<li>提供生产级特性如：监控指标、健康检查 <code>(k8s)</code> 、外部化配置等。</li>\n<li>无代码生成，无 <code>xml</code> , 配置文件可以使用 <code>properties</code> 、 <code>ymal</code> 、 <code>yml</code> 。</li>\n</ul>\n<h1 id=\"系统环境最低要求\"><a class=\"anchor\" href=\"#系统环境最低要求\">#</a> 系统环境最低要求</h1>\n<blockquote>\n<p><code>SpringBoot3.0</code>  最低需求为 <code>Java 17</code>  并且还需要 <code>SpringFramework 6.0.0-M2</code>  及以上版本。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">构建工具</th>\n<th style=\"text-align:center\">版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Gradle</td>\n<td style=\"text-align:center\">7.4+</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Maven</td>\n<td style=\"text-align:center\">3.5+</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>开发工具建议使用 <code>IntelliJ IDEA 2021.2.1</code>  及更高版本。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">工具 &amp; 环境</th>\n<th style=\"text-align:center\">版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Java</td>\n<td style=\"text-align:center\">17+</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">IDEA</td>\n<td style=\"text-align:center\">2021.2.1+</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p><code>SpringBoot</code>  支持以下嵌入式 <code>servlet</code>  容器：</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">容器名称</th>\n<th style=\"text-align:center\">Servlet 版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Tomcat 10.0</td>\n<td style=\"text-align:center\">5.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Jetty</td>\n<td style=\"text-align:center\">5.1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Undertow 2.2</td>\n<td style=\"text-align:center\">5.1</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"springboot快速体验\"><a class=\"anchor\" href=\"#springboot快速体验\">#</a> SpringBoot 快速体验</h1>\n<blockquote>\n<p>1️⃣ 创建项目或模块，选择 <code>Spring Initializr</code> , <code>Java</code>  版本最低要求为 <code>17</code> 。</p>\n</blockquote>\n<p><img data-src=\"https://s11.ax1x.com/2024/01/17/pFFO2k9.png\" alt=\"pFFO2k9.png\" /></p>\n<blockquote>\n<p>2️⃣ 选择 <code>SpringBoot</code>  的版本，以及 <code>SpringWeb</code>  依赖。</p>\n</blockquote>\n<p><img data-src=\"https://s11.ax1x.com/2024/01/17/pFFOWf1.png\" alt=\"pFFOWf1.png\" /></p>\n<blockquote>\n<p>3️⃣ 目录结构如下：</p>\n</blockquote>\n<p><img data-src=\"https://s11.ax1x.com/2024/01/17/pFFOhSx.png\" alt=\"pFFOhSx.png\" /></p>\n<blockquote>\n<p>4️⃣  <code>pom.xml</code>  文件解析：</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>pom.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>project</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>modelVersion</span><span class=\"token punctuation\">></span></span>4.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>modelVersion</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 引入 Spring Boot3.x 父项目 --></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>parent</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-parent<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.2.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>relativePath</span><span class=\"token punctuation\">/></span></span> <span class=\"token comment\">&lt;!-- lookup parent from repository --></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>parent</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>top.rem.rain<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>springboot3-demo<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>0.0.1-SNAPSHOT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>springboot3-demo<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>description</span><span class=\"token punctuation\">></span></span>springboot3-demo<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>description</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>properties</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">&lt;!--Java Jdk 版本要求 17 及以上 --></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>java.version</span><span class=\"token punctuation\">></span></span>17<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>java.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>properties</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 引入 spring-boot-starter-web, 支持 web 开发 --></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-web<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 引入单元测试 starter--></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token comment\">&lt;!--SpringBoot maven 插件，支持 maven 的全流程命令以及程序运行 --></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-maven-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>project</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>5️⃣ 在 <code>application.properties</code>  配置文件中指定端口。</p>\n</blockquote>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"><span>application.properties</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#应用启动端口</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token attr-name\">server.port</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">8080</span></pre></td></tr></table></figure><blockquote>\n<p>6️⃣ 编写一个 <code>Controller</code>  类。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>springboot3demo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestMapping</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RestController</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Controller</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/spring\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getSpring</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"hello,my is SpringBoot3.x\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>7️⃣ 启动应用。</p>\n</blockquote>\n<p><img data-src=\"https://s11.ax1x.com/2024/01/17/pFFOjpt.png\" alt=\"pFFOjpt.png\" /></p>\n<blockquote>\n<p>8️⃣ 使用浏览器访问 <code>http://localhost:8080/spring</code> ， 接口结果如下：</p>\n</blockquote>\n<p><img data-src=\"https://s11.ax1x.com/2024/01/17/pFFOv1P.png\" alt=\"pFFOv1P.png\" /></p>\n<h1 id=\"springboot依赖管理机制\"><a class=\"anchor\" href=\"#springboot依赖管理机制\">#</a> SpringBoot 依赖管理机制</h1>\n<ol>\n<li>为什么导入 <code>spring-boot-starter-web</code>  所有相关依赖都导入了进来？\n<ol>\n<li>开发什么场景，导入什么场景启动器。</li>\n<li>导入场景启动器，场景启动器会自动把这个场景的所有核心依赖全部导入进来。</li>\n</ol>\n</li>\n<li>为什么不需要写版本号？\n<ol>\n<li>每个 <code>boot</code>  项目都有一个父项目 <code>spring-boot-starter-parent</code> 。</li>\n<li><code>parent</code>  的父项目是 <code>spring-boot-dependencies</code> 。</li>\n<li>父项目版本仲裁中心， <code>Spring</code>  官方已经把常见 <code>jar</code>  的依赖版本都做好了声明。</li>\n</ol>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>spring-boot-dependencies-3.2.1.pom.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>project</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>modelVersion</span><span class=\"token punctuation\">></span></span>4.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>modelVersion</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-dependencies<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.2.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>packaging</span><span class=\"token punctuation\">></span></span>pom<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>packaging</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>spring-boot-dependencies<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>description</span><span class=\"token punctuation\">></span></span>Spring Boot Dependencies<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>description</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>url</span><span class=\"token punctuation\">></span></span>https://spring.io/projects/spring-boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>url</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>licenses</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>license</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>Apache License, Version 2.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>url</span><span class=\"token punctuation\">></span></span>https://www.apache.org/licenses/LICENSE-2.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>url</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>license</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>licenses</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>developers</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>developer</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>Spring<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>email</span><span class=\"token punctuation\">></span></span>ask@spring.io<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>email</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>organization</span><span class=\"token punctuation\">></span></span>VMware, Inc.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>organization</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>organizationUrl</span><span class=\"token punctuation\">></span></span>https://www.spring.io<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>organizationUrl</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>developer</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>developers</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scm</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>url</span><span class=\"token punctuation\">></span></span>https://github.com/spring-projects/spring-boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>url</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scm</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>properties</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>activemq.version</span><span class=\"token punctuation\">></span></span>5.18.3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>activemq.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>angus-mail.version</span><span class=\"token punctuation\">></span></span>2.0.2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>angus-mail.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artemis.version</span><span class=\"token punctuation\">></span></span>2.31.2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artemis.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>aspectj.version</span><span class=\"token punctuation\">></span></span>1.9.21<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>aspectj.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>assertj.version</span><span class=\"token punctuation\">></span></span>3.24.2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>assertj.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>awaitility.version</span><span class=\"token punctuation\">></span></span>4.2.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>awaitility.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>brave.version</span><span class=\"token punctuation\">></span></span>5.16.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>brave.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build-helper-maven-plugin.version</span><span class=\"token punctuation\">></span></span>3.4.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build-helper-maven-plugin.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>byte-buddy.version</span><span class=\"token punctuation\">></span></span>1.14.10<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>byte-buddy.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>cache2k.version</span><span class=\"token punctuation\">></span></span>2.6.1.Final<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>cache2k.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>caffeine.version</span><span class=\"token punctuation\">></span></span>3.1.8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>caffeine.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>cassandra-driver.version</span><span class=\"token punctuation\">></span></span>4.17.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>cassandra-driver.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>classmate.version</span><span class=\"token punctuation\">></span></span>1.6.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>classmate.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>commons-codec.version</span><span class=\"token punctuation\">></span></span>1.16.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>commons-codec.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>commons-dbcp2.version</span><span class=\"token punctuation\">></span></span>2.10.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>commons-dbcp2.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>commons-lang3.version</span><span class=\"token punctuation\">></span></span>3.13.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>commons-lang3.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>commons-pool.version</span><span class=\"token punctuation\">></span></span>1.6<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>commons-pool.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>commons-pool2.version</span><span class=\"token punctuation\">></span></span>2.12.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>commons-pool2.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    //..........配置太多此处省略，只展示一部分，知道这个事就可以</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>properties</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencyManagement</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      //.........</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencyManagement</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pluginManagement</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        //.........</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pluginManagement</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>project</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>第三方 <code>jar</code>  包。\n<ol>\n<li>父项目中没有进行管理的自行声明即可。</li>\n</ol>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba.fastjson2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>fastjson2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.0.25<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"springboot自动配置机制\"><a class=\"anchor\" href=\"#springboot自动配置机制\">#</a> SpringBoot 自动配置机制</h1>\n<h2 id=\"初步理解\"><a class=\"anchor\" href=\"#初步理解\">#</a> 初步理解</h2>\n<ol>\n<li>自动配置 <code>Tomcat</code> 、 <code>SpringMVC</code>  等。\n<ol>\n<li>导入场景后容器就会自动配置好这个场景的核心组件。</li>\n<li>之前需要自己手动去写 <code>DispatcherServlet</code> 、 <code>ViewResolver</code>  等配置，现在这些配置已经自动配置好了，容器中有了什么组件就具备什么功能。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Springboot3DemoApplication.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>springboot3demo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>autoconfigure<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringBootApplication</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootApplication</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Springboot3DemoApplication</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 1. 局部变量类型的自动推断</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">var</span> ioc <span class=\"token operator\">=</span> <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Springboot3DemoApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 2. 获取容器中所有组件的名字</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> names <span class=\"token operator\">=</span> ioc<span class=\"token punctuation\">.</span><span class=\"token function\">getBeanDefinitionNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 3. 挨个遍历：</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// dispatcherServlet、beanNameViewResolver、characterEncodingFilter、multipartResolver</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// SpringBoot 把以前配置的核心组件现在都给我们自动配置好了。</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name <span class=\"token operator\">:</span> names<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>执行结果如下：</li>\n</ol>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"><span>执行结果</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>C:\\LightRainData\\IDEA\\JDK\\JDK-17.0.6\\bin\\java.exe -XX:TieredStopAtLevel&#x3D;1 -Dspring.output.ansi.enabled&#x3D;always -Dcom.sun.management.jmxremote -Dspring.jmx.enabled&#x3D;true -Dspring.liveBeansView.mbeanDomain -Dspring.application.admin.enabled&#x3D;true &quot;-Dmanagement.endpoints.jmx.exposure.include&#x3D;*&quot; &quot;-javaagent:C:\\LightRainData\\IDEA\\IntelliJ IDEA 2022.3.2\\lib\\idea_rt.jar&#x3D;1541:C:\\LightRainData\\IDEA\\IntelliJ IDEA 2022.3.2\\bin&quot; -Dfile.encoding&#x3D;UTF-8 -classpath D:\\ 项目 \\gitee\\springboot3-demo\\target\\classes;C:\\Users\\LightRain\\.m2\\repository\\org\\springframework\\boot\\spring-boot-starter-web\\3.2.1\\spring-boot-starter-web-3.2.1.jar;C:\\Users\\LightRain\\.m2\\repository\\org\\springframework\\boot\\spring-boot-starter\\3.2.1\\spring-boot-starter-3.2.1.jar;C:\\Users\\LightRain\\.m2\\repository\\org\\springframework\\boot\\spring-boot\\3.2.1\\spring-boot-3.2.1.jar;C:\\Users\\LightRain\\.m2\\repository\\org\\springframework\\boot\\spring-boot-autoconfigure\\3.2.1\\spring-boot-autoconfigure-3.2.1.jar;C:\\Users\\LightRain\\.m2\\repository\\org\\springframework\\boot\\spring-boot-starter-logging\\3.2.1\\spring-boot-starter-logging-3.2.1.jar;C:\\Users\\LightRain\\.m2\\repository\\ch\\qos\\logback\\logback-classic\\1.4.14\\logback-classic-1.4.14.jar;C:\\Users\\LightRain\\.m2\\repository\\ch\\qos\\logback\\logback-core\\1.4.14\\logback-core-1.4.14.jar;C:\\Users\\LightRain\\.m2\\repository\\org\\apache\\logging\\log4j\\log4j-to-slf4j\\2.21.1\\log4j-to-slf4j-2.21.1.jar;C:\\Users\\LightRain\\.m2\\repository\\org\\apache\\logging\\log4j\\log4j-api\\2.21.1\\log4j-api-2.21.1.jar;C:\\Users\\LightRain\\.m2\\repository\\org\\slf4j\\jul-to-slf4j\\2.0.9\\jul-to-slf4j-2.0.9.jar;C:\\Users\\LightRain\\.m2\\repository\\jakarta\\annotation\\jakarta.annotation-api\\2.1.1\\jakarta.annotation-api-2.1.1.jar;C:\\Users\\LightRain\\.m2\\repository\\org\\yaml\\snakeyaml\\2.2\\snakeyaml-2.2.jar;C:\\Users\\LightRain\\.m2\\repository\\org\\springframework\\boot\\spring-boot-starter-json\\3.2.1\\spring-boot-starter-json-3.2.1.jar;C:\\Users\\LightRain\\.m2\\repository\\com\\fasterxml\\jackson\\core\\jackson-databind\\2.15.3\\jackson-databind-2.15.3.jar;C:\\Users\\LightRain\\.m2\\repository\\com\\fasterxml\\jackson\\core\\jackson-annotations\\2.15.3\\jackson-annotations-2.15.3.jar;C:\\Users\\LightRain\\.m2\\repository\\com\\fasterxml\\jackson\\core\\jackson-core\\2.15.3\\jackson-core-2.15.3.jar;C:\\Users\\LightRain\\.m2\\repository\\com\\fasterxml\\jackson\\datatype\\jackson-datatype-jdk8\\2.15.3\\jackson-datatype-jdk8-2.15.3.jar;C:\\Users\\LightRain\\.m2\\repository\\com\\fasterxml\\jackson\\datatype\\jackson-datatype-jsr310\\2.15.3\\jackson-datatype-jsr310-2.15.3.jar;C:\\Users\\LightRain\\.m2\\repository\\com\\fasterxml\\jackson\\module\\jackson-module-parameter-names\\2.15.3\\jackson-module-parameter-names-2.15.3.jar;C:\\Users\\LightRain\\.m2\\repository\\org\\springframework\\boot\\spring-boot-starter-tomcat\\3.2.1\\spring-boot-starter-tomcat-3.2.1.jar;C:\\Users\\LightRain\\.m2\\repository\\org\\apache\\tomcat\\embed\\tomcat-embed-core\\10.1.17\\tomcat-embed-core-10.1.17.jar;C:\\Users\\LightRain\\.m2\\repository\\org\\apache\\tomcat\\embed\\tomcat-embed-el\\10.1.17\\tomcat-embed-el-10.1.17.jar;C:\\Users\\LightRain\\.m2\\repository\\org\\apache\\tomcat\\embed\\tomcat-embed-websocket\\10.1.17\\tomcat-embed-websocket-10.1.17.jar;C:\\Users\\LightRain\\.m2\\repository\\org\\springframework\\spring-web\\6.1.2\\spring-web-6.1.2.jar;C:\\Users\\LightRain\\.m2\\repository\\org\\springframework\\spring-beans\\6.1.2\\spring-beans-6.1.2.jar;C:\\Users\\LightRain\\.m2\\repository\\io\\micrometer\\micrometer-observation\\1.12.1\\micrometer-observation-1.12.1.jar;C:\\Users\\LightRain\\.m2\\repository\\io\\micrometer\\micrometer-commons\\1.12.1\\micrometer-commons-1.12.1.jar;C:\\Users\\LightRain\\.m2\\repository\\org\\springframework\\spring-webmvc\\6.1.2\\spring-webmvc-6.1.2.jar;C:\\Users\\LightRain\\.m2\\repository\\org\\springframework\\spring-aop\\6.1.2\\spring-aop-6.1.2.jar;C:\\Users\\LightRain\\.m2\\repository\\org\\springframework\\spring-context\\6.1.2\\spring-context-6.1.2.jar;C:\\Users\\LightRain\\.m2\\repository\\org\\springframework\\spring-expression\\6.1.2\\spring-expression-6.1.2.jar;C:\\Users\\LightRain\\.m2\\repository\\org\\slf4j\\slf4j-api\\2.0.9\\slf4j-api-2.0.9.jar;C:\\Users\\LightRain\\.m2\\repository\\org\\springframework\\spring-core\\6.1.2\\spring-core-6.1.2.jar;C:\\Users\\LightRain\\.m2\\repository\\org\\springframework\\spring-jcl\\6.1.2\\spring-jcl-6.1.2.jar top.rem.rain.springboot3demo.Springboot3DemoApplication</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  .   ____          _            __ _ _</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> &#x2F;\\\\ &#x2F;___&#39;_ __ _ _(_)_ __  __ _ \\ \\ \\ \\</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>( ( )\\___ | &#39;_ | &#39;_| | &#39;_ \\&#x2F;_&#96; | \\ \\ \\ \\</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> \\\\&#x2F;  ___)| |_)| | | | | || (_| |  ) ) ) )</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  &#39;  |____| .__|_| |_|_| |_\\__, | &#x2F;&#x2F;&#x2F;&#x2F;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;|_|&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;|___&#x2F;&#x3D;&#x2F;_&#x2F;_&#x2F;_&#x2F;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> :: Spring Boot ::                (v3.2.1)</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>2024-01-17T03:42:52.148+08:00  INFO 75548 --- [           main] t.r.r.s.Springboot3DemoApplication       : Starting Springboot3DemoApplication using Java 17.0.6 with PID 75548 (D:\\ 项目 \\gitee\\springboot3-demo\\target\\classes started by LightRain in D:\\ 项目 \\gitee\\springboot3-demo)</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>2024-01-17T03:42:52.150+08:00  INFO 75548 --- [           main] t.r.r.s.Springboot3DemoApplication       : No active profile set, falling back to 1 default profile: &quot;default&quot;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>2024-01-17T03:42:52.721+08:00  INFO 75548 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 8080 (http)</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>2024-01-17T03:42:52.730+08:00  INFO 75548 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>2024-01-17T03:42:52.730+08:00  INFO 75548 --- [           main] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat&#x2F;10.1.17]</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>2024-01-17T03:42:52.780+08:00  INFO 75548 --- [           main] o.a.c.c.C.[Tomcat].[localhost].[&#x2F;]       : Initializing Spring embedded WebApplicationContext</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>2024-01-17T03:42:52.780+08:00  INFO 75548 --- [           main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 595 ms</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>2024-01-17T03:42:53.009+08:00  INFO 75548 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8080 (http) with context path &#39;&#39;</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>2024-01-17T03:42:53.015+08:00  INFO 75548 --- [           main] t.r.r.s.Springboot3DemoApplication       : Started Springboot3DemoApplication in 1.127 seconds (process running for 1.617)</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>org.springframework.context.annotation.internalConfigurationAnnotationProcessor</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>org.springframework.context.annotation.internalAutowiredAnnotationProcessor</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>org.springframework.context.annotation.internalCommonAnnotationProcessor</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>org.springframework.context.event.internalEventListenerProcessor</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>org.springframework.context.event.internalEventListenerFactory</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>springboot3DemoApplication</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>org.springframework.boot.autoconfigure.internalCachingMetadataReaderFactory</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>controller</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>org.springframework.boot.autoconfigure.AutoConfigurationPackages</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>propertySourcesPlaceholderConfigurer</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>org.springframework.boot.autoconfigure.ssl.SslAutoConfiguration</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>fileWatcher</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>sslPropertiesSslBundleRegistrar</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>sslBundleRegistry</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>org.springframework.boot.context.internalConfigurationPropertiesBinder</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>org.springframework.boot.context.properties.BoundConfigurationProperties</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>org.springframework.boot.context.properties.EnableConfigurationPropertiesRegistrar.methodValidationExcludeFilter</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>spring.ssl-org.springframework.boot.autoconfigure.ssl.SslProperties</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration$TomcatWebSocketConfiguration</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>websocketServletWebServerCustomizer</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryConfiguration$EmbeddedTomcat</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>tomcatServletWebServerFactory</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>servletWebServerFactoryCustomizer</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>tomcatServletWebServerFactoryCustomizer</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>server-org.springframework.boot.autoconfigure.web.ServerProperties</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>webServerFactoryCustomizerBeanPostProcessor</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>errorPageRegistrarBeanPostProcessor</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletConfiguration</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>dispatcherServlet</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>spring.mvc-org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletRegistrationConfiguration</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>dispatcherServletRegistration</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>org.springframework.boot.autoconfigure.task.TaskExecutorConfigurations$ThreadPoolTaskExecutorBuilderConfiguration</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>threadPoolTaskExecutorBuilder</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>org.springframework.boot.autoconfigure.task.TaskExecutorConfigurations$TaskExecutorBuilderConfiguration</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>taskExecutorBuilder</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>org.springframework.boot.autoconfigure.task.TaskExecutorConfigurations$SimpleAsyncTaskExecutorBuilderConfiguration</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>simpleAsyncTaskExecutorBuilder</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>org.springframework.boot.autoconfigure.task.TaskExecutorConfigurations$TaskExecutorConfiguration</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>applicationTaskExecutor</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>spring.task.execution-org.springframework.boot.autoconfigure.task.TaskExecutionProperties</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$WhitelabelErrorViewConfiguration</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>error</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>beanNameViewResolver</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$DefaultErrorViewResolverConfiguration</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>conventionErrorViewResolver</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>spring.web-org.springframework.boot.autoconfigure.web.WebProperties</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>errorAttributes</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>basicErrorController</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>errorPageCustomizer</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>preserveErrorControllerTargetClassPostProcessor</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>welcomePageHandlerMapping</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>welcomePageNotAcceptableHandlerMapping</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>localeResolver</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>themeResolver</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>flashMapManager</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>mvcConversionService</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>mvcValidator</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>mvcContentNegotiationManager</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>requestMappingHandlerMapping</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>mvcPatternParser</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>mvcUrlPathHelper</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>mvcPathMatcher</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>viewControllerHandlerMapping</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>beanNameHandlerMapping</pre></td></tr><tr><td data-num=\"93\"></td><td><pre>routerFunctionMapping</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>resourceHandlerMapping</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>mvcResourceUrlProvider</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>defaultServletHandlerMapping</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>requestMappingHandlerAdapter</pre></td></tr><tr><td data-num=\"98\"></td><td><pre>handlerFunctionAdapter</pre></td></tr><tr><td data-num=\"99\"></td><td><pre>mvcUriComponentsContributor</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>httpRequestHandlerAdapter</pre></td></tr><tr><td data-num=\"101\"></td><td><pre>simpleControllerHandlerAdapter</pre></td></tr><tr><td data-num=\"102\"></td><td><pre>handlerExceptionResolver</pre></td></tr><tr><td data-num=\"103\"></td><td><pre>mvcViewResolver</pre></td></tr><tr><td data-num=\"104\"></td><td><pre>mvcHandlerMappingIntrospector</pre></td></tr><tr><td data-num=\"105\"></td><td><pre>viewNameTranslator</pre></td></tr><tr><td data-num=\"106\"></td><td><pre>org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter</pre></td></tr><tr><td data-num=\"107\"></td><td><pre>defaultViewResolver</pre></td></tr><tr><td data-num=\"108\"></td><td><pre>viewResolver</pre></td></tr><tr><td data-num=\"109\"></td><td><pre>requestContextFilter</pre></td></tr><tr><td data-num=\"110\"></td><td><pre>org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration</pre></td></tr><tr><td data-num=\"111\"></td><td><pre>formContentFilter</pre></td></tr><tr><td data-num=\"112\"></td><td><pre>org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration</pre></td></tr><tr><td data-num=\"113\"></td><td><pre>mbeanExporter</pre></td></tr><tr><td data-num=\"114\"></td><td><pre>objectNamingStrategy</pre></td></tr><tr><td data-num=\"115\"></td><td><pre>mbeanServer</pre></td></tr><tr><td data-num=\"116\"></td><td><pre>spring.jmx-org.springframework.boot.autoconfigure.jmx.JmxProperties</pre></td></tr><tr><td data-num=\"117\"></td><td><pre>org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration</pre></td></tr><tr><td data-num=\"118\"></td><td><pre>springApplicationAdminRegistrar</pre></td></tr><tr><td data-num=\"119\"></td><td><pre>org.springframework.boot.autoconfigure.aop.AopAutoConfiguration$ClassProxyingConfiguration</pre></td></tr><tr><td data-num=\"120\"></td><td><pre>forceAutoProxyCreatorToUseClassProxying</pre></td></tr><tr><td data-num=\"121\"></td><td><pre>org.springframework.boot.autoconfigure.aop.AopAutoConfiguration</pre></td></tr><tr><td data-num=\"122\"></td><td><pre>org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration</pre></td></tr><tr><td data-num=\"123\"></td><td><pre>applicationAvailability</pre></td></tr><tr><td data-num=\"124\"></td><td><pre>org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration</pre></td></tr><tr><td data-num=\"125\"></td><td><pre>standardJacksonObjectMapperBuilderCustomizer</pre></td></tr><tr><td data-num=\"126\"></td><td><pre>spring.jackson-org.springframework.boot.autoconfigure.jackson.JacksonProperties</pre></td></tr><tr><td data-num=\"127\"></td><td><pre>org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration</pre></td></tr><tr><td data-num=\"128\"></td><td><pre>jacksonObjectMapperBuilder</pre></td></tr><tr><td data-num=\"129\"></td><td><pre>org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration</pre></td></tr><tr><td data-num=\"130\"></td><td><pre>parameterNamesModule</pre></td></tr><tr><td data-num=\"131\"></td><td><pre>org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration</pre></td></tr><tr><td data-num=\"132\"></td><td><pre>jacksonObjectMapper</pre></td></tr><tr><td data-num=\"133\"></td><td><pre>org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonMixinConfiguration</pre></td></tr><tr><td data-num=\"134\"></td><td><pre>jsonMixinModuleEntries</pre></td></tr><tr><td data-num=\"135\"></td><td><pre>jsonMixinModule</pre></td></tr><tr><td data-num=\"136\"></td><td><pre>org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration</pre></td></tr><tr><td data-num=\"137\"></td><td><pre>jsonComponentModule</pre></td></tr><tr><td data-num=\"138\"></td><td><pre>org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration</pre></td></tr><tr><td data-num=\"139\"></td><td><pre>org.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration</pre></td></tr><tr><td data-num=\"140\"></td><td><pre>lifecycleProcessor</pre></td></tr><tr><td data-num=\"141\"></td><td><pre>spring.lifecycle-org.springframework.boot.autoconfigure.context.LifecycleProperties</pre></td></tr><tr><td data-num=\"142\"></td><td><pre>org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration$StringHttpMessageConverterConfiguration</pre></td></tr><tr><td data-num=\"143\"></td><td><pre>stringHttpMessageConverter</pre></td></tr><tr><td data-num=\"144\"></td><td><pre>org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration$MappingJackson2HttpMessageConverterConfiguration</pre></td></tr><tr><td data-num=\"145\"></td><td><pre>mappingJackson2HttpMessageConverter</pre></td></tr><tr><td data-num=\"146\"></td><td><pre>org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration</pre></td></tr><tr><td data-num=\"147\"></td><td><pre>org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration</pre></td></tr><tr><td data-num=\"148\"></td><td><pre>messageConverters</pre></td></tr><tr><td data-num=\"149\"></td><td><pre>org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration</pre></td></tr><tr><td data-num=\"150\"></td><td><pre>spring.info-org.springframework.boot.autoconfigure.info.ProjectInfoProperties</pre></td></tr><tr><td data-num=\"151\"></td><td><pre>org.springframework.boot.autoconfigure.sql.init.SqlInitializationAutoConfiguration</pre></td></tr><tr><td data-num=\"152\"></td><td><pre>spring.sql.init-org.springframework.boot.autoconfigure.sql.init.SqlInitializationProperties</pre></td></tr><tr><td data-num=\"153\"></td><td><pre>org.springframework.boot.sql.init.dependency.DatabaseInitializationDependencyConfigurer$DependsOnDatabaseInitializationPostProcessor</pre></td></tr><tr><td data-num=\"154\"></td><td><pre>org.springframework.boot.autoconfigure.task.TaskSchedulingConfigurations$ThreadPoolTaskSchedulerBuilderConfiguration</pre></td></tr><tr><td data-num=\"155\"></td><td><pre>threadPoolTaskSchedulerBuilder</pre></td></tr><tr><td data-num=\"156\"></td><td><pre>org.springframework.boot.autoconfigure.task.TaskSchedulingConfigurations$TaskSchedulerBuilderConfiguration</pre></td></tr><tr><td data-num=\"157\"></td><td><pre>taskSchedulerBuilder</pre></td></tr><tr><td data-num=\"158\"></td><td><pre>org.springframework.boot.autoconfigure.task.TaskSchedulingConfigurations$SimpleAsyncTaskSchedulerBuilderConfiguration</pre></td></tr><tr><td data-num=\"159\"></td><td><pre>simpleAsyncTaskSchedulerBuilder</pre></td></tr><tr><td data-num=\"160\"></td><td><pre>org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration</pre></td></tr><tr><td data-num=\"161\"></td><td><pre>spring.task.scheduling-org.springframework.boot.autoconfigure.task.TaskSchedulingProperties</pre></td></tr><tr><td data-num=\"162\"></td><td><pre>org.springframework.boot.autoconfigure.web.client.RestClientAutoConfiguration</pre></td></tr><tr><td data-num=\"163\"></td><td><pre>httpMessageConvertersRestClientCustomizer</pre></td></tr><tr><td data-num=\"164\"></td><td><pre>restClientSsl</pre></td></tr><tr><td data-num=\"165\"></td><td><pre>restClientBuilderConfigurer</pre></td></tr><tr><td data-num=\"166\"></td><td><pre>restClientBuilder</pre></td></tr><tr><td data-num=\"167\"></td><td><pre>org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration</pre></td></tr><tr><td data-num=\"168\"></td><td><pre>restTemplateBuilderConfigurer</pre></td></tr><tr><td data-num=\"169\"></td><td><pre>restTemplateBuilder</pre></td></tr><tr><td data-num=\"170\"></td><td><pre>org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration$TomcatWebServerFactoryCustomizerConfiguration</pre></td></tr><tr><td data-num=\"171\"></td><td><pre>tomcatWebServerFactoryCustomizer</pre></td></tr><tr><td data-num=\"172\"></td><td><pre>org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration</pre></td></tr><tr><td data-num=\"173\"></td><td><pre>org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration</pre></td></tr><tr><td data-num=\"174\"></td><td><pre>characterEncodingFilter</pre></td></tr><tr><td data-num=\"175\"></td><td><pre>localeCharsetMappingsCustomizer</pre></td></tr><tr><td data-num=\"176\"></td><td><pre>org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration</pre></td></tr><tr><td data-num=\"177\"></td><td><pre>multipartConfigElement</pre></td></tr><tr><td data-num=\"178\"></td><td><pre>multipartResolver</pre></td></tr><tr><td data-num=\"179\"></td><td><pre>spring.servlet.multipart-org.springframework.boot.autoconfigure.web.servlet.MultipartProperties</pre></td></tr><tr><td data-num=\"180\"></td><td><pre>org.springframework.aop.config.internalAutoProxyCreator</pre></td></tr></table></figure></li>\n<li>默认包扫描规则\n<ol>\n<li><code>@SpringBootApplication</code>  标注的类就是主程序类。</li>\n<li><code>SpringBoot</code>  只会扫描主程序所在的包及其下面的子包，自动 <code>component-scan</code>  功能，在主程序的包之外，哪怕写了 <code>MVC</code>  组件，注解也无法扫描并交由 <code>IOC</code>  容器来处理。</li>\n<li>自定义扫描路径，如果非要放在默认之外，需要给注解加上内容配置。\n<ol>\n<li><code>@SpringBootApplication(scanBasePackages = &quot;top.rem.rain&quot;)</code></li>\n<li><code>@ComponentScan(&quot;top.rem.rain&quot;)</code>  直接指定扫描的路径，这是因为上面的 <code>@SpringBootApplication</code>  注解包含内嵌了三个注解分别是： <code>@SpringBootConfiguration</code> 、 <code>@EnableAutoConfiguration</code> 、 <code>@ComponentScan</code> 。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>默认配置值\n<ol>\n<li>配置文件的所有配置项是和某个类的对象值进行绑定的，可以在配置文件中利用 <code>servier.port=8080</code>  配置，然后使用 <code>ctrl+鼠标左键</code> 进入对应的配置类中。</li>\n<li>绑定了配置文件中每一项值的类那就是属性类。</li>\n<li>比如：\n<ol>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmctYm9vdC9kb2NzL2N1cnJlbnQvcmVmZXJlbmNlL2h0bWwvYXBwbGljYXRpb24tcHJvcGVydGllcy5odG1sI2FwcGVuZGl4LmFwcGxpY2F0aW9uLXByb3BlcnRpZXMuc2VydmVy\">官方属性文档</span>。</li>\n<li><code>MultipartProperties</code>  绑定了所有文件上传相关的配置。</li>\n<li><code>ServerProperties</code>  绑定了所有 <code>Tomcat</code>  服务器有关的配置。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>按需要自动加载配置。\n<ol>\n<li>导入场景 <code>spring-boot-starter-web</code> 。</li>\n<li>场景启动器除了会导入相关功能依赖，还会导入一个 <code>spring-boot-starter</code>  它是所有 <code>starter</code>  的基础核心。</li>\n<li><code>spring-boot-starter</code>  导入了一个 <code>spring-boot-autoconfigure</code>  包，这个包里面都是各种场景的 <code>AutoConfiguration</code>  自动配置类。</li>\n<li>虽然全场景的自动配置都在 <code>spring-boot-autoconfigure</code>  这个包中，但不全是开启的，导入哪个场景就开启哪个自动配置。</li>\n</ol>\n</li>\n<li>总结：导入场景启动器会触发 <code>spring-boot-autoconfigure</code>  这个包的自动配置，在容器中就会具有相应场景的功能。</li>\n</ol>\n<h2 id=\"自动配置\"><a class=\"anchor\" href=\"#自动配置\">#</a> 自动配置</h2>\n<ol>\n<li>\n<p>导入 <code>starter-web</code>  后就代表导入了 <code>web</code>  开发场景。</p>\n<ol>\n<li>场景启动器会导入相关场景的所有依赖： <code>starter-json</code> 、 <code>starter-tomcat</code> 、 <code>springmvc</code> 。</li>\n<li>每个场景启动器都会引入一个 <code>spring-boot-starter</code>  的核心场景启动器。</li>\n<li>核心场景启动器引入了 <code>spring-boot-autoconfigure</code>  包。</li>\n<li><code>spring-boot-autoconfigure</code>  包里包含了所有场景的所有配置。</li>\n<li>只要这个包下的所有类都能生效，那么就相当于 <code>SpringBoot</code>  官方写好的整合功能就生效。</li>\n<li><code>SpringBoot</code>  默认扫不到 <code>spring-boot-autoconfigure</code>  下写好的所有配置类，默认只扫描主程序所在的包，但利用下面主程序的注解就做到了导入。</li>\n</ol>\n</li>\n<li>\n<p>主程序： <code>@SpringBootApplication</code>  注解源码如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>SpringBootApplication.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>autoconfigure</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Documented</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Inherited</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Retention</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Target</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BeanNameGenerator</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringBootConfiguration</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TypeExcludeFilter</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ComponentScan</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Configuration</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FilterType</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ComponentScan<span class=\"token punctuation\">.</span>Filter</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AliasFor</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>TYPE<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token annotation punctuation\">@Documented</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token annotation punctuation\">@Inherited</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootConfiguration</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token annotation punctuation\">@EnableAutoConfiguration</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        excludeFilters <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token annotation punctuation\">@Filter</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                type <span class=\"token operator\">=</span> <span class=\"token class-name\">FilterType</span><span class=\"token punctuation\">.</span>CUSTOM<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                classes <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">TypeExcludeFilter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Filter</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                type <span class=\"token operator\">=</span> <span class=\"token class-name\">FilterType</span><span class=\"token punctuation\">.</span>CUSTOM<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                classes <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">AutoConfigurationExcludeFilter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">SpringBootApplication</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>   <span class=\"token annotation punctuation\">@AliasFor</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>           annotation <span class=\"token operator\">=</span> <span class=\"token class-name\">EnableAutoConfiguration</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>   <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">exclude</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>   <span class=\"token annotation punctuation\">@AliasFor</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>           annotation <span class=\"token operator\">=</span> <span class=\"token class-name\">EnableAutoConfiguration</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>   <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>   <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">excludeName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>   <span class=\"token annotation punctuation\">@AliasFor</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>           annotation <span class=\"token operator\">=</span> <span class=\"token class-name\">ComponentScan</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>           attribute <span class=\"token operator\">=</span> <span class=\"token string\">\"basePackages\"</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>   <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>   <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">scanBasePackages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>   <span class=\"token annotation punctuation\">@AliasFor</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>           annotation <span class=\"token operator\">=</span> <span class=\"token class-name\">ComponentScan</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>           attribute <span class=\"token operator\">=</span> <span class=\"token string\">\"basePackageClasses\"</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>   <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>   <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">scanBasePackageClasses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>   <span class=\"token annotation punctuation\">@AliasFor</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>           annotation <span class=\"token operator\">=</span> <span class=\"token class-name\">ComponentScan</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>           attribute <span class=\"token operator\">=</span> <span class=\"token string\">\"nameGenerator\"</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>   <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>   <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BeanNameGenerator</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">nameGenerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token class-name\">BeanNameGenerator</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>   <span class=\"token annotation punctuation\">@AliasFor</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>           annotation <span class=\"token operator\">=</span> <span class=\"token class-name\">Configuration</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>   <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>   <span class=\"token keyword\">boolean</span> <span class=\"token function\">proxyBeanMethods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li><code>@SpringBootApplication</code>  是由三个注解组成的： <code>SpringBootConfiguration</code> 、 <code>EnableAutoConfiguration</code> 、 <code>ComponentScan</code> 。</li>\n<li><code>SpringBoot</code>  默认只扫描自己主程序所在的包及其下面的子包。</li>\n<li><code>@EnableAutoConfiguration</code>  注解是 <code>SpringBoot</code>  开启自动配置的核心。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>EnableAutoConfiguration.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>autoconfigure</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Documented</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Inherited</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Retention</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Target</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Import</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>TYPE<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token annotation punctuation\">@Documented</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token annotation punctuation\">@Inherited</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token annotation punctuation\">@AutoConfigurationPackage</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token annotation punctuation\">@Import</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">AutoConfigurationImportSelector</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">EnableAutoConfiguration</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token class-name\">String</span> ENABLED_OVERRIDE_PROPERTY <span class=\"token operator\">=</span> <span class=\"token string\">\"spring.boot.enableautoconfiguration\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">exclude</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">excludeName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<blockquote>\n<p>在上面这个注解中可以看到有一个 <code>@Import</code>  注解， <code>@Import</code>  注解导入了一个 <code>AutoConfigurationImportSelector</code>  类，这个类的作用是批量导入组件， <code>@Import</code>  将指定的类或配置文件导入到当前类中，可以用于导入其它自定义类、配置文件等，但不会将其加入到 <code>IOC</code>  中，这个类内部的方法还获取了一些注册信息，其调试发现就是主程序所在的包路径，故帮助我们扫描主程序所在的包和子包路径下的所有组件。</p>\n</blockquote>\n<blockquote>\n<p><code>@AutoConfigurationPackage</code>  注解代表自动配置包，源码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>AutoConfigurationPackage.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>autoconfigure</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Documented</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Inherited</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Retention</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Target</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Import</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>TYPE<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token annotation punctuation\">@Documented</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token annotation punctuation\">@Inherited</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token annotation punctuation\">@Import</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">AutoConfigurationPackages<span class=\"token punctuation\">.</span>Registrar</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">AutoConfigurationPackage</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">basePackages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">basePackageClasses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>使用 <code>ctrl+鼠标左键</code> 进入 <code>AutoConfigurationImportSelector</code>  类中找到一个名为 <code>getAutoConfigurationEntry</code>  的方法，利用 <code>getAutoConfigurationEntry(annotationMetadata);</code>  给容器中批量导入一些组件，调用 <code>getCandidateConfigurations(annotationMetadata, attributes);</code>  获取所有需要导入到容器中的配置类，最后使用 <code>ImportCandidates.load(Class&lt;?&gt; annotation, ClassLoader classLoader)</code>  方法得到所有组件，将会从 <code>META-INF/spring/%s.imports</code>  位置来加载一个文件，文件位置在 <code>spring-boot-autoconfigure:3.2.1</code>  版本下的 <code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code> 。</p>\n</blockquote>\n<blockquote>\n<p><code>SpringBoot</code>  启动时会默认加载 <code>152</code>  个配置类，这些配置来自于 <code>spring-boot-autoconfigure:3.2.1</code>  下的 <code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code>  文件中指定的。</p>\n</blockquote>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"><span>org.springframework.boot.autoconfigure.AutoConfiguration.imports</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>org.springframework.boot.autoconfigure.aop.AopAutoConfiguration</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>org.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveDataAutoConfiguration</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveRepositoriesAutoConfiguration</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveDataAutoConfiguration</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveRepositoriesAutoConfiguration</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>org.springframework.boot.autoconfigure.data.elasticsearch.ReactiveElasticsearchRepositoriesAutoConfiguration</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>org.springframework.boot.autoconfigure.data.jdbc.JdbcRepositoriesAutoConfiguration</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>org.springframework.boot.autoconfigure.data.mongo.MongoReactiveDataAutoConfiguration</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>org.springframework.boot.autoconfigure.data.mongo.MongoReactiveRepositoriesAutoConfiguration</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>org.springframework.boot.autoconfigure.data.neo4j.Neo4jReactiveDataAutoConfiguration</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>org.springframework.boot.autoconfigure.data.neo4j.Neo4jReactiveRepositoriesAutoConfiguration</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>org.springframework.boot.autoconfigure.data.r2dbc.R2dbcDataAutoConfiguration</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>org.springframework.boot.autoconfigure.data.r2dbc.R2dbcRepositoriesAutoConfiguration</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchClientAutoConfiguration</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchRestClientAutoConfiguration</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>org.springframework.boot.autoconfigure.elasticsearch.ReactiveElasticsearchClientAutoConfiguration</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>org.springframework.boot.autoconfigure.graphql.GraphQlAutoConfiguration</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>org.springframework.boot.autoconfigure.graphql.data.GraphQlReactiveQueryByExampleAutoConfiguration</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>org.springframework.boot.autoconfigure.graphql.data.GraphQlReactiveQuerydslAutoConfiguration</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>org.springframework.boot.autoconfigure.graphql.data.GraphQlQueryByExampleAutoConfiguration</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>org.springframework.boot.autoconfigure.graphql.data.GraphQlQuerydslAutoConfiguration</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>org.springframework.boot.autoconfigure.graphql.reactive.GraphQlWebFluxAutoConfiguration</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>org.springframework.boot.autoconfigure.graphql.rsocket.GraphQlRSocketAutoConfiguration</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>org.springframework.boot.autoconfigure.graphql.rsocket.RSocketGraphQlClientAutoConfiguration</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>org.springframework.boot.autoconfigure.graphql.security.GraphQlWebFluxSecurityAutoConfiguration</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>org.springframework.boot.autoconfigure.graphql.security.GraphQlWebMvcSecurityAutoConfiguration</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>org.springframework.boot.autoconfigure.graphql.servlet.GraphQlWebMvcAutoConfiguration</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>org.springframework.boot.autoconfigure.influx.InfluxDbAutoConfiguration</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>org.springframework.boot.autoconfigure.jdbc.JdbcClientAutoConfiguration</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>org.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>org.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration</pre></td></tr><tr><td data-num=\"93\"></td><td><pre>org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>org.springframework.boot.autoconfigure.neo4j.Neo4jAutoConfiguration</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>org.springframework.boot.autoconfigure.netty.NettyAutoConfiguration</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>org.springframework.boot.autoconfigure.pulsar.PulsarAutoConfiguration</pre></td></tr><tr><td data-num=\"98\"></td><td><pre>org.springframework.boot.autoconfigure.pulsar.PulsarReactiveAutoConfiguration</pre></td></tr><tr><td data-num=\"99\"></td><td><pre>org.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>org.springframework.boot.autoconfigure.r2dbc.R2dbcAutoConfiguration</pre></td></tr><tr><td data-num=\"101\"></td><td><pre>org.springframework.boot.autoconfigure.r2dbc.R2dbcTransactionManagerAutoConfiguration</pre></td></tr><tr><td data-num=\"102\"></td><td><pre>org.springframework.boot.autoconfigure.reactor.ReactorAutoConfiguration</pre></td></tr><tr><td data-num=\"103\"></td><td><pre>org.springframework.boot.autoconfigure.rsocket.RSocketMessagingAutoConfiguration</pre></td></tr><tr><td data-num=\"104\"></td><td><pre>org.springframework.boot.autoconfigure.rsocket.RSocketRequesterAutoConfiguration</pre></td></tr><tr><td data-num=\"105\"></td><td><pre>org.springframework.boot.autoconfigure.rsocket.RSocketServerAutoConfiguration</pre></td></tr><tr><td data-num=\"106\"></td><td><pre>org.springframework.boot.autoconfigure.rsocket.RSocketStrategiesAutoConfiguration</pre></td></tr><tr><td data-num=\"107\"></td><td><pre>org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration</pre></td></tr><tr><td data-num=\"108\"></td><td><pre>org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration</pre></td></tr><tr><td data-num=\"109\"></td><td><pre>org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration</pre></td></tr><tr><td data-num=\"110\"></td><td><pre>org.springframework.boot.autoconfigure.security.reactive.ReactiveSecurityAutoConfiguration</pre></td></tr><tr><td data-num=\"111\"></td><td><pre>org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration</pre></td></tr><tr><td data-num=\"112\"></td><td><pre>org.springframework.boot.autoconfigure.security.rsocket.RSocketSecurityAutoConfiguration</pre></td></tr><tr><td data-num=\"113\"></td><td><pre>org.springframework.boot.autoconfigure.security.saml2.Saml2RelyingPartyAutoConfiguration</pre></td></tr><tr><td data-num=\"114\"></td><td><pre>org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration</pre></td></tr><tr><td data-num=\"115\"></td><td><pre>org.springframework.boot.autoconfigure.session.SessionAutoConfiguration</pre></td></tr><tr><td data-num=\"116\"></td><td><pre>org.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientAutoConfiguration</pre></td></tr><tr><td data-num=\"117\"></td><td><pre>org.springframework.boot.autoconfigure.security.oauth2.client.reactive.ReactiveOAuth2ClientAutoConfiguration</pre></td></tr><tr><td data-num=\"118\"></td><td><pre>org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerAutoConfiguration</pre></td></tr><tr><td data-num=\"119\"></td><td><pre>org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerAutoConfiguration</pre></td></tr><tr><td data-num=\"120\"></td><td><pre>org.springframework.boot.autoconfigure.security.oauth2.server.servlet.OAuth2AuthorizationServerAutoConfiguration</pre></td></tr><tr><td data-num=\"121\"></td><td><pre>org.springframework.boot.autoconfigure.security.oauth2.server.servlet.OAuth2AuthorizationServerJwtAutoConfiguration</pre></td></tr><tr><td data-num=\"122\"></td><td><pre>org.springframework.boot.autoconfigure.sql.init.SqlInitializationAutoConfiguration</pre></td></tr><tr><td data-num=\"123\"></td><td><pre>org.springframework.boot.autoconfigure.ssl.SslAutoConfiguration</pre></td></tr><tr><td data-num=\"124\"></td><td><pre>org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration</pre></td></tr><tr><td data-num=\"125\"></td><td><pre>org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration</pre></td></tr><tr><td data-num=\"126\"></td><td><pre>org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration</pre></td></tr><tr><td data-num=\"127\"></td><td><pre>org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration</pre></td></tr><tr><td data-num=\"128\"></td><td><pre>org.springframework.boot.autoconfigure.transaction.TransactionManagerCustomizationAutoConfiguration</pre></td></tr><tr><td data-num=\"129\"></td><td><pre>org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration</pre></td></tr><tr><td data-num=\"130\"></td><td><pre>org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration</pre></td></tr><tr><td data-num=\"131\"></td><td><pre>org.springframework.boot.autoconfigure.web.client.RestClientAutoConfiguration</pre></td></tr><tr><td data-num=\"132\"></td><td><pre>org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration</pre></td></tr><tr><td data-num=\"133\"></td><td><pre>org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration</pre></td></tr><tr><td data-num=\"134\"></td><td><pre>org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration</pre></td></tr><tr><td data-num=\"135\"></td><td><pre>org.springframework.boot.autoconfigure.web.reactive.ReactiveMultipartAutoConfiguration</pre></td></tr><tr><td data-num=\"136\"></td><td><pre>org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration</pre></td></tr><tr><td data-num=\"137\"></td><td><pre>org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration</pre></td></tr><tr><td data-num=\"138\"></td><td><pre>org.springframework.boot.autoconfigure.web.reactive.WebSessionIdResolverAutoConfiguration</pre></td></tr><tr><td data-num=\"139\"></td><td><pre>org.springframework.boot.autoconfigure.web.reactive.error.ErrorWebFluxAutoConfiguration</pre></td></tr><tr><td data-num=\"140\"></td><td><pre>org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorAutoConfiguration</pre></td></tr><tr><td data-num=\"141\"></td><td><pre>org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration</pre></td></tr><tr><td data-num=\"142\"></td><td><pre>org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration</pre></td></tr><tr><td data-num=\"143\"></td><td><pre>org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration</pre></td></tr><tr><td data-num=\"144\"></td><td><pre>org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration</pre></td></tr><tr><td data-num=\"145\"></td><td><pre>org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration</pre></td></tr><tr><td data-num=\"146\"></td><td><pre>org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration</pre></td></tr><tr><td data-num=\"147\"></td><td><pre>org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration</pre></td></tr><tr><td data-num=\"148\"></td><td><pre>org.springframework.boot.autoconfigure.websocket.reactive.WebSocketReactiveAutoConfiguration</pre></td></tr><tr><td data-num=\"149\"></td><td><pre>org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration</pre></td></tr><tr><td data-num=\"150\"></td><td><pre>org.springframework.boot.autoconfigure.websocket.servlet.WebSocketMessagingAutoConfiguration</pre></td></tr><tr><td data-num=\"151\"></td><td><pre>org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration</pre></td></tr><tr><td data-num=\"152\"></td><td><pre>org.springframework.boot.autoconfigure.webservices.client.WebServiceTemplateAutoConfiguration</pre></td></tr></table></figure><blockquote>\n<p>项目启动时会利用 <code>@Import</code>  批量导入组件，会把 <code>autoconfigure</code>  包下的 <code>xxxAutoConfiguration</code>  类导入进来，这就是自动配置类，虽然导入了这么多配置类，这些配置类并不会都将生效，而是在每一个自动配置类中都有一个条件注解 <code>@ConditionalOnxxx</code> , 只有条件成立才会生效。</p>\n</blockquote>\n<h2 id=\"核心流程总结\"><a class=\"anchor\" href=\"#核心流程总结\">#</a> 核心流程总结</h2>\n<ol>\n<li>导入 <code>starter</code>  就会导入 <code>autoconfigure</code>  包。</li>\n<li>在 <code>autoconfigure</code>  包下面有一个 <code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code>  文件，里面指定了所有启动要加载的自动配置类。</li>\n<li><code>@EnableAutoConfiguration</code>  注解会自动把上面文件里面的自动配置类导入进来，根据条件注解进行按需加载。</li>\n<li>符合条件的情况下 <code>xxxAutoConfiguration</code>  就会给容器中导入一堆组件，组件都是从 <code>xxxProperties</code>  中提取属性值， <code>xxxProperties</code>  和配置文件进行了绑定。</li>\n</ol>\n<h1 id=\"springboot核心技能\"><a class=\"anchor\" href=\"#springboot核心技能\">#</a> SpringBoot 核心技能</h1>\n<blockquote>\n<p><code>SpringBoot</code>  抛弃了传统的 <code>XML</code>  配置方式，改为全注解开发流程。</p>\n</blockquote>\n<h2 id=\"常用注解\"><a class=\"anchor\" href=\"#常用注解\">#</a> 常用注解</h2>\n<p><a href=\"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/java/spring/SpringBoot&amp;%E5%85%B6%E5%AE%83%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/\">🚀SpringBoot &amp; 其它常用注解</a></p>\n<h2 id=\"组件注册\"><a class=\"anchor\" href=\"#组件注册\">#</a> 组件注册</h2>\n<blockquote>\n<p>以前的步骤：通过 <code>Spring</code>  配置文件，进行组件注册，如果是纯 <code>XML</code>  配置方式还需要声明 <code>Bean</code>  对象，赋予唯一标识和全类名，然后通过 <code>set</code>  方法进行注入或其它注入方式来注入默认属性值。</p>\n</blockquote>\n<blockquote>\n<p>现在的步骤如下：</p>\n</blockquote>\n<ol>\n<li>编写一个配置类并在类上使用 <code>@Configuration</code>  注解进行标注，这将表示此类是 <code>SpringBoot</code>  的配置类，配置类也会被加入到 <code>IOC</code>  容器中 (可以通过 <code>ctrl+鼠标左键</code> 点击这个注解就可以看到里面内嵌了 <code>@Component</code>  注解)，也可以使用 <code>SpringBootConfiguration</code>  注解进行标注，其本质是一样的，所以 <code>Spring</code>  相关的核心配置使用 <code>SpringBoot</code>  的，而通用配置使用默认的。</li>\n<li>在配置类中，自定义方法配合 <code>Bean</code>  给容器中注册组件，如果是第三方的可以直接根据类型，写入配置类的方法，返回它的类型然后直接 <code>return new</code>  出来的对象。</li>\n<li><code>@Configuration</code>  注解在 <code>spring 5.2</code>  以后多了一个 <code>proxyBeanMethods</code>  属性，它是 <code>boolean</code>  类型的属性可以设置为 <code>true</code>  或 <code>false</code> , 默认值为 <code>true</code>  (代表是否代理 <code>Bean</code>  方法)，如果为 <code>true</code>  说明为代理对象调用方法，在获取这个对象的时候会从容器中检查有没有这个类对象，如果有就直接获取，没有就会创建一个类对象 (保持组件单实例)，其主要用于解决组件依赖问题，当不更改这个值，组件在配置类配置依赖时可以直接通过 <code>set</code>  方法然后传入配置类的其它组件的注入方法 (即带有 <code>Bean</code>  的方法)。如果不想有这种依赖关系，可以将值设置为 <code>false</code>  就是轻量级模式，设置为 <code>false</code>  对于单个 <code>Bean</code>  从容器中获取多次还是单实例的，但依赖的情况下， <code>Bean</code>  内部其它的 <code>Bean</code>  就不是 <code>IOC</code>  容器中的那个，而是一个新 <code>new</code>  的。</li>\n<li>使用 <code>Import</code>  注解导入第三方组件 (可以写在组件类 ( <code>@Conponent</code> 、 <code>@Controller</code>  等) 或配置类上面，与配置类的注解放在一起)，在括号中写入对应的 <code>.class</code>  字节码文件 (默认 <code>value</code>  值不用写属性，且是一个数组，可以导入多个组件到容器)，也可以使用全类名，对应 <code>name</code>  属性，其实不管怎么样默认 <code>IOC</code>  容器在注入组件的 <code>id</code>  时扔是使用全类名。</li>\n</ol>\n<blockquote>\n<p>因为在开发过程中可能会修改依赖，如果导入 <code>IOC</code>  的时候删掉之前一些用不到的依赖，这种情况下，本身靠字符串的全类名不会引起报错，但是使用字节码文件的时候，如果不存在这个类就会大面积报错。</p>\n</blockquote>\n<h2 id=\"条件注解\"><a class=\"anchor\" href=\"#条件注解\">#</a> 条件注解</h2>\n<blockquote>\n<p>如果注解指定的条件成立则触发指定行为，可以写在配置类或组件注解和配置类内部的 <code>@Bean</code>  方法上。</p>\n</blockquote>\n<ul>\n<li><code>@ConditionalOnClass</code> ：如果类路径中存在这个类则触发指定行为。</li>\n<li><code>@ConditionalOnMissingClass</code> ：如果类路径中不存在这个类则触发执行行为。</li>\n<li><code>@ConditionalOnBean</code> ：如果容器中存在这个 <code>Bean</code>  组件则触发指定行为。</li>\n<li><code>@ConditionalOnMissingBean</code> ：如果容器中不存在这个 <code>Bean</code>  组件则触发指定行为。</li>\n</ul>\n<blockquote>\n<p>比如：如果存在 <code>Pet</code>  这个类就给容器中放一个 <code>Cat</code>  组件并命名为 <code>cat1</code> , 否则就给容器中放一个 <code>Dog</code>  组件并命名为 <code>dog1</code> 。</p>\n</blockquote>\n<blockquote>\n<p>如果系统中有 <code>cat1</code>  这个组件就给容器中放一个 <code>PetDetails</code>  组件，命名为 <code>zhangsan</code> , 否则就命名为 <code>lisi</code> 。</p>\n</blockquote>\n<blockquote>\n<p>自定义实现 <code>Condition</code>  接口并编写相应规则即可。</p>\n</blockquote>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>@ConditionalOnBean（value &#x3D; 组件类型，name &#x3D; 组件名字）：判断容器中是否有这个类型的组件，并且名字是指定的值</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>@ConditionalOnRepositoryType (org.springframework.boot.autoconfigure.data)</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>@ConditionalOnDefaultWebSecurity (org.springframework.boot.autoconfigure.security)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>@ConditionalOnSingleCandidate (org.springframework.boot.autoconfigure.condition)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>@ConditionalOnWebApplication (org.springframework.boot.autoconfigure.condition)</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>@ConditionalOnWarDeployment (org.springframework.boot.autoconfigure.condition)</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>@ConditionalOnJndi (org.springframework.boot.autoconfigure.condition)</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>@ConditionalOnResource (org.springframework.boot.autoconfigure.condition)</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>@ConditionalOnExpression (org.springframework.boot.autoconfigure.condition)</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>@ConditionalOnClass (org.springframework.boot.autoconfigure.condition)</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>@ConditionalOnEnabledResourceChain (org.springframework.boot.autoconfigure.web)</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>@ConditionalOnMissingClass (org.springframework.boot.autoconfigure.condition)</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>@ConditionalOnNotWebApplication (org.springframework.boot.autoconfigure.condition)</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>@ConditionalOnProperty (org.springframework.boot.autoconfigure.condition)</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>@ConditionalOnCloudPlatform (org.springframework.boot.autoconfigure.condition)</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>@ConditionalOnBean (org.springframework.boot.autoconfigure.condition)</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>@ConditionalOnMissingBean (org.springframework.boot.autoconfigure.condition)</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>@ConditionalOnMissingFilterBean (org.springframework.boot.autoconfigure.web.servlet)</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>@Profile (org.springframework.context.annotation)</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>@ConditionalOnInitializedRestarter (org.springframework.boot.devtools.restart)</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>@ConditionalOnGraphQlSchema (org.springframework.boot.autoconfigure.graphql)</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>@ConditionalOnJava (org.springframework.boot.autoconfigure.condition)</pre></td></tr></table></figure><h2 id=\"属性绑定\"><a class=\"anchor\" href=\"#属性绑定\">#</a> 属性绑定</h2>\n<ol>\n<li><code>@ConfigurationProperties</code> ：声明组件的属性和配置文件哪些前缀开始项进行绑定，可以写在组件 <code>Bean</code>  上也可以写在配置类中的配置 <code>Bean</code>  的方法上。\n<ol>\n<li>将容器中任意组件 <code>(Bean)</code>  的属性值和配置文件的配置项的值进行绑定。\n<ol>\n<li>给容器中注册组件\n<ol>\n<li>在配置类外使用 <code>@ConfigurationProperties</code>  结合 <code>@Component</code> ，配置类内无需写任何方法。</li>\n<li>配置类内使用 <code>@Bean</code>  结合 <code>@ConfigurationProperties</code> ，配置类外不用写任何注解。</li>\n</ol>\n</li>\n<li>使用 <code>@ConfigurationProperties</code>  声明组件和配置文件的哪些配置项进行绑定。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li><code>@EnableConfigurationProperties</code> ：快速注册注解 (这是写于配置类上的注解，使用 <code>@Import</code>  注解导入的 <code>Bean</code>  不会进行属性绑定)。\n<ol>\n<li><code>SpringBoot</code>  默认只扫描自己主程序所在的包，如果导入第三方包，即使组件上标注了 <code>@Component</code>  和 <code>@ConfigurationProperties</code>  注解也没有用，此时就可以使用这个注解快速进行属性绑定并把组件注册到 <code>IOC</code>  容器中。</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"冷门注解\"><a class=\"anchor\" href=\"#冷门注解\">#</a> 冷门注解</h2>\n<h3 id=\"scope\"><a class=\"anchor\" href=\"#scope\">#</a> @Scope</h3>\n<blockquote>\n<p><code>@Scope</code>  注解源码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Scope.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Documented</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Retention</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Target</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AliasFor</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>TYPE<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>METHOD<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token annotation punctuation\">@Documented</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Scope</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token annotation punctuation\">@AliasFor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"scopeName\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token class-name\">String</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token annotation punctuation\">@AliasFor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token class-name\">String</span> <span class=\"token function\">scopeName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token class-name\">ScopedProxyMode</span> <span class=\"token function\">proxyMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token class-name\">ScopedProxyMode</span><span class=\"token punctuation\">.</span>DEFAULT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><code>scopeName</code> ：是为了声明 <code>Bean</code>  的作用域，在 <code>Spring 4.2</code>  版本之前有两种模式分别是： <code>singleton</code>  和 <code>prototype</code>  两种模式，在 <code>4.2</code>  之后新增了 <code>web</code>  作用域： <code>request</code> 、 <code>session</code> 、 <code>globalsession</code> 。\n<ul>\n<li><code>singleton</code> ：单例模式，即 <code>SpringIOC</code>  容器中只会有一个共享的 <code>Bean</code>  实例，这一个单一的实例会被存储到单例缓存中，当有请求或是引用时， <code>IOC</code>  容器都会返回存储在单例缓存中的同一个实例。</li>\n<li><code>prototype</code> ：多实例模式，即每次客户端向容器获取 <code>Bean</code>  时， <code>IOC</code>  容器都会创建一个新实例进行返回，与单例模式不同的是在 <code>IOC</code>  容器启动的时候并不会创建 <code>Bean</code>  实例，并且在有请求创建 <code>Bean</code>  实例之后也不会管理该实例的生命周期，而是由客户端来处理。</li>\n<li><code>request</code> ： <code>web</code>  应用针对每一次 <code>HTTP</code>  请求都会创建一个新的 <code>Bean</code>  实例，且该实例仅在这次 <code>HTTP</code>  请求中有效。</li>\n<li><code>session</code> ：针对每一个 <code>session</code>  都会创建一个 <code>Bean</code>  实例且生命周期为该 <code>session</code>  有效期间。</li>\n<li><code>globalsession</code> ：仅基于 <code>portlet</code>  的 <code>web</code>  应用才有意义，否则可以当作 <code>session</code>  来使用。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 也可以直接写对应的字符串，无视大小写</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Scope</span><span class=\"token punctuation\">(</span>scopeName <span class=\"token operator\">=</span> <span class=\"token class-name\">ConfigurableBeanFactory</span><span class=\"token punctuation\">.</span>SCOPE_SINGLETON<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@Scope</span><span class=\"token punctuation\">(</span>scopeName <span class=\"token operator\">=</span> <span class=\"token class-name\">ConfigurableBeanFactory</span><span class=\"token punctuation\">.</span>SCOPE_PROTOTYPE<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@Scope</span><span class=\"token punctuation\">(</span>scopeName <span class=\"token operator\">=</span> <span class=\"token class-name\">WebApplicationContext</span><span class=\"token punctuation\">.</span>SCOPE_REQUEST<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@Scope</span><span class=\"token punctuation\">(</span>scopeName <span class=\"token operator\">=</span> <span class=\"token class-name\">WebApplicationContext</span><span class=\"token punctuation\">.</span>SCOPE_SESSION<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@Scope</span><span class=\"token punctuation\">(</span>scopeName <span class=\"token operator\">=</span> <span class=\"token string\">\"globalSession\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"scopeproxymode\"><a class=\"anchor\" href=\"#scopeproxymode\">#</a> ScopeProxyMode</h4>\n<ul>\n<li><code>proxyMode</code>  表明了 <code>@Scope</code>  注解的 <code>Bean</code>  是否需要代理。\n<ul>\n<li><code>DEFAULT</code> ：它是 <code>proxyMode</code>  的默认值，一般情况下等同于 <code>NO</code> , 即不需要动态代理。</li>\n<li><code>NO</code> ：不需要动态代理，即返回的是 <code>Bean</code>  实例对象。</li>\n<li><code>INTERFACES</code> ：代理的对象是一个接口，即 <code>@Scope</code>  的作用对象是接口，这种情况是基于 <code>JDK</code>  实现的动态代理。</li>\n<li><code>TARGET_CLASS</code> ：代理的对象是一个类，即 <code>@Scope</code>  的作用对象是个类，是以生成目标类扩展的方式创建代理，基于 <code>CGLib</code>  实现动态代理。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Scope</span><span class=\"token punctuation\">(</span>proxyMode <span class=\"token operator\">=</span> <span class=\"token class-name\">ScopedProxyMode</span><span class=\"token punctuation\">.</span>DEFAULT<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Scope</span><span class=\"token punctuation\">(</span>proxyMode <span class=\"token operator\">=</span> <span class=\"token class-name\">ScopedProxyMode</span><span class=\"token punctuation\">.</span>NO<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@Scope</span><span class=\"token punctuation\">(</span>proxyMode <span class=\"token operator\">=</span> <span class=\"token class-name\">ScopedProxyMode</span><span class=\"token punctuation\">.</span>INTERFACES<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@Scope</span><span class=\"token punctuation\">(</span>proxyMode <span class=\"token operator\">=</span> <span class=\"token class-name\">ScopedProxyMode</span><span class=\"token punctuation\">.</span>TARGET_CLASS<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"componentscan\"><a class=\"anchor\" href=\"#componentscan\">#</a> @ComponentScan</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>ComponentScan.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Documented</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Repeatable</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Retention</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Target</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BeanNameGenerator</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AliasFor</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>TYPE<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token annotation punctuation\">@Documented</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token annotation punctuation\">@Repeatable</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ComponentScans</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">ComponentScan</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token annotation punctuation\">@AliasFor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"basePackages\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token annotation punctuation\">@AliasFor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">basePackages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">basePackageClasses</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BeanNameGenerator</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">nameGenerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token class-name\">BeanNameGenerator</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ScopeMetadataResolver</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">scopeResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token class-name\">AnnotationScopeMetadataResolver</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token class-name\">ScopedProxyMode</span> <span class=\"token function\">scopedProxy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token class-name\">ScopedProxyMode</span><span class=\"token punctuation\">.</span>DEFAULT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token class-name\">String</span> <span class=\"token function\">resourcePattern</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"**/*.class\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">useDefaultFilters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token class-name\">Filter</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">includeFilters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token class-name\">Filter</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">excludeFilters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">lazyInit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Filter</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token class-name\">FilterType</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token class-name\">FilterType</span><span class=\"token punctuation\">.</span>ANNOTATION<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token annotation punctuation\">@AliasFor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"classes\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token annotation punctuation\">@AliasFor</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">classes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">pattern</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><code>value</code> ： <code>value</code>  值对应要扫描的包名，可以是一个数组，放入要扫描的包名即可。</li>\n<li><code>excludeFilters</code> ：可以填入一个数组，类型为 <code>@Filter</code>  注解的数组，可以排除要扫描的包，示例： <code>excludeFilters = &#123;@Filter(type = FilterType.xxxx, classes=&#123;xxx,xxx,xxx&#125;) …&#125;</code> ， <code>type = FilterType.ASSUGNABLE_TYPE</code>  是按照类型排除。</li>\n<li><code>includeFIlters</code> ：需要进行设置属性关闭默认扫描规则 <code>useDefaultFilters = false</code> ，用法和上面没有什么区别。</li>\n</ul>\n<h3 id=\"lazy\"><a class=\"anchor\" href=\"#lazy\">#</a> @Lazy</h3>\n<blockquote>\n<p>可以给配置类中加载的 <code>Bean</code>  加上此注解，即便是单实例 <code>Bean</code>  也可以实现懒加载， <code>IOC</code>  创建时不加载，在第一次获取时才进行加载。</p>\n</blockquote>\n<h3 id=\"configurationproperties\"><a class=\"anchor\" href=\"#configurationproperties\">#</a> @ConfigurationProperties</h3>\n<blockquote>\n<p><code>@ConfigurationProperties</code> ：用于将属性文件中的值绑定到一个 <code>Java</code>  对象上，它可以将属性文件中的多个属性值注入到一个 <code>Java</code>  对象中，与 <code>@Value</code>  注解不同的是 <code>@ConfigurationProperties</code>  可以将属性文件中的值注入到多个属性中。</p>\n</blockquote>\n<h2 id=\"自定义类型扫描\"><a class=\"anchor\" href=\"#自定义类型扫描\">#</a> 自定义类型扫描</h2>\n<blockquote>\n<p>首先定义一个类实现 <code>TypeFilter</code>  接口并重写相应的方法，第一个参数 <code>metadataReader</code> ：通过它可以获取正在扫描的类信息如：注解、类信息、类资源，第二个参数 <code>metadataReaderFactory</code> ：它可以获取其它容器组件的信息，在使用的时候只需要 <code>@Filter(type=FilterType.CUSTOM,classes=&#123;MyFilter&#125;)</code>  指定使用我们的过滤规则。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>MyFilter.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>springboot3demo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">.</span>classreading<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MetadataReader</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">.</span>classreading<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MetadataReaderFactory</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">.</span>filter<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TypeFilter</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @Description: 自定义类型扫描</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @DateTime: 2024-01-26 13:59</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyFilter</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">TypeFilter</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MetadataReader</span> metadataReader<span class=\"token punctuation\">,</span> <span class=\"token class-name\">MetadataReaderFactory</span> metadataReaderFactory<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        metadataReader<span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotationMetadata</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        metadataReader<span class=\"token punctuation\">.</span><span class=\"token function\">getClassMetadata</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        metadataReader<span class=\"token punctuation\">.</span><span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"自定义初始化销毁-注解方式\"><a class=\"anchor\" href=\"#自定义初始化销毁-注解方式\">#</a> 自定义初始化 &amp; 销毁 - 注解方式</h2>\n<ul>\n<li><code>@PostConstruct</code> ：在 <code>Bean</code>  创建完成并在属性赋值之后将执行初始化方法。</li>\n<li><code>@PreDestroy</code> ：在容器销毁之前执行销毁方法。</li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "Java",
                "Java深入理解",
                "计算机科学",
                "Java深入理解",
                "Spring",
                "SpringBoot"
            ]
        },
        {
            "id": "https://rainrem.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/java/java%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8BCallable%E5%92%8CFuture%E6%8E%A5%E5%8F%A3/",
            "url": "https://rainrem.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/java/java%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8BCallable%E5%92%8CFuture%E6%8E%A5%E5%8F%A3/",
            "title": "Java多线程之Callable和Future接口",
            "date_published": "2024-01-11T15:48:06.000Z",
            "content_html": "<blockquote>\n<p>创建线程的方式有两种，一种是实现 <code>Runnable</code>  接口，另一种是继承自 <code>Thread</code> ，但是这两种方式都有个缺点，那就是在任务执行完成之后无法获取返回结果，如果需要获取返回结果，那就需要来实现 <code>Callable</code>  接口。</p>\n</blockquote>\n<blockquote>\n<p>从 <code>JavaSE 5.0</code>  开始引入了 <code>Callable</code>  和 <code>Future</code>  接口后就可以通过它们来构建带有返回结果的线程，在任务执行完成后就可以获取执行结果。</p>\n</blockquote>\n<h1 id=\"callablev接口\"><a class=\"anchor\" href=\"#callablev接口\">#</a> Callable&lt;V&gt; 接口</h1>\n<blockquote>\n<p>先来看一下 <code>Runnable</code>  接口中的 <code>run()</code>  方法其返回值为 <code>void</code> , 当然就无法获取结果了。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Runnable.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>而 <code>Callable</code>  接口定义如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Callable.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">V</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>该接口声明了一个名为 <code>call()</code>  的方法，同时这个方法的返回值是 <code>V</code> , 无论是 <code>Runnable</code>  接口的实现类还是 <code>Callable</code>  接口的实现类，都可以被 <code>ThreadPoolExecutor</code>  或 <code>ScheduledThreadPoolExecutor</code>  来执行， <code>ThreadPoolExecutor</code>  和 <code>ScheduledThreadExecutor</code>  都实现了 <code>ExecutorService</code>  接口，因此 <code>Callable</code>  需要和 <code>Executor</code>  框架中的 <code>ExecutorService</code>  结合来使用，下面是 <code>ExecutorService</code>  提供的方法：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>ExecutorService.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Future</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Future</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> task<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Future</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"futurev接口\"><a class=\"anchor\" href=\"#futurev接口\">#</a> Future&lt;V&gt; 接口</h1>\n<blockquote>\n<p><code>Future</code>  接口是用来获取异步计算结果的，简单来说就是对具体的 <code>Runnable</code>  或 <code>Callable</code>  对象任务执行的结果进行获取，下面是 <code>Future</code>  接口中的方法。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Future.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Future</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> mayInterruptIfRunning<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">isCancelled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">isDone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">V</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ExecutionException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token class-name\">V</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> timeout<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span> unit<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ExecutionException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeoutException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><code>get()</code> ：获取异步执行的结果，如果没有结果此方法会阻塞直到异步计算完成。</li>\n<li><code>get(Long timeout,TimeUnit unit)</code> ：获取异步执行结果，如果没有结果，此方法会阻塞，但是会有时间限制，如果阻塞时间超过了设定的 <code>timeout</code>  该方法将会抛出异常。</li>\n<li><code>isDone()</code> ：如果任务执行结束，无论是正常结束或是中途取消还是发生异常，都返回 <code>true</code> 。</li>\n<li><code>isCanceller()</code> ：如果任务完成前被取消则返回 <code>true</code> 。</li>\n<li><code>cancel(boolean mayInterruptIfRunning)</code> ：如果任务还没开始执行 <code>cancel()</code>  方法将返回 <code>false</code> , 如果任务已经启动，执行 <code>cancel(true)</code>  方法将以中断执行此任务线程的方式来试图停止任务，如果停止成功返回 <code>true</code> ，当任务已经启动并执行 <code>cancle(false)</code>  方法，将不会对正在执行的任务线程产生影响，此时返回 <code>false</code> ，当任务已经完成，执行 <code>cancel()</code>  方法将返回 <code>false</code> ， <code>mayInterruptIfRunning</code>  参数表示是否中断执行中的线程。</li>\n<li><code>Future</code>  提供了三种功能：\n<ol>\n<li>能够中断执行中的任务。</li>\n<li>判断任务是否执行完成。</li>\n<li>获取任务执行完成后的结果。</li>\n</ol>\n</li>\n<li>但是必需要明白 <code>Future</code>  只是一个结果，无法直接来创建对象，因此现在就需要其实现 <code>Future</code>  接口的 <code>FutureTask</code>  类了。</li>\n</ul>\n<h1 id=\"futuretask\"><a class=\"anchor\" href=\"#futuretask\">#</a> FutureTask</h1>\n<blockquote>\n<p>先来看一下 <code>FutureTask</code>  的实现：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>FutureTask.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FutureTask</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">RunnableFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p><code>FutureTask</code>  类实现了一个 <code>RunnableFuture</code>  接口，先看一下 <code>RunnableFuture</code>  接口中的方法：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>RunnableFuture.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">RunnableFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Future</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><code>FutureTask</code>  除了实现 <code>Future</code>  接口外还实现了 <code>Runnable</code>  接口，因此 <code>FutureTask</code>  也可以直接提交给 <code>Executor</code>  来执行，当然也可以调用线程直接执行 <code>(FutureTask.run())</code> 。</li>\n<li><code>FutureTask.run()</code>  执行时的三种状态：\n<ol>\n<li>未启动： <code>FutureTask.run()</code>  方法还没有被执行之前， <code>FutureTask</code>  处于未启动状态，当创建一个 <code>FutureTask</code>  而且没有执行 <code>FutureTask.run()</code>  方法前，这个 <code>FutureTask</code>  也是处于未启动状态。</li>\n<li>已启动： <code>FutureTask.run()</code>  被执行的过程中， <code>FutureTask</code>  处于已启动状态。</li>\n<li>已完成： <code>FutureTask.run()</code>  方法执行完正常结束或被取消或抛出异常结束， <code>FutureTask</code>  都处于完成状态。</li>\n</ol>\n</li>\n</ul>\n<p><img data-src=\"https://s11.ax1x.com/2024/01/12/pFC1AMT.png\" alt=\"pFC1AMT.png\" /></p>\n<blockquote>\n<p>下面是 <code>FutureTask</code>  的方法执行流程图。</p>\n</blockquote>\n<p><img data-src=\"https://s11.ax1x.com/2024/01/12/pFC1eZ4.png\" alt=\"pFC1eZ4.png\" /></p>\n<blockquote>\n<p>当 <code>FutureTask</code>  处于未启动或已启动状态时，如果此时我们执行 <code>FutureTask.get()</code>  方法将导致调用线程阻塞，当 <code>FutureTask</code>  处于已完成状态时，执行 <code>FutureTask.get()</code>  方法将导致线程立即返回结果或抛出异常。</p>\n</blockquote>\n<blockquote>\n<p>当 <code>FutureTask</code>  处于未启动状态时，执行 <code>FutureTask.cancel()</code>  方法将导致此任务永远不会执行。</p>\n</blockquote>\n<blockquote>\n<p>当 <code>FutureTask</code>  处于已启动状态时，执行 <code>cancel(true)</code>  方法将以中断执行此任务线程的方式来试图停止任务，如果任务取消成功， <code>cancel()</code>  方法将返回 <code>true</code> ，但如果执行 <code>cancel(false)</code>  方法将不会对正在执行的任务线程产生影响，此时 <code>cancel()</code>  方法返回 <code>false</code> , 当任务已经完成，执行 <code>cancel()</code>  方法将返回 <code>false</code> 。</p>\n</blockquote>\n<blockquote>\n<p><code>FutureTask</code>  的两种构造方法：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">FutureTask</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> callable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">FutureTask</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> runnable<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"futuretask的使用方式\"><a class=\"anchor\" href=\"#futuretask的使用方式\">#</a> FutureTask 的使用方式</h1>\n<blockquote>\n<p>现在对 <code>Callable</code> 、 <code>Future</code> 、 <code>FutureTask</code>  有了一定得了解之后，那么它们到底有什么用？通过这样的方式去创建线程，最大的好处就是能够返回结果，如：有这么一个场景，现在需要计算一个数据，而这个数据的计算比较耗时，并且后面的程序也需要用到这个数据结果，那么这个时候 <code>Callable</code>  岂不是最好的选择。</p>\n</blockquote>\n<blockquote>\n<p>现在可以开设一个线程去执行计算，而主线程继续做其它事情，而后面需要使用到这个数据时，再通过 <code>Future</code>  来获取就可以了。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>CallableDemo.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Callable</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ExecutorService</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Executors</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Future</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @Description: 使用 Callable+Future 获取执行结果</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @DateTime: 2024-01-12 01:25</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CallableDemo</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> sum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Callable子线程开始计算啦！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            sum <span class=\"token operator\">=</span> sum <span class=\"token operator\">+</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Callable子线程计算结束！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">// 创建线程池</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">ExecutorService</span> es <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newSingleThreadExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">// 创建 Callable 对象任务</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\">CallableDemo</span> calTask <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CallableDemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">// 提交任务并获取执行结果</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token class-name\">Future</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> future <span class=\"token operator\">=</span> es<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span>calTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token comment\">// 关闭线程池</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        es<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"主线程在执行其它任务\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>future<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token comment\">// 输出获取到的结果</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"future.get()--> \"</span> <span class=\"token operator\">+</span> future<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token comment\">// 输出获取到的结果</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"future.get()未获取到结果\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"主线程在执行完成\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight raw\"><figcaption data-lang=\"\"><span>执行结果</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Callable 子线程开始计算啦！</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>主线程在执行其它任务</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Callable 子线程计算结束！</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>future.get ()--&gt; 12497500</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>主线程在执行完成</pre></td></tr></table></figure><blockquote>\n<p>使用 <code>Callable+FutureTask</code>  获取执行结果</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>CallableDemo.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Description: 使用 Callable+FutureTask 获取执行结果</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @DateTime: 2024-01-12 01:25</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CallableDemo</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> sum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Callable子线程开始计算啦！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            sum <span class=\"token operator\">=</span> sum <span class=\"token operator\">+</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Callable子线程计算结束！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">// 创建线程池</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">ExecutorService</span> es <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newSingleThreadExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">// 创建 Callable 对象任务</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">CallableDemo</span> calTask <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CallableDemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">// 创建 FutureTask</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token class-name\">FutureTask</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> futureTask <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FutureTask</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>calTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token comment\">// 提交任务</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        es<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>futureTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\">// 关闭线程池</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        es<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"主线程在执行其它任务\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>futureTask<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token comment\">// 输出获取到的结果</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"future.get()--> \"</span> <span class=\"token operator\">+</span> futureTask<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token comment\">// 输出获取到的结果</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"future.get()未获取到结果\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"主线程在执行完成\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight raw\"><figcaption data-lang=\"\"><span>执行结果</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Callable 子线程开始计算啦！</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>主线程在执行其它任务</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Callable 子线程计算结束！</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>future.get ()--&gt; 12497500</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>主线程在执行完成</pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "Java",
                "Java深入理解",
                "计算机科学",
                "Java",
                "多线程",
                "Callable",
                "Future"
            ]
        },
        {
            "id": "https://rainrem.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/java/java%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8BExecutor%E6%A1%86%E6%9E%B6/",
            "url": "https://rainrem.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/java/java%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8BExecutor%E6%A1%86%E6%9E%B6/",
            "title": "Java多线程-Executor框架",
            "date_published": "2024-01-09T17:29:08.000Z",
            "content_html": "<blockquote>\n<p>不管是在 <code>Java</code>  中还是在 <code>Android</code>  中使用到的线程池都是一样的，那就是 <code>Executor</code>  线程池框架。</p>\n</blockquote>\n<h1 id=\"executor框架是什么\"><a class=\"anchor\" href=\"#executor框架是什么\">#</a> Executor 框架是什么？</h1>\n<blockquote>\n<p><code>Executor</code>  框架是实现线程池的功能，我们知道线程池就是线程的集合，在线程池中来管理线程，以实现线程的重用性，降低资源消耗，提高响应速度，线程用于执行异步任务，单个线程既是工作单元也是执行机制，从 <code>JDK 1.5</code>  开始为了把工作单元与执行机制分离开，然后就诞生了 <code>Executor</code>  框架，它是一个用于统一创建与运行的接口。</p>\n</blockquote>\n<blockquote>\n<p><code>Executor</code>  框架是 <code>Java</code>  并发编程中的一个重要组成部分，它提供了一种标准的方式来执行任务，它包含 <code>Executor</code> 、 <code>ExecutorService</code> 、 <code>Callable</code> 、 <code>Future</code>  等接口和类，可以有效地管理线程的生命周期、执行任务以及获取任务的执行结果。</p>\n</blockquote>\n<blockquote>\n<p>我们还需要明白另一个问题，为什么需要线程池？在 <code>Java</code>  中使用线程来执行异步任务时，线程的创建和销毁需要一定的开销，如果我们为每一个任务创建一个新线程来执行的话，那么这些线程的创建与销毁将消耗大量的计算资源，同时为每一个任务创建一个新线程来执行，这样的方式可能会使处于高负荷状态的应用产生崩溃。</p>\n</blockquote>\n<blockquote>\n<p>此时线程池的出现将为解决这个问题带来了曙光，我们可以在线程池中创建若干条线程，当有任务需要执行时就从该线程池中获取一条线程来执行任务，如果一时间的任务过多并超出了线程池中的数量，那么后面的线程任务将进入一个等待队列进行等待，直到线程池中有线程处于空闲时才从等待队列获取要执行的任务进行处理，以此循环，这样就大大减少了线程创建与销毁的开销，当然也会缓解应用处于超负荷时的情况。</p>\n</blockquote>\n<h1 id=\"executor两级调度模型\"><a class=\"anchor\" href=\"#executor两级调度模型\">#</a> Executor 两级调度模型</h1>\n<blockquote>\n<p>在 <code>Java</code>  线程启动时会创建一个本地操作系统线程，当该 <code>Java</code>  线程终止时，这个操作系统线程也将会被回收，而每一个 <code>Java</code>  线程都会被一对一映射为本地操作系统的线程，操作系统会调度所有的线程并将它们分给可用的 <code>CPU</code> 。</p>\n</blockquote>\n<blockquote>\n<p>所谓的映射方式的实现，在上层 <code>Java</code>  多线程程序通过把应用分为若干个任务，然后使用用户级的调度器 <code>(Executor框架)</code>  将这些任务映射为固定数量的线程，在底层操作系统内核将这些线程映射到硬件处理器上，两级调度模型示意图如下：</p>\n</blockquote>\n<p><img data-src=\"https://s11.ax1x.com/2024/01/10/pFpTG1s.png\" alt=\"pFpTG1s.png\" /></p>\n<blockquote>\n<p>从上图中可以看出应用程序通过 <code>Executor</code>  框架控制上层的调度，而下层的调度由操作系统内核来控制，下层的调度不受应用程序的控制。</p>\n</blockquote>\n<h1 id=\"executor框架结构\"><a class=\"anchor\" href=\"#executor框架结构\">#</a> Executor 框架结构</h1>\n<ul>\n<li><code>Executor</code>  框架结构主要包括三个部分：\n<ol>\n<li>任务：包括被执行任务需要实现的接口 <code>Runnable</code>  或 <code>Callable</code>  接口。</li>\n<li>任务的执行：包括任务执行机制的核心接口 <code>Executor</code>  以及继承自 <code>Executor</code>  的 <code>ExecutorService</code>  接口， <code>Executor</code>  有两个关键类实现了 <code>ExecutorService</code>  接口，它们分别是 <code>ThreadPoolExecutor</code>  和 <code>ScheduledThreadPoolExecutor</code>  类。</li>\n<li>异步计算的结果：包括接口 <code>Future</code>  和实现 <code>Future</code>  接口的 <code>FutureTask</code>  类。</li>\n</ol>\n</li>\n<li>下面是通过 <code>UML</code>  类图展示这些类之间的关系，关系图如下：</li>\n</ul>\n<p><img data-src=\"https://s11.ax1x.com/2024/01/10/pFpT0NF.png\" alt=\"pFpT0NF.png\" /></p>\n<ul>\n<li><code>Extecutor</code>  是一个接口，它是 <code>Executor</code>  框架的基础，它将任务的提交与任务的执行分离开来。</li>\n<li><code>ThreadPoolExecutor</code>  是线程池的核心实现类，它用来执行被提交的任务。</li>\n<li><code>ScheduledThreadPoolExecutor</code>  是一个实现类，它可以在给定的延迟后运行命令或定期执行命令，它比 <code>Timer</code>  更灵活，功能更强大。</li>\n<li><code>Future</code>  接口和实现 <code>Future</code>  接口的 <code>FutureTask</code>  类代表异步计算的结果。</li>\n<li><code>Runnable</code>  接口和 <code>Callable</code>  接口的实现类都可以被 <code>ThreadPoolExecutor</code>  或 <code>ScheduleThreadPoolExecutor</code>  类执行，区别就是 <code>Runnable</code>  无法返回执行结果，而 <code>Callable</code>  可以返回执行结果。</li>\n<li>执行关系图如下：</li>\n</ul>\n<p><img data-src=\"https://s11.ax1x.com/2024/01/10/pFpTgnx.png\" alt=\"pFpTgnx.png\" /></p>\n<blockquote>\n<p>在上图中主线程首先创建实现 <code>Runnable</code>  或 <code>Callable</code>  接口的任务对象，工具类 <code>Executors</code>  可以把一个 <code>Runnable</code>  对象封装成一个 <code>Callable</code>  对象，可以使用如下两种方式：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">callable</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">callable</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> task<span class=\"token punctuation\">,</span><span class=\"token class-name\">Object</span> resule<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>也可以把 <code>Runnable</code>  对象直接提交给 <code>ExecutorService</code>  来执行，方法如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ExecutorService</span><span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>或者也可以把 <code>Runnable</code>  对象或 <code>Callable</code>  对象提交给 <code>ExecutorService</code>  执行，可以使用如下两种方式：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ExecutorService</span><span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">ExecutorService</span><span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>注意如果要执行 <code>ExecutorService.submit(Runnable task)</code>  或 <code>ExecutorService.submit(Callable&lt;T&gt; task)</code>  方法，那么 <code>ExecutorService</code>  将返回一个实现 <code>Future</code>  接口的对象 (也就是 <code>FutureTask</code> )。</p>\n</blockquote>\n<blockquote>\n<p>当然由于 <code>FutureTask</code>  实现了 <code>Runnable</code>  接口，也可以直接创建 <code>FutureTask</code>  类然后提交给 <code>ExecutorService</code>  来执行。此时 <code>Executor</code>  框架的主要结构体系就介绍完了，下面将是两个主要的线程池实现类的解析。</p>\n</blockquote>\n<h1 id=\"threadpoolexecutor\"><a class=\"anchor\" href=\"#threadpoolexecutor\">#</a> ThreadPoolExecutor</h1>\n<blockquote>\n<p><code>ThreadPoolExecutor</code>  是线程的真正实现，通常使用工厂类 <code>Executor</code>  来创建，但它的构造方法提供了一系列参数来配置线程池，下面是 <code>ThreadPoolExecutor</code>  构造方法中的各个参数表示的含义。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">ThreadPoolExecutor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> corePoolSize<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> maximumPoolSize<span class=\"token punctuation\">,</span><span class=\"token keyword\">long</span> keepAliveTime<span class=\"token punctuation\">,</span><span class=\"token class-name\">TimeUnit</span> unit<span class=\"token punctuation\">,</span><span class=\"token class-name\">BlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">></span></span> workQueue<span class=\"token punctuation\">,</span><span class=\"token class-name\">ThreadFactory</span> threadFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span>corePoolSize<span class=\"token punctuation\">,</span>maximumPoolSize<span class=\"token punctuation\">,</span>keepAliveTime<span class=\"token punctuation\">,</span>unit<span class=\"token punctuation\">,</span>workQueue<span class=\"token punctuation\">,</span>threadFactory<span class=\"token punctuation\">,</span>defaultHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><code>corePoolSize</code> ：线程池的核心线程数，在默认情况下，核心线程数会一直在线程池中存活，即使它们处于闲置状态。\n<ul>\n<li>如果将 <code>ThreadPoolExecutor</code>  的 <code>allowCoreThreadTimeOut</code>  属性设置为 <code>true</code> ，那么闲置的核心线程在等待新任务到来时会执行超时策略，这个时间间隔由 <code>keepAliveTime</code>  所指定，当等待时间超过 <code>keepAliveTime</code>  所指定的时长后，核心线程将被终止。</li>\n</ul>\n</li>\n<li><code>maximumPoolSize</code> ：线程池所能容纳的最大线程数量，当活动线程数到达这个数值后，后续的新任务将会被阻塞。</li>\n<li><code>keepAliveTime</code> ：非核心线程闲置时的超时时长，超过这个时长，非核心线程就会被回收。\n<ul>\n<li>当 <code>ThreadPoolExecutor</code>  的 <code>allowCoreThreadTimeOut</code>  属性设置为 <code>true</code>  时， <code>keepAliveTime</code>  同样会作用于核心线程。</li>\n</ul>\n</li>\n<li><code>unit</code> ：用于指定 <code>keepAliveTime</code>  参数的时间单位，它是一个枚举类型，常用的有 <code>TimeUnit.MILLISECONDS(毫秒)</code> 、 <code>TimeUnit.SECONDS(秒)</code>  以及 <code>TimeUnit.MINUTES(分钟)</code>  等。</li>\n<li><code>workQueue</code> ：线程池中的任务队列，通过线程池的 <code>execute</code>  方法提交 <code>Runnable</code>  对象会存储在这个队列中。</li>\n<li><code>threadFactory</code> ：线程工厂，为线程池提供创建新线程的功能。\n<ul>\n<li><code>ThreadFactory</code>  是一个接口，它只有一个 <code>newThread(Runnable r)</code>  方法。</li>\n<li>还有一个不常用的参数那就是 <code>RejectExecutionHandler</code> ，它表示当 <code>ThreadPoolExecutor</code>  已经关闭或 <code>ThreadPoolExecutor</code>  已经达到了最大线程池大小而且工作队列已满， <code>execute</code>  方法将会调用 <code>Handler</code>  的 <code>rejectExecution</code>  方法来通知调用者，默认情况下会抛出一个 <code>RejectExecutionExeception</code>  异常。</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>下面是 <code>ThreadPoolExecutor</code>  的任务执行规则：</p>\n</blockquote>\n<ol>\n<li>如果线程池的数量还未到达核心线程数量，那么会直接启动一个核心线程来执行任务。</li>\n<li>如果线程池中的线程数量已经达到或者超出核心线程的数量，那么任务会被插入到任务队列中等待执行。</li>\n<li>如果在步骤 <code>2</code>  中无法将任务插入到任务队列中，这往往是由于任务队列已满，这个时候如果线程数量未达到线程池规定的最大值，那么会立即启动一个非核心线程来执行任务。</li>\n<li>如果在步骤 <code>3</code>  中线程数量已经达到线程池规定的最大值，那么就会拒绝执行此任务， <code>ThreadPoolExecutor</code>  会调用 <code>RejectExecutionHandler</code>  的 <code>rejectExecution</code>  方法来通知调用者。</li>\n</ol>\n<h2 id=\"线程池的适用场景\"><a class=\"anchor\" href=\"#线程池的适用场景\">#</a> 线程池的适用场景</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">返回类型</th>\n<th style=\"text-align:center\">方法名称</th>\n<th style=\"text-align:center\">适用场景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>ExecutorService</code></td>\n<td style=\"text-align:center\"><code>newFixedThreadPool(int nThreads)</code></td>\n<td style=\"text-align:center\">适用于为了满足资源管理需求，而需要限制当前线程的数量的应用场景，它适用于负载比较重的服务器。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>ExecutorService</code></td>\n<td style=\"text-align:center\"><code>newCachedThreadPool()</code></td>\n<td style=\"text-align:center\">大小无界的线程池适用于执行很多的短期异步任务的小程序，或负载较轻的服务器。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>ExecutorService</code></td>\n<td style=\"text-align:center\"><code>newSingleThreadExecutor()</code></td>\n<td style=\"text-align:center\">适用于需要保证执行顺序得执行各个任务，并且在任意时间点，不会有多个线程是活动的场景。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"三种常见线程池\"><a class=\"anchor\" href=\"#三种常见线程池\">#</a> 三种常见线程池</h2>\n<blockquote>\n<p>三种常见的线程池，它们都直接或间接地通过配置 <code>ThreadPoolExecutor</code>  来实现自己的功能特性，这三种常见线程池分别是 <code>FixedThreadPool</code> 、 <code>CachedThreadPool</code> 、 <code>SingleThreadExecutor</code> ，下面分别来介绍。</p>\n</blockquote>\n<h3 id=\"fixedthreadpool\"><a class=\"anchor\" href=\"#fixedthreadpool\">#</a> FixedThreadPool</h3>\n<blockquote>\n<p><code>FixedThreadPool</code>  模式会使用一个优先固定数量的线程，来处理若干数量任务，规定数量的线程处理所有任务，一旦有线程处理完了任务就会被用来处理新任务，当然是需要有新任务的前提下。 <code>FixedThreadPool</code>  模式下最多的线程数量是一定的， <code>FixedThreadPool</code>  对象创建代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ExecutorService</span> fixedThreadPool <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newFixedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p><code>FixedThreadPool</code>  创建方法的源码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Executors.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Executors</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ExecutorService</span> <span class=\"token function\">newFixedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> nThreads<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolExecutor</span><span class=\"token punctuation\">(</span>nThreads<span class=\"token punctuation\">,</span> nThreads<span class=\"token punctuation\">,</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>MILLISECONDS<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedBlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p><code>FixedThreadPool</code>  的 <code>corePoolSize</code>  和 <code>maximumPoolSize</code>  参数都被设置为 <code>nThreads</code> ，当线程池中的线程数量大于 <code>corePoolSize</code>  时 <code>keepAliveTime</code>  为非核心空闲线程等待新任务的最长时间，超过这个时间后非核心线程将会被终止， <code>keepAliveTime</code>  设置为 <code>0L</code>  说明非核心线程会立即被终止，实际了也并没有非核心线程创建，因为核心线程和最大线程数都是一样的。</p>\n</blockquote>\n<blockquote>\n<p>下图为 <code>FixedThreadPool</code>  的 <code>execute()</code>  方法的执行流程。</p>\n</blockquote>\n<p><img data-src=\"https://s11.ax1x.com/2024/01/11/pF9BQZq.png\" alt=\"pF9BQZq.png\" /></p>\n<ol>\n<li>如果当前运行线程数小于 <code>corePoolSize</code>  时，则创建一个新线程来执行任务。</li>\n<li>如果当前线程池的运行线程数等于 <code>corePoolSize</code> ，那么后面提交的任务将加入到 <code>LinkedBlockingQueue</code>  队列中进行等待。</li>\n<li>线程在执行完图中的 <code>1</code>  后，会在循环中反复从 <code>LinkedBlockingQueue</code>  队列中获取任务来执行。\n<ul>\n<li>另外需要知道的一点是 <code>FixedThreadPool</code>  使用的是无界队列 <code>LinkedBlockingQueue</code>  作为线程池的工作队列，队列容量为 <code>Integer.MAX_VALUE</code> 。</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>当然使用该队列作为工作队列会对线程池产生如下影响。</p>\n</blockquote>\n<ol>\n<li>当前线程池中的线程数量达到 <code>corePoolSize</code>  后，新的任务将在无界队列中等待。</li>\n<li>由于使用的是无界队列，所以参数 <code>maximumPoolSize</code>  和 <code>keepAliveTime</code>  无效。</li>\n<li>由于使用无界队列，运行中的 <code>FixedThreadPool</code>  不会拒绝任务，当然此时是未执行 <code>shutdown</code>  和 <code>shutdownNow</code>  方法，所以不会去调用 <code>RejectExecutionHandler</code>  的 <code>rejectExecution</code>  方法抛出异常。</li>\n</ol>\n<blockquote>\n<p>下面示例原文出自 <code>《Java编程思想》</code> 。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>FixedThreadPoolDemo.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ExecutorService</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Executors</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @Description: 使用 FixedThreadPool 设置三个线程来执行五个任务</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @DateTime: 2024-01-11 03:31</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FixedThreadPoolDemo</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">int</span> countDown <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> taskCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> id <span class=\"token operator\">=</span> taskCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">FixedThreadPoolDemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">FixedThreadPoolDemo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> countDown<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>countDown <span class=\"token operator\">=</span> countDown<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"#\"</span> <span class=\"token operator\">+</span> id <span class=\"token operator\">+</span> <span class=\"token string\">\"(\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>countDown <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> countDown <span class=\"token operator\">:</span> <span class=\"token string\">\"FixedThreadPoolDemo!\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\") \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>countDown<span class=\"token operator\">--</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">// 三个线程来执行五个任务</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token class-name\">ExecutorService</span> exec <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newFixedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            exec<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FixedThreadPoolDemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        exec<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"cachedthreadpool\"><a class=\"anchor\" href=\"#cachedthreadpool\">#</a> CachedThreadPool</h3>\n<blockquote>\n<p><code>CachedThreadPool</code>  首先会按照需要创建足够多的线程来执行任务 <code>(Task)</code> , 随着程序执行的过程，有的线程执行完了任务可以被重新循环使用时，才不会再创建先的线程来执行任务，创建方式如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ExecutorService</span> cachedThreadPool <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newCachedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p><code>CachedThreadPool</code>  创建方法的源码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ExecutorService</span> <span class=\"token function\">newCachedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolExecutor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">,</span><span class=\"token number\">60L</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">SynchronousQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>从该静态方法中可以看出 <code>CachedThreadPool</code>  的 <code>corePoolSize</code>  被设置为 <code>0</code> , 而 <code>maximumPoolSize</code>  被设置为 <code>Integer.MAX_VALUE</code> , 即 <code>maximumPoolSize</code>  是无界的，而 <code>keepAliveTime</code>  被设置为 <code>60L</code>  单位为秒，也就是空闲线程的等待时间最长为 <code>60</code>  秒，超过该时间将会被终止。</p>\n</blockquote>\n<blockquote>\n<p>而且在这里 <code>CachedThreadPool</code>  使用的是没有容量的 <code>SynchronousQueue</code>  作为线程池的工作队列，但其 <code>maximumPoolSize</code>  是无界的，这也就意味着如果主线程提交任务的速度高于 <code>maximumPoolSize</code>  中线程处理任务的速度时 <code>CachedThreadPool</code>  将会不断的创建新的线程，在极端情况下 <code>CachedThreadPool</code>  会因为创建过多线程而耗尽 <code>CPU</code>  和内存资源。</p>\n</blockquote>\n<blockquote>\n<p>下图为 <code>CachedThreadPool</code>  的 <code>execute()</code>  方法的执行流程。</p>\n</blockquote>\n<p><img data-src=\"https://s11.ax1x.com/2024/01/11/pF9BGJU.png\" alt=\"pF9BGJU.png\" /></p>\n<ol>\n<li>首先执行 <code>SynchronousQueue.offer(Runnable task)</code>  添加一个任务，如果当前 <code>CachedThreadPool</code>  中有空闲线程正在执行 <code>SynchronousQueue.poll(keepAliveTime,TimeUnit.NANOSECONDS)</code> , 其中 <code>NANOSECONDS</code>  是微毫秒 <code>(微妙/1000)</code> ，那么主线程执行 <code>offer</code>  操作与空闲线程执行 <code>poll</code>  操作配对成功后，主线程会把任务交给空闲线程来执行，然此时 <code>execute()</code>  方法执行完成，否则将进入第 <code>2</code>  步。</li>\n<li>当 <code>CachedThreadPool</code>  初始线程数为空时或者当前没有空闲线程，将没有线程去执行 <code>SynchronousQueue.poll(keepAliveTime,TimeUnit.NANOSECONDS)</code> , 这样的情况下步骤 <code>1</code>  将会失败，此时 <code>CachedThreadPool</code>  会创建一个新的线程来执行任务，此时 <code>execute()</code>  方法执行完成。</li>\n<li>在步骤 <code>2</code>  中创建的新线程将任务执行完成后，会执行 <code>SynchronousQueue.poll(keepAliveTime,TimeUnit.NANOSECONDS)</code> , 这个 <code>poll</code>  操作会让空闲线程最多在 <code>SynchronousQueue</code>  中等待 <code>60</code>  秒，如果 <code>60</code>  秒内主线程提交了一个新任务，那么这个空闲线程将会执行主线程提交的新任务，否则这个空闲线程将被终止，由于 <code>60</code>  秒的空闲线程会被终止，因此长时间保持空闲的 <code>CachedThreadPoll</code>  是不会使用任何资源的。</li>\n</ol>\n<blockquote>\n<p><code>SynchronousQueue</code>  是一个没有容量的阻塞队列，因为时间到了之后空闲线程就会被移除，每个插入操作必须等到一个线程与之对应。 <code>CachedThreadPool</code>  使用 <code>SynchronousQueue</code>  队列把主线程的任务传递给空闲线程执行，执行流程如下。</p>\n</blockquote>\n<p><img data-src=\"https://s11.ax1x.com/2024/01/11/pF9BoY8.png\" alt=\"pF9BoY8.png\" /></p>\n<blockquote>\n<p>示例代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>CachedThreadPoolDemo.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ExecutorService</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Executors</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @Description: CachedThreadPool 的使用</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @DateTime: 2024-01-11 03:31</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CachedThreadPoolDemo</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">int</span> countDown <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> taskCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> id <span class=\"token operator\">=</span> taskCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">CachedThreadPoolDemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">CachedThreadPoolDemo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> countDown<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>countDown <span class=\"token operator\">=</span> countDown<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"#\"</span> <span class=\"token operator\">+</span> id <span class=\"token operator\">+</span> <span class=\"token string\">\"(\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>countDown <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> countDown <span class=\"token operator\">:</span> <span class=\"token string\">\"FixedThreadPoolDemo!\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\") \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>countDown<span class=\"token operator\">--</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">// 三个线程来执行五个任务</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token class-name\">ExecutorService</span> exec <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newCachedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            exec<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">CachedThreadPoolDemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        exec<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"singlethreadexecutor\"><a class=\"anchor\" href=\"#singlethreadexecutor\">#</a> SingleThreadExecutor</h3>\n<blockquote>\n<p><code>SingleThreadExecutor</code>  模式只会创建一个线程，它和 <code>FixedThreadPool</code>  比较类似，不过线程数是一个。如果多个任务被提交给 <code>SingleThreadExecutor</code>  的话，那么这些任务会被保存在一个队列中，并且会按照任务提交的顺序来一个个的执行。</p>\n</blockquote>\n<blockquote>\n<p><code>SingleThreadExecutor</code>  模式可以保证只有一个任务会被执行，这种特性可以被用来处理共享资源的问题从而不需要考虑同步问题，创建方式如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ExecutorService</span> singleThreadExecutor <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newSingleThreadExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p><code>SingleThreadExecutor</code>  创建方法的源码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ExecutorService</span> <span class=\"token function\">newSingleThreadExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FinalizableDelegatedExecutorService</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolExecutor</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0L</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>MILLISECONDS<span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedBlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>从静态方法中可以看出 <code>SingleThreadExecutor</code>  的 <code>corePoolSize</code>  和 <code>maximumPoolSize</code>  被设置为 <code>1</code> , 其它参数则与 <code>FixedThreadPool</code>  相同。</p>\n</blockquote>\n<blockquote>\n<p><code>SingleThreadExecutor</code>  使用的工作队也是 <code>LinkedBlockingQueue</code>  无界队，由于 <code>SingleThreadExecutor</code>  采用无界队列对线程池的影响与 <code>FixedThreadPool</code>  是一样的，执行流程如下：</p>\n</blockquote>\n<p><img data-src=\"https://s11.ax1x.com/2024/01/11/pF9zAKS.png\" alt=\"pF9zAKS.png\" /></p>\n<ol>\n<li>如果当前线程数少于 <code>corePoolSize</code>  即线程池中没有线程运行，则创建一个新的线程来执行任务。</li>\n<li>如果当前线程数等于 <code>corePoolSize</code>  时，会将任务加入到 <code>LinkedBlockingQueue</code>  队列中。</li>\n<li>线程执行完成步骤 <code>1</code>  中的任务后，会在一个无限循环中反复从 <code>LinkedBlockingQueue</code>  队列中获取任务来执行。</li>\n</ol>\n<blockquote>\n<p>示例代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>SingleThreadExecutorDemo.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ExecutorService</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Executors</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @Description: SingleThreadExecutor 的使用</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @DateTime: 2024-01-11 03:31</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SingleThreadExecutorDemo</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">int</span> countDown <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> taskCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> id <span class=\"token operator\">=</span> taskCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SingleThreadExecutorDemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SingleThreadExecutorDemo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> countDown<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>countDown <span class=\"token operator\">=</span> countDown<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"#\"</span> <span class=\"token operator\">+</span> id <span class=\"token operator\">+</span> <span class=\"token string\">\"(\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>countDown <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> countDown <span class=\"token operator\">:</span> <span class=\"token string\">\"FixedThreadPoolDemo!\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\") \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>countDown<span class=\"token operator\">--</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">// 三个线程来执行五个任务</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token class-name\">ExecutorService</span> exec <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newSingleThreadExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            exec<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">SingleThreadExecutorDemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        exec<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"scheduledthreadpoolexecutor\"><a class=\"anchor\" href=\"#scheduledthreadpoolexecutor\">#</a> ScheduledThreadPoolExecutor</h1>\n<h2 id=\"执行机制\"><a class=\"anchor\" href=\"#执行机制\">#</a> 执行机制</h2>\n<blockquote>\n<p><code>ScheduledThreadPoolExecutor</code>  继承自 <code>ThreadPoolExecutor</code> ，它主要用来在给定的延迟之后执行任务或定期执行任务。</p>\n</blockquote>\n<blockquote>\n<p><code>ScheduledThreadPoolExecutor</code>  的功能与 <code>Timer</code>  类似，但它比 <code>Timer</code>  更强大更灵活， <code>Timer</code>  对应的是单个后台线程，而 <code>ScheduledThreadPoolExecutor</code>  可以在构造函数中指定多个对应的后台线程数。</p>\n</blockquote>\n<blockquote>\n<p><code>ScheduledThreadPoolExecutor</code>  执行机制如下：</p>\n</blockquote>\n<p><img data-src=\"https://s11.ax1x.com/2024/01/11/pFC9zsf.png\" alt=\"pFC9zsf.png\" /></p>\n<blockquote>\n<p><code>DelayQueue</code>  是一个无界队列，所以 <code>ThreadPoolExecutor</code>  的 <code>maximumPoolSize</code>  在 <code>ScheduledThreadPoolExecutor</code>  中无效， <code>ScheduledThreadPoolExecutor</code>  的执行主要分为以下两部分：</p>\n</blockquote>\n<ol>\n<li>当调用 <code>ScheduledThreadPoolExecutor</code>  的 <code>scheduleAtFixedRate()</code>  或 <code>scheduleWithFixedDelay()</code>  方法时会向 <code>ScheduleThreadPoolExecutor</code>  的 <code>DelayQueue</code>  中添加一个实现了 <code>RunnableScheduledFuture</code>  接口的 <code>ScheduleFutureTask</code> 。</li>\n<li>线程池中的线程从 <code>DelayQueue</code>  中获取 <code>ScheduleFutureTask</code>  然后来执行任务。</li>\n</ol>\n<h2 id=\"scheduledthreadpoolexecutor的创建\"><a class=\"anchor\" href=\"#scheduledthreadpoolexecutor的创建\">#</a> ScheduledThreadPoolExecutor 的创建</h2>\n<blockquote>\n<p><code>ScheduledThreadPoolExecutor</code>  通常使用工厂类 <code>Executors</code>  来创建， <code>Executors</code>  可以创建两种类型的 <code>ScheduledThreadPoolExecutor</code> 。</p>\n</blockquote>\n<ol>\n<li><code>ScheduledThreadPoolExecutor</code> ：可以执行并行任务也就是多条线程同时执行。</li>\n<li><code>SingleThreadScheduledExecutor</code> ：可以执行单条线程。</li>\n</ol>\n<blockquote>\n<p><code>ScheduledThreadPoolExecutor</code>  构造方法如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ScheduledExecutorService</span> <span class=\"token function\">newScheduledThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> corePoolSize<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ScheduledExecutorService</span> <span class=\"token function\">newScheduledThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> corePoolSize<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ThreadFactory</span> threadFactory<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p><code>SingleThreadScheduledExecutor</code>  构造方法如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ScheduledExecutorService</span> <span class=\"token function\">newSingleThreadScheduledExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ScheduledExecutorService</span> <span class=\"token function\">newSingleThreadScheduledExecutor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ThreadFactory</span> threadFactory<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>创建实例对象代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建 ScheduledThreadPool</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">ScheduledExecutorService</span> scheduledThreadPoolExecutor <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newScheduledThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 创建 SingleThreadScheduledExecutor</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">ScheduledExecutorService</span> singleThreadScheduledExecutor <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newSingleThreadScheduledExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"适用场景\"><a class=\"anchor\" href=\"#适用场景\">#</a> 适用场景</h2>\n<blockquote>\n<p><code>ScheduledThreadPoolExecutor</code> ：适用于多个后台线程执行周期性任务，同时为了满足资源管理的需求而需要限制后台线程数量的应用程序。<br />\n <code>SingleThreadScheduledExecutor</code> ：适用于需要单个后台线程执行周期任务，同时需要保证任务顺序执行的应用场景。</p>\n</blockquote>\n<h2 id=\"scheduledthreadpoolexecutor的使用\"><a class=\"anchor\" href=\"#scheduledthreadpoolexecutor的使用\">#</a> ScheduledThreadPoolExecutor 的使用</h2>\n<blockquote>\n<p>首先创建一个 <code>Runnable</code>  的对象，然后使用 <code>ScheduledThreadPoolExecutor</code>  的 <code>schedule()</code>  方法来执行延迟任务。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">ScheduledFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> command<span class=\"token punctuation\">,</span><span class=\"token keyword\">long</span> delay<span class=\"token punctuation\">,</span><span class=\"token class-name\">TimeUnit</span> unit<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li><code>command</code> ：实现 <code>Runnable</code>  接口的类。</li>\n<li><code>delay</code> ：延迟多久后执行。</li>\n<li><code>unit</code> ：用于指定 <code>keepAliveTime</code>  参数的时间单位，这是一个枚举，常用的有 <code>TimeUnit.MILLISECONDS(毫秒)</code> 、 <code>TimeUnit.SECONDS(秒)</code>  以及 <code>TimeUnit.MINUTES(分钟)</code>  等。</li>\n<li>注意：此方法会返回一个 <code>ScheduledFuture</code>  实例，可以用于获取线程状态信息和延迟时间。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>ScheduledThreadPoolDemo.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo3</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Date</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Executors</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ScheduledExecutorService</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @Description: 延迟执行</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @DateTime: 2024-01-11 19:18</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ScheduledThreadPoolDemo</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" Start. Time = \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">getNowDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token function\">threadSleep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" End. Time = \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">getNowDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     * 睡 3 秒</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">threadSleep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>     * 获取现在时间</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>     * @return 返回时间类型 yyyy-MM-dd HH:mm:ss</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getNowDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token class-name\">Date</span> currentTime <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token class-name\">SimpleDateFormat</span> formatter<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        formatter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-MM-dd HH:mm:ss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">return</span> formatter<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>currentTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token class-name\">ScheduledExecutorService</span> scheduledThreadPool <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newScheduledThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token comment\">// 计划在某个时间之后运行</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Current Time = \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">getNowDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                <span class=\"token class-name\">ScheduledThreadPoolDemo</span> worker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ScheduledThreadPoolDemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                <span class=\"token comment\">// 延迟 10 秒后执行</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                scheduledThreadPool<span class=\"token punctuation\">.</span><span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span>worker<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        scheduledThreadPool<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>scheduledThreadPool<span class=\"token punctuation\">.</span><span class=\"token function\">isTerminated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token comment\">// 等待所有任务完成</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"已完成所有线程\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight raw\"><figcaption data-lang=\"\"><span>执行结果</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>当前时间 &#x3D; 2024-01-11 19:27:10</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pool-1-thread-1 Start. Time &#x3D; 2024-01-11 19:27:21</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>pool-1-thread-3 Start. Time &#x3D; 2024-01-11 19:27:22</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>pool-1-thread-2 Start. Time &#x3D; 2024-01-11 19:27:23</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>pool-1-thread-1 End. Time &#x3D; 2024-01-11 19:27:24</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>pool-1-thread-3 End. Time &#x3D; 2024-01-11 19:27:25</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>pool-1-thread-2 End. Time &#x3D; 2024-01-11 19:27:26</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>已完成所有线程</pre></td></tr></table></figure><blockquote>\n<p>从执行结果可以看出，线程任务确实在 <code>10</code>  秒延迟后才开始执行，这就是 <code>schedule()</code>  方法的使用，下面是两个可用于周期性执行任务的方法。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">ScheduledFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">scheduleAtFixedRate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> command<span class=\"token punctuation\">,</span><span class=\"token keyword\">long</span> initialDelay<span class=\"token punctuation\">,</span><span class=\"token keyword\">long</span> period<span class=\"token punctuation\">,</span><span class=\"token class-name\">TimeUnit</span> unit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p><code>scheduleAtFixedRate()</code>  方法的作用是预定在初始的延迟结束后，周期性得执行给定的任务，周期长度为 <code>period</code>  其中 <code>initialDelay</code>  为初始延迟，将按照固定的时间来执行，即到点执行。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">ScheduledFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">scheduleWithFixedDelay</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> command<span class=\"token punctuation\">,</span><span class=\"token keyword\">long</span> initialDelay<span class=\"token punctuation\">,</span><span class=\"token keyword\">long</span> delay<span class=\"token punctuation\">,</span><span class=\"token class-name\">TimeUnit</span> unit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p><code>scheduleWithFixedDelay</code>  方法的作用是预定在初始的延迟结束后周期性得执行给定任务，在因此调用完成和下一次调用开始之间有长度为 <code>delay</code>  的延迟，其中 <code>initialDelay</code>  为初始延迟，可以简单的理解为等上一个任务结束后，在等固定的时间然后执行。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Date</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ScheduledThreadPoolExecutor</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @Description: 周期方法测试类</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @DateTime: 2024-01-11 19:51 </pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ScheduledTask</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ScheduledThreadPoolExecutor</span> se <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ScheduledThreadPoolExecutor</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fixedPeriodSchedule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 设定可以循环执行的 runnable, 初始延迟为 0，这里设置的任务的间隔为 3 秒</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            se<span class=\"token punctuation\">.</span><span class=\"token function\">scheduleAtFixedRate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FixedSchedule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ScheduledTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token function\">fixedPeriodSchedule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FixedSchedule</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前线程：\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"  当前时间：\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">ScheduledTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight raw\"><figcaption data-lang=\"\"><span>执行结果</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>当前线程：pool-1-thread-4  当前时间：Thu Jan 11 19:52:52 CST 2024</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>当前线程：pool-1-thread-3  当前时间：Thu Jan 11 19:52:52 CST 2024</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>当前线程：pool-1-thread-5  当前时间：Thu Jan 11 19:52:52 CST 2024</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>当前线程：pool-1-thread-2  当前时间：Thu Jan 11 19:52:52 CST 2024</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>当前线程：pool-1-thread-1  当前时间：Thu Jan 11 19:52:52 CST 2024</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>当前线程：pool-1-thread-5  当前时间：Thu Jan 11 19:52:55 CST 2024</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>当前线程：pool-1-thread-3  当前时间：Thu Jan 11 19:52:55 CST 2024</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>当前线程：pool-1-thread-1  当前时间：Thu Jan 11 19:52:55 CST 2024</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>当前线程：pool-1-thread-4  当前时间：Thu Jan 11 19:52:55 CST 2024</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>当前线程：pool-1-thread-2  当前时间：Thu Jan 11 19:52:55 CST 2024</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>当前线程：pool-1-thread-1  当前时间：Thu Jan 11 19:52:58 CST 2024</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>当前线程：pool-1-thread-2  当前时间：Thu Jan 11 19:52:58 CST 2024</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>当前线程：pool-1-thread-5  当前时间：Thu Jan 11 19:52:58 CST 2024</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>当前线程：pool-1-thread-1  当前时间：Thu Jan 11 19:52:58 CST 2024</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>当前线程：pool-1-thread-4  当前时间：Thu Jan 11 19:52:58 CST 2024</pre></td></tr></table></figure><blockquote>\n<p>而 <code>SingleThreadScheduledExecutor</code>  的使用的方法基本是类似的，只不过是单线程罢了。</p>\n</blockquote>\n",
            "tags": [
                "计算机科学",
                "Java",
                "Java深入理解",
                "计算机科学",
                "Java",
                "并发",
                "多线程",
                "线程池"
            ]
        },
        {
            "id": "https://rainrem.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/java/java%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/",
            "url": "https://rainrem.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/java/java%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/",
            "title": "Java多线程深入理解",
            "date_published": "2024-01-07T08:34:48.000Z",
            "content_html": "<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vUmFpblNhdWNlL211bHRpLXRocmVhZGVkLWV4YW1wbGUtZGVtbw==\">🚀本篇章代码 Demo</span></p>\n</blockquote>\n<h1 id=\"多线程概念\"><a class=\"anchor\" href=\"#多线程概念\">#</a> 多线程概念</h1>\n<ul>\n<li>在现代操作系统中启动某一个程序时，操作系统就会为其创建一个进程，而在操作系统中调度最小单位是线程，也被称为轻量级进程，在一个进程里面可以创建多个线程，它们都拥有各自的计数器、栈、堆、局部变量等属性，并且可以访问共享内存变量。</li>\n<li>进程：操作系统中正在运行的程序，是系统进行资源分配和调用的独立单位，每一个进程都拥有它自己的内存空间和系统资源。</li>\n<li>线程：线程是进程中的单个顺序控制流，一个进程如果只有一条执行路径则被称为单线程程序，而如果一个进程有多条执行路径则被称为多线程程序。</li>\n</ul>\n<h1 id=\"多线程创建启动\"><a class=\"anchor\" href=\"#多线程创建启动\">#</a> 多线程创建 &amp; 启动</h1>\n<blockquote>\n<p>多线程有两种创建方法，第一种是继承 <code>Thread</code>  类并重写 <code>run</code>  方法，第二种是实现 <code>Runnable</code>  接口并重写 <code>run</code>  方法。</p>\n</blockquote>\n<blockquote>\n<p>第一种继承 <code>Thread</code>  类并重写 <code>run</code>  方法，示例代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>InheritThread.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: 继承 Thread 实现线程</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2024-01-07 17:52</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InheritThread</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * 重写 run 方法</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第一种继承Thread实现线程。\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>第二种实现 <code>Runnable</code>  接口并重写 <code>run</code>  方法，示例代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>ImplementRunnable.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: 实现 Runnable 接口来实现线程</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2024-01-07 17:54</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ImplementRunnable</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * 使用 Runnable 接口必须重写 run 方法</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第二种实现Runnable接口并重写run方法。\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>线程启动代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>ThreadTest.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: 线程测试</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2024-01-07 17:58</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 第一种继承 Thread 的启动方法</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">InheritThread</span> inheritThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InheritThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 启动线程</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        inheritThread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 第二种实现 Runnable 接口的启动方法</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">ImplementRunnable</span> implementRunnable <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ImplementRunnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">Thread</span> thread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>implementRunnable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 启动线程</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        thread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        执行结果：</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        第一种继承 Thread 并重写 run 方法实现线程。</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        第二种实现 Runnable 接口并重写 run 方法。</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>冷知识：当调用 <code>start()</code>  方法时并不是立即执行多线程的代码，而是使该线程变为可运行状态，什么时候运行多线程代码是由操作系统来决定的。</p>\n</blockquote>\n<h1 id=\"中断线程\"><a class=\"anchor\" href=\"#中断线程\">#</a> 中断线程</h1>\n<blockquote>\n<p>首先什么是中断线程？当线程的 <code>run()</code>  方法执行方法体中的最后一条语句后并经由执行 <code>return</code>  语句返回时，或出现方法中没有捕获的异常时线程将终止。在 <code>Java</code>  早期版本中有一个 <code>stop()</code>  方法，其它线程可以调用它进行终止操作，但现在这个方法已经被弃用了，原因是这个方法会造成一些线程不安全问题。</p>\n</blockquote>\n<blockquote>\n<p>可以将中断理解为一个 <code>flag</code>  属性，它表示一个运行中的线程是否被其它线程进行了中断操作，其它线程通过调用该线程的 <code>interrupt()</code>  方法对其进行中断操作，当一个线程调用 <code>interrupt()</code>  方法时，线程中断状态的 <code>flag</code>  将被改变，这是每个线程都具有的 <code>boolean</code>  类型的标志，每个线程都应该不时的检查这个标志来判断线程是否被中断，判断线程是否被中断的代码是： <code>Thread.currentThread().isInterrupted()</code>  默认没有被中断的状态下是 <code>false</code> 。</p>\n</blockquote>\n<blockquote>\n<p>如果当前线程处于阻塞状态 <code>(sleep|wait)</code> , 就会无法检测中断状态，此时将会抛出 <code>InterruptedException(中断异常)</code> 。如果在每次迭代之后都调用 <code>sleep()</code>  方法或其它线程中断方法，此时 <code>isInterrupted()</code>  检测就没有必要了，如果在中断状态被改变时调用 <code>sleep()</code>  方法，它不会休眠反而会清除这一休眠状态并抛出 <code>InterruptedException</code>  异常。所以如果在循环中调用 <code>sleep()</code>  方法时不要去检测中断状态，只需要捕获 <code>InterruptedException</code>  异常即可，示例代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token comment\">// 线程在睡眠期间中断</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>           <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>注意：在捕捉中断异常时，不要在 <code>catch</code>  块中什么都不处理。</p>\n</blockquote>\n<p><span class=\"red\">不正确的处理方式如下：</span></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><span class=\"red\">正确的处理方式 1：</span></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">throw</span> <span class=\"token class-name\">InterruptedException</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><span class=\"red\">正确的处理方式 2：</span></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 中断当前线程</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">interrupt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>关于中断线程的一些主要方法：</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">返回类型</th>\n<th style=\"text-align:center\">方法名称</th>\n<th style=\"text-align:center\">方法说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>void</code></td>\n<td style=\"text-align:center\"><code>interrupt()</code></td>\n<td style=\"text-align:center\">向线程发送中断请求，线程中断状态将被设置为 <code>true</code> , 如果当前线程被一个 <code>sleep()</code>  调用阻塞，将会抛出 <code>InterruptedException(中断异常)</code> 。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>static boolean</code></td>\n<td style=\"text-align:center\"><code>interrupted()</code></td>\n<td style=\"text-align:center\">测试当前正在执行的线程是否被中断，这是一个静态方法，调用这个方法将会产生一个副作用，那就是它会将当前线程的中断重置为 <code>false</code> 。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>boolean</code></td>\n<td style=\"text-align:center\"><code>isInterrupted()</code></td>\n<td style=\"text-align:center\">判断线程是否被中断，当前方法调用不会产生副作用 (不会改变线程当前的中断状态)。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code> static native Thread</code></td>\n<td style=\"text-align:center\"><code>currentThread()</code></td>\n<td style=\"text-align:center\">返回当前执行线程的 <code>Thread</code>  对象。</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"守护线程\"><a class=\"anchor\" href=\"#守护线程\">#</a> 守护线程</h1>\n<blockquote>\n<p>守护线程的唯一作用就是为其它线程提供服务，可以使用 <code>thread.setDaemon(true)</code>  的方法将线程转为守护线程，计时线程就是一个典型例子，它定时发送 (计时器) 信号来告诉其它线程去执行某项任务。当只剩下守护线程时，虚拟机将会退出，因为如果只剩下守护线程，程序就没有必要执行了。</p>\n</blockquote>\n<blockquote>\n<p>另外 <code>JVM</code>  的垃圾回收、内存管理等都是守护线程，最后要注意的就是在 <code>Java</code>  虚拟机退出时线程中的 <code>finally</code>  代码块并不一定会执行，因此在使用线程时，不能依靠 <code>finally</code>  代码块来确保执行关闭或清理占用资源的逻辑，代码示例如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>GuardianThread.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: 守护线程示例</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2024-01-08 01:26</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GuardianThread</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">Thread</span> thread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">GuardianThreadRunner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GuardianThreadRunner\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 设置为守护线程</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        thread<span class=\"token punctuation\">.</span><span class=\"token function\">setDaemon</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 启动线程</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        thread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GuardianThreadRunner</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"线程中的finally代码块并不一定会执行。\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"线程优先级\"><a class=\"anchor\" href=\"#线程优先级\">#</a> 线程优先级</h1>\n<blockquote>\n<p>什么是线程优先级？在现代操作系统中基本采用时分的形式调度运行的线程，操作系统会分出一个个时间片，线程会分配到若干时间片，当线程的时间片用完了就会发生线程调度，并等待着下一次分配。线程分配到的时间片多少也决定了线程使用处理器资源的多少，而线程优先级就是决定线程需要多少或者少分配一些处理器资源的线程属性。</p>\n</blockquote>\n<blockquote>\n<p>在 <code>Java</code>  线程中，通过一个整形成员变量 <code>priority</code>  来控制优先级，优先级的范围从 <code>1 ~ 10</code> ，在线程构建的时候可以通过 <code>serPriority()</code>  方法来修改优先级，默认优先级是 <code>5</code> ，优先级高的线程分配时间片的数量要多于优先级低的线程。设置线程优先级时，针对频繁阻塞 (休眠或者 <code>I/O</code>  操作) 的线程需要设置较高优先级，而偏重计算 (需要较多 <code>CPU</code>  时间或者偏运算) 的线程则设置较低的优先级，确保处理器不会被独占。在不同的 <code>JVM</code>  以及操作系统上，线程规划会存在差异，有些操作系统甚至会忽略对线程优先级的设定。 <code>(Java并发编程的艺术)</code></p>\n</blockquote>\n<blockquote>\n<p>在 <code>Thread</code>  类中有三种静态常量的优先级，分别是： <code>Thread.MIN_PRIORITY = 1</code> 、 <code>Thread.NORM_PRIORITY = 5</code> 、 <code>Thread.MAX_PRIORITY = 10</code> 。</p>\n</blockquote>\n<blockquote>\n<p>需要注意的是：不要太过于依赖优先级，如果确实要用，则应该避免常犯的一个错误，如果有几个高优先级的线程没有进入非活动状态，优先级低的线程可能永远也不会执行。每当调度器决定运行一个新线程时，首先会在具有高优先级的线程中进行选择，尽管这样使低优先级的线程可能永远不会被执行到。因此我们需要在设置优先级时，针对频繁阻塞的线程需要设置较高的优先级，而偏重计算的线程则设置较低的优先级，这样才能确保处理器不会被长久独占。</p>\n</blockquote>\n<h1 id=\"线程状态转化关系\"><a class=\"anchor\" href=\"#线程状态转化关系\">#</a> 线程状态转化关系</h1>\n<ul>\n<li><code>New(新建状态)</code> ：新建一个线程对象。</li>\n<li><code>Runnable(就绪状态)</code> ：在线程对象创建后，其它线程调用该对象的 <code>start()</code>  方法，该状态的线程位于可运行线程池中变得可运行并等待 <code>CPU</code>  的使用权。</li>\n<li><code>Running(运行状态)</code> ：就绪状态的线程获取了 <code>CPU</code>  并执行程序代码。</li>\n<li><code>Blocked(阻塞状态)</code> ：阻塞状态是线程因为某种原因放弃 <code>CPU</code>  使用权，暂时停止运行，直到线程进入就绪状态下才有机会转到运行状态。阻塞状态分为三种情况：\n<ul>\n<li><code>Waiting(等待阻塞)</code> ：运行的线程执行 <code>wait()</code>  方法， <code>JVM</code>  会把该线程放入等待池中。</li>\n<li><code>Blocked(同步阻塞)</code> ：运行的线程在获取对象的同步锁时，若该同步锁被别的线程占用则 <code>JVM</code>  会把该线程放入锁池中。</li>\n<li><code>TimeWaiting(超时阻塞)</code> ：运行的线程执行 <code>sleep()</code>  或 <code>join()</code>  方法以及发出 <code>I/O</code>  请求时， <code>JVM</code>  会把该线程置为阻塞状态。</li>\n</ul>\n</li>\n<li><code>Dead(死亡状态)</code> ：线程执行完毕或因异常退出了 <code>run()</code>  方法时该线程将结束生命周期。</li>\n</ul>\n<p><img data-src=\"https://s11.ax1x.com/2024/01/08/pFSNgzt.png\" alt=\"pFSNgzt.png\" /></p>\n<blockquote>\n<p>上图中的方法解析如下：</p>\n</blockquote>\n<ul>\n<li><code>Thread.sleep()</code> ：在指定时间内让当前正在执行的线程暂停工作，但不会释放 <code>锁标志</code> ，不推荐使用。</li>\n<li><code>Thread.sleep(long)</code> ：使当前线程进入阻塞状态，在指定时间内不会执行。</li>\n<li><code>Object.notify()</code> ：从对象等待池中唤醒其中一个线程。</li>\n<li><code>Object.notifyAll()</code> ：从对象等待池中唤醒所有等待线程。</li>\n<li><code>Thread.yieId()</code> ：暂停当前正在执行的线程对象， <code>yieId()</code>  方法只是使当前线程重新回到可执行状态，所以执行 <code>yieId()</code>  方法的线程有可能再进入到可执行状态后马上又被执行， <code>yieId()</code>  方法只能使同优先级或更高优先级的线程有机会执行。</li>\n<li><code>Thread.join()</code> ：把指定的线程加入到当前线程，可以将两个交替执行的线程合并为顺序执行的线程。如：在线程 <code>B</code>  中调用了线程 <code>A</code>  的 <code>join()</code>  方法，那么直到线程 <code>A</code>  执行完毕后才会继续执行线程 <code>B</code> 。</li>\n<li><code>Object.wait()/Object.wait(long)</code> ：在其它线程调用对象的 <code>notify()</code>  或 <code>notifyAll()</code>  方法前，导致当前线程等待，线程会释放掉他所占用的 <code>锁标志</code> ，从而使别的线程有机会抢占该锁，当前线程必须拥有当前对象锁，如果当前线程不是此锁的拥有者将会抛出 <code>IllegalMonitorStateException</code>  异常。唤醒当前对象锁的等待线程使用 <code>notify()</code>  或 <code>notifyAll()</code>  方法，也必须拥有相同的对象锁否则也会抛出 <code>IllegalMonitorStateException</code>  异常， <code>waite()</code>  和 <code>notify()</code>  方法必须在 <code>synchronized</code>  方法或者是 <code>synchronized</code>  代码块中调用，如果不在 <code>synchronized</code>  方法或代码块中进行调用则会在运行期间抛出 <code>IllegalMonitorStateException</code>  异常。</li>\n</ul>\n<h1 id=\"线程同步问题\"><a class=\"anchor\" href=\"#线程同步问题\">#</a> 线程同步问题</h1>\n<blockquote>\n<p>线程同步问题的产生，先来看下面示例代码的卖票系统：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: 卖票类 会产生线程同步问题</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2024-01-08 18:47</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SellTicket</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   * 当前票数</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>          <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>          <span class=\"token comment\">// 打印卖票信息</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>          <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"......\"</span> <span class=\"token operator\">+</span> num<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> ignored<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token class-name\">SellTicket</span> sellTicket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SellTicket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">// 创建 4 个线程同时卖票</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>sellTicket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token class-name\">Thread</span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>sellTicket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token class-name\">Thread</span> t3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>sellTicket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token class-name\">Thread</span> t4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>sellTicket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\">// 启动线程</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    t1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    t2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    t3<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    t4<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight raw\"><figcaption data-lang=\"\"><span>执行结果</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>...............</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Thread-2......6</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Thread-0......5</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Thread-1......4</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Thread-0......2</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Thread-2......3</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Thread-3......4</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Thread-0......1</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Thread-2......1</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Thread-1......1</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Thread-3......0</pre></td></tr></table></figure><blockquote>\n<p>从执行结果中可以看出三个售票窗口同时卖出了 <code>1</code>  号票，这当然是不正确的逻辑，这个问题就是线程同步问题，不同的线程都对同一个数据进行操作就很容易导致数据错乱问题，也就是所谓的线程不同步。</p>\n</blockquote>\n<blockquote>\n<p>在解决这个问题之前先来分析一下为什么会产生这种结果？当声明一个 <code>SellTicket</code>  线程类，在这个类中又声明了一个成员变量 <code>num</code> , 然后通过 <code>run()</code>  方法不断的去获取 <code>num</code>  的值并输出，在输出时并且又进行了 <code>num-1</code>  操作，最后在 <code>main</code>  方法中创建了四个线程同时操作这个数据，当程序运行后就出现了线程同步问题，可以看出产生线程同步问题的条件有两个：第一种是多个线程在操作共享数据 <code>(num)</code> , 第二种是操作共享数据的线程有多条。</p>\n</blockquote>\n<blockquote>\n<p>在 <code>Java</code>  中有两种防止线程安全问题的发生， <code>Java</code>  提供了一个 <code>synchronized</code>  关键字来解决这个问题，同时在 <code>JavaSE 5.0</code>  中还引入了 <code>Lock</code>  锁对象的相关类。<a href=\"#%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3\">线程同步问题的解决</a></p>\n</blockquote>\n<h1 id=\"锁对象的介绍\"><a class=\"anchor\" href=\"#锁对象的介绍\">#</a> 锁对象的介绍</h1>\n<h2 id=\"lock-通过锁\"><a class=\"anchor\" href=\"#lock-通过锁\">#</a> Lock - 通过锁</h2>\n<blockquote>\n<p><code>Lock</code>  锁对象，在 <code>Java</code>  中锁是用来控制多个线程访问共享数据的方式，一个锁能够防止多个线程同时访问共享数据 (但读写锁可以允许多个线程同时访问共享数据)，在 <code>LOck</code>  接口出现之前， <code>Java</code>  是靠 <code>synchronized</code>  关键字实现的锁功能，在 <code>JavaSE 5.0</code>  之后并发包中新增了 <code>Lock</code>  接口用来实现锁功能，它提供了与 <code>synchronized</code>  关键字类似的同步功能，只是在使用时需要显式地获取和释放锁，缺点就是缺少像 <code>synchronized</code>  那样隐式获取释放锁的便捷性，但是却拥有了锁获取与释放的可操作性，可中断获取锁以及超时获取锁等多种 <code>synchronized</code>  关键字所不具备的同步特性。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">返回类型</th>\n<th style=\"text-align:center\">方法名称</th>\n<th style=\"text-align:center\">方法说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>void</code></td>\n<td style=\"text-align:center\"><code>lock()</code></td>\n<td style=\"text-align:center\">获取锁，调用该方法会使当前线程获取锁，当获取锁后从该方法返回。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>void</code></td>\n<td style=\"text-align:center\"><code>lockInterruptibly()</code></td>\n<td style=\"text-align:center\">可中断获取锁和 <code>lock()</code>  方法不同的是该方法会响应中断，即在获取锁中可以中断当前线程。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>boolean </code></td>\n<td style=\"text-align:center\"><code>tryLock()</code></td>\n<td style=\"text-align:center\">尝试非阻塞获取锁，调用该方法后立即返回，如果能够获取锁则返回 <code>true</code>  否则返回 <code>false</code> 。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>boolean </code></td>\n<td style=\"text-align:center\"><code>tryLock(long time, TimeUnit unit)</code></td>\n<td style=\"text-align:center\">超时获取锁，当前线程会在三种情况下返回，1. 当前线程在超时时间内获取了锁，2. 当前线程在超时时间被中断，3. 当前线程超时时间结束将返回 <code>false</code> 。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>void</code></td>\n<td style=\"text-align:center\"><code>unlock()</code></td>\n<td style=\"text-align:center\">释放锁。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>Condition</code></td>\n<td style=\"text-align:center\"><code>newCondition()</code></td>\n<td style=\"text-align:center\">条件对象，获取等待通知组件，该组件和当前的锁绑定，当前线程只有获取了锁，才可以调用该组件的 <code>await()</code>  方法，在调用后当前线程将释放锁。</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>在后面将结合 <code>Lock</code>  接口的子实现类 <code>ReentrantLock</code>  类来使用某些方法。</p>\n</blockquote>\n<h2 id=\"reentrantlock-重入锁\"><a class=\"anchor\" href=\"#reentrantlock-重入锁\">#</a> ReentrantLock - 重入锁</h2>\n<blockquote>\n<p>重入锁就是支持重新进入的锁，它表示该锁能够支持一个线程对资源的重复加锁，就是说在调用 <code>lock()</code>  方法时，已经获取到锁的线程并且能够再次调用 <code>lock()</code>  方法获取锁而不被阻塞，同时还支持获取锁的公平性和非公平性。公平性是在绝对时间上，先对锁进行获取的请求一定先被满足，那么这个锁是公平锁反之是不公平锁，示例代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>ReentrantLockDemo.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Description: 类似于 synchronized 的同步执行</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @DateTime: 2024-01-09 01:50</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ReentrantLockDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">/// 参数默认 false，不公平锁  </span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">ReentrantLock</span> lock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 公平锁</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">ReentrantLock</span> lock2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 如果被其它资源锁定，会在此等待锁释放，达到暂停效果</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token comment\">// 操作  </span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 释放锁</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>ReentrantLockDemo2.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Description: 防止重复执行代码</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @DateTime: 2024-01-09 01:53</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ReentrantLockDemo2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">ReentrantLock</span> lock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 如果已经被 lock，则立即返回 false 不会等待，达到忽略操作的效果</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">tryLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token comment\">// 操作</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>ReentrantLockDemo3.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @Description: 尝试等待执行</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @DateTime: 2024-01-09 02:03</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ReentrantLockDemo3</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 公平锁</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">ReentrantLock</span> lock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lock<span class=\"token punctuation\">.</span><span class=\"token function\">tryLock</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token comment\">// 如果已经被 lock，尝试等待 3s，看是否可以获得锁，如果 5s 后仍然无法获得锁则返回 false 继续执行</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    <span class=\"token comment\">// 操作</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                    lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token comment\">// 当前线程被中断时 (interrupt)，会抛 InterruptedException</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>注意：需要把解锁操作放在 <code>finally</code>  代码块中的第一行的位置这个十分重要。如在临界区的代码抛出异常，锁必须被释放否则其它线程将永远被阻塞。</p>\n</blockquote>\n<h1 id=\"线程同步问题的解决\"><a class=\"anchor\" href=\"#线程同步问题的解决\">#</a> 线程同步问题的解决</h1>\n<h2 id=\"reentrantlock\"><a class=\"anchor\" href=\"#reentrantlock\">#</a> ReentrantLock</h2>\n<blockquote>\n<p>下面是通过 <code>ReentrantLock</code>  来解决卖票的线程同步问题，代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>SellTicketLock.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Lock</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @Description: 卖票类：使用 ReentrantLock 解决线程同步问题</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @DateTime: 2024-01-08 18:47</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SellTicketLock</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     * 创建锁对象</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Lock</span> lock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     * 当前票数</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token comment\">// 获取锁</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                    <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    <span class=\"token comment\">// 打印卖票信息</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"......\"</span> <span class=\"token operator\">+</span> num<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token comment\">// 出现异常就中断</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">interrupt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token comment\">// 释放锁</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token class-name\">SellTicketLock</span> sellTicket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SellTicketLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token comment\">// 创建 4 个线程同时卖票</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>sellTicket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>sellTicket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>sellTicket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>sellTicket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token comment\">// 启动线程</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        t1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        t2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        t3<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        t4<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight raw\"><figcaption data-lang=\"\"><span>执行结果</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Thread-0......100</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Thread-0......99</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Thread-0......98</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Thread-0......97</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Thread-0......96</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Thread-0......95</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Thread-0......94</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Thread-0......93</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Thread-0......92</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Thread-0......91</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Thread-0......90</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Thread-0......89</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Thread-0......88</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>Thread-0......87</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Thread-0......86</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>Thread-0......85</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>Thread-0......84</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>Thread-0......83</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>Thread-0......82</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>Thread-0......81</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>Thread-0......80</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>Thread-0......79</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>Thread-0......78</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>Thread-0......77</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>Thread-0......76</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>Thread-0......75</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>Thread-0......74</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>Thread-0......73</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>Thread-0......72</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>Thread-0......71</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>Thread-0......70</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>Thread-0......69</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>Thread-0......68</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>Thread-0......67</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>Thread-0......66</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>Thread-0......65</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>Thread-0......64</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>Thread-0......63</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>Thread-0......62</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>Thread-0......61</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>Thread-0......60</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>Thread-0......59</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>Thread-0......58</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>Thread-0......57</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>Thread-0......56</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>Thread-0......55</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>Thread-0......54</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>Thread-0......53</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>Thread-0......52</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>Thread-0......51</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>Thread-0......50</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>Thread-0......49</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>Thread-0......48</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>Thread-0......47</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>Thread-0......46</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>Thread-0......45</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>Thread-0......44</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>Thread-0......43</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>Thread-0......42</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>Thread-0......41</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>Thread-0......40</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>Thread-0......39</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>Thread-0......38</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>Thread-0......37</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>Thread-0......36</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>Thread-0......35</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>Thread-0......34</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>Thread-0......33</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>Thread-0......32</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>Thread-0......31</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>Thread-0......30</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>Thread-0......29</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>Thread-0......28</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>Thread-0......27</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>Thread-0......26</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>Thread-0......25</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>Thread-0......24</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>Thread-0......23</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>Thread-0......22</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>Thread-0......21</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>Thread-0......20</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>Thread-0......19</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>Thread-0......18</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>Thread-0......17</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>Thread-0......16</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>Thread-0......15</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>Thread-0......14</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>Thread-0......13</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>Thread-0......12</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>Thread-0......11</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>Thread-0......10</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>Thread-0......9</pre></td></tr><tr><td data-num=\"93\"></td><td><pre>Thread-0......8</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>Thread-0......7</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>Thread-0......6</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>Thread-0......5</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>Thread-0......4</pre></td></tr><tr><td data-num=\"98\"></td><td><pre>Thread-0......3</pre></td></tr><tr><td data-num=\"99\"></td><td><pre>Thread-0......2</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>Thread-0......1</pre></td></tr><tr><td data-num=\"101\"></td><td><pre></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>进程已结束，退出代码 0</pre></td></tr></table></figure><blockquote>\n<p>从执行结果中可以看出当前的执行结果没有卖出重复的车票，线程安全问题就此解决。</p>\n</blockquote>\n<h2 id=\"synchronized\"><a class=\"anchor\" href=\"#synchronized\">#</a> synchronized</h2>\n<blockquote>\n<p>在 <code>Java</code>  中可以使用 <code>synchronized</code>  关键字来简化多线程中的代码，并且还可以解决线程安全问题，自 <code>JavaSE 1.0</code>  开始， <code>Java</code>  中的每一个对象都有一个内部锁，如果一个方法使用 <code>synchronized</code>  关键字进行声明，那么这个对象将会保护整个方法，也就是说在调用该方法时线程必须获得内部对象锁才可以进一步执行。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">//...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// ↑等价于↓</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">Lock</span> lock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">//.......</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>可以看的出来使用 <code>synchronized</code>  关键字代码简洁很多，我们必须知道每个对象都有一个内部锁，并且该锁有一个内部条件，由锁来管理那些试图进入 <code>synchronized</code>  方法的线程，由条件来管理那些调用 <code>wait()/notify()/notifyAll()</code>  的线程。同时还需要明白另一件事就是一旦有一个线程通过 <code>synchronized</code>  方法获取到内部锁，该类的所有 <code>synchronized</code>  方法或代码块都无法被其它线程访问，直到当前线程释放了内部锁。</p>\n</blockquote>\n<blockquote>\n<p><code>synchronized</code>  同步代码块如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Object</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 需要同步的代码</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//obj 是对象锁，它可以是任意对象，也可以使用 this 则代表使用当前对象作为锁对象</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 需要同步的代码</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>下面是使用 <code>synchronized</code>  代码块来解决线程同步问题，代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>SellTicketSynchronized.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: 卖票类 使用 synchronized 解决线程同步问题</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2024-01-08 18:47</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SellTicketSynchronized</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * 当前票数</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                        <span class=\"token comment\">// 打印卖票信息</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"......\"</span> <span class=\"token operator\">+</span> num<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> ignored<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\">SellTicketSynchronized</span> sellTicket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SellTicketSynchronized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\">// 创建 4 个线程同时卖票</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>sellTicket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>sellTicket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>sellTicket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>sellTicket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token comment\">// 启动线程</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        t1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        t2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        t3<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        t4<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight raw\"><figcaption data-lang=\"\"><span>执行结果</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>C:\\LightRainData\\IDEA\\JDK\\JDK-17.0.6\\bin\\java.exe &quot;-javaagent:C:\\LightRainData\\IDEA\\IntelliJ IDEA 2022.3.2\\lib\\idea_rt.jar&#x3D;1866:C:\\LightRainData\\IDEA\\IntelliJ IDEA 2022.3.2\\bin&quot; -Dfile.encoding&#x3D;UTF-8 -classpath D:\\ 项目 \\gitee\\multi-threaded-example\\target\\classes top.rem.rain.demo1.SellTicketSynchronized</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Thread-0......100</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Thread-0......99</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Thread-0......98</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Thread-0......97</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Thread-0......96</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Thread-0......95</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Thread-0......94</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Thread-0......93</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Thread-0......92</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Thread-0......91</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Thread-0......90</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Thread-0......89</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>Thread-0......88</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Thread-0......87</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>Thread-0......86</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>Thread-0......85</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>Thread-0......84</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>Thread-0......83</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>Thread-0......82</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>Thread-0......81</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>Thread-0......80</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>Thread-0......79</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>Thread-0......78</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>Thread-0......77</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>Thread-0......76</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>Thread-0......75</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>Thread-0......74</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>Thread-0......73</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>Thread-0......72</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>Thread-0......71</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>Thread-0......70</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>Thread-0......69</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>Thread-0......68</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>Thread-0......67</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>Thread-0......66</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>Thread-0......65</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>Thread-0......64</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>Thread-0......63</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>Thread-0......62</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>Thread-0......61</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>Thread-0......60</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>Thread-0......59</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>Thread-0......58</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>Thread-0......57</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>Thread-0......56</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>Thread-0......55</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>Thread-0......54</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>Thread-0......53</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>Thread-0......52</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>Thread-0......51</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>Thread-0......50</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>Thread-0......49</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>Thread-0......48</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>Thread-0......47</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>Thread-0......46</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>Thread-0......45</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>Thread-0......44</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>Thread-0......43</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>Thread-0......42</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>Thread-0......41</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>Thread-0......40</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>Thread-0......39</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>Thread-0......38</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>Thread-0......37</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>Thread-0......36</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>Thread-0......35</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>Thread-0......34</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>Thread-0......33</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>Thread-0......32</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>Thread-0......31</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>Thread-0......30</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>Thread-0......29</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>Thread-0......28</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>Thread-0......27</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>Thread-0......26</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>Thread-0......25</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>Thread-0......24</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>Thread-0......23</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>Thread-0......22</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>Thread-0......21</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>Thread-0......20</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>Thread-0......19</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>Thread-0......18</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>Thread-0......17</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>Thread-0......16</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>Thread-0......15</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>Thread-0......14</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>Thread-0......13</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>Thread-0......12</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>Thread-0......11</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>Thread-0......10</pre></td></tr><tr><td data-num=\"93\"></td><td><pre>Thread-0......9</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>Thread-0......8</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>Thread-0......7</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>Thread-0......6</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>Thread-0......5</pre></td></tr><tr><td data-num=\"98\"></td><td><pre>Thread-0......4</pre></td></tr><tr><td data-num=\"99\"></td><td><pre>Thread-0......3</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>Thread-0......2</pre></td></tr><tr><td data-num=\"101\"></td><td><pre>Thread-0......1</pre></td></tr><tr><td data-num=\"102\"></td><td><pre></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>进程已结束，退出代码 0</pre></td></tr></table></figure><blockquote>\n<p>这样就可以解决线程安全问题了，当然代码同步是要牺牲效率为前提的，同步的好处是解决了线程安全问题，同步的弊端是降低了执行效率，因为同步外的线程都会判断同步锁，同步的前提是同步中必须有多个线程并使用同一个锁。</p>\n</blockquote>\n<h1 id=\"线程间的通信\"><a class=\"anchor\" href=\"#线程间的通信\">#</a> 线程间的通信</h1>\n<blockquote>\n<p>线程在运行时都拥有自动的栈空间，但如果每个线程在运行中仅仅是孤立地运行，那么这就将会变得毫无价值，如果多线程能够相互配合完成工作，这将带来巨大的价值，这也就是所谓的线程间的通信，在 <code>Java</code>  中多线程的通信使用的是等待 / 通知机制来实现的。</p>\n</blockquote>\n<h2 id=\"等待通知-synchronized\"><a class=\"anchor\" href=\"#等待通知-synchronized\">#</a> 等待 / 通知 - synchronized</h2>\n<blockquote>\n<p><code>synchronized</code>  等待 / 通知是指一个线程 <code>A</code>  调用了 <code>Object</code>  类中的 <code>wait()</code>  方法进入等待状态，而另一个线程 <code>B</code>  调用了 <code>Object</code>  类中的 <code>notify()/notifyAll()</code>  方法，当线程 <code>A</code>  收到通知后从对象 <code>Object</code>  的 <code>wait()</code>  方法返回进而执行后续操作。</p>\n</blockquote>\n<blockquote>\n<p>上述中的两个线程通过 <code>Object</code>  对象来完成交互，而对象上的 <code>wait()/notify()/notifyAll()</code>  的关系就跟信号开关一样，用来完成等待方和通知方之间的交互。</p>\n</blockquote>\n<blockquote>\n<p>等待 / 通知的机制主要用到的是 <code>notify()</code> 、 <code>notifyAll()</code> 、 <code>wait()</code> 、 <code>wait(long)</code> 、 <code>wait(long,int)</code>  这些方法，当然这是针对 <code>synchronized</code>  关键字修饰的方法或者代码块，因为要使用这些方法的前提是对调用对象加锁，也就是只能在同步方法或同步代码块中来使用。</p>\n</blockquote>\n<h2 id=\"等待通知-条件对象\"><a class=\"anchor\" href=\"#等待通知-条件对象\">#</a> 等待 / 通知 - 条件对象</h2>\n<blockquote>\n<p>条件对象就是前面的 <code>Lock</code>  锁对象，通过锁对象的条件来实现等待 / 通知机制。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建条件对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Condition</span> condition <span class=\"token operator\">=</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">newCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>返回的对象就是与该锁 <code>(lock)</code>  相关的条件对象，条件对象 <code>API</code>  如下：</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">返回类型</th>\n<th style=\"text-align:center\">方法名称</th>\n<th style=\"text-align:center\">方法说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>void</code></td>\n<td style=\"text-align:center\"><code>await()</code></td>\n<td style=\"text-align:center\">将该线程放到条件等待池中 (对应 <code>wait()</code>  方法)。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>void</code></td>\n<td style=\"text-align:center\"><code>signal()</code></td>\n<td style=\"text-align:center\">从该条件等待池中随机选择一个线程解除其阻塞状态 (对应 <code>notify()</code>  方法)。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>void</code></td>\n<td style=\"text-align:center\"><code>signalAll()</code></td>\n<td style=\"text-align:center\">解除该条件等待池中的所有线程阻塞状态 (对应 <code>notifyAll()</code>  方法)。</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>上述方法过程分析：当一个线程 <code>A</code>  调用了条件对象的 <code>await()</code>  方法进入等待状态，而另一个线程 <code>B</code>  调用了条件对象的 <code>signal()</code>  或 <code>signalAll()</code>  方法，线程 <code>A</code>  收到通知后从条件对象的 <code>await()</code>  方法返回并执行后续操作。</p>\n</blockquote>\n<blockquote>\n<p>这就是两个线程通过条件对象来完成交互，而对象上的 <code>await()</code>  和 <code>signal()</code>  以及 <code>signalAll()</code>  的关系如同信号开关一样，用来完成等待方和通知方之间的交互。当然这样的操作都是必须基于对象锁，当前线程只有获取了锁才可以调用该条件对象的 <code>await()</code>  方法，调用后当前线程将释放锁。</p>\n</blockquote>\n<blockquote>\n<p>注意：在上述两种等待 / 通知机制中无论是调用 <code>signal()</code>  或 <code>signalAll()</code>  方法还是调用 <code>notify()</code>  以及 <code>notifyAll()</code>  方法都不会立即激活一个等待线程，它们仅仅只是解除等待线程的阻塞状态，以便这些线程可以在当前线程解锁或退出同步方法后，通过争夺 <code>CPU</code>  执行权来实现对象的访问。</p>\n</blockquote>\n<h1 id=\"生产者消费者模式\"><a class=\"anchor\" href=\"#生产者消费者模式\">#</a> 生产者 &amp; 消费者模式</h1>\n<h2 id=\"单生产者单消费者\"><a class=\"anchor\" href=\"#单生产者单消费者\">#</a> 单生产者 &amp; 单消费者</h2>\n<blockquote>\n<p>单生产者与单消费者模式就是一个线程生产一个线程消费，下面是等待 / 通知机制下的单生产者与单消费者模式，如是卖北京烤鸭的一个店铺，现在只有一条生产线并只有一条消费路径，就是说只能等生产线生产完成后再通知消费路径去卖，如果消费路径没有烤鸭了就必须通知生产线去生产，此时消费路径将进入等待状态。</p>\n</blockquote>\n<blockquote>\n<p>在这种场景下我们不仅要保证共享数据 (烤鸭数量) 的线程安全，而且还要保证烤鸭数量在消费之前必须有烤鸭，代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>PekingDuck.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: 北京烤鸭 - 单生产者与单消费者</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2024-01-09 15:38</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PekingDuck</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * 烤鸭数量</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     * 烤鸭名称</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> pekingDuckName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     * 线程等待标志</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>     * 生产烤鸭</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>     * @param pekingDuckName 烤鸭名称</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">production</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> pekingDuckName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token comment\">// 有烤鸭进入等待状态</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token comment\">// 设置烤鸭名称和数量</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pekingDuckName <span class=\"token operator\">=</span> pekingDuckName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token comment\">// 数量 + 1</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".生产者：\"</span> <span class=\"token operator\">+</span> pekingDuckName <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token comment\">// 有烤鸭后改变状态</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token comment\">// 通知消费线程来消费烤鸭</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>     * 消费烤鸭</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">consumption</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token comment\">// 没有烤鸭就进入等待状态</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token comment\">// 消费一只烤鸭</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".消费者：\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pekingDuckName <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token comment\">// 没有烤鸭后改变状态</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token comment\">// 通知生产线程来生产烤鸭</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>     * 生产者线程</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ProducerThread</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">PekingDuck</span> pekingDuck<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">ProducerThread</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PekingDuck</span> pekingDuck<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pekingDuck <span class=\"token operator\">=</span> pekingDuck<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                pekingDuck<span class=\"token punctuation\">.</span><span class=\"token function\">production</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"北京烤鸭\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>     * 消费者线程</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConsumerThread</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">PekingDuck</span> pekingDuck<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">ConsumerThread</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PekingDuck</span> pekingDuck<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pekingDuck <span class=\"token operator\">=</span> pekingDuck<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>                pekingDuck<span class=\"token punctuation\">.</span><span class=\"token function\">consumption</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        <span class=\"token comment\">// 创建烤鸭店铺对象</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        <span class=\"token class-name\">PekingDuck</span> pekingDuck <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PekingDuck</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>        <span class=\"token comment\">// 创建生产者</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>        <span class=\"token class-name\">ProducerThread</span> producerThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ProducerThread</span><span class=\"token punctuation\">(</span>pekingDuck<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>        <span class=\"token comment\">// 创建消费者</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        <span class=\"token class-name\">ConsumerThread</span> consumerThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConsumerThread</span><span class=\"token punctuation\">(</span>pekingDuck<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token comment\">// 创建生产者线程</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>producerThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>        <span class=\"token comment\">// 创建消费者线程</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>consumerThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>        <span class=\"token comment\">// 启动线程</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>        t1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>        t2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>在上面的类中有两个 <code>synchronized</code>  同步方法，一个是生产烤鸭，另一个是消费烤鸭，之所以需要使用同步是因为我们操作了共享数据 <code>count</code> ，同时为了保证生产烤鸭后才可以进行消费，使用了等待 / 通知机制的 <code>wait()</code>  和 <code>notify()</code>  方法。</p>\n</blockquote>\n<blockquote>\n<p>当第一次运行生产时调用了生产方法，此时有 <code>0</code>  只烤鸭，即 <code>flag = false</code>  此时不需要等待消费者来消费，因为当前没有可消费的烤鸭，设置烤鸭名称然后烤鸭数量 <code>+1</code> ，此时就生产了一只烤鸭，随后改变 <code>flag = true</code> , 同时通知消费线程可以来消费烤鸭了，即使此时生产线程再次抢到了执行权因为当前的 <code>flag = true</code> , 所以生产线程会进入等待的阻塞状态，消费者线程被唤醒后进入消费方法，等消费完成后又将 <code>flag</code>  的值设置为了 <code>false</code>  状态，通知生产线程可以再生产烤鸭了，以此循环，只要卖出一只我就生产一只。</p>\n</blockquote>\n<blockquote>\n<p>在 <code>main</code>  方法中创建了两个线程，一个是生产线程，一个是消费线程，当开启这两个线程后就会不断的生产消费一直循环，下面是执行结果。</p>\n</blockquote>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"><span>执行结果</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>C:\\LightRainData\\IDEA\\JDK\\JDK-17.0.6\\bin\\java.exe &quot;-javaagent:C:\\LightRainData\\IDEA\\IntelliJ IDEA 2022.3.2\\lib\\idea_rt.jar&#x3D;8168:C:\\LightRainData\\IDEA\\IntelliJ IDEA 2022.3.2\\bin&quot; -Dfile.encoding&#x3D;UTF-8 -classpath D:\\ 项目 \\gitee\\multi-threaded-example\\target\\classes top.rem.rain.demo2.PekingDuck</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Thread-0. 生产者：北京烤鸭 1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Thread-1. 消费者：北京烤鸭 1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Thread-0. 生产者：北京烤鸭 2</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Thread-1. 消费者：北京烤鸭 2</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Thread-0. 生产者：北京烤鸭 3</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Thread-1. 消费者：北京烤鸭 3</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Thread-0. 生产者：北京烤鸭 4</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Thread-1. 消费者：北京烤鸭 4</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Thread-0. 生产者：北京烤鸭 5</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Thread-1. 消费者：北京烤鸭 5</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Thread-0. 生产者：北京烤鸭 6</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Thread-1. 消费者：北京烤鸭 6</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>Thread-0. 生产者：北京烤鸭 7</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Thread-1. 消费者：北京烤鸭 7</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>........................</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>进程已结束，退出代码 130</pre></td></tr></table></figure><blockquote>\n<p>从执行结果中可以看出当生产一只烤鸭就会消费一只烤鸭，运行完全正常，这就是单生产者与单消费者模式，下面将使用对象锁的方式来修改，代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>PekingDuckLock.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Condition</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Lock</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @Description: 北京烤鸭 - 单生产者与单消费者</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @DateTime: 2024-01-09 15:38</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PekingDuckLock</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     * 烤鸭数量</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     * 烤鸭名称</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> pekingDuckName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>     * 线程等待标志</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>     * 创建锁对象</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Lock</span> lock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>     * 创建条件对象</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Condition</span> condition <span class=\"token operator\">=</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">newCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>     * 生产烤鸭</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>     * @param pekingDuckName 烤鸭名称</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">production</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> pekingDuckName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token comment\">// 获取锁</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                    <span class=\"token comment\">// 有烤鸭进入等待状态</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                    condition<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token comment\">// 设置烤鸭名称和数量</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pekingDuckName <span class=\"token operator\">=</span> pekingDuckName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token comment\">// 数量 + 1</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".生产者：\"</span> <span class=\"token operator\">+</span> pekingDuckName <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token comment\">// 有烤鸭后改变状态</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token comment\">// 通知消费线程来消费烤鸭</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            condition<span class=\"token punctuation\">.</span><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token comment\">// 释放锁</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>     * 消费烤鸭</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">consumption</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token comment\">// 获取锁</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>            <span class=\"token comment\">// 没有烤鸭就进入等待状态</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>                    condition<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            <span class=\"token comment\">// 消费一只烤鸭</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".消费者：\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pekingDuckName <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>            <span class=\"token comment\">// 没有烤鸭后改变状态</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            <span class=\"token comment\">// 通知生产线程来生产烤鸭</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>            condition<span class=\"token punctuation\">.</span><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>            <span class=\"token comment\">// 释放锁</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>            lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>     * 生产者线程</pre></td></tr><tr><td data-num=\"101\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ProducerThread</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">PekingDuckLock</span> pekingDuck<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">ProducerThread</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PekingDuckLock</span> pekingDuck<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pekingDuck <span class=\"token operator\">=</span> pekingDuck<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>                pekingDuck<span class=\"token punctuation\">.</span><span class=\"token function\">production</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"北京烤鸭\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"118\"></td><td><pre>     * 消费者线程</pre></td></tr><tr><td data-num=\"119\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConsumerThread</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">PekingDuckLock</span> pekingDuck<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">ConsumerThread</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PekingDuckLock</span> pekingDuck<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pekingDuck <span class=\"token operator\">=</span> pekingDuck<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>                pekingDuck<span class=\"token punctuation\">.</span><span class=\"token function\">consumption</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>        <span class=\"token comment\">// 创建烤鸭店铺对象</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>        <span class=\"token class-name\">PekingDuckLock</span> pekingDuck <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PekingDuckLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>        <span class=\"token comment\">// 创建生产者</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>        <span class=\"token class-name\">ProducerThread</span> producerThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ProducerThread</span><span class=\"token punctuation\">(</span>pekingDuck<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>        <span class=\"token comment\">// 创建消费者</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>        <span class=\"token class-name\">ConsumerThread</span> consumerThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConsumerThread</span><span class=\"token punctuation\">(</span>pekingDuck<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>        <span class=\"token comment\">// 创建生产者线程</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>producerThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>        <span class=\"token comment\">// 创建消费者线程</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>consumerThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>        <span class=\"token comment\">// 启动线程</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>        t1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>        t2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>通过使用对象锁的方式来实现，首先创建一个对象锁，这里使用是 <code>ReentrantLock</code>  重入锁，需要手动设置 <code>lock()</code>  和 <code>unlock()</code>  方法去获取锁和释放锁，为了实现等待 / 通知机制，此时还需要通过锁对象去创建一个条件对象 <code>Condition</code> ，然后通过锁对象的 <code>await()</code>  和 <code>signal()</code>  方法来实现等待和通知操作，执行结果和上面使用 <code>synchronized</code>  关键字是一样的结果就不贴了。</p>\n</blockquote>\n<h2 id=\"多生产者多消费者模式\"><a class=\"anchor\" href=\"#多生产者多消费者模式\">#</a> 多生产者 &amp; 多消费者模式</h2>\n<blockquote>\n<p>多生产者与多消费者模式就是多条生产线与多条消费路径，在上面示例代码中的 <code>main</code>  方法中新添加两条线程即可，其它地方并未修改，代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>PekingDuck2.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: 北京烤鸭 - 多生产者与多消费者</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2024-01-09 15:38</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PekingDuck2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * 烤鸭数量</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     * 烤鸭名称</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> pekingDuckName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     * 线程等待标志</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>     * 生产烤鸭</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>     * @param pekingDuckName 烤鸭名称</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">production</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> pekingDuckName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token comment\">// 有烤鸭进入等待状态</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token comment\">// 设置烤鸭名称和数量</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pekingDuckName <span class=\"token operator\">=</span> pekingDuckName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token comment\">// 数量 + 1</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".生产者：\"</span> <span class=\"token operator\">+</span> pekingDuckName <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token comment\">// 有烤鸭后改变状态</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token comment\">// 通知消费线程来消费烤鸭</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token function\">notifyAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>     * 消费烤鸭</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">consumption</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token comment\">// 没有烤鸭就进入等待状态</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token comment\">// 消费一只烤鸭</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".消费者：\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pekingDuckName <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token comment\">// 没有烤鸭后改变状态</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token comment\">// 通知生产线程来生产烤鸭</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token function\">notifyAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>     * 生产者线程</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ProducerThread</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">PekingDuck</span> pekingDuck<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">ProducerThread</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PekingDuck</span> pekingDuck<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pekingDuck <span class=\"token operator\">=</span> pekingDuck<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                pekingDuck<span class=\"token punctuation\">.</span><span class=\"token function\">production</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"北京烤鸭\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>     * 消费者线程</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConsumerThread</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">PekingDuck</span> pekingDuck<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">ConsumerThread</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PekingDuck</span> pekingDuck<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pekingDuck <span class=\"token operator\">=</span> pekingDuck<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>                pekingDuck<span class=\"token punctuation\">.</span><span class=\"token function\">consumption</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        <span class=\"token comment\">// 创建烤鸭店铺对象</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        <span class=\"token class-name\">PekingDuck</span> pekingDuck <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PekingDuck</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>        <span class=\"token comment\">// 创建生产者</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>        <span class=\"token class-name\">ProducerThread</span> producerThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ProducerThread</span><span class=\"token punctuation\">(</span>pekingDuck<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>        <span class=\"token comment\">// 创建消费者</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        <span class=\"token class-name\">ConsumerThread</span> consumerThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConsumerThread</span><span class=\"token punctuation\">(</span>pekingDuck<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token comment\">// 创建生产者线程</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>producerThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>producerThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>        <span class=\"token comment\">// 创建消费者线程</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>consumerThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>consumerThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>        <span class=\"token comment\">// 启动线程</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>        t1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>        t2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>        t3<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>        t4<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>新增了两条线程后来看下面的执行结果：</p>\n</blockquote>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"><span>执行结果</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>C:\\LightRainData\\IDEA\\JDK\\JDK-17.0.6\\bin\\java.exe &quot;-javaagent:C:\\LightRainData\\IDEA\\IntelliJ IDEA 2022.3.2\\lib\\idea_rt.jar&#x3D;9761:C:\\LightRainData\\IDEA\\IntelliJ IDEA 2022.3.2\\bin&quot; -Dfile.encoding&#x3D;UTF-8 -classpath D:\\ 项目 \\gitee\\multi-threaded-example\\target\\classes top.rem.rain.demo2.PekingDuck</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Thread-0. 生产者：北京烤鸭 1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Thread-3. 消费者：北京烤鸭 1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Thread-1. 生产者：北京烤鸭 2</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Thread-3. 消费者：北京烤鸭 2</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Thread-2. 消费者：北京烤鸭 2</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Thread-1. 生产者：北京烤鸭 3</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Thread-3. 消费者：北京烤鸭 3</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Thread-2. 消费者：北京烤鸭 3</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Thread-1. 生产者：北京烤鸭 4</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Thread-3. 消费者：北京烤鸭 4</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Thread-2. 消费者：北京烤鸭 4</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Thread-1. 生产者：北京烤鸭 5</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>Thread-3. 消费者：北京烤鸭 5</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Thread-2. 消费者：北京烤鸭 5</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>........................</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>Thread-1. 生产者：北京烤鸭 63710</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>Thread-0. 生产者：北京烤鸭 63711</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>Thread-1. 生产者：北京烤鸭 63712</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>Thread-0. 生产者：北京烤鸭 63713</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>Thread-2. 消费者：北京烤鸭 63713</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>Thread-3. 消费者：北京烤鸭 63713</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>Thread-2. 消费者：北京烤鸭 63713</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>Thread-3. 消费者：北京烤鸭 63713</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>Thread-2. 消费者：北京烤鸭 63713</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>Thread-3. 消费者：北京烤鸭 63713</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>Thread-2. 消费者：北京烤鸭 63713</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>Thread-3. 消费者：北京烤鸭 63713</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>Thread-2. 消费者：北京烤鸭 63713</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>Thread-3. 消费者：北京烤鸭 63713</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>Thread-2. 消费者：北京烤鸭 63713</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>Thread-3. 消费者：北京烤鸭 63713</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>Thread-2. 消费者：北京烤鸭 63713</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>............................</pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>进程已结束，退出代码 - 1</pre></td></tr></table></figure><blockquote>\n<p>仅仅新增了两条线程后从执行结果中就可以看出明显的不对了，生产到第 <code>5</code>  只烤鸭的时候第 <code>5</code>  只烤鸭居然被消费了两次，然后当生产到第 <code>63713</code>  只的时候紧接着当前烤鸭被消费了 <code>n</code>  次，有的烤鸭还没有被消费，难道共享数据没有进行线程同步么？先来看下面代码：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>PekingDuck2.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: 北京烤鸭 - 多生产者与多消费者</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2024-01-09 15:38</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PekingDuck2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * 烤鸭数量</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     * 烤鸭名称</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> pekingDuckName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     * 线程等待标志</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>     * 生产烤鸭</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>     * @param pekingDuckName 烤鸭名称</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">production</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> pekingDuckName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token comment\">// 有烤鸭进入等待状态</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token comment\">// 设置烤鸭名称和数量</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pekingDuckName <span class=\"token operator\">=</span> pekingDuckName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token comment\">// 数量 + 1</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".生产者：\"</span> <span class=\"token operator\">+</span> pekingDuckName <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token comment\">// 有烤鸭后改变状态</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token comment\">// 通知消费线程来消费烤鸭</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token function\">notifyAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>     * 消费烤鸭</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">consumption</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token comment\">// 没有烤鸭就进入等待状态</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token comment\">// 消费一只烤鸭</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".消费者：\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pekingDuckName <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token comment\">// 没有烤鸭后改变状态</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token comment\">// 通知生产线程来生产烤鸭</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token function\">notifyAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token comment\">// ....</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>从代码中可以看出共享数据 <code>count</code>  的获取方法都使用了 <code>synchronized</code>  关键字进行了同步，为什么还会出现数据错误的现象呢？</p>\n</blockquote>\n<blockquote>\n<p>分析：确实对共享数据采用了同步措施，而且也应用了等待 / 通知机制，但是这样的措施只能在单生产者与单消费者的情况下才可以正确应用，从执行结果中可以看出之前的单生产者与单消费者安全处理措施就不适合多生产者与多消费者的情况了，看下图：</p>\n</blockquote>\n<p><img data-src=\"https://s11.ax1x.com/2024/01/09/pFpyrL9.png\" alt=\"pFpyrL9.png\" /></p>\n<blockquote>\n<p>修正：上图中的 <code>notify()</code>  方法需要修改为 <code>notifyAll()</code>  才可正常执行， <code>notify()</code>  方法只适合在单生产者与单消费者模式中，在多生产者与多消费者中需要使用 <code>notifyAll()</code>  方法来唤醒所有的线程，并且两处的 <code>if</code>  都需要修改为 <code>while</code>  判断，修改后的正确代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>PekingDuck2.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: 北京烤鸭 - 多生产者与多消费者</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2024-01-09 18:38</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PekingDuck2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   * 烤鸭数量</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   * 烤鸭名称</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> pekingDuckName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   * 线程等待标志</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   * 生产烤鸭</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   *</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   * @param pekingDuckName 烤鸭名称</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">production</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> pekingDuckName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">// 有烤鸭进入等待状态</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">// 设置烤鸭名称和数量</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pekingDuckName <span class=\"token operator\">=</span> pekingDuckName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\">// 数量 + 1</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".生产者：\"</span> <span class=\"token operator\">+</span> pekingDuckName <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token comment\">// 有烤鸭后改变状态</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token comment\">// 通知消费线程来消费烤鸭</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token function\">notifyAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>   * 消费烤鸭</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">consumption</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token comment\">// 没有烤鸭就进入等待状态</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token comment\">// 消费一只烤鸭</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".消费者：\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pekingDuckName <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token comment\">// 没有烤鸭后改变状态</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token comment\">// 通知生产线程来生产烤鸭</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token function\">notifyAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>   * 生产者线程</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>  <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ProducerThread</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">PekingDuck2</span> pekingDuck<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ProducerThread</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PekingDuck2</span> pekingDuck<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pekingDuck <span class=\"token operator\">=</span> pekingDuck<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        pekingDuck<span class=\"token punctuation\">.</span><span class=\"token function\">production</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"北京烤鸭\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>   * 消费者线程</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>  <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConsumerThread</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">PekingDuck2</span> pekingDuck<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ConsumerThread</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PekingDuck2</span> pekingDuck<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pekingDuck <span class=\"token operator\">=</span> pekingDuck<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        pekingDuck<span class=\"token punctuation\">.</span><span class=\"token function\">consumption</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token comment\">// 创建烤鸭店铺对象</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    <span class=\"token class-name\">PekingDuck2</span> pekingDuck <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PekingDuck2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    <span class=\"token comment\">// 创建生产者</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token class-name\">ProducerThread</span> producerThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ProducerThread</span><span class=\"token punctuation\">(</span>pekingDuck<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    <span class=\"token comment\">// 创建消费者</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token class-name\">ConsumerThread</span> consumerThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConsumerThread</span><span class=\"token punctuation\">(</span>pekingDuck<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    <span class=\"token comment\">// 创建生产者线程</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    <span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>producerThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>    <span class=\"token class-name\">Thread</span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>producerThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    <span class=\"token comment\">// 创建消费者线程</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>    <span class=\"token class-name\">Thread</span> t3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>consumerThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>    <span class=\"token class-name\">Thread</span> t4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>consumerThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>    <span class=\"token comment\">// 启动线程</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    t1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    t2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    t3<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>    t4<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>执行结果如下：</p>\n</blockquote>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"><span>执行结果</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Thread-0. 生产者：北京烤鸭 1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Thread-3. 消费者：北京烤鸭 1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Thread-1. 生产者：北京烤鸭 2</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Thread-3. 消费者：北京烤鸭 2</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Thread-1. 生产者：北京烤鸭 3</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Thread-3. 消费者：北京烤鸭 3</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Thread-1. 生产者：北京烤鸭 4</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Thread-3. 消费者：北京烤鸭 4</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Thread-1. 生产者：北京烤鸭 5</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Thread-3. 消费者：北京烤鸭 5</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Thread-1. 生产者：北京烤鸭 6</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Thread-3. 消费者：北京烤鸭 6</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Thread-1. 生产者：北京烤鸭 7</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>Thread-3. 消费者：北京烤鸭 7</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Thread-1. 生产者：北京烤鸭 8</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>Thread-3. 消费者：北京烤鸭 8</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>Thread-1. 生产者：北京烤鸭 9</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>Thread-3. 消费者：北京烤鸭 9</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>Thread-1. 生产者：北京烤鸭 10</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>Thread-3. 消费者：北京烤鸭 10</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>Thread-1. 生产者：北京烤鸭 11</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>Thread-3. 消费者：北京烤鸭 11</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>Thread-1. 生产者：北京烤鸭 12</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>Thread-3. 消费者：北京烤鸭 12</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>Thread-1. 生产者：北京烤鸭 13</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>Thread-3. 消费者：北京烤鸭 13</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>Thread-1. 生产者：北京烤鸭 14</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>Thread-3. 消费者：北京烤鸭 14</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>Thread-1. 生产者：北京烤鸭 15</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>Thread-3. 消费者：北京烤鸭 15</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>Thread-1. 生产者：北京烤鸭 16</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>Thread-3. 消费者：北京烤鸭 16</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>Thread-1. 生产者：北京烤鸭 17</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>Thread-3. 消费者：北京烤鸭 17</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>Thread-1. 生产者：北京烤鸭 18</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>Thread-3. 消费者：北京烤鸭 18</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>Thread-1. 生产者：北京烤鸭 19</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>Thread-3. 消费者：北京烤鸭 19</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>Thread-1. 生产者：北京烤鸭 20</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>Thread-3. 消费者：北京烤鸭 20</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>Thread-1. 生产者：北京烤鸭 21</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>Thread-3. 消费者：北京烤鸭 21</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>Thread-1. 生产者：北京烤鸭 22</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>Thread-3. 消费者：北京烤鸭 22</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>Thread-1. 生产者：北京烤鸭 23</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>Thread-3. 消费者：北京烤鸭 23</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>Thread-1. 生产者：北京烤鸭 24</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>Thread-3. 消费者：北京烤鸭 24</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>Thread-1. 生产者：北京烤鸭 25</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>Thread-3. 消费者：北京烤鸭 25</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>Thread-1. 生产者：北京烤鸭 26</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>Thread-3. 消费者：北京烤鸭 26</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>Thread-1. 生产者：北京烤鸭 27</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>Thread-3. 消费者：北京烤鸭 27</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>Thread-1. 生产者：北京烤鸭 28</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>Thread-3. 消费者：北京烤鸭 28</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>Thread-1. 生产者：北京烤鸭 29</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>Thread-3. 消费者：北京烤鸭 29</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>Thread-1. 生产者：北京烤鸭 30</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>Thread-3. 消费者：北京烤鸭 30</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>Thread-1. 生产者：北京烤鸭 31</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>Thread-3. 消费者：北京烤鸭 31</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>Thread-1. 生产者：北京烤鸭 32</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>Thread-3. 消费者：北京烤鸭 32</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>Thread-1. 生产者：北京烤鸭 33</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>Thread-3. 消费者：北京烤鸭 33</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>Thread-1. 生产者：北京烤鸭 34</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>Thread-3. 消费者：北京烤鸭 34</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>Thread-1. 生产者：北京烤鸭 35</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>Thread-3. 消费者：北京烤鸭 35</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>Thread-1. 生产者：北京烤鸭 36</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>Thread-3. 消费者：北京烤鸭 36</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>Thread-1. 生产者：北京烤鸭 37</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>Thread-3. 消费者：北京烤鸭 37</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>Thread-1. 生产者：北京烤鸭 38</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>Thread-3. 消费者：北京烤鸭 38</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>Thread-1. 生产者：北京烤鸭 39</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>Thread-3. 消费者：北京烤鸭 39</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>Thread-1. 生产者：北京烤鸭 40</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>Thread-3. 消费者：北京烤鸭 40</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>.........................</pre></td></tr></table></figure><blockquote>\n<p>从当前执行结果中可以看出当前数据是没有错乱的，这样数据就正常了，而锁对象的解决方法与此相同。</p>\n</blockquote>\n<blockquote>\n<p>下面将介绍一种更有效得锁对象解决方法，使用两组条件对象 <code>(Condition也被称为监视器)</code>  来实现等待 / 通知机制，也就是通过已有的锁获取两组监视器，一组监视生产者，一组监视消费者，代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>PekingDuckLockCondition.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Condition</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Lock</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @Description: 北京烤鸭 - 多生产者与多消费者，通过已有的锁获取两组监视器，一组监视生产者，一组监视消费者</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @DateTime: 2024-01-09 19:10</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PekingDuckLockCondition</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     * 烤鸭数量</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     * 烤鸭名称</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> pekingDuckName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>     * 线程等待标志</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>     * 创建锁对象</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Lock</span> lock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>     * 监视生产者的监视器</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Condition</span> productionCondition <span class=\"token operator\">=</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">newCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>     * 监视消费者的监视器</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Condition</span> consumptionCondition <span class=\"token operator\">=</span> lock<span class=\"token punctuation\">.</span><span class=\"token function\">newCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>     * 生产烤鸭</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>     * @param pekingDuckName 烤鸭名称</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">production</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> pekingDuckName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token comment\">// 获取锁</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                    <span class=\"token comment\">// 有烤鸭进入等待状态</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                    productionCondition<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token comment\">// 设置烤鸭名称和数量</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pekingDuckName <span class=\"token operator\">=</span> pekingDuckName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token comment\">// 数量 + 1</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".生产者：\"</span> <span class=\"token operator\">+</span> pekingDuckName <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token comment\">// 有烤鸭后改变状态</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token comment\">// 直接唤醒消费线程</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            consumptionCondition<span class=\"token punctuation\">.</span><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token comment\">// 释放锁</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>     * 消费烤鸭</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">consumption</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token comment\">// 获取锁</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>            <span class=\"token comment\">// 没有烤鸭就进入等待状态</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>                    consumptionCondition<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>            <span class=\"token comment\">// 消费一只烤鸭</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".消费者：\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pekingDuckName <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>            <span class=\"token comment\">// 没有烤鸭后改变状态</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>            flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>            <span class=\"token comment\">// 直接唤醒生产线程</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>            productionCondition<span class=\"token punctuation\">.</span><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>            <span class=\"token comment\">// 释放锁</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>            lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"105\"></td><td><pre>     * 生产者线程</pre></td></tr><tr><td data-num=\"106\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ProducerThread</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">PekingDuckLockCondition</span> pekingDuck<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">ProducerThread</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PekingDuckLockCondition</span> pekingDuck<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pekingDuck <span class=\"token operator\">=</span> pekingDuck<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>                pekingDuck<span class=\"token punctuation\">.</span><span class=\"token function\">production</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"北京烤鸭\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"123\"></td><td><pre>     * 消费者线程</pre></td></tr><tr><td data-num=\"124\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConsumerThread</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">PekingDuckLockCondition</span> pekingDuck<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">ConsumerThread</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PekingDuckLockCondition</span> pekingDuck<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pekingDuck <span class=\"token operator\">=</span> pekingDuck<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>                pekingDuck<span class=\"token punctuation\">.</span><span class=\"token function\">consumption</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>        <span class=\"token comment\">// 创建烤鸭店铺对象</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>        <span class=\"token class-name\">PekingDuckLockCondition</span> pekingDuck <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PekingDuckLockCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>        <span class=\"token comment\">// 创建生产者</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>        <span class=\"token class-name\">ProducerThread</span> producerThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ProducerThread</span><span class=\"token punctuation\">(</span>pekingDuck<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>        <span class=\"token comment\">// 创建消费者</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>        <span class=\"token class-name\">ConsumerThread</span> consumerThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConsumerThread</span><span class=\"token punctuation\">(</span>pekingDuck<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>        <span class=\"token comment\">// 创建生产者线程</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>producerThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>producerThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>        <span class=\"token comment\">// 创建消费者线程</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>consumerThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>consumerThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>        <span class=\"token comment\">// 启动线程</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>        t1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>        t2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>        t3<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>        t4<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>在上述代码中创建了两个条件对象分别是 <code>productionCondition</code>  和 <code>consumptionCondition</code>  并且分别用于监视生产线程和监视消费线程，在 <code>production()</code>  方法中获取到锁后，此时 <code>flag = true</code>  的话也就是还有烤鸭未被消费，因此生产线程需要进行等待，所以调用生产线程的监视器 <code>productionCondition</code>  的 <code>await()</code>  方法进入阻塞等待池。</p>\n</blockquote>\n<blockquote>\n<p>如果此时的 <code>flag</code>  为 <code>false</code>  的话就说明烤鸭已被消费完，需要生产线程去生产烤鸭，那么生产线程将进行烤鸭的生产并通过消费线程的监视器 <code>consumptionCondition</code>  的 <code>signal()</code>  方法去通知消费线程对烤鸭进行消费，与此同时在 <code>consumption()</code>  方法中也是同样的道理。</p>\n</blockquote>\n<blockquote>\n<p>可以发现使用这种方法比之前使用 <code>synchronized</code>  同步方法或是单监视器的锁对象都要高效和方便，在此之前都是使用 <code>notify()/notifyAll()</code>  和 <code>signal()/signalAll()</code>  方法去唤醒等待池中的线程，然后让池中的线程又进入竞争队列去抢占 <code>CPU</code>  资源，这样不仅唤醒了无关的线程而且又让全部线程进入了竞争队列中。</p>\n</blockquote>\n<blockquote>\n<p>然而当使用两种监视器分别监听生产者线程和消费者线程，这样的方式恰好解决了前面两种方式的问题所在，每次唤醒都只是生产者线程或是消费者线程而不会让两者都同时唤醒，这样不就可以更高效得执行程序了么。</p>\n</blockquote>\n<h1 id=\"线程死锁\"><a class=\"anchor\" href=\"#线程死锁\">#</a> 线程死锁</h1>\n<blockquote>\n<p>关于线程死锁问题，通过上面代码示例，我们知道了锁是一个非常有用的工具，适用的场景非常多，因为他适用起来非常得简单，但它同时也会带来一些不必要的麻烦，那就是可能会引起线程死锁，一旦产生了死锁就会造成系统功能的不可用，下面的示例将演示线程 <code>t1</code>  和线程 <code>t2</code>  互相等待对方释放锁从而引起死锁，代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: 线程死锁示例</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2024-01-09 23:07</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DeadLock</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token class-name\">A</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"A\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token class-name\">B</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DeadLockA</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"static-access\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">A</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                    <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">B</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DeadLockB</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">B</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">A</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">deadLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token class-name\">DeadLockA</span> deadLockA <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DeadLockA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token class-name\">DeadLockB</span> deadLockB <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DeadLockB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>deadLockA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>deadLockB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token comment\">// 启动线程</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        t1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        t2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token class-name\">DeadLock</span> deadLock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DeadLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            deadLock<span class=\"token punctuation\">.</span><span class=\"token function\">deadLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>同步嵌套是产生死锁的常见情景，从上面的代码中可以看出，当线程 <code>t1</code>  获取到锁 <code>(A)</code>  后休眠 <code>2秒</code> ，此时线程 <code>t2</code>  刚好获取到了锁 <code>(B)</code> , 接着要获取锁 <code>(A)</code> , 但此时锁 <code>(A)</code>  正在被 <code>t1</code>  线程所持有，因此只能等待 <code>t1</code>  线程释放锁 <code>(A)</code> , 但遗憾的是在 <code>t1</code>  线程内又请求获取锁 <code>(B)</code> ，而锁 <code>(B)</code>  此时又被 <code>t2</code>  线程所持有，到此结果就是 <code>t1</code>  线程拿到了锁 <code>(A)</code>  同时等待 <code>t2</code>  线程释放锁 <code>(B)</code> ，而 <code>t2</code>  线程获取到了锁 <code>(B)</code>  也同时在等待 <code>t1</code>  线程释放锁 <code>(A)</code> , 然后彼此等待也就造成了线程死锁问题。</p>\n</blockquote>\n<blockquote>\n<p>虽然在一般情况时不会这么写代码，但是有些 较为复杂的场景中，可能就会遇到这种问题，所以在写同步代码时需要多考虑死锁的情况，避免发生线程死锁，避免死锁常见的几种方法：1. 避免一个线程同时获取多个锁。2. 避免在一个资源内占用多个资源，尽量保证每个锁只占用一个资源。3. 尝试使用定时锁，使用 <code>tryLock(timeout)</code>  来代替内部锁机制。4. 对于数据库锁，加锁和解锁必须在同一个数据库连接里面，否则将会出现解锁失败的情况。5. 避免同步嵌套的发生。</p>\n</blockquote>\n<h1 id=\"threadjoin方法\"><a class=\"anchor\" href=\"#threadjoin方法\">#</a> Thread.join () 方法</h1>\n<blockquote>\n<p>如果有一个线程 <code>A</code>  执行了 <code>thread.join()</code>  方法，其含义是当前线程 <code>A</code>  等待 <code>thread</code>  线程终止之后才能从 <code>thread.join()</code>  方法中返回。线程 <code>Thread</code>  除了提供 <code>join()</code>  方法之外，还提供了 <code>join(long millis)</code>  和 <code>join(long millis,int nanos)</code>  两个具备超时特性的方法。</p>\n</blockquote>\n<blockquote>\n<p>这两个超时方法表示如果线程在给定的超时时间里没有终止，那么将会从该超时方法中返回，来看下面代码示例，创建 <code>10</code>  个线程，从 <code>0 ~ 9</code>  每个线程调用前一个线程的 <code>join()</code>  方法，也就是线程 <code>0</code>  结束后线程 <code>1</code>  才能从 <code>join()</code>  方法中返回，而 <code>0</code>  需要等待 <code>main</code>  线程结束。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>JoinDemo.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: join 示例</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2024-01-10 00:05</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JoinDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">Thread</span> previous <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token comment\">// 每个线程拥有前一个线程的引用。需要等待前一个线程终止，才能从等待中返回</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token class-name\">Thread</span> thread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Domino</span><span class=\"token punctuation\">(</span>previous<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            thread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            previous <span class=\"token operator\">=</span> thread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" 线程结束\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        执行结果：</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        main 线程结束</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        0 线程结束</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        1 线程结束</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        2 线程结束</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        3 线程结束</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        4 线程结束</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        5 线程结束</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        6 线程结束</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        7 线程结束</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        8 线程结束</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        9 线程结束</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Domino</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Thread</span> thread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Domino</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span> thread<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>thread <span class=\"token operator\">=</span> thread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            thread<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" 线程结束\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "Java",
                "Java深入理解",
                "计算机科学",
                "Java",
                "并发",
                "多线程"
            ]
        },
        {
            "id": "https://rainrem.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/IntelliJIDEA/%E5%A6%82%E4%BD%95%E5%9C%A8IDEA%E4%B8%AD%E9%85%8D%E7%BD%AEAspectJ/",
            "url": "https://rainrem.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/IntelliJIDEA/%E5%A6%82%E4%BD%95%E5%9C%A8IDEA%E4%B8%AD%E9%85%8D%E7%BD%AEAspectJ/",
            "title": "如何在IntelliJ IDEA中配置AspectJ",
            "date_published": "2024-01-03T12:20:00.000Z",
            "content_html": "<h1 id=\"aspectj概述\"><a class=\"anchor\" href=\"#aspectj概述\">#</a> AspectJ 概述</h1>\n<blockquote>\n<p><code>AspectJ</code>  它是一个基于 <code>Java</code>  语言的 <code>AOP</code>  框架，提供了强大的 <code>AOP</code>  功能。</p>\n</blockquote>\n<blockquote>\n<p><code>AspectJ</code>  是 <code>Java</code>  语言的一个 <code>AOP</code>  实现，其主要包括两个部分：第一个部分定义了如何表达、定义  <code>AOP</code>  编程中的语法规范，通过这套语言规范，我们可以方便地使用 <code>AOP</code>  来解决 <code>Java</code>  中存在的交叉关注点问题，另一个部分是工具部分，包括编译器、调试工具等。</p>\n</blockquote>\n<blockquote>\n<p><code>AspectJ</code>  是最早功能比较强大的 <code>AOP</code>  实现之一，对整套 <code>AOP</code>  机制都有较好地实现，很多其它语言的 <code>AOP</code>  实现，也借鉴或采纳了 <code>AspectJ</code>  中的很多设计。在 <code>Java</code>  领域， <code>AspectJ</code>  中的很多语法结构基本上已成为 <code>AOP</code>  领域的标准。</p>\n</blockquote>\n<h1 id=\"安装aspectj\"><a class=\"anchor\" href=\"#安装aspectj\">#</a> 安装 AspectJ</h1>\n<blockquote>\n<p>想要安装 <code>AspectJ</code>  需要到<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lY2xpcHNlLmRldi9hc3BlY3RqL2Rvd25sb2Fkcy5waHA=\"> AspectJ 官网</span>或<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2VjbGlwc2UtYXNwZWN0ai9hc3BlY3RqL3JlbGVhc2Vz\"> AspectJ-Github</span> 来下载可执行的 <code>jar</code>  包。</p>\n</blockquote>\n<p><img data-src=\"https://s11.ax1x.com/2024/01/03/pivEFLF.png\" alt=\"pivEFLF.png\" /><br />\n<img data-src=\"https://s11.ax1x.com/2024/01/03/pivVCtA.png\" alt=\"pivVCtA.png\" /></p>\n<blockquote>\n<p>从 <code>1.9.7</code>  版本开始， <code>AspectJ</code>  才可以从 <code>GitHub</code>  上来获取，从官网下载需要捐赠所以就在 <code>GitHub</code>  上下载了 <code>1.9.21</code>  的可执行 <code>jar</code>  包。</p>\n</blockquote>\n<blockquote>\n<p>在下载完成后使用 <code>win+r</code>  并输入 <code>cmd</code>  来打开命令行窗口，使用 <code>java -jar aspectj-1.9.21.jar</code>  命令来执行，可以找到下载位置并将 <code>jar</code>  包拖入到命令行窗口中来执行。</p>\n</blockquote>\n<p><img data-src=\"https://s11.ax1x.com/2024/01/03/pivVdhR.png\" alt=\"pivVdhR.png\" /></p>\n<blockquote>\n<p>安装路径默认不需要修改，一直点击 <code>Next</code>  即可完成 <code>AspectJ</code>  的安装。</p>\n</blockquote>\n<p><img data-src=\"https://s11.ax1x.com/2024/01/03/pivVh9I.png\" alt=\"pivVh9I.png\" /></p>\n<blockquote>\n<p>在安装了 <code>AspectJ</code>  之后，在其安装目录下，可以看到如下的文件结构：</p>\n</blockquote>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>├─bin &#x2F;&#x2F; 该路径下存放了 aj、aj5、ajc、ajdoc、ajbrowser 等命令。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>│  ├─aj.bat</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>│  ├─aj5.bat</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>│  ├─ajbrowser</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>│  ├─ajbrowser.bat</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>│  ├─ajc &#x2F;&#x2F; 其中 ajc 命令最常用，它的作用类似于 javac，用于对普通 Java 类进行编译时增强。</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>│  ├─ajc.bat</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>│  ├─ajdoc</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>│  ├─ajdoc.bat</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>├─doc &#x2F;&#x2F; 该路径下存放了 AspectJ 的使用说明、参考手册、API 文档等文档。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>├─lib &#x2F;&#x2F; 该路径下的 4 个 Jar 文件是 AspectJ 的核心类库</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>│  ├─aspectjrt.jar</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>│  ├─aspectjtools.jar</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>│  ├─aspectjweaver.jar</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>│  ├─org.aspectj.matcher.jar</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>├─LICENSE-AspectJ.html\t&#x2F;&#x2F; 相关授权文件</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>└─README-AspectJ.html</pre></td></tr></table></figure><h1 id=\"配置环境变量\"><a class=\"anchor\" href=\"#配置环境变量\">#</a> 配置环境变量</h1>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CLASSPATH: C:\\aspectj1.9\\lib\\aspectjrt.jar</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Path: C:\\aspectj1.9\\bin</pre></td></tr></table></figure><blockquote>\n<p>如果已经存在一条 <code>CLASSPATH</code>  需要先使用 <code>;</code>  分割后再进行新路径的添加，如： <code>.;%JAVA_HOME%\\lib;%JAVA_HOME%\\lib\\tools.jar;C:\\aspectj1.9\\lib\\aspectjrt.jar</code> ，添加环境变量后重新打开一个 <code>cmd</code>  窗口并输入 <code>ajc</code>  命令来查看是否可以成功执行。</p>\n</blockquote>\n<p><img data-src=\"https://s11.ax1x.com/2024/01/03/pivZYxP.png\" alt=\"pivZYxP.png\" /></p>\n<h1 id=\"添加aspectj插件\"><a class=\"anchor\" href=\"#添加aspectj插件\">#</a> 添加 AspectJ 插件</h1>\n<blockquote>\n<p>注意：只有专业版的 <code>IntelliJ IDEA</code>  才支持 <code>AspectJ</code>  的开发，并且 <code>IntelliJ IDEA</code>  提供了<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamV0YnJhaW5zLmNvbS9oZWxwL2lkZWEvYXNwZWN0ai5odG1s\">官方文档</span></p>\n</blockquote>\n<blockquote>\n<p>在 <code>IntelliJ IDEA</code>  中打开 <code>settings(设置)</code>  找到 <code>Plugins(插件)</code>  在 <code>Marketplace</code>  中搜索 <code>AspectJ</code>  并安装插件。</p>\n</blockquote>\n<p><img data-src=\"https://s11.ax1x.com/2024/01/03/pivZha4.png\" alt=\"pivZha4.png\" /></p>\n<h1 id=\"添加maven依赖\"><a class=\"anchor\" href=\"#添加maven依赖\">#</a> 添加 Maven 依赖</h1>\n<blockquote>\n<p>在 <code>pom.xml</code>  文件中添加相关依赖。</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>pom.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.aspectj<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>aspectjrt<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.8.14<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.aspectj<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>aspectjtools<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.8.14<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h1 id=\"使用ajc编译器\"><a class=\"anchor\" href=\"#使用ajc编译器\">#</a> 使用 Ajc 编译器</h1>\n<blockquote>\n<p><code>IntelliJ IDEA</code>  默认使用 <code>javac</code>  编译器，如果要使用 <code>AspectJ</code>  的 <code>ajc</code>  编译器，需要进行相应的配置，首先打开 <code>settings(设置)</code>  找到 <code>Build,Execution,Deployment(构建、执行、部署)</code>  下的 <code>Compiler(编译器)</code>  下的 <code>Java Compiler(Java编译器)</code> ，然后配置如下图：</p>\n</blockquote>\n<p><img data-src=\"https://s11.ax1x.com/2024/01/03/pivelLT.png\" alt=\"pivelLT.png\" /></p>\n<blockquote>\n<p>这样就可以在项目中右键选择 <code>Aspect</code>  来创建 <code>.aj</code>  文件来实现 <code>Aop</code>  的织入了。</p>\n</blockquote>\n<h1 id=\"aspectj使用示例\"><a class=\"anchor\" href=\"#aspectj使用示例\">#</a> AspectJ 使用示例</h1>\n<blockquote>\n<p><code>AspectJ</code>  的用法非常简单，就跟我们使用 <code>JDK</code>  编译运行 <code>Java</code>  程序一样，示例代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>HelloJava.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: 使用 Aspect 进行事务围绕</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2024-01-03 19:14</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloJava</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">helloJava</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello Java!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">HelloJava</span> helloJava <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HelloJava</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        helloJava<span class=\"token punctuation\">.</span><span class=\"token function\">helloJava</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        执行结果：</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>          开始事务。。。</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>          Hello Java!</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>          结束事务。。。</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>如果我们现在需要在 <code>helloJava()</code>  方法之前启动事务当方法结束时关闭事务，如：日志打印等操作，在传统模式下我们必须手动修改 <code>helloJava()</code>  方法来达到想要的效果，而如果使用 <code>AspectJ</code>  则我们不需要修改上面的方法，只需要添加一个新的切面即可实现相同效果。</p>\n</blockquote>\n<p><img data-src=\"https://s11.ax1x.com/2024/01/03/pivmKtH.png\" alt=\"pivmKtH.png\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>HelloJavaAspect.aj</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> aspect <span class=\"token class-name\">HelloJavaAspect</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">around</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token class-name\">HelloJava</span><span class=\"token punctuation\">.</span><span class=\"token function\">helloJava</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"开始事务。。。\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"结束事务。。。\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>上面的 <code>HelloJavaAspect</code>  并不属于 <code>Java</code>  类，其中 <code>aspect</code>  关键字也不是 <code>Java</code>  所支持的关键字，它只能由 <code>AspectJ</code>  才能识别的关键字，其后缀为 <code>.aj</code>  文件，该文件的完整名称为 <code>HelloJavaAspect.aj</code> ，而切面的语法只有 <code>AspectJ</code>  可以识别，并使用特殊的 <code>ajc</code>  编译器进行编译。</p>\n</blockquote>\n<blockquote>\n<p>在这段代码中拦截了 <code>HelloJava.helloJava()</code>  方法，并在其执行之前开始事务操作， <code>proceed()</code>  方法代表回调原来的 <code>helloJava()</code>  方法，执行结束后将结束对该方法的事务操作。</p>\n</blockquote>\n<p><img data-src=\"https://s11.ax1x.com/2024/01/03/pivu8w8.png\" alt=\"pivu8w8.png\" /></p>\n<blockquote>\n<p>从运行结果可以看出，在我们完全不对 <code>HelloJava</code>  类进行任何的修改也可以实现其想要的结果，没有进行任何修改就给它插入了事务管理功能，这正是面向切面编程的意义。因此 <code>AspectJ</code>  通常被称为编译时增强的 <code>AOP</code>  框架。</p>\n</blockquote>\n<h1 id=\"springaopaspectj的关系\"><a class=\"anchor\" href=\"#springaopaspectj的关系\">#</a> SpringAop&amp;AspectJ 的关系</h1>\n<blockquote>\n<p>在 <code>SpringBoot</code>  中经常见到 <code>@Before</code> 、 <code>@After</code> 、 <code>@Around</code>  等 <code>AOP</code>  相关的注解，一般没有多少解释，通常被告知这是 <code>AOP</code>  的用法， <code>@Before</code> 、 <code>@After</code> 、 <code>@Around</code>  等 <code>AOP</code>  相关的注解实现的底层都是 <code>AspectJ</code> ,<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lY2xpcHNlLmRldi9hc3BlY3RqL2Rvd25sb2Fkcy5waHA=\">AspectJ 官网</span> &amp;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2VjbGlwc2UtYXNwZWN0ai9hc3BlY3RqL3JlbGVhc2Vz\">AspectJ-Github</span>。 关于 <code>AspectJ</code>  并不是 <code>spring framework</code>  的一部分， <code>AspectJ</code>  是一个独立项目，它以优秀的方式实现了 <code>AOP</code>  编程。 <code>spring framework</code>  起初是有自己实现的 <code>AOP</code> , 但是非常的难用，后来 <code>Spring</code>  官方索性将优秀的 <code>AspectJ</code>  集成到了 <code>spring framework</code>  的源码中。</p>\n</blockquote>\n<h1 id=\"关于依赖问题\"><a class=\"anchor\" href=\"#关于依赖问题\">#</a> 关于依赖问题</h1>\n<blockquote>\n<p>为什么需要在 <code>pom.xml</code>  中引入两个依赖坐标呢？不应该只需要引入 <code>aspectjrt</code>  坐标就可以么，关于 <code>aspectjrt</code>  和 <code>aspectjweaver</code>  是什么关系请看下图。</p>\n</blockquote>\n<p><img data-src=\"https://s11.ax1x.com/2024/01/03/pivMTRH.png\" alt=\"pivMTRH.png\" /></p>\n<blockquote>\n<p>从上图可以看出 <code>aspectjweaver</code>  包含了 <code>aspectjrt</code>  全部的内容，其中 <code>aspectjweaver</code>  比 <code>aspectjrt</code>  多出的内容主要是 <code>asm</code>  和 <code>weaver</code> 。</p>\n</blockquote>\n<h2 id=\"关于asm\"><a class=\"anchor\" href=\"#关于asm\">#</a> 关于 asm</h2>\n<blockquote>\n<p><code>asm</code>  是一个 <code>Java</code>  字节码操控框架，它能用来动态生成类或者增强既有类的功能。 <code>asm</code>  可以直接生成二进制 <code>class</code>  文件，也可以在类被加载到 <code>Java</code>  虚拟机之前动态改变类行为。 <code>Java class</code>  被存储在严格定义的 <code>.class</code>  文件中，这些类文件拥有足够的元数据来解析类中的所有元素：类名称、方法、属性以及 <code>Java</code>  字节码 (指令)， <code>asm</code>  从类文件中读取信息后，能够改变类行为，分析类信息，甚至能够根据用户需求来生成新的类。</p>\n</blockquote>\n<h2 id=\"关于weaver\"><a class=\"anchor\" href=\"#关于weaver\">#</a> 关于 weaver</h2>\n<blockquote>\n<p>至于 <code>weaver</code>  则是织入的意思，所以很明显 <code>weaver+asm</code>  就实现了可以动态织入 <code>pointcut</code>  等内容到字节码中去了。</p>\n</blockquote>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<ol>\n<li><code>aspectjrt</code>  功能毕竟单一，只是提供一个编译后的已经织入了 <code>pointcut</code>  等内容的 <code>java</code>  字节码程序的运行环境。</li>\n<li><code>aspectjweaver</code>  中包含了 <code>aspectjrt</code>  全部内容，另外多出了 动态织入的能力，其主要是 <code>asm+weaver</code>  的代码，就是为了让 <code>java</code>  项目可以不用再专门指定 <code>ajc</code>  编译器，而是使用 <code>asm+weaver</code>  可以对 <code>java</code>  代码进行动态编译和织入内容，这样的话直接使用通用的 <code>javac</code>  编译器就可以。</li>\n<li>想要使用 <code>aspectj</code>  注解的写法，需要引入 <code>aspectjweaver</code>  而不是 <code>aspectjrt</code> ，比如 <code>spring</code>  里的 <code>aop</code>  相关的用法。</li>\n</ol>\n",
            "tags": [
                "计算机科学",
                "IntelliJ IDEA",
                "AspectJ",
                "计算机科学",
                "IntelliJ IDEA",
                "AspectJ",
                "Aop"
            ]
        },
        {
            "id": "https://rainrem.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/java/spring/SpringAop%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-AspectJ/",
            "url": "https://rainrem.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/java/spring/SpringAop%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-AspectJ/",
            "title": "SpringAop深入理解-AspectJ",
            "date_published": "2024-01-03T07:39:08.000Z",
            "content_html": "<h1 id=\"前言-本章代码示例\"><a class=\"anchor\" href=\"#前言-本章代码示例\">#</a> 前言 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vUmFpblNhdWNlL3NwcmluZy1hb3AtZGVtbw==\">🚀本章代码示例</span></h1>\n<h2 id=\"关于oop的概念\"><a class=\"anchor\" href=\"#关于oop的概念\">#</a> 关于 OOP 的概念</h2>\n<blockquote>\n<p><code>OOP</code>  是面向对象的程序设计，在谈到 <code>OOP</code>  程序设计前，我们不得不了解一下 <code>POP</code>  即面向过程的程序设计， <code>POP</code>  它是以功能为中心进行思考和组织的一种编程方式，强调的是系统数据被加工处理的过程，而 <code>OOP</code>  则注重封装，强调整体性的概念，以对象为中心，将对象内部组织与外部环境区分开来。</p>\n</blockquote>\n<blockquote>\n<p>至于 <code>OOP</code>  的出现对 <code>POP</code>  存在很多颠覆性的，不能说 <code>POP</code>  没有了价值，只是不同时代的产物，从方法论来讲，更喜欢将面向对象与面向过程看做是事物的两个方面，那就是局部与整体 (必须注意局部与整体是相对的)，在实际应用中，两者方法都同样重要。</p>\n</blockquote>\n<blockquote>\n<p>在 <code>Java</code>  程序设计过程中，我们享受到了 <code>OOP</code>  设计思想带来的甜头，以至于在这个一切皆对象众生平等的世界里欢乐不已，而 <code>OOP</code>  确实也遵循自身的宗旨，即将数据及数据的操作行为放在一起相互依存，是不可分割的整体，利用该定义对于相同类型的对象进行分类并抽象后得出共同的特性，从而行成了类，在 <code>Java</code>  程序设计中这些类对象就是 <code>class</code> ，它使程序设计更简单，更易于维护。但是随着应用程序规模的增加，慢慢地 <code>OOP</code>  程序设计也开始暴露出了一些问题。</p>\n</blockquote>\n<h2 id=\"关于aop的概念\"><a class=\"anchor\" href=\"#关于aop的概念\">#</a> 关于 AOP 的概念</h2>\n<p><a href=\"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/java/java%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/JavaAop%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8/\">JavaAop 详细介绍点击查看🚀</a></p>\n<h1 id=\"aop领跑者-aspectj\"><a class=\"anchor\" href=\"#aop领跑者-aspectj\">#</a> Aop 领跑者 - AspectJ</h1>\n<blockquote>\n<p>在进行下方测试时请务必先在 <code>IntelliJ IDEA</code>  中配置 <code>AspectJ</code> ，不然将无法进行后续操作，<a href=\"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/IntelliJIDEA/%E5%A6%82%E4%BD%95%E5%9C%A8IDEA%E4%B8%AD%E9%85%8D%E7%BD%AEAspectJ/\">AspectJ 详细配置🚀</a></p>\n</blockquote>\n<blockquote>\n<p>先看下方案例，首先编写一个 <code>HelloWord</code>  类，然后通过 <code>AspectJ</code>  的技术切入该类并执行相应操作。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>HelloWord.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>aspect</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: 使用 Aspect 进行事务围绕</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2024-01-04 00:34</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWord</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">helloWord</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello Word!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">HelloWord</span> helloWord <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HelloWord</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        helloWord<span class=\"token punctuation\">.</span><span class=\"token function\">helloWord</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        执行结果：</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>          helloWord () 方法执行前验证权限</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>          Hello Word!</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>          helloWord () 方法执行后记录日志</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>下面将来编写 <code>AspectJ</code>  类，注意关键字 <code>aspect</code> , 而不是 <code>class</code> ，其后缀名称为 <code>.aj</code>  代表它是属于 <code>AspectJ</code>  类，含义与 <code>class</code>  相同，即定义一个 <code>AspectJ</code>  类。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>HelloWordAspect.aj</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>aspect</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> aspect <span class=\"token class-name\">HelloWordAspect</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      定义切点，日志记录切点</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    pointcut <span class=\"token function\">recordLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> <span class=\"token class-name\">HelloWord</span><span class=\"token punctuation\">.</span><span class=\"token function\">helloWord</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      定义切点，权限验证 (实际开发中日志和权限一般会放在不同的切面中，这里仅为方便演示)</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    pointcut <span class=\"token function\">authCheck</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> <span class=\"token class-name\">HelloWord</span><span class=\"token punctuation\">.</span><span class=\"token function\">helloWord</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      定义前置通知！</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">before</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">authCheck</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"helloWord()方法执行前验证权限\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      定义后置通知</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token function\">after</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">recordLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"helloWord()方法执行后记录日志\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>下面是运行 <code>main</code>  方法后的执行结果：</p>\n</blockquote>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>helloWord () 方法执行前验证权限</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Hello Word!</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>helloWord () 方法执行后记录日志</pre></td></tr></table></figure><blockquote>\n<p>执行结果是意料之中的，我们可以发现明明只运行了 <code>main</code>  方法，却在 <code>helloWord()</code>  方法前后分别进行了权限验证和日志记录，这就是 <code>AspectJ</code>  的功劳了， <code>AspectJ</code>  是一个 <code>AOP</code>  框架，它能对 <code>Java</code>  代码进行编译，让 <code>Java</code>  代码具有 <code>AspectJ</code>  的 <code>AOP</code>  功能， <code>AspectJ</code>  是目前实现 <code>AOP</code>  最成熟的框架， <code>AspectJ</code>  与 <code>Java</code>  程序完全兼容。</p>\n</blockquote>\n<blockquote>\n<p>使用 <code>aspect</code>  关键字来定义一个切面类，它可以是单独的日志切面、权限切面等，在切面内部使用 <code>pointcut</code>  定义了两个切点，一个用于权限验证，一个用于日志记录，而所谓的切点就是那些需要应用切面的方法，如：需要在 <code>helloWord()</code>  方法执行前后进行权限验证和日志记录，那么就需要捕捉该方法，而 <code>pointcut</code>  就是定义这些需要捕捉的方法，这些方法也被称为目标方法，最后定义两个通知，通知就是那些需要在目标方法前后执行的函数，如 <code>before()</code>  即前置通知，会在目标方法之前执行， <code>after()</code>  是后置通知，会在目标方法执行之后再执行此方法。</p>\n</blockquote>\n<blockquote>\n<p>切点定义语法：使用关键字 <code>pointcut</code>  定义切点，后面跟函数名称，最后编写匹配方式，函数一般使用 <code>call()</code>  或 <code>execution()</code>  进行匹配。</p>\n</blockquote>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pointcut 函数名称：匹配表达式</pre></td></tr></table></figure><blockquote>\n<p>在上述示例中的 <code>recordLog()</code>  是自定义函数名称，其中 <code>*</code>  表示任意返回值，紧接着就是需要拦截目标函数了， <code>helloWord(..)</code>  表示任意参数类型。</p>\n</blockquote>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pointcut recordLog():call(* HelloWord.helloWord(..));</pre></td></tr></table></figure><ul>\n<li>关于通知定义语法有以下五种方式：\n<ul>\n<li><code>before()</code> ：在目标方法执行前，执行前置通知。</li>\n<li><code>after()</code> ：在目标方法执行后，执行后置通知。</li>\n<li><code>after() returning</code> ：在目标方法返回时，执行后置返回通知。</li>\n<li><code>after() throwing</code> ：在目标方法抛出异常时，执行异常通知。</li>\n<li><code>around()</code> ：在目标方法执行中执行，可控制目标方法是否执行的环绕通知，即目标方法的前后。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>[返回值类型] 通知函数名称 (参数)[returning&#x2F;throwing]: 连接点函数 (切点函数)&#123;&#125;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>如：after () returning:recordLog ()&#123;&#125;</pre></td></tr></table></figure><blockquote>\n<p>示例代码如下：注意其中 <code>around</code>  通知即环绕通知，可以通过 <code>proceed()</code>  方法来控制目标函数是否执行。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>HelloWordAspect.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>aspect</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> aspect <span class=\"token class-name\">HelloWordAspect</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      定义前置通知</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      before (参数): 连接点函数 &#123;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>          函数体</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      &#125;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">before</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">authCheck</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sayHello方法执行前验证权限\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      定义后置通知</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      after (参数): 连接点函数 &#123;</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>          函数体</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      &#125;</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token function\">after</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">recordLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sayHello方法执行后记录日志\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      定义后置通知带返回值</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      after (参数) returning (返回值类型): 连接点函数 &#123;</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>          函数体</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      &#125;</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token function\">after</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token function\">returning</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"返回值为:\"</span><span class=\"token operator\">+</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      异常通知</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      after (参数) throwing (返回值类型): 连接点函数 &#123;</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>          函数体</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      &#125;</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token function\">after</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token function\">throwing</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">helloWord</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"抛出异常:\"</span><span class=\"token operator\">+</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>      环绕通知 可通过 proceed () 控制目标函数是否执行</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>      Object around (参数): 连接点函数 &#123;</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>          函数体</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>          Object result=proceed ();// 执行目标函数</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>          return result;</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      &#125;</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token class-name\">Object</span> <span class=\"token function\">around</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">aroundAdvice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sayAround 执行前执行\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token class-name\">Object</span> result<span class=\"token operator\">=</span><span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 执行目标函数</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sayAround 执行后执行\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>现在已经有了对 <code>pointcut(切入点)</code>  和 <code>advice(通知)</code>  的概念，而切面则是调用切入点和通知的组合如上述使用的 <code>aspect</code>  关键字定义的 <code>HelloWordAspect</code>  类，把切面应用到目标函数的过程称为 <code>weaving(织入)</code> 。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserServiceImpl.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserServiceImpl</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">deleteUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  joinPoint (连接点)：指的是哪些目标函数可以被拦截如：addUser ()、deleteUser ()</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  pointcut (切入点)：指的是对 joinPoint 中哪些目标函数进行切入</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  advice (通知)：在某个特定的切入点上执行操作，如：日志、权限验证等具体要应用于切入点的代码</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  weaving (织入)：把切面的代码应用到目标函数的过程被称为织入      </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  Aspect (切面)：由切点和通知结合而成，定义通知应用到哪些切入点上</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> */</span></pre></td></tr></table></figure><h1 id=\"aspect织入原理\"><a class=\"anchor\" href=\"#aspect织入原理\">#</a> Aspect 织入原理</h1>\n<blockquote>\n<p>我们需要了解 <code>AspectJ</code>  是如何应用到 <code>Java</code>  代码中的，其中这个过程被称为织入，对于这个过程分为动态织入和静态织入，动态织入是在运行期时动态将要增强的代码织入到目标类中，这样的操作都是通过动态代理来完成的，如： <code>Proxy</code> 、 <code>CGLIB</code> 。</p>\n</blockquote>\n<blockquote>\n<p><code>ApectJ</code>  采用的是静态织入方式，它是在编译期间进行织入，在这个期间使用 <code>AspectJ</code>  的 <code>ajc</code>  编译器把 <code>aspect</code>  类编译成 <code>class</code>  字节码后，在 <code>Java</code>  目标类编译时织入，即先编译 <code>aspect</code>  类再编译目标类。</p>\n</blockquote>\n<p><img data-src=\"https://s11.ax1x.com/2024/01/04/pixPLiq.png\" alt=\"pixPLiq.png\" /></p>\n<blockquote>\n<p><code>ajc</code>  编译器它是一种可以识别 <code>aspect</code>  语法的编译器，采用 <code>Java</code>  语言编写的，由于 <code>javac</code>  编译器并不能识别 <code>aspect</code>  语法，便有了 <code>ajc</code>  编译器， <code>ajc</code>  编译器是可以编译 <code>Java</code>  文件的。</p>\n</blockquote>\n<blockquote>\n<p>为了更佳直观了解 <code>aspect</code>  织入方式，现在打开刚才已编译完成的 <code>HelloWord.class</code>  文件，反编译后的代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>HelloWord.class</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// Source code recreated from a .class file by IntelliJ IDEA</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// (powered by FernFlower decompiler)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>aspect</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWord</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HelloWord</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">helloWord</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello Word!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">HelloWord</span> helloWord <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HelloWord</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">HelloWord</span> var10000 <span class=\"token operator\">=</span> helloWord<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token comment\">// 切面类前置通知织入</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token class-name\">HelloWordAspect</span><span class=\"token punctuation\">.</span><span class=\"token function\">aspectOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ajc$before$top_rem_rain_HelloWordAspect$<span class=\"token number\">1</span>$<span class=\"token function\">22c5541</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token comment\">// 目标函数的调用</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            var10000<span class=\"token punctuation\">.</span><span class=\"token function\">helloWord</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> var3<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token class-name\">HelloWordAspect</span><span class=\"token punctuation\">.</span><span class=\"token function\">aspectOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ajc$after$top_rem_rain_HelloWordAspect$<span class=\"token number\">2</span>$<span class=\"token function\">4d789574</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">throw</span> var3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">// 切面类后置通知织入</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">HelloWordAspect</span><span class=\"token punctuation\">.</span><span class=\"token function\">aspectOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ajc$after$top_rem_rain_HelloWordAspect$<span class=\"token number\">2</span>$<span class=\"token function\">4d789574</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>当然除了编译期织入，还存在链接期 (编译后) 织入，即：将 <code>aspect</code>  类和 <code>java</code>  目标类同时编译成字节码文件后，再进行织入处理，这种方式有助于已编译好的第三方 <code>jar</code>  和 <code>class</code>  文件进行织入操作。</p>\n</blockquote>\n<h1 id=\"springaop-aspectj\"><a class=\"anchor\" href=\"#springaop-aspectj\">#</a> SpringAop-AspectJ</h1>\n<blockquote>\n<p><code>SpringAOP</code>  与 <code>AspectJ</code>  目的是一致的，它们都是为了统一处理横切业务，但与 <code>AspectJ</code>  不同的是 <code>SpringAOP</code>  更注重的是与 <code>SpringIOC</code>  容器结合，利用该优势来处理横切业务问题，因此在 <code>AOP</code>  功能完善方面来讲 <code>AspectJ</code>  更具有优势。</p>\n</blockquote>\n<blockquote>\n<p>此时 <code>Spring</code>  注意到了 <code>AspectJ</code>  在实现 <code>AOP</code>  的方式上依赖于特殊编译器 <code>(ajc编译器)</code> ，因此 <code>Spring</code>  采用了动态代理技术来构建 <code>SpringAOP</code>  内部机制，其 <code>SpringAOP(动态织入)</code>  与 <code>AspectJ(静态织入)</code>  最大的区别就是动态织入和静态织入。</p>\n</blockquote>\n<blockquote>\n<p>在 <code>AspectJ 1.5</code>  之后引入了 <code>@Aspect</code>  注解开发， <code>Spring</code>  也很快的跟进了这种方式，因此 <code>Spring 2.0</code>  后便使用了与 <code>AspectJ</code>  相同名称的注解，注意： <code>Spring</code>  只是使用了与 <code>AspectJ 5</code>  相同的注解，并没有使用 <code>AspectJ</code>  的编译器，其底层实现依旧是动态代理技术，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmctZnJhbWV3b3JrL3JlZmVyZW5jZS9jb3JlL2FvcC9hdGFzcGVjdGouaHRtbA==\">Spring 官方描述</span>。</p>\n</blockquote>\n<h1 id=\"springaop快速入门\"><a class=\"anchor\" href=\"#springaop快速入门\">#</a> SpringAop 快速入门</h1>\n<blockquote>\n<p>首先在普通 <code>Maven</code>  项目中添加以下依赖。</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>pom.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>properties</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>spring.version</span><span class=\"token punctuation\">></span></span>6.1.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>spring.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>properties</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">&lt;!--    添加 Aspectj 依赖    --></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.aspectj<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>aspectjrt<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.8.14<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.aspectj<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>aspectjtools<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.8.14<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token comment\">&lt;!--    添加 Spring 依赖    --></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-context<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$&#123;spring.version&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-aop<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$&#123;spring.version&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token comment\">&lt;!--    添加 junit 单元测试    --></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>junit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>junit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>4.13.2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>compile<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token comment\">&lt;!--    添加 Spring 测试    --></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>6.0.6<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>定义 <code>UserDao</code>  接口。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserDao.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span>aop</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @author LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserDao</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   * 添加用户</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token class-name\">String</span> <span class=\"token function\">addUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   * 删除用户</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">deleteUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>定义 <code>UserDao</code>  接口的实现类。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserDaoImpl.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span>aop</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Repository</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Description: 实现类</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @DateTime: 2024-01-04 21:17</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token annotation punctuation\">@Repository</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserDaoImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">UserDao</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   * 添加用户</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   *</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   * @return</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">addUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"添加了一条用户记录\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">\"成功添加一条用户记录\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   * 删除用户</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">deleteUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"删除了一条用户记录\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>定义 <code>SpringAop</code>  的 <code>aspect</code>  类</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserDaoAspect.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span>aop</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ProceedingJoinPoint</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EnableAspectJAutoProxy</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @Description: SpringAop 切面类</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @DateTime: 2024-01-04 21:28</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token annotation punctuation\">@Aspect</span> <span class=\"token comment\">// 使用 AspectJ 的 @Aspect 注解来表示此类是一个切面类</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token annotation punctuation\">@EnableAspectJAutoProxy</span> <span class=\"token comment\">// 使用 Spring 启用 AspectJ 自动代理</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserDaoAspect</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   * 前置通知</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token annotation punctuation\">@Before</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(* top.rem.rain.spring.aop.UserDao.addUser(..))\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">before</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"前置通知....\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   * 后置通知</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   * returnVal, 切点方法执行后的返回值</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token annotation punctuation\">@AfterReturning</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"execution(* top.rem.rain.spring.aop.UserDao.addUser(..))\"</span><span class=\"token punctuation\">,</span> returning <span class=\"token operator\">=</span> <span class=\"token string\">\"returnVal\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterReturning</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> returnVal<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"后置通知：\"</span> <span class=\"token operator\">+</span> returnVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>   * 环绕通知</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   *</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>   * @param joinPoint 可用于执行切点的类</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>   * @return</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>   * @throws Throwable</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token annotation punctuation\">@Around</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(* top.rem.rain.spring.aop.UserDao.addUser(..))\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">around</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProceedingJoinPoint</span> joinPoint<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"环绕通知前....\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token class-name\">Object</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span> joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"环绕通知后....\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>   * 抛出通知</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>   *</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>   * @param e</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  <span class=\"token annotation punctuation\">@AfterThrowing</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"execution(* top.rem.rain.spring.aop.UserDao.addUser(..))\"</span><span class=\"token punctuation\">,</span> throwing <span class=\"token operator\">=</span> <span class=\"token string\">\"e\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterThrowable</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"出现异常:msg=\"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>   * 无论在什么情况下都会执行的方法</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>  <span class=\"token annotation punctuation\">@After</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"execution(* top.rem.rain.spring.aop.UserDao.addUser(..))\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">after</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"最终通知....\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>编写配置文件并交由 <code>SpringIOC</code>  来管理。</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>spring-aop-aspectj.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>aop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/p<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 定义目标对象 --></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top.rem.rain.spring.aop.UserDaoImpl<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 定义 aspect 类 --></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userDaoAspect<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top.rem.rain.spring.aop.UserDaoAspect<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>定义一个测试类来测试是否可以正确切入，测试类代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserDaoTest.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span>aop</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>runner<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RunWith</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ContextConfiguration</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>junit4<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringJUnit4ClassRunner</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @Description: 测试类</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @DateTime: 2024-01-04 21:54</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token annotation punctuation\">@RunWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringJUnit4ClassRunner</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token annotation punctuation\">@ContextConfiguration</span><span class=\"token punctuation\">(</span>locations<span class=\"token operator\">=</span> <span class=\"token string\">\"classpath:spring-aop-aspectj.xml\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserDaoTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserDao</span> userDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testUserDao</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    userDao<span class=\"token punctuation\">.</span><span class=\"token function\">addUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        执行结果：</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>          环绕通知前....</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>          前置通知....</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>          添加了一条用户记录</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>          后置通知：成功添加一条用户记录</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>          最终通知....</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>          环绕通知后....</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>在此说明一下 <code>UserDaoAspect</code>  类中的定义，在该类中编写了五种注解类型的通知方法，分别是<a href=\"#before%E5%89%8D%E7%BD%AE%E9%80%9A%E7%9F%A5\"> <code>@Before(前置通知)</code> </a>、<a href=\"#afterreturning%E5%90%8E%E7%BD%AE%E9%80%9A%E7%9F%A5\"> <code>@AfterReturning(后置通知)</code> </a>、<a href=\"#around%E7%8E%AF%E7%BB%95%E9%80%9A%E7%9F%A5\"> <code>@Around(环绕通知)</code> </a>、<a href=\"#afterthrowing%E5%BC%82%E5%B8%B8%E9%80%9A%E7%9F%A5\"> <code>@AfterThrowing(异常通知)</code> </a>、<a href=\"#after%E6%9C%80%E7%BB%88%E9%80%9A%E7%9F%A5\"> <code>@After(最终通知)</code> </a>，这五种通知与 <code>AspectJ</code>  通知类型几乎是一样的，并在注解通知上使用 <code>execution</code>  关键字来定义切点表达式，即指明该通知要应用到哪个目标方法，当只有一个 <code>execution</code>  参数时 <code>value</code>  属性可以省略，当含有两个或以上参数时 <code>value</code>  属性就不可以省略了。</p>\n</blockquote>\n<blockquote>\n<p>当然除了把切点表达式直接传递给注解通知类型外，还可以使用 <code>@pointcut</code>  来定义切点表达式，这个与 <code>AspectJ</code>  使用的关键字 <code>pointcut</code>  是一样的，在将目标类和 <code>aspect</code>  类定义完成后，还需在 <code>XML</code>  配置文件中进行配置并将它们交由 <code>SpringIOC</code>  来管理。</p>\n</blockquote>\n<h1 id=\"关于springaop术语\"><a class=\"anchor\" href=\"#关于springaop术语\">#</a> 关于 SpringAop 术语</h1>\n<blockquote>\n<p><code>SpringAop</code>  实现是遵循的 <code>AOP</code>  规范，特别是以 <code>AspectJ</code>  为参考可以与 <code>Java</code>  无缝整合，因此在 <code>AOP</code>  术语的概念上与 <code>AspectJ</code>  的 <code>AOP</code>  术语是一样的。</p>\n</blockquote>\n<blockquote>\n<p>如： <code>pointcut(切点)</code>  定义需要应用通知的目标方法，通知则是那些需要应用到目标方法而编写的方法体， <code>Aspect(切面)</code>  则是通知与切点的结合， <code>weaving(织入)</code>  则是将 <code>aspect</code>  类应用到目标方法的过程，只不过 <code>SpringAop</code>  底层是通过动态代理技术来实现的。</p>\n</blockquote>\n<h1 id=\"springaop-注解开发\"><a class=\"anchor\" href=\"#springaop-注解开发\">#</a> SpringAop - 注解开发</h1>\n<h2 id=\"定义切点方法\"><a class=\"anchor\" href=\"#定义切点方法\">#</a> 定义切点方法</h2>\n<blockquote>\n<p>在上述案例中，定义过滤切点方法时，是直接把 <code>execution</code>  已定义匹配表达式作为值传递给通知类型的。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserDaoAspect.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserDaoAspect</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token annotation punctuation\">@After</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"execution(* top.rem.rain.spring.aop.UserDao.addUser(..))\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">after</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"最终通知....\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>在除了上述方式外，还可以采用与 <code>AspectJ</code>  中使用 <code>pointcut</code>  关键字类似的定义切点表达式，使用 <code>@Pointcut</code>  注解，代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserDaoAspect.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserDaoAspect</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * 使用 @Pointcut 注解定义切点</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(* top.rem.rain.spring.aop.UserDao.addUser(..))\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">customPointcut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     * 应用切入点方法</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@After</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token string\">\"customPointcut()\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterDemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"最终通知....\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>使用 <code>@Pointcut</code>  注解进行定义并应用到通知方法 <code>afterDemo</code>  时直接传递切点表达式的方法名称即可。</p>\n</blockquote>\n<h2 id=\"切入点指示符\"><a class=\"anchor\" href=\"#切入点指示符\">#</a> 切入点指示符</h2>\n<blockquote>\n<p>为了使方法通知应用到相应过滤的目标方法上， <code>SpringAop</code>  提供了匹配表达式，这些表达式也被称为切入点指示符，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmctZnJhbWV3b3JrL3JlZmVyZW5jZS9jb3JlL2FvcC9hdGFzcGVjdGovcG9pbnRjdXRzLmh0bWw=\">Spring 官方文档</span>。</p>\n</blockquote>\n<h3 id=\"方法签名表达式\"><a class=\"anchor\" href=\"#方法签名表达式\">#</a> 方法签名表达式</h3>\n<blockquote>\n<p>如果想要根据方法签名进行过滤使用关键字 <code>execution</code>  即可，语法表达式如下：</p>\n</blockquote>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&#x2F;&#x2F;scope：方法作用域，如 public,private,protect</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>&#x2F;&#x2F;returnt-type：方法返回值类型</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>&#x2F;&#x2F;fully-qualified-class-name：表方法所在类的完全限定名称</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>&#x2F;&#x2F;parameters：方法参数</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>execution (&lt;scope&gt; &lt;return-type&gt; &lt;fully-qualified-class-name&gt;.*(parameters))</pre></td></tr></table></figure><blockquote>\n<p>对于给定的作用域、返回值类型、完全限定名以及参数匹配的方法将会应用切点函数指定的通知，示例如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 匹配 UserDaoImpl 类中的所有方法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(* top.rem.rain.spring.aop.UserDaoImpl.*(..))\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 匹配 UserDaoImpl 类中的所有公共方法</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(public * top.rem.rain.spring.aop.UserDaoImpl.*(..))\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 匹配 UserDaoImpl 类中的所有公共方法并且返回值为 String 类型</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(public String top.rem.rain.spring.aop.UserDaoImpl.*(..))\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 匹配 UserDaoImpl 类中第一个参数为 int 类型的所有公共方法</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(public * top.rem.rain.spring.aop.UserDaoImpl.*(String, ..))\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"类型签名表达式\"><a class=\"anchor\" href=\"#类型签名表达式\">#</a> 类型签名表达式</h3>\n<blockquote>\n<p>为了方便过滤类型方法如：包名、类名、接口， <code>SpringAop</code>  提供了 <code>within</code>  关键字，语法表达式如下：</p>\n</blockquote>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>within(&lt;type name&gt;)</pre></td></tr></table></figure><blockquote>\n<p>示例如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 匹配 top.rem.rain.spring.aop.dao 包及其子包中所有类中的所有方法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"within(top.rem.rain.spring.aop.dao..*)\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 匹配 UserDaoImpl 类中所有方法</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"within(top.rem.rain.spring.aop.UserDaoImpl)\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 匹配 UserDaoImpl 类及其子类中所有方法</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"within(top.rem.rain.spring.aop.UserDaoImpl+)\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 匹配所有实现 UserDao 接口类的所有方法</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"within(top.rem.rain.spring.aop.UserDao+)\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"通配符\"><a class=\"anchor\" href=\"#通配符\">#</a> 通配符</h3>\n<ul>\n<li>\n<p>当在定义匹配表达式是通配符可以说是随处可见的，如 <code>*</code> 、 <code>..</code> 、 <code>+</code>  它们代表的含义如下：</p>\n<ul>\n<li><code>*</code> ：匹配任意数量的字符。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 匹配 top.rem.rain.spring.aop.service 包及其子包中所有类的所有方法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">within</span><span class=\"token punctuation\">(</span>top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span>aop<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 匹配以 set 开头，参数为 int 类型，任意返回值的方法</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">execution</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> set<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li><code>+</code> ：匹配给定类的任意子类。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 匹配实现了 DaoUser 接口的所有子类的方法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">within</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span>aop<span class=\"token punctuation\">.</span>dao<span class=\"token punctuation\">.</span></span>DaoUser</span><span class=\"token operator\">+</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li><code>..</code> ：匹配方法定义中的任意数量的参数，此外还可以匹配类定义中的任意数量包。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 任意返回值，任意名称，任意参数的公共方法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">execution</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">public</span> <span class=\"token operator\">*</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 匹配 top.rem.rain.spring.aop.dao 包及其子包中所有类中的所有方法</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">within</span><span class=\"token punctuation\">(</span>top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span>aop<span class=\"token punctuation\">.</span>dao<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"其它标识符\"><a class=\"anchor\" href=\"#其它标识符\">#</a> 其它标识符</h3>\n<blockquote>\n<p><code>bean</code> ： <code>SpringAop</code>  扩展的，在 <code>AspectJ</code>  中没有对应的标识符，它用于匹配特定名称的 <code>bean</code>  对象的执行方法。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 匹配名称中带有后缀 Service 的 Bean。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bean(*Service)\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">customPointcut1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p><code>this</code> ：它用于匹配当前 <code>AOP</code>  代理对象类型的执行方法，注意：是 <code>AOP</code>  代理对象的类型匹配。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 匹配任意实现 UserDao 接口的代理对象的方法进行过滤</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this(top.rem.rain.spring.aop.UserDao)\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">customPointcut2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p><code>target</code> ：它用于匹配当前目标对象类型的执行方法。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 匹配任意实现 UserDao 接口的目标对象的方法进行过滤</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"target(top.rem.rain.spring.aop.UserDao)\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">customPointcut3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p><code>@within</code> ：它用于匹配所持有指定注解类型内的方法，注意：它与 <code>within</code>  是有区别的， <code>within</code>  是用于匹配指定类型内的方法。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 匹配使用 Transactional 注解的类</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@within(org.springframework.transaction.annotation.Transactional)\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">customPointcut4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p><code>@annotation</code> ：根据所应用的注解进行方法过滤。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 匹配使用 Transactional 注解的方法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@annotation(org.springframework.transaction.annotation.Transactional)\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">customPointcut5</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"五种通知类型\"><a class=\"anchor\" href=\"#五种通知类型\">#</a> 五种通知类型</h2>\n<blockquote>\n<p>通知类型主要分为五种，在 <code>Spring</code>  与 <code>AspectJ</code>  中一样，分别是<a href=\"#before%E5%89%8D%E7%BD%AE%E9%80%9A%E7%9F%A5\"> <code>@Before(前置通知)</code> </a>、<a href=\"#afterreturning%E5%90%8E%E7%BD%AE%E9%80%9A%E7%9F%A5\"> <code>@AfterReturning(后置通知)</code> </a>、<a href=\"#around%E7%8E%AF%E7%BB%95%E9%80%9A%E7%9F%A5\"> <code>@Around(环绕通知)</code> </a>、<a href=\"#afterthrowing%E5%BC%82%E5%B8%B8%E9%80%9A%E7%9F%A5\"> <code>@AfterThrowing(异常通知)</code> </a>、<a href=\"#after%E6%9C%80%E7%BB%88%E9%80%9A%E7%9F%A5\"> <code>@After(最终通知)</code> </a>。</p>\n</blockquote>\n<h3 id=\"before前置通知\"><a class=\"anchor\" href=\"#before前置通知\">#</a> @Before (前置通知)</h3>\n<blockquote>\n<p>前置通知通过使用 <code>@Before</code>  注解进行标注，可直接传入切点表达式的值，该通知在目标方法执行前执行，通过 <code>JoinPoint</code>  参数可以获取，目标对象的信息，如：类名称、方法名称、方法参数等，该参数可选。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserDaoAspect.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span>aop</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JoinPoint</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ProceedingJoinPoint</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EnableAspectJAutoProxy</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @Description: SpringAop 切面类</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @DateTime: 2024-01-04 21:28</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token annotation punctuation\">@Aspect</span> <span class=\"token comment\">// 使用 AspectJ 的 @Aspect 注解来表示此类是一个切面类</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token annotation punctuation\">@EnableAspectJAutoProxy</span> <span class=\"token comment\">// 使用 Spring 启用 AspectJ 自动代理</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserDaoAspect</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   * 前置通知</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   * @param joinPoint 该参数可以获取目标对象的信息，如类名称，方法参数，方法名称等</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token annotation punctuation\">@Before</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(* top.rem.rain.spring.aop.UserDao.addUser(..))\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">before</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">JoinPoint</span> joinPoint<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"前置通知....\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"afterreturning后置通知\"><a class=\"anchor\" href=\"#afterreturning后置通知\">#</a> @AfterReturning (后置通知)</h3>\n<blockquote>\n<p>后置通知通过使用 <code>@AfterReturning</code>  注解进行标注，该通知在目标方法执行完成后执行，可以获取到目标方法最终返回值 <code>returnVal</code> , 当目标方法没有返回值时 <code>returnVal</code>  将返回 <code>null</code> , 注意：必须通过 <code>returning = &quot;returnVal&quot;</code>  注明参数并且必须与通知方法参数名称相同，该参数可选。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserDaoAspect.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span>aop</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JoinPoint</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ProceedingJoinPoint</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EnableAspectJAutoProxy</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @Description: SpringAop 切面类</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @DateTime: 2024-01-04 21:28</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token annotation punctuation\">@Aspect</span> <span class=\"token comment\">// 使用 AspectJ 的 @Aspect 注解来表示此类是一个切面类</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token annotation punctuation\">@EnableAspectJAutoProxy</span> <span class=\"token comment\">// 使用 Spring 启用 AspectJ 自动代理</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserDaoAspect</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     * 后置通知</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     * returnVal, 切点方法执行后的返回值</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token annotation punctuation\">@AfterReturning</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"execution(* top.rem.rain.spring.aop.UserDao.addUser(..))\"</span><span class=\"token punctuation\">,</span> returning <span class=\"token operator\">=</span> <span class=\"token string\">\"returnVal\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterReturning</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> returnVal<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"后置通知：\"</span> <span class=\"token operator\">+</span> returnVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"around环绕通知\"><a class=\"anchor\" href=\"#around环绕通知\">#</a> @Around (环绕通知)</h3>\n<blockquote>\n<p>环绕通知通过使用 <code>@Around</code>  注解进行标注，它可以在目标方法前执行也可以在目标方法后执行，更重要的是环绕通知可以控制方法是否执行，即使如此我们也应该尽量以最简单的方式满足需求，在仅需要在目标方法前执行时应该采用前置通知而并非环绕通知。</p>\n</blockquote>\n<blockquote>\n<p>环绕通知的第一个参数必须为 <code>ProceedingJoinPoint</code> , 通过该对象的 <code>proceed()</code>  方法来执行目标方法， <code>proceed()</code>  的返回值就是环绕通知的返回值， <code>ProceedingJoinPoint</code>  它同样可以获取目标对象的信息，如：类名称、方法名称、方法参数等。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserDaoAspect.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span>aop</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JoinPoint</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ProceedingJoinPoint</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EnableAspectJAutoProxy</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @Description: SpringAop 切面类</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @DateTime: 2024-01-04 21:28</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token annotation punctuation\">@Aspect</span> <span class=\"token comment\">// 使用 AspectJ 的 @Aspect 注解来表示此类是一个切面类</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token annotation punctuation\">@EnableAspectJAutoProxy</span> <span class=\"token comment\">// 使用 Spring 启用 AspectJ 自动代理</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserDaoAspect</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     * 环绕通知</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     * @param joinPoint 可用于执行切点的类</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     * @throws Throwable</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token annotation punctuation\">@Around</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(* top.rem.rain.spring.aop.UserDao.addUser(..))\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">around</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProceedingJoinPoint</span> joinPoint<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"环绕通知前....\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">Object</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span> joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"环绕通知后....\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"afterthrowing异常通知\"><a class=\"anchor\" href=\"#afterthrowing异常通知\">#</a> @AfterThrowing (异常通知)</h3>\n<blockquote>\n<p>该通知只有在异常时才会被触发，并由 <code>throwing</code>  来声明一个接收异常信息的变量，同样异常通知也可用于 <code>JoinPoint</code>  参数，需要时加上即可。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserDaoAspect.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span>aop</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JoinPoint</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ProceedingJoinPoint</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EnableAspectJAutoProxy</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @Description: SpringAop 切面类</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @DateTime: 2024-01-04 21:28</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token annotation punctuation\">@Aspect</span> <span class=\"token comment\">// 使用 AspectJ 的 @Aspect 注解来表示此类是一个切面类</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token annotation punctuation\">@EnableAspectJAutoProxy</span> <span class=\"token comment\">// 使用 Spring 启用 AspectJ 自动代理</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserDaoAspect</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     * 异常通知</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     * @param e 抛出异常的信息</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token annotation punctuation\">@AfterThrowing</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"execution(* top.rem.rain.spring.aop.UserDao.addUser(..))\"</span><span class=\"token punctuation\">,</span> throwing <span class=\"token operator\">=</span> <span class=\"token string\">\"e\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterThrowable</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"出现异常:msg=\"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"after最终通知\"><a class=\"anchor\" href=\"#after最终通知\">#</a> @After (最终通知)</h3>\n<blockquote>\n<p>最终通知类似于 <code>finally</code>  代码块，只要应用了目标方法时不管在什么情况下都会执行。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserDaoAspect.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span>aop</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JoinPoint</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ProceedingJoinPoint</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EnableAspectJAutoProxy</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @Description: SpringAop 切面类</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @DateTime: 2024-01-04 21:28</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token annotation punctuation\">@Aspect</span> <span class=\"token comment\">// 使用 AspectJ 的 @Aspect 注解来表示此类是一个切面类</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token annotation punctuation\">@EnableAspectJAutoProxy</span> <span class=\"token comment\">// 使用 Spring 启用 AspectJ 自动代理</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserDaoAspect</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     * 无论在什么情况下都会执行的方法</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token annotation punctuation\">@After</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"execution(* top.rem.rain.spring.aop.UserDao.addUser(..))\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">after</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"最终通知....\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"传递通知参数\"><a class=\"anchor\" href=\"#传递通知参数\">#</a> 传递通知参数</h2>\n<blockquote>\n<p>在 <code>SpringAop</code>  中，除了 <code>execution</code>  和 <code>bean</code>  指示符不可以传递参数给通知方法，其它指示符都可以将匹配方法相应参数传递给通知方法，获取到匹配方法参数后通过 <code>argNames</code>  属性指定参数名，注意 <code>args</code>  指示符， <code>argNames</code>  参数名称必须与 <code>before()</code>  方法中的参数名称保持一致。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserDaoAspect.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span>aop</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JoinPoint</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ProceedingJoinPoint</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EnableAspectJAutoProxy</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @Description: SpringAop 切面类</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @DateTime: 2024-01-04 21:28</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token annotation punctuation\">@Aspect</span> <span class=\"token comment\">// 使用 AspectJ 的 @Aspect 注解来表示此类是一个切面类</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token annotation punctuation\">@EnableAspectJAutoProxy</span> <span class=\"token comment\">// 使用 Spring 启用 AspectJ 自动代理</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserDaoAspect</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@Before</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token string\">\"args(param)\"</span><span class=\"token punctuation\">,</span> argNames<span class=\"token operator\">=</span><span class=\"token string\">\"param\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 明确指定了    </span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">before</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> param<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"param:\"</span> <span class=\"token operator\">+</span> param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>当然也可以直接使用 <code>args</code>  指示符不带 <code>argNames</code>  参数。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserDaoAspect.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span>aop</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JoinPoint</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ProceedingJoinPoint</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EnableAspectJAutoProxy</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @Description: SpringAop 切面类</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @DateTime: 2024-01-04 21:28</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token annotation punctuation\">@Aspect</span> <span class=\"token comment\">// 使用 AspectJ 的 @Aspect 注解来表示此类是一个切面类</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token annotation punctuation\">@EnableAspectJAutoProxy</span> <span class=\"token comment\">// 使用 Spring 启用 AspectJ 自动代理</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserDaoAspect</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@Before</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(public * top.rem.rain.spring.aop..*.addUser(..)) &amp;&amp; args(userId,..)\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">before</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> userId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 当调用 addUser 方法时如果与 addUser 的参数匹配成功则会将参数值传递进来</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userId:\"</span> <span class=\"token operator\">+</span> userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"关于aspect的优先级\"><a class=\"anchor\" href=\"#关于aspect的优先级\">#</a> 关于 Aspect 的优先级</h1>\n<blockquote>\n<p>在不同的切面中，如果有多个通知需要在同一个切点方法指定的过滤目标方法上执行，那么那些在目标方法前执行的通知属于最高优先级，将会优先执行，在执行目标方法后执行的通知将会在最后执行，而对于在同一个切面定义的通知方法会根据在类中声明的顺序执行。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserDaoAspect2.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span>aop</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EnableAspectJAutoProxy</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @Description: SpringAop 切面类</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @DateTime: 2024-01-04 21:28</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token annotation punctuation\">@Aspect</span> <span class=\"token comment\">// 使用 AspectJ 的 @Aspect 注解来表示此类是一个切面类</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token annotation punctuation\">@EnableAspectJAutoProxy</span> <span class=\"token comment\">// 使用 Spring 启用 AspectJ 自动代理</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserDaoAspect2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     * Pointcut 定义切点函数</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(* top.rem.rain.spring.aop.UserDao.deleteUser(..))\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">customPointcut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token annotation punctuation\">@Before</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"customPointcut()\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">beforeOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"前置通知....执行顺序1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token annotation punctuation\">@Before</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"customPointcut()\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">beforeTwo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"前置通知....执行顺序2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token annotation punctuation\">@AfterReturning</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"customPointcut()\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterReturningThree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"后置通知....执行顺序3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token annotation punctuation\">@AfterReturning</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"customPointcut()\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterReturningFour</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"后置通知....执行顺序4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>在 <code>xml</code>  中配置一条 <code>bean</code>  信息并交由 <code>SpringIOC</code>  管理。</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>spring-aop-aspectj.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userDaoAspect2<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top.rem.rain.spring.aop.UserDaoAspect2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><blockquote>\n<p>测试方法如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserDaoTest.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span>aop</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>runner<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RunWith</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ContextConfiguration</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>junit4<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringJUnit4ClassRunner</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @Description: 测试类</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @DateTime: 2024-01-04 21:54</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token annotation punctuation\">@RunWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringJUnit4ClassRunner</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token annotation punctuation\">@ContextConfiguration</span><span class=\"token punctuation\">(</span>locations<span class=\"token operator\">=</span> <span class=\"token string\">\"classpath:spring-aop-aspectj.xml\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserDaoTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserDao</span> userDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testUserDao2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        userDao<span class=\"token punctuation\">.</span><span class=\"token function\">deleteUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        执行结果：</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            前置通知.... 执行顺序 1</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            前置通知.... 执行顺序 2</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            删除了一条用户记录</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            后置通知.... 执行顺序 3</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            后置通知.... 执行顺序 4</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>由此可以看出执行结果，在同一个切面中定义多个通知来处理同一个切点方法，确实会根据在类中的声明顺序执行。</p>\n</blockquote>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"><span>执行结果</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>前置通知.... 执行顺序 1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>前置通知.... 执行顺序 2</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>删除了一条用户记录</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>后置通知.... 执行顺序 3</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>后置通知.... 执行顺序 4</pre></td></tr></table></figure><blockquote>\n<p>如果在不同切面中定义多个通知来处理同一个切点，进入时则优先级高的切面类中的通知方法优先执行，退出时则最后执行。</p>\n</blockquote>\n<blockquote>\n<p>如下定义了两个类分别是 <code>UserDaoAspect3</code>  和 <code>UserDaoAspect4</code>  切面类并且实现了 <code>Ordered</code>  接口，该接口用于控制切面类的优先级，同时重写 <code>getOrder()</code>  方法，返回值越小优先级越高。其中 <code>UserDaoAspect3</code>  的返回值是 <code>0</code> ，而 <code>UserDaoAspect4</code>  的优先级是 <code>1</code> , 显然 <code>UserDaoAspect3</code>  的优先级更高。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserDaoAspect3.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span>aop</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AfterReturning</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Aspect</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Before</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Pointcut</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EnableAspectJAutoProxy</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Ordered</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @Description: SpringAop 切面类</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * @DateTime: 2024-01-04 21:28</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token annotation punctuation\">@Aspect</span> <span class=\"token comment\">// 使用 AspectJ 的 @Aspect 注解来表示此类是一个切面类</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token annotation punctuation\">@EnableAspectJAutoProxy</span> <span class=\"token comment\">// 使用 Spring 启用 AspectJ 自动代理</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserDaoAspect3</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Ordered</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   * Pointcut 定义切点函数</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(* top.rem.rain.spring.aop.UserDao.deleteUser(..))\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">customPointcut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token annotation punctuation\">@Before</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"customPointcut()\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">beforeOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"前置通知..UserDaoAspect3..执行顺序1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token annotation punctuation\">@Before</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"customPointcut()\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">beforeTwo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"前置通知..UserDaoAspect3..执行顺序2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token annotation punctuation\">@AfterReturning</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"customPointcut()\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterReturningThree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"后置通知..UserDaoAspect3..执行顺序3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token annotation punctuation\">@AfterReturning</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"customPointcut()\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterReturningFour</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"后置通知..UserDaoAspect3..执行顺序4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>   * 定义优先级，值越低，优先级越高</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>   * @return int</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserDaoAspect4.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span>aop</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AfterReturning</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Aspect</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Before</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Pointcut</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EnableAspectJAutoProxy</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Ordered</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @Description: SpringAop 切面类</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * @DateTime: 2024-01-04 21:28</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token annotation punctuation\">@Aspect</span> <span class=\"token comment\">// 使用 AspectJ 的 @Aspect 注解来表示此类是一个切面类</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token annotation punctuation\">@EnableAspectJAutoProxy</span> <span class=\"token comment\">// 使用 Spring 启用 AspectJ 自动代理</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserDaoAspect4</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Ordered</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     * Pointcut 定义切点函数</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(* top.rem.rain.spring.aop.UserDao.deleteUser(..))\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">customPointcut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token annotation punctuation\">@Before</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"customPointcut()\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">beforeOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"前置通知..UserDaoAspect4..执行顺序1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token annotation punctuation\">@Before</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"customPointcut()\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">beforeTwo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"前置通知..UserDaoAspect4..执行顺序2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token annotation punctuation\">@AfterReturning</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"customPointcut()\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterReturningThree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"后置通知..UserDaoAspect4..执行顺序3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token annotation punctuation\">@AfterReturning</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"customPointcut()\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterReturningFour</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"后置通知..UserDaoAspect4..执行顺序4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>     * 定义优先级，值越低，优先级越高</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>     * @return int</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>在 <code>xml</code>  添加如下配置：</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>spring-aop-aspectj.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 定义目标对象 --></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top.rem.rain.spring.aop.UserDaoImpl<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 定义 aspect 类 --></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">&lt;!--    &lt;bean name=\"userDaoAspect\" class=\"top.rem.rain.spring.aop.UserDaoAspect\"/>--></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">&lt;!--    &lt;bean name=\"userDaoAspect2\" class=\"top.rem.rain.spring.aop.UserDaoAspect2\"/>--></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userDaoAspect3<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top.rem.rain.spring.aop.UserDaoAspect3<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userDaoAspect4<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top.rem.rain.spring.aop.UserDaoAspect4<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>测试方法和执行结果如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserDaoTest.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span>aop</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>runner<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RunWith</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ContextConfiguration</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>junit4<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringJUnit4ClassRunner</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @Description: 测试类</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @DateTime: 2024-01-04 21:54</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token annotation punctuation\">@RunWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringJUnit4ClassRunner</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token annotation punctuation\">@ContextConfiguration</span><span class=\"token punctuation\">(</span>locations<span class=\"token operator\">=</span> <span class=\"token string\">\"classpath:spring-aop-aspectj.xml\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserDaoTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserDao</span> userDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testUserDao3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        userDao<span class=\"token punctuation\">.</span><span class=\"token function\">deleteUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        执行结果：</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            前置通知..UserDaoAspect3.. 执行顺序 1</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            前置通知..UserDaoAspect3.. 执行顺序 2</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            前置通知..UserDaoAspect4.. 执行顺序 1</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            前置通知..UserDaoAspect4.. 执行顺序 2</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            删除了一条用户记录</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            后置通知..UserDaoAspect4.. 执行顺序 3</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            后置通知..UserDaoAspect4.. 执行顺序 4</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            后置通知..UserDaoAspect3.. 执行顺序 3</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            后置通知..UserDaoAspect3.. 执行顺序 4</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"springaop-xml开发\"><a class=\"anchor\" href=\"#springaop-xml开发\">#</a> SpringAop-XML 开发</h1>\n<blockquote>\n<p>下面是基于 <code>XML</code>  的方式来使用 <code>SpringAop</code> 。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserDaoAspectXML.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span>aop</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ProceedingJoinPoint</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AfterReturning</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Aspect</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Before</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Pointcut</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EnableAspectJAutoProxy</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Ordered</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * @Description: SpringAop 切面类 - XML 方式</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> * @DateTime: 2024-01-05 22:18</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserDaoAspectXML</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">before</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UserDaoAspectXML ==== 前置通知\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterReturn</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> returnVal<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"后置通知 --> 返回值:\"</span> <span class=\"token operator\">+</span> returnVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">around</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProceedingJoinPoint</span> joinPoint<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UserDaoAspectXML ===== 环绕通知前\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">Object</span> object <span class=\"token operator\">=</span> joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UserDaoAspectXML ===== 环绕通知后\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">return</span> object<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterThrowing</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> throwable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UserDaoAspectXML ====== 异常通知:\"</span> <span class=\"token operator\">+</span> throwable<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">after</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UserDaoAspectXML ===== 最终通知..来了\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>通过配置文件的方式声明如下：</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>spring-aop-aspectj.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>aop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/aop<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 定义目标对象 --></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top.rem.rain.spring.aop.UserDaoImpl<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 定义 aspect 类 --></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userDaoAspectXML<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top.rem.rain.spring.aop.UserDaoAspectXML<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 配置 AOP 切面 --></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">aop:</span>config</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 定义切点函数 --></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">aop:</span>pointcut</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pointcut<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">expression</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>execution(* top.rem.rain.spring.aop.UserDao.addUser(..))<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 定义通知 order 定义优先级，值越小优先级越大 --></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">aop:</span>aspect</span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userDaoAspectXML<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">order</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token comment\">&lt;!-- 定义通知</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            method 指定通知方法名，必须与 userDaoAspectXML 中的相同</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            pointcut 指定切点函数</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            --></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">aop:</span>before</span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>before<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">pointcut-ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pointcut<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token comment\">&lt;!-- 后置通知  returning=\"returnVal\" 定义返回值 必须与类中声明的名称一样 --></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">aop:</span>after-returning</span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>afterReturn<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">pointcut-ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pointcut<span class=\"token punctuation\">\"</span></span>  <span class=\"token attr-name\">returning</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>returnVal<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token comment\">&lt;!-- 环绕通知 --></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">aop:</span>around</span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>around<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">pointcut-ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pointcut<span class=\"token punctuation\">\"</span></span>  <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token comment\">&lt;!-- 异常通知 throwing=\"throwable\" 指定异常通知错误信息变量，必须与类中声明的名称一样 --></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">aop:</span>after-throwing</span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>afterThrowing<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">pointcut-ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pointcut<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">throwing</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>throwable<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token comment\">&lt;!--</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                 method : 通知的方法 (最终通知)</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                 pointcut-ref : 通知应用到的切点方法</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                --></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">aop:</span>after</span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>after<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">pointcut-ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pointcut<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">aop:</span>aspect</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">aop:</span>config</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>测试方法和执行结果如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserDaoTest.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>spring<span class=\"token punctuation\">.</span>aop</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>runner<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RunWith</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ContextConfiguration</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>junit4<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringJUnit4ClassRunner</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @Description: 测试类</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @DateTime: 2024-01-04 21:54</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token annotation punctuation\">@RunWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringJUnit4ClassRunner</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token annotation punctuation\">@ContextConfiguration</span><span class=\"token punctuation\">(</span>locations<span class=\"token operator\">=</span> <span class=\"token string\">\"classpath:spring-aop-aspectj.xml\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserDaoTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserDao</span> userDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testUserDao4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        userDao<span class=\"token punctuation\">.</span><span class=\"token function\">addUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        执行结果：</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            UserDaoAspectXML ==== 前置通知</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            UserDaoAspectXML ===== 环绕通知前</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            添加了一条用户记录</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            UserDaoAspectXML ===== 最终通知.. 来了</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            UserDaoAspectXML ===== 环绕通知后</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            后置通知 --> 返回值：成功添加一条用户记录</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"springaop应用场景\"><a class=\"anchor\" href=\"#springaop应用场景\">#</a> SpringAop 应用场景</h1>\n<blockquote>\n<p>下面是两种开发中常用到的场景，注意：这些场景的代码并不一定适合所有情况，但它们确实可以运用到实际开发中。</p>\n</blockquote>\n<h2 id=\"性能监控\"><a class=\"anchor\" href=\"#性能监控\">#</a> 性能监控</h2>\n<blockquote>\n<p>对于成熟的系统，性能监控是不可或缺的，以下代码将展示程序的消耗时间，而对于计算消耗时间的代码可能会存在于各个模块中。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 获取当前毫秒值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">long</span> start <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 获取当前毫秒值并减去之前的毫秒值计算这段代码的运行耗时</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">long</span> time <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> start<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>而这种操作就可以使用 <code>AOP</code>  作为横切点来执行并减少模块中的重复代码。</p>\n</blockquote>\n<blockquote>\n<p>为了方便演示此处只创建了一个 <code>Controller</code>  并未创建 <code>Service</code> , 其中的 <code>for</code>  表示要执行的业务代码的耗时。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserController.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>controller</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Controller</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Description: User 控制器</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @DateTime: 2024-01-05 22:58</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">addUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> userName<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> sex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 此处本该是调用 service 层来处理响应的业务信息，这里为了简单演示就不创建 service 层了，就直接在 Controller 层写代码了</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">2000000000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>userName<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">,</span>sex<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>PerformanceMonitoringInfo.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>monitoring<span class=\"token punctuation\">.</span>performance<span class=\"token punctuation\">.</span>bean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Date</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Description: 性能监控信息</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @DateTime: 2024-01-05 22:50</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PerformanceMonitoringInfo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     * 类名</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> className<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     * 方法名</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> methodName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     * 日志时间</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Date</span> logTime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     * 耗时时间</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> timeConsuming<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getClassName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">return</span> className<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setClassName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> className<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>className <span class=\"token operator\">=</span> className<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getMethodName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">return</span> methodName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setMethodName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> methodName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>methodName <span class=\"token operator\">=</span> methodName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Date</span> <span class=\"token function\">getLogTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">return</span> logTime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setLogTime</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Date</span> logTime<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>logTime <span class=\"token operator\">=</span> logTime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">long</span> <span class=\"token function\">getTimeConsuming</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token keyword\">return</span> timeConsuming<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setTimeConsuming</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> timeConsuming<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timeConsuming <span class=\"token operator\">=</span> timeConsuming<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>PerformanceAspect.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>monitoring<span class=\"token punctuation\">.</span>performance<span class=\"token punctuation\">.</span>aspect</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ProceedingJoinPoint</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Around</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Aspect</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Pointcut</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EnableAspectJAutoProxy</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>monitoring<span class=\"token punctuation\">.</span>performance<span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PerformanceMonitoringInfo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Date</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> * @Description: 监控切面类</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> * @DateTime: 2024-01-05 23:09</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token annotation punctuation\">@Aspect</span> <span class=\"token comment\">// 这是一个 AspectJ 切面类</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token annotation punctuation\">@EnableAspectJAutoProxy</span> <span class=\"token comment\">// 启用 AspectJ 自动代理</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PerformanceAspect</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     * 定义切点函数，过滤 controller 包下的名称以 Controller 结尾的类所有方法</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(* top.rem.rain.controller.*Controller.*(..))\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">timer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token annotation punctuation\">@Around</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"timer()\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">logTimer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProceedingJoinPoint</span> thisJoinPoint<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">PerformanceMonitoringInfo</span> performanceMonitoring <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PerformanceMonitoringInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">// 获取目标类名称</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token class-name\">String</span> clazzName <span class=\"token operator\">=</span> thisJoinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">getTarget</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token comment\">// 获取目标类方法名称</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\">String</span> methodName <span class=\"token operator\">=</span> thisJoinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">getSignature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\">// 记录类名称</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        performanceMonitoring<span class=\"token punctuation\">.</span><span class=\"token function\">setClassName</span><span class=\"token punctuation\">(</span>clazzName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\">// 记录对应方法名称</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        performanceMonitoring<span class=\"token punctuation\">.</span><span class=\"token function\">setMethodName</span><span class=\"token punctuation\">(</span>methodName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">// 记录时间</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        performanceMonitoring<span class=\"token punctuation\">.</span><span class=\"token function\">setLogTime</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\">// 计时并调用目标函数</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">long</span> start <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token class-name\">Object</span> result <span class=\"token operator\">=</span> thisJoinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">long</span> time <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> start<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token comment\">// 设置消耗时间</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        performanceMonitoring<span class=\"token punctuation\">.</span><span class=\"token function\">setTimeConsuming</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消耗时间 = \"</span> <span class=\"token operator\">+</span> time <span class=\"token operator\">+</span> <span class=\"token string\">\"毫秒\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token comment\">// 如果要把 performanceMonitoring 记录的信息上传给监控系统，这里并没有实现，需要自行实现即可</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token comment\">//MonitoruUtils.report(performanceMonitoring)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>配置 <code>XML</code>  由 <code>SpringIOC</code>  进行管理。</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>performance-monitoring.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userController<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top.rem.rain.controller.UserController<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>performanceAspect<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top.rem.rain.monitoring.performance.aspect.PerformanceAspect<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>测试方法如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserControllerTest.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>monitoring<span class=\"token punctuation\">.</span>performance<span class=\"token punctuation\">.</span>test</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>runner<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RunWith</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ContextConfiguration</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>junit4<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringJUnit4ClassRunner</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>controller<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UserController</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> * @Description: 测试类</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> * @DateTime: 2024-01-05 23:18</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token annotation punctuation\">@RunWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringJUnit4ClassRunner</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token annotation punctuation\">@ContextConfiguration</span><span class=\"token punctuation\">(</span>locations<span class=\"token operator\">=</span> <span class=\"token string\">\"classpath:performance-monitoring.xml\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserControllerTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserController</span> controller<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>controller<span class=\"token punctuation\">.</span><span class=\"token function\">addUser</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ZeroTwo\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"女\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        执行结果：</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        消耗时间 = 4 毫秒</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        [ZeroTwo, 17, 女]</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>在每次访问切点方法时就可以计算出接口消耗的时间了，以此来作为访问接口的性能指标。</p>\n</blockquote>\n<h2 id=\"异常处理\"><a class=\"anchor\" href=\"#异常处理\">#</a> 异常处理</h2>\n<blockquote>\n<p>为了避免到处编写 <code>try/catch</code>  将统一处理异常信息，这也是 <code>AOP</code>  可以做的事情，可以在切面类中使用环绕通知来统一处理异常信息并上报给日志系统。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>ExceptionInfo.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>monitoring<span class=\"token punctuation\">.</span>abnormal<span class=\"token punctuation\">.</span>bean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Date</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Description: 异常信息类</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @DateTime: 2024-01-06 01:17</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ExceptionInfo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     * 类名</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> className<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     * 方法名</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> methodName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     * 异常时间</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Date</span> logTime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     * 异常信息</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> message<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getClassName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">return</span> className<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setClassName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> className<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>className <span class=\"token operator\">=</span> className<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getMethodName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">return</span> methodName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setMethodName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> methodName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>methodName <span class=\"token operator\">=</span> methodName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Date</span> <span class=\"token function\">getLogTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">return</span> logTime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setLogTime</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Date</span> logTime<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>logTime <span class=\"token operator\">=</span> logTime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token keyword\">return</span> message<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>message <span class=\"token operator\">=</span> message<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>ExceptionAspect.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>monitoring<span class=\"token punctuation\">.</span>abnormal<span class=\"token punctuation\">.</span>aspect</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ProceedingJoinPoint</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Around</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Aspect</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>aspectj<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Pointcut</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EnableAspectJAutoProxy</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>monitoring<span class=\"token punctuation\">.</span>abnormal<span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ExceptionInfo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Date</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> * @Description: 异常切面类</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> * @DateTime: 2024-01-06 01:19</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token annotation punctuation\">@Aspect</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token annotation punctuation\">@EnableAspectJAutoProxy</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ExceptionAspect</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   * 定义异常监控类</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"execution(top.rem.rain *(..))\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token function\">exceptionMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token annotation punctuation\">@Around</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"exceptionMethod()\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">monitorMethods</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProceedingJoinPoint</span> thisJoinPoint<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token keyword\">return</span> thisJoinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token class-name\">ExceptionInfo</span> exceptionInfo<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ExceptionInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token comment\">// 异常类记录</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      exceptionInfo<span class=\"token punctuation\">.</span><span class=\"token function\">setClassName</span><span class=\"token punctuation\">(</span>thisJoinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">getTarget</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      exceptionInfo<span class=\"token punctuation\">.</span><span class=\"token function\">setMethodName</span><span class=\"token punctuation\">(</span>thisJoinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">getSignature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      exceptionInfo<span class=\"token punctuation\">.</span><span class=\"token function\">setLogTime</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      exceptionInfo<span class=\"token punctuation\">.</span><span class=\"token function\">setMessage</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token comment\">// 上传日志系统，自行完善</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      <span class=\"token comment\">// ExceptionReportUtils.report(info);</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>这里仅简单演示代码实现，在实际开发中根据业务需求修改即可。 <code>AOP</code>  的应用远不止这两种，诸如缓存，权限验证、内容处理、事务控制等都可以使用 <code>AOP</code>  实现，其中事务控制 <code>Spring</code>  提供了专门的处理方式。</p>\n</blockquote>\n<h1 id=\"springaop实现原理\"><a class=\"anchor\" href=\"#springaop实现原理\">#</a> SpringAop 实现原理</h1>\n<blockquote>\n<p><code>SpringAop</code>  的实现原理是基于动态织入的动态代理技术，而 <code>AspectJ</code>  则是静态织入，而动态代理技术又分为 <code>Java JDK</code>  动态代理和 <code>CGLIB</code>  动态代理，前者是基于反射技术的实现，后者是基于继承的机制实现，关于代理可以查看<a href=\"/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/java/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F-proxy-pattern\"> 23 种设计模式</a>中的代理模式。</p>\n</blockquote>\n",
            "tags": [
                "计算机科学",
                "Java",
                "Java深入理解",
                "计算机科学",
                "AspectJ",
                "Aop",
                "Java深入理解",
                "Spring"
            ]
        },
        {
            "id": "https://rainrem.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/java/spring/SpringIOC%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-DI%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/",
            "url": "https://rainrem.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/java/spring/SpringIOC%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-DI%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/",
            "title": "SpringIOC深入理解-DI依赖注入",
            "date_published": "2023-12-25T15:50:00.000Z",
            "content_html": "<h1 id=\"springioc概述\"><a class=\"anchor\" href=\"#springioc概述\">#</a> SpringIOC 概述</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vUmFpblNhdWNlL3NwcmluZy1pb2MtZGVtbw==\">🚀本篇章代码 Demo</span> 在日常开发中，创建对象的操作随处可见以至于对其十分熟悉又感觉很繁琐，每次需要对象都需要亲手 <code>new</code>  一个对象出来，甚至某些情况下由于不好的编程习惯可能还会造成对象无法被回收，就会非常糟糕，我们一直提倡的松耦合，少入侵原则，这种情况下变得一无是。前辈们开始谋求改变这种编程陋习，考虑如何使编码更加解耦合，由此而来的解决方法是面向接口编程，未使用接口和使用接口后的代码如下：</p>\n</blockquote>\n<h2 id=\"1️⃣-使用接口前的做法-before\"><a class=\"anchor\" href=\"#1️⃣-使用接口前的做法-before\">#</a> 1️⃣ 使用接口前的做法 - before</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>SystemDaoImpl.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo1<span class=\"token punctuation\">.</span>before</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @Description: 系统类</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @DateTime: 2023-12-30 22:27</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SystemDaoImpl</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     * 打印系统信息</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">systemInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Java运行版本：%s\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java.version\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Java供应商：%s\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java.vendor\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Java安装目录：%s\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java.home\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"操作系统名称：%s\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"os.name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"操作系统架构：%s\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"os.arch\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"操作系统版本：%s\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"os.version\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"用户名称：%s\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user.name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"用户主目录：%s\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user.home\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>SystemServiceImpl.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo1<span class=\"token punctuation\">.</span>before</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: 系统业务层</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2023-12-30 22:28</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SystemServiceImpl</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * 实体类对象</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">SystemDaoImpl</span> system<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getSystemInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 未使用接口的做法</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        system <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SystemDaoImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        system<span class=\"token punctuation\">.</span><span class=\"token function\">systemInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"2️⃣-使用接口后的做法-after\"><a class=\"anchor\" href=\"#2️⃣-使用接口后的做法-after\">#</a> 2️⃣ 使用接口后的做法 - after</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>SystemDao.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo1<span class=\"token punctuation\">.</span>after</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @author LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">SystemDao</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * 打印系统信息</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">systemInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>SystemDaoImpl.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo1<span class=\"token punctuation\">.</span>after</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @Description: 系统实现类</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @DateTime: 2023-12-30 22:43</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SystemDaoImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">SystemDao</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     * 打印系统信息</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">systemInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Java运行版本：%s\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java.version\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Java供应商：%s\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java.vendor\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Java安装目录：%s\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java.home\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"操作系统名称：%s\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"os.name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"操作系统架构：%s\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"os.arch\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"操作系统版本：%s\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"os.version\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"用户名称：%s\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user.name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"用户主目录：%s\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user.home\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>SystemServiceImpl.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo1<span class=\"token punctuation\">.</span>after</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: 系统业务层</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2023-12-30 22:45</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SystemServiceImpl</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * 使用接口的做法</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">SystemDao</span> systemDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">systemInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 使用接口来创建具体实现类对象</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        systemDao <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SystemDaoImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        systemDao<span class=\"token punctuation\">.</span><span class=\"token function\">systemInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p><code>SystemServiceImpl</code>  类中由原来直接与 <code>SystemDaoImpl</code>  打交道变为了 <code>SystemDao</code> , 即使 <code>SystemDao</code>  最终实现依然是 <code>SystemDaoImpl</code> ，这样做的好处是所有调用都通过接口 <code>SystemDao</code>  来完成，而接口真正实现类和最终执行者就是 <code>SystemDaoImpl</code>  类，当替换 <code>SystemDaoImpl</code>  类时也只需要修改 <code>SystemDao</code>  指向新实现类即可。</p>\n</blockquote>\n<p><img data-src=\"https://s11.ax1x.com/2023/12/26/pibcnmD.png\" alt=\"pibcnmD.png\" /></p>\n<blockquote>\n<p>在上述代码中很大程度上降低了代码耦合度，但是代码依旧存在入侵性和一定程度的耦合性，如：在修改 <code>SystemDao</code>  实现类时，扔然需要修改 <code>SystemServiceImpl</code>  内部代码，当依赖的类过多时，查找和修改的过程会非常麻烦，因此我们扔需要寻找一种方式，它可以令开发者无需触及 <code>SystemServiceImpl</code>  内容代码的情况下实现修改 <code>SystemDao</code>  的实现类，以便达到最低的耦合度和最少入侵目的。</p>\n</blockquote>\n<h2 id=\"3️⃣-通过配置文件降低耦合度\"><a class=\"anchor\" href=\"#3️⃣-通过配置文件降低耦合度\">#</a> 3️⃣ 通过配置文件降低耦合度</h2>\n<blockquote>\n<p>实际上存在一种称为反射的编程技术可以协助解决此问题，反射是一种根据给出完整类名来动态生成对象，这种编程方式可以让对象在生成时决定到底是哪一种对象，因此可以这样来做，在某个配置文件，该文件已写好 <code>SystemDaoImpl</code>  类的完全限定名，通过读取该文件而获取到 <code>SystemDao</code>  的真正实现类的完全限定名，然后通过反射技术在运行时动态生成该类，最终赋值给 <code>SystemDao</code>  接口，这样就可以解决当前问题了，下面使用 <code>properties</code>  文件作为配置文件， <code>className.properties</code>  如下：</p>\n</blockquote>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"><span>className.properties</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token attr-name\">systemDao.name</span> <span class=\"token punctuation\">=</span> <span class=\"token attr-value\">top.rem.rain.demo1.reflection.SystemDaoImpl</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>SystemService.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo1<span class=\"token punctuation\">.</span>reflection</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InvocationTargetException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @author LightRain</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">SystemService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * 反射创建对象</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * @throws ClassNotFoundException</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     * @throws InstantiationException</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     * @throws IllegalAccessException</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     * @throws NoSuchMethodException</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     * @throws InvocationTargetException</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">reflectionCreationObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InstantiationException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IllegalAccessException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">NoSuchMethodException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InvocationTargetException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>SystemServiceImpl.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo1<span class=\"token punctuation\">.</span>reflection</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>logging<span class=\"token punctuation\">.</span>log4j<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PropertiesUtil</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>jupiter<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InvocationTargetException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @Description: 系统业务层</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @DateTime: 2023-12-30 22:55</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SystemServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">SystemService</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">SystemDao</span> systemDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     * 反射创建对象</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     * @throws ClassNotFoundException</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     * @throws InstantiationException</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     * @throws IllegalAccessException</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     * @throws NoSuchMethodException</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     * @throws InvocationTargetException</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">reflectionCreationObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InstantiationException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IllegalAccessException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">NoSuchMethodException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InvocationTargetException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">// 读取配置文件的工具类</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">PropertiesUtil</span> propertiesUtil <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PropertiesUtil</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"className.properties\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">// 获取完全限定名称</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token class-name\">String</span> className <span class=\"token operator\">=</span> propertiesUtil<span class=\"token punctuation\">.</span><span class=\"token function\">getStringProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"systemDao.name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token comment\">// 通过反射</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> c <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\">// 动态生成实例对象</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        systemDao <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SystemDao</span><span class=\"token punctuation\">)</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredConstructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\">// 打印系统信息</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        systemDao<span class=\"token punctuation\">.</span><span class=\"token function\">systemInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InvocationTargetException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InstantiationException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IllegalAccessException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">NoSuchMethodException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token class-name\">SystemServiceImpl</span> systemService <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SystemServiceImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        systemService<span class=\"token punctuation\">.</span><span class=\"token function\">reflectionCreationObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>          执行结果：</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            Java 运行版本：17.0.6</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            Java 供应商：Oracle Corporation</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            Java 安装目录：C:\\LightRainData\\IDEA\\JDK\\JDK-17.0.6</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            操作系统名称：Windows 11</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            操作系统架构：amd64</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            操作系统版本：10.0</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            用户名称：LightRain</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            用户主目录：C:\\Users\\LightRain</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>上述代码的确如我们所愿生成了 <code>SystemDao</code>  实例，这样做的好处是在替换 <code>SystemDao</code>  实现类的情况下只需要修改配置文件的内容，而无需触及 <code>SystemServiceImpl</code>  内部代码，从而把代码修改的过程转到配置文件中，相当于 <code>SystemServiceImpl</code>  及其内部的 <code>SystemDao</code>  通过配置文件与 <code>SystemDao</code>  的实现类进行关联，这样 <code>SystemServiceImpl</code>  与 <code>SystemDao</code>  的实现类间也就实现了解耦合，当然 <code>SystemSeviceImpl</code>  类中存在着 <code>SystemDao</code>  对象是无法避免的，我们只能最大程度去解耦合。</p>\n</blockquote>\n<p><img data-src=\"https://s11.ax1x.com/2023/12/30/piOyEWR.png\" alt=\"piOyEWR.png\" /></p>\n<blockquote>\n<p><code>SpringIOC</code>  也是一个 <code>Java</code>  对象，在某些特定时间被创建后，可以进行对其它对象的控制，包括初始化、创建、销毁等。在上述过程中，我们通过配置文件配置了 <code>SystemDaoImpl</code>  实现类的完全限定名称，通过反射机制在运行时为 <code>SystemDao</code>  创建具体实现类，包括 <code>SystemServiceImpl</code>  的创建， <code>Spring</code>  的 <code>IOC</code>  容器都会帮我们完成，而我们唯一要做的就是把需要创建的类和其它依赖的类以配置文件的方式告诉 <code>IOC</code>  容器需要创建和注入哪些类。</p>\n</blockquote>\n<blockquote>\n<p><code>Spring</code>  通过这种控制反转 <code>(IOC)</code>  的设计模式来解耦合，这种方式使一个对象依赖其它对象时会通过被动的方式传进来，而不是通过手动创建这些类，我们可以把 <code>IOC</code>  模式看做工厂模式的升华版，只不过这个工厂里要生成的对象都是配置文件 <code>(XML)</code>  中给出定义的，然后利用 <code>Java</code>  反射技术根据 <code>XML</code>  中给出的类名生成相应对象。</p>\n</blockquote>\n<blockquote>\n<p>从某种程度上来讲 <code>IOC</code>  相当于把在工厂方法里通过硬编码创建对象的代码，改成了由 <code>XML</code>  文件来定义，也就是把工厂和对象生成这两者独立分隔开来，目的就是提高灵活性和可维护性，再就是将对象之间的耦合度降到最低，因此我们要明白所谓的 <code>IOC</code>  就是将对象的创建权交由 <code>Spring</code>  来完成，让类之间的关系达到最低耦合度状态。</p>\n</blockquote>\n<h1 id=\"spring快速入门\"><a class=\"anchor\" href=\"#spring快速入门\">#</a> Spring 快速入门</h1>\n<blockquote>\n<p>1️⃣ 使用 <code>SpringIOC</code>  功能需要先引入 <code>Spring</code>  核心依赖包，使用 <code>Maven</code>  作为构建工具。</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>pom.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>properties</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>spring.version</span><span class=\"token punctuation\">></span></span>6.1.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>spring.version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>project.build.sourceEncoding</span><span class=\"token punctuation\">></span></span>UTF-8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>project.build.sourceEncoding</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>properties</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">&lt;!--    添加 Spring 依赖    --></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-core<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$&#123;spring.version&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-beans<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$&#123;spring.version&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-context<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$&#123;spring.version&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>2️⃣ 创建 <code>AccountDao</code>  接口</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>AccountDao.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo2<span class=\"token punctuation\">.</span>dao</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @author LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">AccountDao</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * 账户信息</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">accountInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>3️⃣ 创建 <code>Dao</code>  具体实现类</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>AccountDaoImpl.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo2<span class=\"token punctuation\">.</span>dao</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: 实现类</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2023-12-31 21:01</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AccountDaoImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AccountDao</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * 账户信息</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">accountInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"用户名称：%s\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user.name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>4️⃣ 创建 <code>AccountService</code>  接口</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>AccountService.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo2<span class=\"token punctuation\">.</span>service</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">AccountService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * 获取账户</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">getAccount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>5️⃣ 创建 <code>Service</code>  具体实现类</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>AccountServiceImpl.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo2<span class=\"token punctuation\">.</span>service</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>jupiter<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo2<span class=\"token punctuation\">.</span>dao<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AccountDao</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo2<span class=\"token punctuation\">.</span>dao<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AccountDaoImpl</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @Description: 实现类</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @DateTime: 2023-12-31 21:04</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AccountServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AccountService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     * 注入对象</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">AccountDao</span> accountDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     * 获取账户</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getAccount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        accountDao<span class=\"token punctuation\">.</span><span class=\"token function\">accountInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>     * 通过 set 方法注入依赖对象</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>     * @param accountDao AccountDao</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAccountDao</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AccountDao</span> accountDao<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>accountDao <span class=\"token operator\">=</span> accountDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>6️⃣ 在创建完上面的接口和具体实现后，下面将通过 <code>SpringIOC</code>  容器来帮助我们创建并注入这些类，在项目的 <code>resources</code>  目录下创建 <code>applicationcontext.xml</code>  配置文件，具体配置代码如下：</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>applicationcontext.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">&lt;!--  声明 accountDao 对象并交由 Spring 来进行管理与创建  --></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>accountDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top.rem.rain.demo2.dao.AccountDaoImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">&lt;!--  声明 accountService 对象并交由 Spring 来进行管理与创建  --></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>accountService<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top.rem.rain.demo2.service.AccountServiceImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">&lt;!--    注入 accountDao 对象需要 set 方法    --></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>accountDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>accountDao<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>从 <code>XML</code>  文件中，我们可以看到有一个 <code>beans</code>  的顶级标签，同时还引入了核心命名空间， <code>Spring</code>  的功能在使用时都需要声明相应的命名空间，在上述的 <code>xml</code>  中的命名空间是最基本的，使用 <code>IntelliJ IDEA</code>  创建 <code>Spring</code>  的 <code>xml</code>  配置文件时默认就会生成。</p>\n</blockquote>\n<blockquote>\n<p>通过 <code>bean</code>  子标签声明那些需要 <code>IOC</code>  容器帮助我们要创建的类，其中 <code>name</code>  是指明 <code>IOC</code>  创建后该对象的名称 (也可以使用 <code>id</code>  来替代 <code>name</code> ), <code>class</code>  是告诉 <code>IOC</code>  这个类的完全限定名称， <code>IOC</code>  会通过这组信息使用反射技术来帮助我们创建对应的类对象。</p>\n</blockquote>\n<blockquote>\n<p>在 <code>accountService</code>  标签的声明中多出了一个 <code>property</code>  标签，这个标签指向了刚才创建的 <code>accountDao</code>  对象，它的作用是把 <code>accountDao</code>  对象传递给 <code>accountService</code>  实现类中的 <code>accountDao</code>  属性，该属性必须拥有 <code>set</code>  方法才可以注入成功，我们把这种往类对象中注入其它对象的操作统称为 <code>依赖注入</code> ，其中 <code>property</code>  标签的 <code>name</code>  必须与 <code>AccountServiceImpl</code>  实现类中的变量名称相同。</p>\n</blockquote>\n<blockquote>\n<p>7️⃣ 在 <code>AccountServiceImpl</code>  类中添加一个测试方法，其次使用这些类需要利用 <code>Spring</code>  提供的核心类， <code>ApplicationContext</code>  通过该类去加载已声明好的配置文件，然后就可以获取到我们需要的类了，测试方法如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>AccountServiceImpl.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo2<span class=\"token punctuation\">.</span>service</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>jupiter<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo2<span class=\"token punctuation\">.</span>dao<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AccountDao</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo2<span class=\"token punctuation\">.</span>dao<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AccountDaoImpl</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @Description: 实现类</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @DateTime: 2023-12-31 21:04</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AccountServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AccountService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     * 省略上述重复贴过的代码....</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     * 使用 XML 文件进行配置</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testAccountXML</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">// 通过 ApplicationContext 加载配置文件</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">ApplicationContext</span> applicationContext <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"applicationcontext.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">// 多次获取并不会创建多个 accountService 对象，因为 Spring 默认创建是单实例的作用域</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">AccountService</span> accountService <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">AccountService</span><span class=\"token punctuation\">)</span> applicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"accountService\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        accountService<span class=\"token punctuation\">.</span><span class=\"token function\">getAccount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            执行结果：用户名称：LightRain</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"spring容器装配-xml注解配置方式\"><a class=\"anchor\" href=\"#spring容器装配-xml注解配置方式\">#</a> Spring 容器装配 - XML &amp; 注解配置方式</h1>\n<h2 id=\"xml配置方式\"><a class=\"anchor\" href=\"#xml配置方式\">#</a> XML 配置方式</h2>\n<blockquote>\n<p>采用 <code>xml</code>  配置文件的方式对 <code>bean</code>  进行声明和管理，每一个 <code>bean</code>  标签都代表着需要被创建的对象并通过 <code>property</code>  标签可以为该类其它依赖对象，通过这种方式 <code>Spring</code>  容器就可以成功知道我们需要创建哪些 <code>bean</code>  实例了。如下：</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>applicationcontext.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">&lt;!--  声明 accountDao 对象并交由 Spring 来进行管理与创建  --></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>accountDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top.rem.rain.demo2.dao.AccountDaoImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">&lt;!--  声明 accountService 对象并交由 Spring 来进行管理与创建  --></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>accountService<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top.rem.rain.demo2.service.AccountServiceImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">&lt;!--    注入 accountDao 对象需要 set 方法    --></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>accountDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>accountDao<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>然后通过 <code>ApplicationContext</code>  的 <code>ClassPathXmlApplicationContext</code>  去加载 <code>Spring</code>  配置文件，来获取想要的实例并调用相应方法执行。</p>\n</blockquote>\n<blockquote>\n<p>对于 <code>ClassPathXmlApplicationContext</code>  默认加载 <code>classpath</code>  路径下的文件，只需要指明对应文件的 <code>classpath</code>  路径即可，如果存在多个配置文件，则只需要分别传递即可， <code>ClassPathXmlApplicationContext</code>  是一个可以接收可变参数的构造函数。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 默认查找 classpath 路径下的文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">ApplicationContext</span> applicationContext <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"applicationcontext.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 多文件，也可传递数组</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">ApplicationContext</span> applicationContext <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"applicationcontext.xml\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"applicationcontext2.xml\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 默认为项目工作路径 即项目的根目录 </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">FileSystemXmlApplicationContext</span> applicationContext <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileSystemXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/src/main/resources/applicationcontext.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 也可以读取 classpath 下的文件</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token class-name\">FileSystemXmlApplicationContext</span> applicationContext <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileSystemXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"classpath:applicationcontext.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"注解配置方式\"><a class=\"anchor\" href=\"#注解配置方式\">#</a> 注解配置方式</h2>\n<blockquote>\n<p>下面是通过注解的方式来达到与上述 <code>xml</code>  配置的效果，代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>BeanConfig.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo2<span class=\"token punctuation\">.</span>config</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Bean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Configuration</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo2<span class=\"token punctuation\">.</span>dao<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AccountDao</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo2<span class=\"token punctuation\">.</span>dao<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AccountDaoImpl</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo2<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AccountService</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo2<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AccountServiceImpl</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @Description: Bean 注解方式的配置</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * @DateTime: 2024-01-01 00:38</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BeanConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">AccountDao</span> <span class=\"token function\">accountDao</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AccountDaoImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">AccountService</span> <span class=\"token function\">accountService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">AccountServiceImpl</span> accountService <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AccountServiceImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        accountService<span class=\"token punctuation\">.</span><span class=\"token function\">setAccountDao</span><span class=\"token punctuation\">(</span><span class=\"token function\">accountDao</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">return</span> accountService<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p><code>@Configuration</code>  注解表示 <code>BeanConfig</code>  类是配置文件类，相当于代替了 <code>XML</code>  的配置文件，这种基于 <code>Java</code>  注解配置方式是在 <code>Spring 3.0</code>  中引入的，使用注解进行配置时请确保引入了 <code>spring-context</code>  坐标。</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-context<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>6.1.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>在 <code>AccountServiceImpl</code>  类中再添加一个测试方法，这次使用 <code>AnnotationConfigApplicationContext</code>  来加载 <code>Java</code>  配置文件类，执行结果是和 <code>XML</code>  一样的。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo2<span class=\"token punctuation\">.</span>service</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>jupiter<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AnnotationConfigApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo2<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BeanConfig</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo2<span class=\"token punctuation\">.</span>dao<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AccountDao</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @Description: 实现类</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * @DateTime: 2023-12-31 21:04</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AccountServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AccountService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     * 省略上述重复贴过的代码....</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     * 使用 Java 注解进行配置</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testAccountBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// 通过 ApplicationContext 的 AnnotationConfigApplicationContext 加载配置文件</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">ApplicationContext</span> applicationContext <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AnnotationConfigApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">// 名称必须 BeanConfig 中工程方法名称一致</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">AccountService</span> accountService <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">AccountService</span><span class=\"token punctuation\">)</span> applicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"accountService\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        accountService<span class=\"token punctuation\">.</span><span class=\"token function\">getAccount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            执行结果：用户名称：LightRain</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>我们需要明白的是，在大部分情况下更倾向于使用 <code>XMl</code>  来配置 <code>Bean</code>  相关信息，这样会更加方便对代码进行管理，除了前面通过 <code>xml</code>  中使用 <code>bean</code>  标签为每个类声明实例外， <code>Spring</code>  还为我们提供了基于注解的声明方式。</p>\n</blockquote>\n<h1 id=\"spring依赖注入\"><a class=\"anchor\" href=\"#spring依赖注入\">#</a> Spring 依赖注入</h1>\n<blockquote>\n<p>至于依赖注入就是当一个 <code>bean</code>  实例引用到了另一个 <code>bean</code>  实例时， <code>Spring</code>  容器会帮助我们创建依赖 <code>bean</code>  实例并注入到另一个 <code>bean</code>  中，在上述案例中的 <code>AccountService</code>  依赖于 <code>AccountDao</code> ， <code>Spring</code>  容器会在创建 <code>AccountService</code>  的实现类和 <code>AccountDao</code>  的实现类后，把 <code>AccountDao</code>  的实现注入 <code>AccountService</code>  实例中，下面分别来介绍注入的方式。</p>\n</blockquote>\n<h2 id=\"setter注入\"><a class=\"anchor\" href=\"#setter注入\">#</a> Setter 注入</h2>\n<blockquote>\n<p><code>Setter</code>  注入：被注入的属性需要拥有 <code>set</code>  方法， <code>Setter</code>  注入支持基本类型和引用类型， <code>Setter</code>  注入是在 <code>Bean</code>  实例创建完成后执行的，观察入门案例，对象注入使用 <code>property</code>  标签的 <code>ref</code>  属性进行注入。</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>applicationcontext.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">&lt;!--  声明 accountDao 对象并交由 Spring 来进行管理与创建  --></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>accountDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top.rem.rain.demo2.dao.AccountDaoImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">&lt;!--  声明 accountService 对象并交由 Spring 来进行管理与创建  --></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>accountService<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top.rem.rain.demo2.service.AccountServiceImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">&lt;!--    注入 accountDao 对象需要 set 方法    --></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>accountDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>accountDao<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>其次除了上述的对象注入同时也可以注入简单值和 <code>map</code> 、 <code>set</code> 、 <code>list</code> 、 <code>数组</code> ，简单值注入使用 <code>property</code>  标签的 <code>value</code>  属性。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo2<span class=\"token punctuation\">.</span>bean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Set</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @Description: Set 注入示例</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @DateTime: 2024-01-01 11:00</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Account</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     * 账户信息</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> accountName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     * 账户密码</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> accountPassword<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     * 系统信息</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> systemInfo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>     * 朋友姓名</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> friendsName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>     * 书架</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> bookshelf<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAccountName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> accountName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>accountName <span class=\"token operator\">=</span> accountName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAccountPassword</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> accountPassword<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>accountPassword <span class=\"token operator\">=</span> accountPassword<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setSystemInfo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> systemInfo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>systemInfo <span class=\"token operator\">=</span> systemInfo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setFriendsName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> friendsName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>friendsName <span class=\"token operator\">=</span> friendsName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setBookshelf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> bookshelf<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>bookshelf <span class=\"token operator\">=</span> bookshelf<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Account&#123;\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                <span class=\"token string\">\"accountName='\"</span> <span class=\"token operator\">+</span> accountName <span class=\"token operator\">+</span> <span class=\"token string\">'\\''</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                <span class=\"token string\">\", accountPassword='\"</span> <span class=\"token operator\">+</span> accountPassword <span class=\"token operator\">+</span> <span class=\"token string\">'\\''</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                <span class=\"token string\">\", systemInfo=\"</span> <span class=\"token operator\">+</span> systemInfo <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                <span class=\"token string\">\", friendsName=\"</span> <span class=\"token operator\">+</span> friendsName <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                <span class=\"token string\">\", bookshelf=\"</span> <span class=\"token operator\">+</span> bookshelf <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                <span class=\"token string\">'&#125;'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p><code>XML</code>  配置如下：</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>account.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">&lt;!-- setter 通过 property 注入属性值，普通类型使用 value --></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>account<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">scope</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>prototype<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top.rem.rain.demo2.bean.Account<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>accountName<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>LightRain<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>accountPassword<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>123456r<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 注入 List --></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>systemInfo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>list</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>Java运行版本：17.0.6<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>Java供应商：Oracle Corporation<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>Java安装目录：C:\\LightRainData\\IDEA\\JDK\\JDK-17.0.6<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>操作系统名称：Windows 11<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>操作系统架构：amd64<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>操作系统版本：10.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>用户名称：LightRain<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>用户主目录：C:\\Users\\LightRain<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>list</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 注入 Set --></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>friendsName<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>set</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>古河渚<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>古河早苗<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>藤琳杏<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>set</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 注入 Map --></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bookshelf<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>map</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>entry</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Java并发编程的艺术<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>entry</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Java架构之路<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>entry</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>3<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Java性能权威<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>map</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>在 <code>Account</code>  类中添加一个测试方法，用于查看是否可以成功注入，代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo2<span class=\"token punctuation\">.</span>bean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>jupiter<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo2<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AccountService</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Set</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> * @Description: Set 注入示例</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> * @DateTime: 2024-01-01 11:00</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Account</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     * 省略上述贴过的代码...</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     * 测试方法</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">// 通过 ApplicationContext 加载配置文件</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">ApplicationContext</span> applicationContext <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"account.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">// 多次获取并不会创建多个 account 对象，因为 Spring 默认创建是单实例的作用域</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">Account</span> account <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Account</span><span class=\"token punctuation\">)</span> applicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"account\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"account.toString() = \"</span> <span class=\"token operator\">+</span> account<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>          执行结果：account.toString () = Account &#123;accountName='LightRain', accountPassword='123456r', systemInfo=[Java 运行版本：17.0.6, Java 供应商：Oracle Corporation, Java 安装目录：C:\\LightRainData\\IDEA\\JDK\\JDK-17.0.6, 操作系统名称：Windows 11, 操作系统架构：amd64, 操作系统版本：10.0, 用户名称：LightRain, 用户主目录：C:\\Users\\LightRain], friendsName=[古河渚，古河早苗，藤琳杏], bookshelf=&#123;1=Java 并发编程的艺术，2=Java 架构之路，3=Java 性能权威&#125;&#125;</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"构造器注入\"><a class=\"anchor\" href=\"#构造器注入\">#</a> 构造器注入</h2>\n<blockquote>\n<p>构造器是通过构造方法注入依赖，构造函数的参数一般情况下就是依赖项， <code>Spring</code>  容器会根据 <code>bean</code>  中指定的构造器参数来决定调用哪个构造函数，代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>AccountDao.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo3<span class=\"token punctuation\">.</span>dao</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @author LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">AccountDao</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * 账户信息</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">accountInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>AccountDaoImpl.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo3<span class=\"token punctuation\">.</span>dao</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: 实现类</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2023-12-31 21:01</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AccountDaoImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AccountDao</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * 账户信息</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">accountInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"用户名称：%s\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user.name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>AccountService.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo3<span class=\"token punctuation\">.</span>service</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">AccountService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * 获取账户</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">getAccount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>AccountServiceImpl.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo3<span class=\"token punctuation\">.</span>service</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo3<span class=\"token punctuation\">.</span>dao<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AccountDao</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Description: 使用构造器注入依赖</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @DateTime: 2023-12-31 21:04</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AccountServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AccountService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     * 需要注入的 Dao 对象</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">AccountDao</span> accountDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     * 构造器注入依赖</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     * @param accountDao AccountDao</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">AccountServiceImpl</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AccountDao</span> accountDao<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>accountDao <span class=\"token operator\">=</span> accountDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>     * 获取账户</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getAccount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        accountDao<span class=\"token punctuation\">.</span><span class=\"token function\">accountInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>accountServiceImpl.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>accountDao2<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top.rem.rain.demo3.dao.AccountDaoImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">&lt;!--  通过构造器注入依赖  --></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>accountService<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top.rem.rain.demo3.service.AccountServiceImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">&lt;!--  构造方法方式注入依赖  --></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>constructor-arg</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>accountDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>accountDao2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>在 <code>AccountServiceImpl</code>  类中添加 <code>main</code>  方法进行测试，完整代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>AccountServiceImpl.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo3<span class=\"token punctuation\">.</span>service</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo3<span class=\"token punctuation\">.</span>dao<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AccountDao</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @Description: 使用构造器注入依赖</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @DateTime: 2023-12-31 21:04</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AccountServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AccountService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     * 需要注入的 Dao 对象</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">private</span>  <span class=\"token class-name\">AccountDao</span> accountDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     * 构造器注入依赖</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     * @param accountDao AccountDao</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">AccountServiceImpl</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AccountDao</span> accountDao<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>accountDao <span class=\"token operator\">=</span> accountDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>     * 获取账户</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getAccount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        accountDao<span class=\"token punctuation\">.</span><span class=\"token function\">accountInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>     * 使用 XML 文件进行配置</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token comment\">// 通过 ApplicationContext 加载配置文件</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token class-name\">ApplicationContext</span> applicationContext <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"accountServiceImpl.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token comment\">// 多次获取并不会创建多个 accountService 对象，因为 Spring 默认创建是单实例的作用域</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token class-name\">AccountService</span> accountService <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">AccountService</span><span class=\"token punctuation\">)</span> applicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"accountService\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        accountService<span class=\"token punctuation\">.</span><span class=\"token function\">getAccount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            执行结果：用户名称：LightRain</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>当然跟 <code>set</code>  注入一样，构造器注入也可以传入简单值和集合类型，需要注意当一个 <code>bean</code>  定义中有多个 <code>constructor-arg</code>  标签时，它们的顺序并不重要，因为 <code>Spring</code>  容器会通过传入的依赖参数与类中构造器参数进行比较。可惜的是在某些情况下可能会出现问题，如下 <code>User</code>  类，带有两个构造函数，参数类型和个数都一样，只是顺序不同，这样在 <code>class</code>  中定义是允许的，但对于 <code>Spring</code>  容器来说是一种灾难。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>User.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: 不同顺序的构造参数</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2024-01-01 13:42</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     * 构造一</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     * @param name</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     * @param age</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     * 构造二</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     * @param age</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>     * @param name</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>user.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>user<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top.rem.rain.demo3.User<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>constructor-arg</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>java.lang.String<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Rain<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>constructor-arg</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>int<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>17<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>在 <code>User</code>  类中添加如下测试方法：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>User.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 通过 ApplicationContext 加载配置文件</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">ApplicationContext</span> applicationContext <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">)</span> applicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user.age = \"</span> <span class=\"token operator\">+</span> user<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    执行结果：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      user.age = 17</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      user.name = Rain</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>在程序运行时 <code>Spring</code>  容器会尝试查找适合的 <code>User</code>  构造函数进而创建 <code>User</code>  对象，由于 <code>constructor-arg</code>  的注入并不重要，从而导致不知该用两种构造函数中的哪一种，这时 <code>user</code>  实例将创建失败， <code>Spring</code>  容器也将启动失败。</p>\n</blockquote>\n<blockquote>\n<p>庆幸的是 <code>Spring</code>  早为我们预测到了这种情况，因此只要给 <code>Spring</code>  容器一点提示，它便能成功找到适合的构造函数从而创建 <code>user</code>  实例，在 <code>constructor-arg</code>  标签中存在一个 <code>index</code>  属性，通过 <code>index</code>  属性可以告诉 <code>Spring</code>  容器传递的依赖参数的顺序，下面的配置将会使 <code>Spring</code>  容器成功找到第一个构造函数并创建 <code>user</code>  实例。</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>user.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>user<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top.rem.rain.demo3.User<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>constructor-arg</span> <span class=\"token attr-name\">index</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Rain<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>constructor-arg</span> <span class=\"token attr-name\">index</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>17<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>在日常开发中 <code>set</code>  注入和构造器注入会经常混合使用，这并不稀奇，后面还会有注解装配，它在日常开发中更为常用。</p>\n</blockquote>\n<h2 id=\"依赖循环\"><a class=\"anchor\" href=\"#依赖循环\">#</a> 依赖循环</h2>\n<blockquote>\n<p>除了上述情况，还存在一种依赖循环现象，在构造函数注入有一个无法解决的依赖循环问题，如下有两个 <code>bean</code>  分别是 <code>A</code>  和 <code>B</code>  类，这两个 <code>bean</code>  通过构造函数相互依赖，这种情况下 <code>Spring</code>  容器将无法实例化这两个 <code>bean</code> 。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">B</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">B</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">A</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">A</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>demo4.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>a<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top.rem.rain.demo4.A<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>constructor-arg</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>b<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>b<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>b<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top.rem.rain.demo4.B<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>constructor-arg</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>a<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>a<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>此时由于 <code>A</code>  被创建时希望 <code>B</code>  被注入到自身，然而此时 <code>B</code>  还没有被创建，而且 <code>B</code>  也依赖于 <code>A</code>  这样就导致 <code>Spring</code>  容器左右为难，此时就会无法满足两方的需求，最后就会导致程序崩溃抛出异常。解决这种问题的方式是使用 <code>set</code>  依赖，有时但还是会造成一些不必要的困扰，因此强烈不建议在配置文件中使用依赖循环。</p>\n</blockquote>\n<h1 id=\"注解注入自动装配\"><a class=\"anchor\" href=\"#注解注入自动装配\">#</a> 注解注入 &amp; 自动装配</h1>\n<h2 id=\"自动装配-xml\"><a class=\"anchor\" href=\"#自动装配-xml\">#</a> 自动装配 - XML</h2>\n<blockquote>\n<p>除了手动注入外 <code>Spring</code>  还为我们提供了自动向 <code>Bean</code>  注入依赖的功能，这个过程被称为自动装配 <code>(Autowired)</code> 。当注入的 <code>bean</code>  特别多时，它将极大地节省编写程序注入的时间，在日常开发中， <code>Spring</code>  自动装配有三种方式： <code>byName(根据名称)</code> 、 <code>byType(根据类型)</code> 、 <code>constructor(根据构造器)</code> 。</p>\n</blockquote>\n<blockquote>\n<p>在 <code>byType</code>  方式中， <code>Spring</code>  容器会基于反射查看 <code>bean</code>  定义的类，然后找到与依赖类型相同的 <code>bean</code>  注入到另外的 <code>bean</code>  中，这个过程需要 <code>set</code>  注入来完成，因此必须存在 <code>set</code>  方法，否则将注入失败。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserDao.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo5<span class=\"token punctuation\">.</span>dao</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @author LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserDao</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * 系统用户信息</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">systemUserInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserDaoImpl.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo5<span class=\"token punctuation\">.</span>dao</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: 具体实现</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2024-01-01 17:18</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserDaoImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">UserDao</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * 系统用户信息</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">systemUserInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"系统用户：\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user.name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserService.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo5<span class=\"token punctuation\">.</span>service</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @author LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * 系统用户信息</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">systemUserInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserServiceImpl.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo5<span class=\"token punctuation\">.</span>service</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo5<span class=\"token punctuation\">.</span>dao<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UserDao</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @Description: 具体实现</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @DateTime: 2024-01-01 17:20</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">UserService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     * 需要注入的依赖</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserDao</span> userDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     * 通过 set 方法注入依赖</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     * @param userDao UserDao</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setUserDao</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserDao</span> userDao<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>userDao <span class=\"token operator\">=</span> userDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>     * 系统用户信息</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">systemUserInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        userDao<span class=\"token punctuation\">.</span><span class=\"token function\">systemUserInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>使用 <code>XML</code>  配置，通过 <code>bean</code>  标签的 <code>autowire</code>  属性启动名称为 <code>userService</code>  的自动装配功能。</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>demo5.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top.rem.rain.demo5.dao.UserDaoImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">&lt;!--  byType：根据类型自动装配 userDao  --></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userService<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">autowire</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>byType<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top.rem.rain.demo5.service.UserServiceImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>在 <code>UserServiceImpl</code>  中添加一个 <code>main</code>  方法进行测试，代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserServiceImpl.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo5<span class=\"token punctuation\">.</span>service</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo5<span class=\"token punctuation\">.</span>dao<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UserDao</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @Description: 具体实现</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @DateTime: 2024-01-01 17:20</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">UserService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 省略代码...</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">ApplicationContext</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"demo5.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">UserService</span> userService <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">UserService</span><span class=\"token punctuation\">)</span> app<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userService\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        userService<span class=\"token punctuation\">.</span><span class=\"token function\">systemUserInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>          执行结果：系统用户：LightRain</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p><code>byType</code>  模式还存在一种注入失败的情况，由于基于类型注入，因此当 <code>XML</code>  文件中存在多个相同类型名称不同的 <code>Bean</code>  实例时， <code>Spring</code>  容器依赖注入将会注入失败，因为存在多种适合的选项，此时 <code>Spring</code>  容器也无法知道该注入哪种，此时我们需要为 <code>Spring</code>  容器提供帮助，指定注入的那个 <code>Bean</code>  实例。通过 <code>bean</code>  标签的 <code>autowire-candidate</code>  属性设置为 <code>false</code>  来过滤那些不需要注入的 <code>Bean</code>  实例对象。</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>demo5.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top.rem.rain.demo5.dao.UserDaoImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">&lt;!--  autowire-candidate=false 来过滤该类型，将不会自动被注入  --></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userDao2<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">autowire-candidate</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top.rem.rain.demo5.dao.UserDaoImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">&lt;!--  byType: 根据类型自动装配 userDao  --></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userService<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">autowire</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>byType<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top.rem.rain.demo5.service.UserServiceImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>需要了解的是如果 <code>Spring</code>  容器中没有找到可以注入的 <code>bean</code>  实例对象时，将不会向依赖属性值注入任何 <code>bean</code> , 这时依赖 <code>bean</code>  的属性可能为 <code>null</code> , 因此我们小心处理这种情况，避免不必要的程序崩溃。</p>\n</blockquote>\n<blockquote>\n<p>下面使用构造器方式自动注入依赖</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserServiceImpl.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo5<span class=\"token punctuation\">.</span>service</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo5<span class=\"token punctuation\">.</span>dao<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UserDao</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @Description: 具体实现</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @DateTime: 2024-01-01 17:20</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">UserService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     * 需要注入的依赖</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserDao</span> userDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     * 通过 constructor 模式使构造器注入依赖</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     * @param userDao UserDao</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">UserServiceImpl</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserDao</span> userDao<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>userDao <span class=\"token operator\">=</span> userDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>     * 通过 set 方法注入依赖</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>     * @param userDao UserDao</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">//    public void setUserDao(UserDao userDao) &#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">//        this.userDao = userDao;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">//    &#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>     * 系统用户信息</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">systemUserInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        userDao<span class=\"token punctuation\">.</span><span class=\"token function\">systemUserInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>demo5.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top.rem.rain.demo5.dao.UserDaoImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">&lt;!--  constructor 也可以自动装配 userDao  --></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userService<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">autowire</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>constructor<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top.rem.rain.demo5.service.UserServiceImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>总结：不管是 <code>byType</code>  还是 <code>constructor</code>  模式下，如果存在多个相同的 <code>bean</code>  实例都需要使用 <code>autowire-candidate=&quot;false&quot;</code>  来将不需要的 <code>bean</code>  实例过滤掉，以免使 <code>Spring</code>  容器找到两个相同实却不知道需要注入哪一个的情况，如果不使用 <code>autowire-candidate</code>  属性来过滤掉不需要注入的 <code>bean</code>  实例， <code>Spring</code>  将会终止程序并抛出 <code>UnsatisfiedDependencyException(为满足依赖异常)</code>  的异常。</p>\n</blockquote>\n<h2 id=\"自动装配-autowired注解\"><a class=\"anchor\" href=\"#自动装配-autowired注解\">#</a> 自动装配 -@Autowired 注解</h2>\n<blockquote>\n<p>如果在 <code>bean</code>  实例过多的情况下，手动设置自动注入会非常的耗费时间，好在 <code>Spring 2.5</code>  中引入了 <code>@Autowired</code>  注解，它可以对类成员变量、方法及构造函数进行标注，来完成自动装配工作。通过 <code>@Autowired</code>  注解标注在成员变量时不需要 <code>set</code>  方法， <code>@Autowired</code>  默认按类型匹配，先来看下面的代码示例，当然使用注解前需要先注册注解驱动，这样才可以使用 <code>@Autowired</code>  注解。</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>配置文件.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- 在 xml 配置文件中添加，使用注解时必须启动注解驱动 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">context:</span>annotation-config</span> <span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserServiceImpl.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo6<span class=\"token punctuation\">.</span>service</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Service</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo6<span class=\"token punctuation\">.</span>dao<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UserDao</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @Description: 具体实现</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @DateTime: 2024-01-01 17:20</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">UserService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 标注在成员变量</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserDao</span> userDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 标注在构造器</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">UserServiceImpl</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserDao</span> userDao<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>userDao <span class=\"token operator\">=</span> userDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">// 标注在 set 方法</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setUserDao</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserDao</span> userDao<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>userDao <span class=\"token operator\">=</span> userDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>     * 系统用户信息</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">systemUserInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        userDao<span class=\"token punctuation\">.</span><span class=\"token function\">systemUserInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>在上述代码中有三种方式注入 <code>userDao</code> , <code>XML</code>  配置文件中只需要声明 <code>bean</code>  实例即可，在实际开发中，我们只需要选择其中一种方式进行注入就可以，一般情况建议使用成员变量注入，即可以省去 <code>set</code>  方法和构造函数还可以简化代码。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserServiceImpl.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo6<span class=\"token punctuation\">.</span>service</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Service</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo6<span class=\"token punctuation\">.</span>dao<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UserDao</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @Description: 具体实现</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @DateTime: 2024-01-01 17:20</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">UserService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 标注在成员变量</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserDao</span> userDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     * 系统用户信息</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">systemUserInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        userDao<span class=\"token punctuation\">.</span><span class=\"token function\">systemUserInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>在 <code>@Autowired</code>  中还可以传递一个 <code>required=false</code>  属性， <code>false</code>  表示当 <code>userDao</code>  实例存在就注入不存在就忽略，如果值为 <code>true</code>  那就必须进行注入，若 <code>userDao</code>  实例不存在就会抛出异常。由于默认情况下 <code>@Autowired</code>  是按类型匹配的 <code>(byType模式)</code> ，如果需要按名称 <code>(byName模式)</code>  进行匹配，则可以使用 <code>@Qualifier</code>  注解跟 <code>@Autowired</code>  注解一起来使用，注意：在使用注解前必须在 <code>XML</code>  配置中注册注解驱动。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserServiceImpl.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo6<span class=\"token punctuation\">.</span>service</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Qualifier</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo6<span class=\"token punctuation\">.</span>dao<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UserDao</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @Description: 具体实现</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @DateTime: 2024-01-01 17:20</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">UserService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@Qualifier</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userDao1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserDao</span> userDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     * 系统用户信息</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">systemUserInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        userDao<span class=\"token punctuation\">.</span><span class=\"token function\">systemUserInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>demo6.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>context</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/context<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 使用注解时必须启动注解驱动 --></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">context:</span>annotation-config</span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">&lt;!--  @Qualifier 注解会自动识别 userDao1  --></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userDao1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top.rem.rain.demo6.dao.UserDaoImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userDao2<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top.rem.rain.demo6.dao.UserDaoImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userService<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top.rem.rain.demo6.service.UserServiceImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>在 <code>UserServiceImpl</code>  中添加一个 <code>main</code>  方法进行测试，完整代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserServiceImpl.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo6<span class=\"token punctuation\">.</span>service</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Qualifier</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo6<span class=\"token punctuation\">.</span>dao<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UserDao</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @Description: 具体实现</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @DateTime: 2024-01-01 17:20</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">UserService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@Qualifier</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userDao1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserDao</span> userDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     * 系统用户信息</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">systemUserInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        userDao<span class=\"token punctuation\">.</span><span class=\"token function\">systemUserInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">ApplicationContext</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"demo6.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">UserServiceImpl</span> userService <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">UserServiceImpl</span><span class=\"token punctuation\">)</span> app<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userService\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        userService<span class=\"token punctuation\">.</span><span class=\"token function\">systemUserInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>           执行结果：系统用户：LightRain</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"自动装配-resource注解\"><a class=\"anchor\" href=\"#自动装配-resource注解\">#</a> 自动装配 -@Resource 注解</h2>\n<blockquote>\n<p><code>@Resource</code>  注解跟 <code>@Autowried</code>  注解具备相同功能，默认按照 <code>byName</code>  模式进行自动注入， <code>@Resource</code>  是由 <code>J2EE</code>  提供的，需要导入 <code>jakarta.annotation-api</code>  坐标，使用 <code>Maven</code>  构建坐标如下：</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>pom.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>jakarta.annotation<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>jakarta.annotation-api<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.1.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p><code>@Resource</code>  注解可以标注在成员变量和 <code>set</code>  方法上，但不可以标注在构造器。 <code>@Resource</code>  注解有两个重要属性：分别是 <code>name</code>  和 <code>type</code>  属性。 <code>Spring</code>  容器对 <code>@Resource注解</code> 的 <code>name</code>  属性会解析为 <code>bean</code>  的名称， <code>type</code>  属性则解析为 <code>bean</code>  的类型。因此使用 <code>name</code>  属性，则按照 <code>byName</code>  模式进行自动注入，如果使用 <code>type</code>  属性则按照 <code>byType</code>  模式进行自动注入。倘若两个属性都不指定的话 <code>Spring</code>  容器将通过反射技术默认按照 <code>byName</code>  模式进行注入。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserServiceImpl.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo6<span class=\"token punctuation\">.</span>service</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">jakarta<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Resource</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Qualifier</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo6<span class=\"token punctuation\">.</span>dao<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UserDao</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @Description: 具体实现</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * @DateTime: 2024-01-01 17:20</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">UserService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token annotation punctuation\">@Qualifier</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userDao1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserDao</span> userDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// 此处等价于 @Autowired+@Qualifier</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token annotation punctuation\">@Resource</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"userDao\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserDao</span> userDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// 也可以在 set 方法上进行注解声明</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token annotation punctuation\">@Resource</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"userDao\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setUserDao</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserDao</span> userDao<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>userDao <span class=\"token operator\">=</span> userDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"自动装配-value注解及文件读取\"><a class=\"anchor\" href=\"#自动装配-value注解及文件读取\">#</a> 自动装配 -@Value 注解及文件读取</h2>\n<blockquote>\n<p>关于 <code>@Autowired</code>  和 <code>@Resource</code>  自动装配的依赖注入并不适合简单值类型如： <code>int</code> 、 <code>boolean</code> 、 <code>long</code> 、 <code>String</code> 、 <code>Enum</code>  等，对于这些类型 <code>Spring</code>  容器提供了 <code>@Value</code>  注入方式，它可以解决很多硬编码问题， <code>@Value</code>  接收一个 <code>String</code>  的值，该值指定了将要被注入到内置的 <code>Java</code>  类型属性值，不必关心类型转换，在大多数情况下 <code>Spring</code>  容器都已自动处理好了，一般情况下 <code>@Value</code>  注解会和 <code>properties</code>  格式的文件结合使用。</p>\n</blockquote>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"><span>jdbc.properties</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token attr-name\">jdbc.driver</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">com.mysql.jdbc.Driver</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token attr-name\">jdbc.url</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">jdbc:mysql://127.0.0.1:3306/spring_ioc?characterEncoding=UTF-8&amp;allowMultiQueries=true</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token attr-name\">jdbc.username</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">root</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token attr-name\">jdbc.password</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">123456</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>UserServiceImpl.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo6<span class=\"token punctuation\">.</span>service</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Qualifier</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Value</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo6<span class=\"token punctuation\">.</span>dao<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UserDao</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @Description: 具体实现</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * @DateTime: 2024-01-01 17:20</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">UserService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token annotation punctuation\">@Qualifier</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userDao1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserDao</span> userDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     * 使用 $ 占位符获取</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;jdbc.url&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> url<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>     * SpEL 表达方式，其中代表 xml 配置文件中的 id 值 configProperties</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#&#123;configProperties['jdbc.username']&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> userName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>     * 系统用户信息</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">systemUserInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"url = \"</span> <span class=\"token operator\">+</span> url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userName = \"</span> <span class=\"token operator\">+</span> userName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        userDao<span class=\"token punctuation\">.</span><span class=\"token function\">systemUserInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token class-name\">ApplicationContext</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"demo6.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token class-name\">UserServiceImpl</span> userService <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">UserServiceImpl</span><span class=\"token punctuation\">)</span> app<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userService\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        userService<span class=\"token punctuation\">.</span><span class=\"token function\">systemUserInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>           执行结果：</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            url = jdbc:mysql://127.0.0.1:3306/spring_ioc?characterEncoding=UTF-8&amp;allowMultiQueries=true</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            userName = root</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            系统用户：LightRain</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>demo6.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>context</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/context<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 基于占位符方式 配置单个 properties --></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">&lt;!--&lt;context:property-placeholder location=\"jdbc.properties\"/>--></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 基于占位符方式 配置多个 properties --></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>propertyConfigurer<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>location<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>jdbc.properties<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 基于 SpEL 表达式 配置多个 properties id 值为 configProperties 提供 java 代码中使用 --></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>configProperties<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>org.springframework.beans.factory.config.PropertiesFactoryBean<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>locations<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>list</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>classpath:jdbc.properties<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>list</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 使用注解时必须启动注解驱动 --></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">context:</span>annotation-config</span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userDao1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top.rem.rain.demo6.dao.UserDaoImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userDao2<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top.rem.rain.demo6.dao.UserDaoImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userService<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top.rem.rain.demo6.service.UserServiceImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h1 id=\"springioc容器管理\"><a class=\"anchor\" href=\"#springioc容器管理\">#</a> SpringIOC 容器管理</h1>\n<h2 id=\"bean的命名\"><a class=\"anchor\" href=\"#bean的命名\">#</a> Bean 的命名</h2>\n<blockquote>\n<p>每一个交给 <code>SpringIOC(Spring容器)</code>  创建的对象必须被分配至少一个名称，如果开发者没有提供， <code>Spring</code>  容器将会为其分配一个内部名称，通过 <code>Bean</code>  的名称，我们可以在其它类中查找该类并使用，在前面的案例中也是通过 <code>Bean</code>  名称获取到实际对象并执行对应的操作。在基于 <code>XML</code>  配置信息中，可以使用 <code>id</code>  属性来为一个 <code>Bean</code>  分配名称，在同一个 <code>XML</code>  配置文件中 <code>id</code>  是唯一的不可重复，当然也可以使用 <code>name</code>  来为 <code>Bean</code>  分配名称，使用 <code>name</code>  属性可以分配多个名称，可以使用空格、逗号、分号来分割给定 <code>Bean</code>  的多个名称，而 <code>id</code>  属性则不可以这样使用。</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>demo6.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userDao1,userDao3<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top.rem.rain.demo6.dao.UserDaoImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userDao2<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top.rem.rain.demo6.dao.UserDaoImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><blockquote>\n<p>在 <code>name</code>  属性中声明了两个名称，除了第一个名称外，其它的名称都被称为别名。除了在 <code>Bean</code>  中定义名称外还可以用 <code>alias</code>  标签来向 <code>Bean</code>  赋予别名。</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>demo6.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userDao1,userDao3<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top.rem.rain.demo6.dao.UserDaoImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">&lt;!--  name 属性指明要给哪个 Bean 赋予别名，alias 则指明赋予的别名  --></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>alias</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userDao1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alias</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userDao4<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><blockquote>\n<p>如果我们想要配置的 <code>Bean</code>  对象已存在，并且希望向一些 <code>Bean</code>  赋予特别的名称，此时别名就相当有用了。上述的 <code>Bean</code>  对象声明使用都在 <code>xml</code>  内手动声明的方式，当 <code>Bean</code>  对象过多时，管理 <code>Bean</code>  就会非常繁琐，此时 <code>Spring</code>  提供了基于 <code>Java</code>  注解的配置方式，下面将使用 <code>@Service</code>  和 <code>@Repository</code>  注解，在使用 <code>@Autowired</code>  注解时需要在 <code>XML</code>  声明注解驱动。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>AccountServiceImpl.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo7<span class=\"token punctuation\">.</span>service</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Service</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo7<span class=\"token punctuation\">.</span>dao<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AccountDao</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @Description: 使用注解注入依赖</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @DateTime: 2023-12-31 21:04</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span> <span class=\"token comment\">// 将此类彻底交给 Spring 容器来管理，@Service 注解代表此类是业务层</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AccountServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AccountService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">AccountDao</span> accountDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     * 获取账户</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getAccount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        accountDao<span class=\"token punctuation\">.</span><span class=\"token function\">accountInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>     * 测试</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>     * @param args</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">// 通过 ApplicationContext 加载配置文件</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token class-name\">ApplicationContext</span> applicationContext <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"demo7.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token comment\">// 多次获取并不会创建多个 accountService 对象，因为 Spring 默认创建是单实例的作用域</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token class-name\">AccountService</span> accountService <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">AccountService</span><span class=\"token punctuation\">)</span> applicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"accountServiceImpl\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        accountService<span class=\"token punctuation\">.</span><span class=\"token function\">getAccount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            执行结果：用户名称：LightRain</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>AccountDaoImpl.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo7<span class=\"token punctuation\">.</span>dao</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Repository</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Description: 实现类</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @DateTime: 2023-12-31 21:01</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token annotation punctuation\">@Repository</span> <span class=\"token comment\">// 此注解跟 @Component 具有相同效果</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AccountDaoImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AccountDao</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     * 账户信息</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">accountInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"用户名称：%s\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user.name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>有了注解声明，我们就不需要在 <code>XML</code>  中声明以上两个 <code>Bean</code>  了，但需要告诉 <code>Spring</code>  注解的 <code>Bean</code>  在哪个包下面，因此需要添加包扫描机制，此时需要启用 <code>Spring</code>  的 <code>context</code>  命名空间，配置如下：</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>demo7.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>context</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/context<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 声明包扫描 --></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">context:</span>component-scan</span> <span class=\"token attr-name\">base-package</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top.rem.rain.demo7<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>以上的声明方式与之前在 <code>XML</code>  中声明的 <code>Bean</code>  效果是相同的，这里我们需要明白可以使用 <code>@Component</code>  注解来达到与 <code>@Service</code>  和 <code>@Repository</code>  注解相同效果， <code>@Component</code>  与 <code>@Service</code>  注解的含义并没有什么差异，只不过 <code>@Service</code>  更能让我们明白该类是业务类罢了。至于 <code>@Repository</code>  注解在表示数据访问层含义的同时还能启用与 <code>Spring</code>  数据访问相关链的其它功能，同时还可以给 <code>@Component</code> 、 <code>@Service</code> 、 <code>@Repository</code>  注解给定一个 <code>String</code>  值的名称，如果没有提供名称，那么会默认使用类名当做 <code>Bean</code>  名称 (第一个字母将会变为小写)。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"accountService\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AccountServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AccountService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">AccountDao</span> accountDao<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@Repository</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"accountDao\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AccountDaoImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AccountDao</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>到这我们已经知道了在 <code>Spring</code>  框架中提供了与 <code>@Component</code>  注解具有同等效果的三个注解， <code>@Repository</code>  注解用于对 <code>Dao</code>  实现类进行标注， <code>@Service</code>  注解用于对 <code>Service</code>  实现类进行标注， <code>@Controller</code>  注解用于对 <code>Controller</code>  实现类进行标注 (控制器层)，同时还了解了 <code>Spring</code>  容器通过 <code>XML</code>  的 <code>bean</code>  标签配置和 <code>Java</code>  注解两种声明 <code>Bean</code>  的方式，以后日常开发中将使用 <code>SpringBoot</code>  全局使用注解进行配置 (此时了解即可)。</p>\n</blockquote>\n<h2 id=\"bean的实例化方法\"><a class=\"anchor\" href=\"#bean的实例化方法\">#</a> Bean 的实例化方法</h2>\n<blockquote>\n<p>在日常开发中创建对象最常用的是通过类的构造方法，事实上 <code>Spring</code>  容器正常情况下也是通过构造方法创建 <code>bean</code>  实例的。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Account.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo7<span class=\"token punctuation\">.</span>bean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: Bean 的实例化方法</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2024-01-02 18:47</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Account</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> userName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Account</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> userName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>userName <span class=\"token operator\">=</span> userName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>password <span class=\"token operator\">=</span> password<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     * 默认无参构造</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Account</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getUserName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">return</span> userName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setUserName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> userName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>userName <span class=\"token operator\">=</span> userName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getPassword</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">return</span> password<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> password<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>password <span class=\"token operator\">=</span> password<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>demo7.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>context</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/context<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 声明包扫描 --></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">context:</span>component-scan</span> <span class=\"token attr-name\">base-package</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top.rem.rain.demo7<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 默认构造创建，并通过 property 注入属性值 --></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>account<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top.rem.rain.demo7.bean.Account<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userName<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>123456<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 带参构造创建，并通过 constructor-arg 注入属性值 --></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>account2<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top.rem.rain.demo7.bean.Account<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>constructor-arg</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userName<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>LightRain<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>constructor-arg</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>123456<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>除了构造器创建外还存在另外两种比较冷门的创建方式，那就是静态方法和实例工厂方法构造，了解一下即可很少使用，代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>BeanFactory.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo7<span class=\"token punctuation\">.</span>bean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: 静态方法和实例工厂构造</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2024-01-02 18:54</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BeanFactory</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * 静态工厂创建</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     * @return Account</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Account</span> <span class=\"token function\">createAccount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">Account</span> account <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Account</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        account<span class=\"token punctuation\">.</span><span class=\"token function\">setUserName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        account<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> account<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     * 通过工厂实例创建</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     * @return Account</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Account</span> <span class=\"token function\">createAccount2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">Account</span> account <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Account</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        account<span class=\"token punctuation\">.</span><span class=\"token function\">setUserName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LightRain\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        account<span class=\"token punctuation\">.</span><span class=\"token function\">setPassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1234\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">return</span> account<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 静态工厂创建，调用静态方法 createAccount --></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>account<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top.rem.rain.demo7.bean.BeanFactory<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">factory-method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>createAccount<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 工厂实例创建，先创建工厂类在调用方法 createAccount2 --></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>factory<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top.rem.rain.demo7.bean.BeanFactory<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>account2<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">factory-bean</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>factory<span class=\"token punctuation\">\"</span></span>  <span class=\"token attr-name\">factory-method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>createAccount2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>在日常开发中使用构造实例化 <code>bean</code>  即可，后面的两种方式很少使用。</p>\n</blockquote>\n<h2 id=\"bean的重写机制\"><a class=\"anchor\" href=\"#bean的重写机制\">#</a> Bean 的重写机制</h2>\n<blockquote>\n<p><code>Bean</code>  的重写机制并不神秘，主要是当不同的 <code>XML</code>  文件中出现同名 <code>id</code>  属性的 <code>bean</code>  时读取的优先级问题，先来看下面两个示例，定义两个 <code>Spring</code>  配置文件并同时加载它们。</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>beanRewrite1.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 默认构造创建，并通过 property 注入属性值 --></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>account<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top.rem.rain.demo7.bean.Account<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userName<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>beanRewrite1<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>654321<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>beanRewrite2.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 默认构造创建，并通过 property 注入属性值 --></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>account<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top.rem.rain.demo7.bean.Account<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userName<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>beanRewrite2<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>123456<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>下面是测试方法，获取 <code>bean</code>  并调用</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">ApplicationContext</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"beanRewrite1.xml\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"beanRewrite2.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">Account</span> account <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Account</span><span class=\"token punctuation\">)</span> app<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"account\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"account.getUserName() = \"</span> <span class=\"token operator\">+</span> account<span class=\"token punctuation\">.</span><span class=\"token function\">getUserName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"account.getPassword() = \"</span> <span class=\"token operator\">+</span> account<span class=\"token punctuation\">.</span><span class=\"token function\">getPassword</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      执行结果：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        account.getUserName () = beanRewrite2</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        account.getPassword () = 123456</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>执行结果很显然是后者，在不同的 <code>XML</code>  配置文件中使用相同 <code>id</code>  来命名，并声明相同类型的 <code>bean</code>  对象时， <code>Spring</code>  容器会默认加载最后添加的 <code>beanRewrite2.xml</code>  配置文件，也就是说 <code>Bean</code>  重写机制是当声明的 <code>bean</code>  名称一样时，后者会覆盖掉前者，我们还需要明确的一点是，在 <code>web</code>  开发中，一般都会将配置进行分层管理，然后通过一个主配置文件来聚合它 <code>(springApplication.xml)</code> , 在这种情况下分层的配置文件属于 <code>springApplication.xml</code>  的子文件，在这样的关系下遇到上述情况，一般都是子文件的优先级高，因此会加载子文件的 <code>bean</code> , 如在 <code>beanRewrite1.xml</code>  主文件中导入子文件 <code>beanRewrite2.xml</code> 。</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>beanRewrite1.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 默认构造创建，并通过 property 注入属性值 --></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>account<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top.rem.rain.demo7.bean.Account<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userName<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>beanRewrite1<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>654321<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 导入子文件 --></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>import</span> <span class=\"token attr-name\">resource</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>beanRewrite2.xml<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>重新执行测试方法来看结果：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">ApplicationContext</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"beanRewrite1.xml\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"beanRewrite2.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">Account</span> account <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Account</span><span class=\"token punctuation\">)</span> app<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"account\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"account.getUserName() = \"</span> <span class=\"token operator\">+</span> account<span class=\"token punctuation\">.</span><span class=\"token function\">getUserName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"account.getPassword() = \"</span> <span class=\"token operator\">+</span> account<span class=\"token punctuation\">.</span><span class=\"token function\">getPassword</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      执行结果：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        account.getUserName () = beanRewrite2</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        account.getPassword () = 123456</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>执行结果与之前是一样的，上述配置会优先加载 <code>beanRewrite2.xml</code>  中的 <code>account</code> , 从而忽略 <code>beanRewrite1.xml</code>  中的 <code>account</code> 。</p>\n</blockquote>\n<ul>\n<li>关于分层管理配置文件的命名一般按如下名称：\n<ul>\n<li><code>spring-web.xml</code> ： <code>web</code>  层相关 <code>bean</code>  的声明。</li>\n<li><code>spring-service.xml</code> ： <code>service</code>  层相关 <code>bean</code>  的声明。</li>\n<li><code>spring-dao.xml</code> ： <code>dao</code>  层相关 <code>bean</code>  的声明。</li>\n<li><code>spring-tx.xml</code> ：事务相关 <code>bean</code>  和规则声明。</li>\n<li><code>spring-security.xml</code> ：安全相关声明。</li>\n<li><code>spring-application.xml</code> ：聚集子配置文件的总 <code>bean</code>  声明。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"bean的作用域\"><a class=\"anchor\" href=\"#bean的作用域\">#</a> Bean 的作用域</h2>\n<h3 id=\"singleton作用域\"><a class=\"anchor\" href=\"#singleton作用域\">#</a> singleton 作用域</h3>\n<blockquote>\n<p><code>Bean</code>  的作用域是指 <code>Spring</code>  容器在创建 <code>Bean</code>  后的生存周期，即：由创建到销毁的整个过程。在之前创建的所有 <code>Bean</code>  的作用域都是 <code>singleton</code> , 它是 <code>Spring</code>  默认的，在这样的作用域下每一个 <code>Bean</code>  实例只会被创建一次，而且 <code>Spring</code>  容器在整个应用程序生存周期中都可以使用该实例。因此在之前的代码中 <code>Spring</code>  容器创建 <code>Bean</code>  后，通过代码获取的 <code>bean</code>  无论多少次，它们都是同一个实例对象，我们可以使用 <code>bean</code>  标签的 <code>scope</code>  属性来指定一个 <code>Bean</code>  的作用域。</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>singletonScope.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 默认情况下无需声明 Singleton --></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>accountDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">scope</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>singleton<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top.rem.rain.demo7.dao.AccountDaoImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"prototype作用域\"><a class=\"anchor\" href=\"#prototype作用域\">#</a> prototype 作用域</h3>\n<blockquote>\n<p><code>prototype</code>  也是比较常用的作用域，它代表每次获取 <code>Bean</code>  实例时都会创建一个新实例对象，类似 <code>new</code>  操作符。</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>prototypeScope.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 作用域：prototype --></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>accountDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">scope</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>prototype<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top.rem.rain.demo7.dao.AccountDaoImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Test.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo7<span class=\"token punctuation\">.</span>dao<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AccountDao</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Description: 测试类</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @DateTime: 2024-01-02 20:16</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@org.junit.jupiter.api.Test</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">prototypeScopeTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">ApplicationContext</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prototypeScope.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">AccountDao</span> accountDao1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">AccountDao</span><span class=\"token punctuation\">)</span> app<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"accountDao\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">AccountDao</span> accountDao2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">AccountDao</span><span class=\"token punctuation\">)</span> app<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"accountDao\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"accountDao1.toString() = \"</span> <span class=\"token operator\">+</span> accountDao1<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"accountDao2.toString() = \"</span> <span class=\"token operator\">+</span> accountDao2<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        执行结果：</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        accountDao1.toString () = top.rem.rain.demo7.dao.AccountDaoImpl@75e91545</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        accountDao2.toString () = top.rem.rain.demo7.dao.AccountDaoImpl@60d1a32f</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>在上面的执行结果可以看出两个是完全不同的实例对象，当然也可以通过注解来声明作用域。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>AccountDaoImpl.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo7<span class=\"token punctuation\">.</span>dao</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scope</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@Scope</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prototype\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AccountDaoImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AccountDao</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// ....</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>还存在一种特殊的情景，当一个作用域为 <code>singleton</code>  的 <code>Bean</code>  依赖于一个作用域为 <code>prototype</code>  的 <code>Bean</code>  时，配置如下：</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- 作用域 prototype--></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>accountDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">scope</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>prototype<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top.rem.rain.demo7.dao.AccountDaoImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">&lt;!-- 作用域 Singleton --></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>accountService<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top.rem.rain.demo7.service.AccountServiceImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 注入作用域为 prototype 的 accountDao 对象时需要 set 方法 --></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>accountDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>accountDao<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>在这种情况下希望每次 <code>getBean(&quot;accountService&quot;)</code>  处理的都是一个新的 <code>accountDao</code>  实例对象，但是由于 <code>accountService</code>  的依赖是在 <code>Bean</code>  被创建时注入的，而 <code>accountService</code>  是一个 <code>singleton</code>  作用域，整个生存周期中只会创建一次，因此它所依赖的 <code>accountDao</code>  实例对象也只会被注入一次，此后将不会再注入任何新的 <code>accountDao</code>  实例对象。想要解决这个问题，只能放弃使用依赖注入功能，使用代码来实现。</p>\n</blockquote>\n<blockquote>\n<p>下面将通过实现 <code>ApplicationContextAware</code>  接口并重写 <code>setApplicationContext</code>  方法，这样 <code>Spring</code>  容器在创建 <code>AccountServiceImpl</code>  实例时会自动注入 <code>ApplicationContext</code>  对象，此时就可以通过 <code>ApplicationContext</code>  来获取 <code>accountDao</code>  实例了，这样就可以保证每次获取的 <code>accountDao</code>  实例都是新的 (此处了解即可，在实际开发中一般不会这么要求)。</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>demo8.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>accountDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">scope</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>prototype<span class=\"token punctuation\">\"</span></span>  <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top.rem.rain.demo8.dao.AccountDaoImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">&lt;!-- accountDao 通过代码注入 --></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>accountService<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top.rem.rain.demo8.service.AccountServiceImpl<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>代码注入示例如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>AccountServiceImpl.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo8<span class=\"token punctuation\">.</span>service</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BeansException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ApplicationContextAware</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Service</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo8<span class=\"token punctuation\">.</span>dao<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AccountDao</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * @author LightRain</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AccountServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">AccountService</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ApplicationContextAware</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">ApplicationContext</span> applicationContext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ApplicationContext</span> applicationContext<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>applicationContext <span class=\"token operator\">=</span> applicationContext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   * 获取账户</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getAccount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getAccountDao().toString() = \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">getAccountDao</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">AccountDao</span> <span class=\"token function\">getAccountDao</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">return</span> applicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AccountDao</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>测试代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Test.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo7<span class=\"token punctuation\">.</span>dao<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AccountDao</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo8<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AccountService</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @Description: 测试类</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @DateTime: 2024-01-02 20:16</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token annotation punctuation\">@org.junit.jupiter.api.Test</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">prototypeScopeTest2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 加载配置文件</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">ApplicationContext</span> applicationContext<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"demo8.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 测试获取不同实例的 AccountDao</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">AccountService</span> accountService<span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">AccountService</span><span class=\"token punctuation\">)</span> applicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"accountService\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        accountService<span class=\"token punctuation\">.</span><span class=\"token function\">getAccount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">AccountService</span> accountService1<span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">AccountService</span><span class=\"token punctuation\">)</span> applicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"accountService\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        accountService1<span class=\"token punctuation\">.</span><span class=\"token function\">getAccount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        执行结果：</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            getAccountDao ().toString () = top.rem.rain.demo8.dao.AccountDaoImpl@60dce7ea</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            getAccountDao ().toString () = top.rem.rain.demo8.dao.AccountDaoImpl@662f5666</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>从执行结果可以看出用这种方式每次获取的 <code>AccountDao</code>  的实例都是不同的，这样就解决了刚才的问题，另一种情况是当一个作用域为 <code>prototype</code>  的 <code>Bean</code>  依赖于一个 <code>singleton</code>  作用域的 <code>Bean</code>  时，解决方法跟上述是相同的。</p>\n</blockquote>\n<blockquote>\n<p>注意：当一个 <code>Bean</code>  被设置为 <code>prototype</code>  作用域后 <code>Spring</code>  就不会对一个 <code>bean</code>  的整个生命周期负责，容器在初始化、配置、装饰或者是装配完一个 <code>prototype</code>  实例后，将它交给客户端，随后就对该 <code>prototype</code>  作用域的实例不再关心了。</p>\n</blockquote>\n<blockquote>\n<p>因此我们需要慎用它，在一般情况下，对有状态的 <code>bean</code>  应该使用 <code>prototype</code>  作用域，而对无状态的 <code>bean</code>  则应该使用 <code>singleton</code>  作用域。至于有状态就是该 <code>bean</code>  具有保存信息功能，不能共享，否则会造成线程安全问题，而无状态则不需要保存信息，是线程安全的，可以共享，在 <code>Spring</code>  中大部分 <code>bean</code>  都是 <code>singleton</code> ，整个生命周期中只会存在一个。</p>\n</blockquote>\n<h3 id=\"requestsession作用域\"><a class=\"anchor\" href=\"#requestsession作用域\">#</a> request&amp;session 作用域</h3>\n<blockquote>\n<p>在 <code>Spring2.5</code>  中专门针对 <code>Web</code>  应用程序引进了 <code>request</code>  和 <code>session</code>  这两种作用域，关于 <code>request</code>  作用域，对于每次 <code>http</code>  请求到达应用程序时， <code>Spring</code>  容器会创建一个全新的 <code>request</code>  作用域的 <code>bean</code>  实例，且该 <code>bean</code>  实例仅在当前 <code>http</code>  的 <code>request</code>  作用域内有效，整个请求过程也只会使用相同的 <code>bean</code>  实例，因此我们可以根据需要放心更改所建实例的内部状态，而其它 <code>http</code>  请求则创建新实例的 <code>bean</code>  互不干扰，当处理请求结束， <code>request</code>  作用域的 <code>bean</code>  实例将被销毁，如在接收参数时可能需要一个 <code>bean</code>  实例来装载一些参数，显然每次请求参数几乎不会相同，因此希望 <code>bean</code>  实例每次都是足够新的而且只在 <code>request</code>  作用域范围内有效。那就是 <code>Session</code>  每当创建一个新的 <code>HttpSession</code>  时就会创建一个 <code>Session</code>  作用域的 <code>bean</code> ，并且该实例 <code>bean</code>  会伴随着会话的存在而存在。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>SingletonBean.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo9<span class=\"token punctuation\">.</span>bean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scope</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Component</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@Scope</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"singleton\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SingletonBean</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>PrototypeBean.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo9<span class=\"token punctuation\">.</span>bean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scope</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ScopedProxyMode</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Component</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@Scope</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"prototype\"</span><span class=\"token punctuation\">,</span>proxyMode <span class=\"token operator\">=</span> <span class=\"token class-name\">ScopedProxyMode</span><span class=\"token punctuation\">.</span>TARGET_CLASS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PrototypeBean</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>RequestBean.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo9<span class=\"token punctuation\">.</span>bean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scope</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ScopedProxyMode</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Component</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@Scope</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"request\"</span><span class=\"token punctuation\">,</span>proxyMode <span class=\"token operator\">=</span> <span class=\"token class-name\">ScopedProxyMode</span><span class=\"token punctuation\">.</span>TARGET_CLASS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RequestBean</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>SessionBean.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo9<span class=\"token punctuation\">.</span>bean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scope</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ScopedProxyMode</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Component</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@Scope</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"session\"</span><span class=\"token punctuation\">,</span>proxyMode <span class=\"token operator\">=</span> <span class=\"token class-name\">ScopedProxyMode</span><span class=\"token punctuation\">.</span>TARGET_CLASS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SessionBean</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>上述分别创建了四种不同作用域的 <code>Bean</code>  并使用注解进行作用域的声明， <code>@Component</code>  代表它们是组件类，需要 <code>Spring</code>  容器帮忙创建， <code>@Scope</code>  表示作用域，其中的 <code>value</code>  指明是哪种作用域，在除了 <code>SingletonBean</code>  外，其它 <code>Bean</code>  还使用了 <code>proxyMode</code>  用来指明哪种代理模式，这里没有接口，因此使用 <code>CGLib</code>  进行代理 (此处后面会说明为什么这样做)。接下来将使用 <code>SpringBoot3.0</code>  进行测试。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>BeanStatusController.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo9<span class=\"token punctuation\">.</span>controller</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Controller</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestMapping</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ResponseBody</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo9<span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PrototypeBean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo9<span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestBean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo9<span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SessionBean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>demo9<span class=\"token punctuation\">.</span>bean<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SingletonBean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> * @Description: Controller</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> * @DateTime: 2024-01-02 23:22</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BeanStatusController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">SingletonBean</span> singletonBean<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">PrototypeBean</span> prototypeBean<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">RequestBean</span> requestBean<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">SessionBean</span> sessionBean<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/test\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第一次的singleton是 :\"</span> <span class=\"token operator\">+</span> singletonBean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第二次的singleton是 :\"</span> <span class=\"token operator\">+</span> singletonBean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第一次的prototype是 :\"</span> <span class=\"token operator\">+</span> prototypeBean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第二次的prototype是 :\"</span> <span class=\"token operator\">+</span> prototypeBean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第一次的requestBean是 :\"</span> <span class=\"token operator\">+</span> requestBean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第二次的requestBean是 :\"</span> <span class=\"token operator\">+</span> requestBean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第一次的sessionBean是 :\"</span> <span class=\"token operator\">+</span> sessionBean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第二次的sessionBean是 :\"</span> <span class=\"token operator\">+</span> sessionBean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"===========================================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>启动 <code>SpringBoot</code>  服务后使用浏览器连续进行三次访问，访问的路径是本地的 <code>http://localhost:8080/test</code> , 三次的访问结果如下：</p>\n</blockquote>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"><span>访问结果</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>第一次的 singleton 是 :top.rem.rain.demo9.bean.SingletonBean@41576169</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>第二次的 singleton 是 :top.rem.rain.demo9.bean.SingletonBean@41576169</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>第一次的 prototype 是 :top.rem.rain.demo9.bean.PrototypeBean@752f81d6</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>第二次的 prototype 是 :top.rem.rain.demo9.bean.PrototypeBean@2a49795</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>第一次的 requestBean 是 :top.rem.rain.demo9.bean.RequestBean@232243da</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>第二次的 requestBean 是 :top.rem.rain.demo9.bean.RequestBean@232243da</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>第一次的 sessionBean 是 :top.rem.rain.demo9.bean.SessionBean@24c92325</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>第二次的 sessionBean 是 :top.rem.rain.demo9.bean.SessionBean@24c92325</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>第一次的 singleton 是 :top.rem.rain.demo9.bean.SingletonBean@41576169</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>第二次的 singleton 是 :top.rem.rain.demo9.bean.SingletonBean@41576169</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>第一次的 prototype 是 :top.rem.rain.demo9.bean.PrototypeBean@2b86e029</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>第二次的 prototype 是 :top.rem.rain.demo9.bean.PrototypeBean@25410b29</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>第一次的 requestBean 是 :top.rem.rain.demo9.bean.RequestBean@217e8b59</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>第二次的 requestBean 是 :top.rem.rain.demo9.bean.RequestBean@217e8b59</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>第一次的 sessionBean 是 :top.rem.rain.demo9.bean.SessionBean@24c92325</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>第二次的 sessionBean 是 :top.rem.rain.demo9.bean.SessionBean@24c92325</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>第一次的 singleton 是 :top.rem.rain.demo9.bean.SingletonBean@41576169</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>第二次的 singleton 是 :top.rem.rain.demo9.bean.SingletonBean@41576169</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>第一次的 prototype 是 :top.rem.rain.demo9.bean.PrototypeBean@192a7e9b</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>第二次的 prototype 是 :top.rem.rain.demo9.bean.PrototypeBean@17ed83ce</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>第一次的 requestBean 是 :top.rem.rain.demo9.bean.RequestBean@13d215eb</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>第二次的 requestBean 是 :top.rem.rain.demo9.bean.RequestBean@13d215eb</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>第一次的 sessionBean 是 :top.rem.rain.demo9.bean.SessionBean@24c92325</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>第二次的 sessionBean 是 :top.rem.rain.demo9.bean.SessionBean@24c92325</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</pre></td></tr></table></figure><blockquote>\n<p>从结果中可以看出 <code>singletonBean</code>  永远只有一个实例，而 <code>prototypeBean</code>  则每次被获取都会创建新实例，对应 <code>RequestBean</code>  在同一次的 <code>http</code>  请求中是同一个实例，当请求结束 <code>RequestBean</code>  也随着被销毁。在新的 <code>http</code>  请求中则会生成新的 <code>RequestBean</code>  实例，对于 <code>SessionBean</code>  由于是在同一个浏览器中访问属于同一次会话，因此 <code>SessionBean</code>  实例都是同一个实例对象。</p>\n</blockquote>\n<blockquote>\n<p>下面将使用另一个浏览器进行访问来查看 <code>SessionBean</code>  是否会变化。</p>\n</blockquote>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"><span>访问结果</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>第一次的 singleton 是 :top.rem.rain.demo9.bean.SingletonBean@41576169</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>第二次的 singleton 是 :top.rem.rain.demo9.bean.SingletonBean@41576169</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>第一次的 prototype 是 :top.rem.rain.demo9.bean.PrototypeBean@2a241147</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>第二次的 prototype 是 :top.rem.rain.demo9.bean.PrototypeBean@24e3ea73</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>第一次的 requestBean 是 :top.rem.rain.demo9.bean.RequestBean@20dc7a37</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>第二次的 requestBean 是 :top.rem.rain.demo9.bean.RequestBean@20dc7a37</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>第一次的 sessionBean 是 :top.rem.rain.demo9.bean.SessionBean@65dee048</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>第二次的 sessionBean 是 :top.rem.rain.demo9.bean.SessionBean@65dee048</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</pre></td></tr></table></figure><blockquote>\n<p>从访问结果中可以看出 <code>SessionBean</code>  已经发生了改变，这也就证明在不同的会话中 <code>SessionBean</code>  实例是不同的，但为什么需要在其它三种作用域上设置代理模式呢？这个问题的本质与前面的 <code>singleton</code>  作用域的 <code>Bean</code>  依赖于 <code>prototype</code>  作用域的 <code>Bean</code>  是相同的原理。</p>\n</blockquote>\n<blockquote>\n<p>由于 <code>Spring</code>  容器只会在创建 <code>bean</code>  实例时帮助我们注入该实例 <code>bean</code>  所依赖的其它 <code>bean</code>  实例对象，而且只会注入一次，这并不是 <code>request</code>  和 <code>session</code>  作用域所希望看到的，毕竟他们都需要在不同的场景下注入新的实例对象而不是唯一不变的实例对象。</p>\n</blockquote>\n<blockquote>\n<p>为了解决这个问题，必须放弃直接在 <code>XML</code>  中注入 <code>bean</code>  实例，改用 <code>Java</code>  代码方式 (手动实现 <code>ApplicationContextAware</code>  接口) 或者注解的方式 ( <code>@Autowired</code> ) 进行注入，在示例中选择了注解的方式进行注入，并在 <code>bean</code>  的声明中声明了动态代理模式，幸运的是 <code>Spring</code>  容器是允许这样做的，以至于 <code>Spring</code>  通过代理的方式生成新的代理实例 <code>bean</code>  以此来满足创建新实例的需求。</p>\n</blockquote>\n<blockquote>\n<p>在程序运行期间，当一个方法调用到达该代理对象时， <code>Spring</code>  容器便会尝试在当前的 <code>Request</code>  或 <code>Session</code>  会话中获取目标对象 <code>Bean</code> ，如果已存在则使用该 <code>Bean</code>  否则代理方法将创建新实例 <code>Bean</code>  来处理请求或会话，注意：这里指的是一次 <code>http</code>  请求或一次会话的过程。</p>\n</blockquote>\n<blockquote>\n<p>如果希望 <code>request</code>  和 <code>session</code>  作用域通过 <code>xml</code>  配置文件方式声明必须在 <code>bean</code>  标签中放置 <code>&lt;apo:scoped-proxy&gt;</code>  子标签，该作用与注解声明代理模式效果是相同的，经过测试这种声明代理的方式不适用于 <code>prototype</code>  作用域，该作用域生效的方式只有基于注解方式和基于实现 <code>ApplicationContextAware</code>  接口的两种方式。</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>requestBean<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">scope</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>request<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top.rem.rain.demo9.bean.RequestBean<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 声明 aop 代理 --></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">aop:</span>scoped-proxy</span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sessionBean<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">scope</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>request<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top.rem.rain.demo9.bean.SessionBean<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 声明 aop 代理 --></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">aop:</span>scoped-proxy</span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>如果 <code>web</code>  层使用的是 <code>SpringMVC</code>  来处理 <code>web</code>  请求则不需要做任何事情就可以使 <code>Request</code>  和 <code>Session</code>  作用域生效，倘若使用的是其它 <code>web</code>  层框架请务必在 <code>web.xml</code>  中声明如下监视器，以便使 <code>Request</code>  和 <code>Session</code>  作用域正常工作，配置代码如下：</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"><span>web.xml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>web-app</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>listener</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>listener-class</span><span class=\"token punctuation\">></span></span>org.springframework.web.context.request.RequestContextListener<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>listener-class</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>listener</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>web-app</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"globalsession作用域\"><a class=\"anchor\" href=\"#globalsession作用域\">#</a> globalSession 作用域</h3>\n<blockquote>\n<p>它类似于 <code>Session</code>  作用域，相当于全局变量，类似 <code>Servlet</code>  的 <code>Application</code> ，适用基于 <code>portlet</code>  的 <code>web</code>  应用程序，请注意:  <code>portlet</code>  在这指的是分布式开发，而不是 <code>portlet</code>  语言开发。</p>\n</blockquote>\n<h1 id=\"依赖注入ioc的区别\"><a class=\"anchor\" href=\"#依赖注入ioc的区别\">#</a> 依赖注入 &amp; IOC 的区别</h1>\n<ul>\n<li><code>DI(依赖注入)</code> ：在 <code>Spring</code>  创建对象的过程中，把对象依赖的属性注入到类中。</li>\n<li><code>IOC(控制反转)</code> ：将对象的创建权交由 <code>Spring</code>  来进行管理。</li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "Java",
                "Java深入理解",
                "计算机科学",
                "Java深入理解",
                "Spring",
                "依赖注入",
                "IOC"
            ]
        },
        {
            "id": "https://rainrem.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/java/java%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/JSR-133%EF%BC%9AJava%20Memory%20Model%20and%20Thread%20Specification/",
            "url": "https://rainrem.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/java/java%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/JSR-133%EF%BC%9AJava%20Memory%20Model%20and%20Thread%20Specification/",
            "title": "JSR-133：Java Memory Model and Thread Specification",
            "date_published": "2023-12-21T13:58:46.000Z",
            "content_html": "<h1 id=\"specification\"><a class=\"anchor\" href=\"#specification\">#</a> Specification</h1>\n<p>This document is the community review draft of the JSR-133 specification, the Java Memory Model (JMM) and Thread Specification. This specification is intended to be part of the JSR-176 umbrella for the Tiger (1.5) release of Java, and is intended to replace Chapter 17 of the Java Language Specification and Chapter 8 of the Java Virtual Machine Specification. The current draft has been written generically to apply to both, the final version will include two different versions, essentially identical in semantics but using the appropriate terminology for each.<br />\nThe discussion and development of this specification has been unusally detailed and tech-nical, involving insights and advances in a number of academic topics.<br />\nThis discussion is archived (and continues) at the JMM web site <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY3MudW1kLmVkdS9+cHVnaC9qYXZhL21lbW9yeU1vZGVsLw==\">http://www.cs.umd.edu/~pugh/java/memoryModel</span>.<br />\nThe web site provides additional information that may help in understanding how this spec-ification was arrived at.<br />\nThe core semantics (Sections 4 – 7) is intended to describe semantics allowed by existing JVMs.<br />\nThe existing chapters of the JLS and JVMS specify semantics that are at odds with optimizations performed by many existing JVMs. The proposed core semantics should not cause issues for existing JVM implementations, although they may limit potential future optimizations and implementations.<br />\nThe expert group seeks feedback on two technical issues: a choice of a weak or strong causality model (Section 7.4), and an issue regarding the semantics of notify and interrupt(Section 12.4).<br />\nThe JSR-133 expert group urges all readers to examine these issues and provide the expert group with feedback on them.<br />\nThe weak causality model could allow more compiler optimizations, the strong model could provide more safety guarantees. However, we have not found any compelling and realistic examples of optimizations or guarantees that would guide the choice between the strong and weak causality model. This document proposes the strong causality model, since any JVM that is compliant with the strong causality model will also be compliant with the weak causality model.<br />\nJCP members are also urged to closely read the semantics on final fields (Sections 3.5 and 8). This is the one place most likely to require JVM implementors to change their implementation to be compliant with JSR-133. In particular, memory barriers or other techniques may be required to ensure that other threads see the correct values for final fields of immutable objects, even in the presence of data races.</p>\n<h1 id=\"introduction\"><a class=\"anchor\" href=\"#introduction\">#</a> Introduction</h1>\n<p>Java virtual machines support multiple threads of execution. Threads are represented in Java by the Thread class. The only way for a user to create a thread is to create an object of this class; each Java thread is associated with such an object. A thread will start when the start() method is invoked on the corresponding Thread object.<br />\nThe behavior of threads, particularly when not correctly synchronized, can be particularly confusing and intuitive. This specification describes the semantics of multithreaded Java programs, including rules on what values may be seen by a read of shared memory that is updated by other threads. Similar to the memory model for different hardware architectures, these semantics have been referred to as the Java memory mode.<br />\nThese semantics do not describe how a multithreaded program should be executed.<br />\nRather, they describe only the behaviors that are allowed by multithreaded programs. Any execution strategy that generates only allowed behaviors is an acceptable execution strategy. This is discussed more in Appendix A.</p>\n<h2 id=\"locks\"><a class=\"anchor\" href=\"#locks\">#</a> Locks</h2>\n<p>Java provides multiple mechanisms for communicating between threads. The most basic of these methods is synchronization, which is implemented using monitors. Each object in Java is associated with a monitor, which a thread can lock or unlock. Only one thread at a time may hold a lock on a monitor. Any other threads attempting to lock that monitor are blocked until they can obtain a lock on that monitor.<br />\nA thread t may lock a particular monitor multiple times; each unlock reverses the effect of one lock operation.<br />\nThe Java programming language does not provide a way to perform separate lock and unlock actions; instead, they are implicitly performed by high-level constructs that always arrange to pair such actions correctly.<br />\nNote, however, that the Java virtual machine provides separate monitorenter and moni-torexit instructions that implement the lock and unlock actions.<br />\nThe synchronized statement computes a reference to an object; it then attempts to perform a lock action on that object’s monitor and does not proceed further until the lock action has successfully completed. After the lock action has been performed, the body of the synchronized statement is executed. If execution of the body is ever completed, either normally or abruptly, an unlock action is automatically performed on that same monitor.<br />\nA synchronized method automatically performs a lock action when it is invoked; its body is not executed until the lock action has successfully completed. If the method is an instance method, it locks the monitor associated with the instance for which it was invoked (that is, the object that will be known as this during execution of the body of the method).<br />\nIf the method is static, it locks the monitor associated with the Class object that represents the class in which the method is defined. If execution of the method’s body is ever completed, either normally or abruptly, an unlock action is automatically performed on that same monitor.<br />\n<img data-src=\"https://s11.ax1x.com/2023/12/22/piT6Mt0.png\" alt=\"piT6Mt0.png\" /><br />\nThe Java programming language does not prevent, nor require detection of, deadlock con-ditions. Programs where threads hold (directly or indirectly) locks on multiple objects should use conventional techniques for deadlock avoidance, creating higher-level locking primitives that don’t deadlock, if necessary.<br />\nThere is a total order over all lock and unlock actions performed by an execution of a program.</p>\n<h2 id=\"notation-in-examples\"><a class=\"anchor\" href=\"#notation-in-examples\">#</a> Notation in examples</h2>\n<p>The Java memory model is not substantially intertwined with the Object-Oriented nature of the Java programming language. For terseness and simplicity in our examples, we often exhibit code fragments that could as easily be C or Pascal code fragments, without class or method definitions, or explicit dereferencing. Instead, most examples consists of two or more threads containing statements with access to local variables (e.g., local variables of a method, not accessible to other threads), shared global variables (which might be static fields) or instance fields of an object.</p>\n<h1 id=\"incorrectly-synchronized-programs-can-exhibit-sur-prising-behaviors\"><a class=\"anchor\" href=\"#incorrectly-synchronized-programs-can-exhibit-sur-prising-behaviors\">#</a> Incorrectly synchronized programs can exhibit sur-prising behaviors</h1>\n<p>The semantics of the Java programming language allow compilers and microprocessors to perform optimizations that can interact with incorrectly synchronized code in ways that can produce behaviors that seem paradoxical.<br />\nConsider, for example, Figure 1. This program contains local variables r1 and r2; it also contains shared variables A and B, which are fields of an object. It may appear that the result r2 == 2, r1 == 1 is impossible. Intuitively, if r2 is 2, then instruction 4 came before instruction 1. Further, if r1 is 1, then instruction 2 came before instruction 3. So, if r2 == 2 and r1 == 1, then instruction 4 came before instruction 1, which comes before instruction 2, which came before instruction 3, which comes before instruction 4. This is, on the face of it, absurd.<br />\nHowever, compilers are allowed to reorder the instructions in each thread. If instruction 3 is made to execute after instruction 4, and instruction 1 is made to execute after instruction 2, then the result r2 == 2 and r1 == 1 is perfectly reasonable.<br />\n<img data-src=\"https://s11.ax1x.com/2023/12/24/pi7L6I0.png\" alt=\"pi7L6I0.png\" /><br />\nTo some programmers, this behavior may make it seem as if their code is being “broken” by Java. However, it should be noted that this code is improperly synchronized:</p>\n<ul>\n<li>there is a write in one thread,</li>\n<li>a read of the same variable by another thread,</li>\n<li>and the write and read are not ordered by synchronization.</li>\n</ul>\n<p>This is called a data race. When code contains a data race, counter-intuitive results are often possible.<br />\nSeveral mechanisms can affect this reordering: the just-in-time compiler and the processor may rearrange code. In addition, the memory hierarchy of the architecture on which a virtual machine is run may make it appear as if code is being reordered. For the purposes of simplicity, we shall simply refer to anything that can reorder code as being a compiler. Source code to bytecode transformation, which is traditionally thought of as compilation, is outside the scope of this document.<br />\nAnother example of surprising results can be seen in Figure 2. This program is incorrectly synchronized; it accesses shared memory without enforcing any ordering between those ac-cesses. One common compiler optimization involves having the value read for m reused for o: they are both reads of p.x with no intervening write.<br />\nNow consider the case where the assignment to p.x in Thread 2 happens between the first read of p.x and the read of q.x in Thread 1. If the compiler decides to reuse the value of p.x for the second read, then m and o will have the value 0, and n will have the value 3. This may seem counter-intuitive as well: from the perspective of the programmer, the value stored at p.x has changed from 0 to 3 and then changed back.<br />\nAlthough this behavior is surprising, it is allowed by most JVMs. However, it is forbidden by the original Java memory model in the JLS and JVMS, one of the first indications that the original JMM needed to be replaced.</p>\n<h1 id=\"informal-semantics\"><a class=\"anchor\" href=\"#informal-semantics\">#</a> Informal Semantics</h1>\n<p>A program must be correctly synchronized to avoid the kinds of non-intuitive behaviors that can be observed when code is reordered. The use of correct synchronization does not ensure that the overall behavior of a program is correct. However, its use does allow a programmer to reason about the possible behaviors of a program in a simple way; the behavior of a correctly synchronized program is much less dependent on possible reorderings. Without correct synchronization, very strange, confusing and counter-intuitive behaviors are possible.<br />\nThere are two key ideas to understanding whether a program is correctly synchronized:<br />\n<strong>Conflicting Accesses</strong> Two accesses (reads of or writes to) the same shared field or array element are said to be conflicting if at least one of the accesses is a write.<br />\n<strong>Happens-Before Relationship</strong> Two actions can be ordered by a happens-before relation-ship. If one action happens before another, then the first is visible to and ordered before the second. There are a number of ways to induce a happens-before ordering in a Java program, including:</p>\n<ul>\n<li>Each action in a thread happens before every subsequent action in that thread.</li>\n<li>An unlock on a monitor happens before every subsequent lock on that monitor.</li>\n<li>A write to a volatile field happens before every subsequent read of that volatile.</li>\n<li>A call to start() on a thread happens before any actions in the started thread.</li>\n<li>All actions in a thread happen before any other thread successfully returns from a join() on that thread.</li>\n<li>If an action a happens before an action b, and b happens before an action c, then a happens before c.</li>\n</ul>\n<p>When a program contains two conflicting accesses that are not ordered by a happens-before relationship, it is said to contain a data race. A correctly synchronized program is one that has no data races (Section 3.4 contains a subtle but important clarification).<br />\nAn example of incorrectly synchronized code can be seen in Figure 3, which shows two different executions of the same program, both of which contain conflicting accesses to shared variables X and Y. In Figure 3a, the two threads lock and unlock a monitor M1 so that, in this execution, there is a happens-before relationship between all pairs of conflicting accesses. However, a different execution, shown in Figure 3b, shows why this program is incorrectly synchronized; there is no happens-before ordering between the conflicting accesses to X.<br />\nIf a program is not correctly synchronized, then three types of problems can appear:visibility, ordering and atomicity.</p>\n<p><img data-src=\"https://s11.ax1x.com/2023/12/24/pi7LvsH.png\" alt=\"pi7LvsH.png\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">LoopMayNeverEnd</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">boolean</span> done <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">work</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>done<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token comment\">// do work</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">stopWork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        done <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">//                       Figure 4: Visibility Example</span></pre></td></tr></table></figure><h2 id=\"visibility\"><a class=\"anchor\" href=\"#visibility\">#</a> Visibility</h2>\n<p>If an action in one thread is visible to another thread, then the result of that action can be observed by the second thread. The results of one action are only guaranteed to be visible to a second action if the first happens before the second.<br />\nConsider the code in Figure 4. Now imagine that two threads are created, and that one thread calls work(), and at some point, the other thread calls stopWork(). Because there is no happens-before relationship between the two threads, the thread in the loop may never see the update to done performed by the other thread. In practice, this may happen if the compiler detects that there are no updates to done in the first thread: the loop can be transformed to an infinite loop.<br />\nTo ensure that this does not happen, there must be a happens-before relationship be-tween the two threads. In LoopMayNeverEnd, this can be achieved by declaring done to be volatile. All actions on volatiles happen in a total order, and each write to a volatile field happens before any subsequent read of that volatile.</p>\n<h2 id=\"ordering\"><a class=\"anchor\" href=\"#ordering\">#</a> Ordering</h2>\n<p>Ordering constraints govern the order in which multiple actions are seen to have happened.<br />\nThe ability to perceive ordering constraints among actions is only guaranteed to actions that share a happens-before relationship with them.<br />\nThe code in Figure 5 shows an example of where the lack of ordering constraints can produce surprising results. Consider what happens if sideOne() gets executed in one thread and sideTwo() gets executed in another. Would it be possible for temp1 and temp2 both to be true?</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">BadlyOrdered</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">boolean</span> a <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">boolean</span> b <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">sideOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">boolean</span> temp1 <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        a <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> temp1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">sideTwo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">boolean</span> temp2 <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        b <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> temp2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">//                       Figure 5: Ordering example</span></pre></td></tr></table></figure><p>The Java memory model allows this result, illustrating a violation of the ordering that a user might have expected. This code fragment is not correctly synchronized (the conflicting accesses are not ordered by a happens-before ordering).<br />\nIf ordering is not guaranteed, then the actions labeled 2 and 4 can appear to happen before the actions labeled 1 and 3; both reads can then see the value true. Compilers have substantial freedom to reorder code in the absence of synchronization, so a compiler could move the assignments to a and b earlier, resulting in temp1 and temp2 both being true.</p>\n<h2 id=\"atomicity\"><a class=\"anchor\" href=\"#atomicity\">#</a> Atomicity</h2>\n<p>If an action is (or a set of actions are) atomic, its result must be seen to happen “all at once”, or indivisibly. Section 10 discusses some atomicity issues for Java; other than the exceptions mentioned there, all individual read and write actions take place atomically.<br />\nAtomicity can also be enforced between multiple actions. A program can be free from data races without having this form of atomicity. However, it is frequently just as important to enforce appropriate atomicity in a program as it is to enforce freedom from data races. Consider the code in Figure 6. Since all access to the shared variable balance is guarded by synchronization, the code is free of data races.<br />\nNow assume that one thread calls deposit(5), while another calls withdraw(5); there is an initial balance of 10. Ideally, at the end of these two calls, there would still be a balance of 10. However, consider what would happen if:</p>\n<ul>\n<li>The deposit() method sees a value of 10 for the balance, then</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">BrokenBankAccount</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> balance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getBalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> balance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setBalance</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IllegalStateException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        balance <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>balance <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalStateException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Negative Balance\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">deposit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token function\">getBalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token function\">setBalance</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">+</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">withdraw</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token function\">getBalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token function\">setBalance</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">-</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">//                       Figure 6:Atomicity Example</span></pre></td></tr></table></figure><ul>\n<li>The withdraw() method sees a value of 10 for the balance and withdraws 5, leaving a balance of 5, and finally</li>\n<li>The deposit() method uses the balance it originally saw to calculate the new balance.</li>\n</ul>\n<p>As a result of this lack of atomicity, the balance is 15 instead of 10. This effect is often referred to as a lost update because the withdrawal is lost. A programmer writing multi-threaded code must use synchronization carefully to avoid this sort of error. For this example, making the deposit() and withdraw() methods synchronized will ensure that the actions of those methods take place atomically.</p>\n<h2 id=\"sequential-consistency\"><a class=\"anchor\" href=\"#sequential-consistency\">#</a> Sequential Consistency</h2>\n<p>If a program has no data races, then executions of the program are sequentially consistent:very strong guarantees are made about visibility and ordering. Within a sequentially con-sistent execution, there is a total order over all individual actions (such as a read or a write)which is consistent with program order. Each individual action is atomic and is immedi-ately visible to every thread. As noted before, sequential consistency and/or freedom from data races still allows errors arising from groups of operations that need to be perceived atomically, as shown in Figure 6.<br />\nHaving defined sequential consistency, we can use it to provide an important clarification regarding correctly synchronized programs. A program is correctly synchronized if and only if all sequentially consistent executions are free of data races. Programmers therefore only need to reason about sequentially consistent executions to determine if their programs are correctly synchronized.<br />\nA more full and formal treatment of memory model issues for normal fields is given in Sections 4–7.</p>\n<h2 id=\"final-fields\"><a class=\"anchor\" href=\"#final-fields\">#</a> Final Fields</h2>\n<p>Fields declared final can be initialized once, but never changed. The detailed semantics of final fields are somewhat different from those of normal fields. In particular, compilers have a great deal of freedom to move reads of final fields across synchronization barriers and calls to arbitrary or unknown methods. Correspondingly, compilers are allowed to keep the value of a final field cached in a register and not reload it from memory in situations where a non-final field would have to be reloaded.<br />\nFinal fields also allow programmers to implement thread-safe immutable objects without synchronization. A thread-safe immutable object is seen as immutable by all threads, even if a data race is used to pass references to the immutable object between threads. This can provide safety guarantees against misuse of the immutable class by incorrect or malicious code.<br />\nFinal fields must be used correctly to provide a guarantee of immutability. An object is considered to be completely initialized when its constructor finishes. A thread that can only</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">FinalFieldExample</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token class-name\">FinalFieldExample</span> f<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">FinalFieldExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        x <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        y <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">writer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FinalFieldExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">reader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">//                       Figure 7:Example illustrating final fields semantics</span></pre></td></tr></table></figure><p>see a reference to an object after that object has been completely initialized is guaranteed to see the correctly initialized values for that object’s final fields.<br />\nThe usage model for final fields is a simple one. Set the final fields for an object in that object’s constructor. Do not write a reference to the object being constructed in a place where another thread can see it before the object is completely initialized. When the object is seen by another thread, that thread will always see the correctly constructed version of that object’s final fields, and any object or array referenced by those final fields.<br />\nFigure 7 gives an example that demonstrates how final fields compare to normal fields. The class FinalFieldExample has a final int field x and a non-final int field y. One thread might execute the method writer(), and another might execute the method reader(). Because writer() writes f after the object’s constructor finishes, the reader() will be guaranteed to see the properly initialized value for f.x: it will read the value 3. However, f.y is not final; the reader() method is therefore not guaranteed to see the value 4 for it. Final fields are designed to allow for necessary security guarantees.<br />\nConsider the code in Figure 8. String objects are intended to be immutable and string operations do not perform synchronization. While the String implementation does not have any data races, other code could have data races involving the use of Strings, and the JLS</p>\n<p><img data-src=\"https://s11.ax1x.com/2023/12/24/pi7OFW8.png\" alt=\"pi7OFW8.png\" /></p>\n<p>makes weak guarantees for programs that have data races. In particular, if the fields of the String class were not final, then it would be possible (although unlikely in the extreme) that thread 2 could initially see the default value of 0 for the offset of the string object, allowing it to compare as equal to &quot;/tmp&quot;. A later operation on the String object might see the correct offset of 4, so that the String object is perceived as being &quot;/usr&quot;. Many security features of the Java programming language depend upon Strings being perceived as truly immutable.<br />\nThis is only an overview of the semantics of final fields. For a more detailed discussion, which includes several cases not mentioned here, consult Section 8.</p>\n<h1 id=\"the-java-memory-model\"><a class=\"anchor\" href=\"#the-java-memory-model\">#</a> The Java Memory Model</h1>\n<p>A memory model describes, given a program and an execution trace of that program, whether the execution trace is a legal execution of the program. Java’s memory model works by examining each read in an execution trace and checking that the write observed by that read is valid.<br />\nA high level, informal overview of the memory model shows it to be a set of rules for when writes by one thread are visible to another thread. Informally, a read r can see the value of any write w such that w does not occur after r and w is not seen to be overwritten by another write w 0 (from r’s perspective).<br />\nWhen we use the term “read” in this memory model, we are only referring to values returned from fields or array elements. There are other actions performed by a virtual ma-chine, including reads of array lengths, executions of checked casts, and invocations of virtual methods, that must always return the correct value. Although these may be implemented with reads at the machine level, these actions cannot throw an exception or otherwise cause the VM to misbehave (e.g., crash or report the wrong array length).<br />\nThe memory semantics determine what values can be read at every point in the program. The actions of each thread in isolation must behave as governed by the semantics of that thread, with the exception that the values seen by each read are determined by the memory model. We refer to this as obeying intra-thread semantics.<br />\nHowever, when threads interact, reads can return values written by writes from different threads. The model provides two main guarantees for the values seen by reads.</p>\n<ul>\n<li>Consistency requires that behavior is consistent with both intra-thread semantics and the write visibility enforced by the happens-before ordering.</li>\n<li>Causality means that an action cannot cause itself to happen. In other words, it must be possible to explain how the actions occurred in an execution without depending on one of the actions that you are trying to explain.<br />\nCausality is necessary to ensure that correctly synchronized programs have sequentially consistent semantics. This is covered in more detail in Section 6.</li>\n</ul>\n<h1 id=\"definitions\"><a class=\"anchor\" href=\"#definitions\">#</a> Definitions</h1>\n<p><strong>Shared variables/Heap memory Memory</strong> that can be shared between threads is called shared or heap memory. All instance fields, static fields and array elements are stored in heap memory. We use the term variable to refer to both fields and array elements. Variables local to a method are never shared between threads.</p>\n<p><strong>Inter-thread Actions</strong> An inter-thread action is an action performed by a thread that could be detected by or be directly influenced by another thread. Inter-thread actions include reads and writes of shared variables and synchronization actions, such as obtaining or releasing a lock, reading or writing a shared variable, or starting a thread.<br />\nWe do not need to concern ourselves with intra-thread actions (e.g., adding two local variables and storing the result in a third local variable).<br />\nAn inter-thread action is annotated with information about the execution of that action. All actions are annotated with the thread in which they occur and the program order in which they occur within that thread. Some additional annotations include:</p>\n<ul>\n<li>write The variable written to and the value written.</li>\n<li>read The variable read and the write seen (from this, we can determine the value seen).</li>\n<li>lock The monitor which is locked.</li>\n<li>unlock The monitor which is unlocked.</li>\n</ul>\n<p>For brevity’s sake, we usually refer to inter-thread actions as simply actions.</p>\n<p><strong>Program Order</strong> Among all the inter-thread actions performed by each thread t, the program order of t is a total order that reflects the order in which these actions would be performed according to the intra-thread semantics of t.</p>\n<p><strong>Intra-thread semantics</strong> Intra-thread semantics are the standard semantics for single threaded programs, and allow the complete prediction of the behavior of a thread based on the values seen by read actions within the thread. To determine if the actions of thread t in an execution are legal, we simply evaluate the implementation of thread t as would be performed in a single threaded context, as defined in the remainder of the Java Language Specification.</p>\n<p>Each time evaluation of thread t generates an inter-thread action, it must match the inter-thread action a of t that comes next in program order. If a is a read, then further evaluation of t uses the value seen by a.<br />\nSimply put, intra-thread semantics are what result from the execution of a thread in isolation; when values are read from the heap, they are determined by the memory model.</p>\n<p><strong>Synchronization Actions</strong> All inter-thread actions other than reads and writes of normal and final variables are synchronization actions.</p>\n<p><strong>Synchronization Order</strong> In any execution, there is a synchronization order which is a total order over all of the synchronization actions of that execution. For each thread t, the synchronization order of the synchronization actions in t is consistent with the program order of t.</p>\n<p><strong>Happens-Before Edges</strong> If we have two actions x and y, we use <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><munderover><mo stretchy=\"true\">→</mo><mpadded width=\"+0.6em\" lspace=\"0.3em\"><mrow></mrow></mpadded><mpadded width=\"+0.6em\" lspace=\"0.3em\"><mrow><mi>h</mi><mi>d</mi></mrow></mpadded></munderover><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x \\xrightarrow[]{hd} y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.230108em;vertical-align:-0.12200000000000011em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel x-arrow\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1081079999999999em;\"><span style=\"top:-3.322em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight x-arrow-pad\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">h</span><span class=\"mord mathnormal mtight\">d</span></span></span></span><span class=\"svg-align\" style=\"top:-2.689em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"hide-tail\" style=\"height:0.522em;min-width:1.469em;\"><svg width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span><span style=\"top:-2.5780000000000003em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight x-arrow-pad\"><span class=\"mord mtight\"></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.12200000000000011em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> to mean that x happens-before y. If x and y are actions of the same thread and x comes before y in program order, then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><munderover><mo stretchy=\"true\">→</mo><mpadded width=\"+0.6em\" lspace=\"0.3em\"><mrow></mrow></mpadded><mpadded width=\"+0.6em\" lspace=\"0.3em\"><mrow><mi>h</mi><mi>d</mi></mrow></mpadded></munderover><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x \\xrightarrow[]{hd} y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.230108em;vertical-align:-0.12200000000000011em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel x-arrow\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1081079999999999em;\"><span style=\"top:-3.322em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight x-arrow-pad\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">h</span><span class=\"mord mathnormal mtight\">d</span></span></span></span><span class=\"svg-align\" style=\"top:-2.689em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"hide-tail\" style=\"height:0.522em;min-width:1.469em;\"><svg width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span><span style=\"top:-2.5780000000000003em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight x-arrow-pad\"><span class=\"mord mtight\"></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.12200000000000011em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span>.<br />\nSynchronization actions also induce happens-before edges:</p>\n<ul>\n<li>There is a happens-before edge from an unlock action on monitor m to all subsequent lock actions on m (where subsequent is defined according to the synchronization order).</li>\n<li>There is a happens-before edge from a write to a volatile variable v to all subsequent reads of v (where subsequent is defined according to the synchronization order).</li>\n<li>There is a happens-before edge from an action that starts a thread to the first action in the thread it starts.</li>\n<li>There is a happens-before edge between the final action in a thread T1 and an action in another thread T2 that allows T2 to detect that T1 has terminated. T2 may accomplish this by calling T1.isAlive() or doing a join action on T1.</li>\n</ul>\n<p>In addition, we have two other rules for generating happens-before edges.</p>\n<ul>\n<li>There is a happens-before edge from the write of the default value (zero, false or null)of each variable to the first action in every thread.</li>\n<li>Happens-before is transitively closed. In other words, if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><munderover><mo stretchy=\"true\">→</mo><mpadded width=\"+0.6em\" lspace=\"0.3em\"><mrow></mrow></mpadded><mpadded width=\"+0.6em\" lspace=\"0.3em\"><mrow><mi>h</mi><mi>d</mi></mrow></mpadded></munderover><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x \\xrightarrow[]{hd} y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.230108em;vertical-align:-0.12200000000000011em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel x-arrow\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1081079999999999em;\"><span style=\"top:-3.322em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight x-arrow-pad\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">h</span><span class=\"mord mathnormal mtight\">d</span></span></span></span><span class=\"svg-align\" style=\"top:-2.689em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"hide-tail\" style=\"height:0.522em;min-width:1.469em;\"><svg width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span><span style=\"top:-2.5780000000000003em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight x-arrow-pad\"><span class=\"mord mtight\"></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.12200000000000011em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi><munderover><mo stretchy=\"true\">→</mo><mpadded width=\"+0.6em\" lspace=\"0.3em\"><mrow></mrow></mpadded><mpadded width=\"+0.6em\" lspace=\"0.3em\"><mrow><mi>h</mi><mi>d</mi></mrow></mpadded></munderover><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">y \\xrightarrow[]{hd} z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.3025479999999998em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel x-arrow\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1081079999999999em;\"><span style=\"top:-3.322em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight x-arrow-pad\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">h</span><span class=\"mord mathnormal mtight\">d</span></span></span></span><span class=\"svg-align\" style=\"top:-2.689em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"hide-tail\" style=\"height:0.522em;min-width:1.469em;\"><svg width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span><span style=\"top:-2.5780000000000003em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight x-arrow-pad\"><span class=\"mord mtight\"></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.12200000000000011em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span>, then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mover><mo stretchy=\"true\">→</mo><mpadded width=\"+0.6em\" lspace=\"0.3em\"><mrow><mi>h</mi><mi>d</mi></mrow></mpadded></mover><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">x \\xrightarrow{hd} z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.119108em;vertical-align:-0.01100000000000012em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel x-arrow\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1081079999999999em;\"><span style=\"top:-3.322em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight x-arrow-pad\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">h</span><span class=\"mord mathnormal mtight\">d</span></span></span></span><span class=\"svg-align\" style=\"top:-2.689em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"hide-tail\" style=\"height:0.522em;min-width:1.469em;\"><svg width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.01100000000000012em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span>.</li>\n</ul>\n<p><strong>Execution Trace</strong> An execution trace (which we sometimes simply call an execution) E of a program P consists of four parts:</p>\n<ul>\n<li>A set of inter-thread actions, including, for each thread t, the program order among actions in thread t.</li>\n<li>A synchronization order over the synchronization actions in the execution.</li>\n<li>The happens-before relationships in the program, derived from the program order and the synchronization order.</li>\n<li>A causal order, discussed in Section 7.</li>\n</ul>\n<p>This tuple is written as ⟨S, so,<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover><mo stretchy=\"true\">→</mo><mpadded width=\"+0.6em\" lspace=\"0.3em\"><mrow><mi>h</mi><mi>d</mi></mrow></mpadded></mover></mrow><annotation encoding=\"application/x-tex\">\\xrightarrow{hd}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.119108em;vertical-align:-0.01100000000000012em;\"></span><span class=\"mrel x-arrow\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1081079999999999em;\"><span style=\"top:-3.322em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight x-arrow-pad\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">h</span><span class=\"mord mathnormal mtight\">d</span></span></span></span><span class=\"svg-align\" style=\"top:-2.689em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"hide-tail\" style=\"height:0.522em;min-width:1.469em;\"><svg width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.01100000000000012em;\"><span></span></span></span></span></span></span></span></span>, co⟩. An execution trace E is a valid execution trace if and only if</p>\n<ul>\n<li>the actions of each thread obey intra-thread semantics</li>\n<li>and the values seen by the reads in E are valid according to the memory model (as defined in Section 6 – 10).</li>\n</ul>\n<p>The use of fields marked final changes the guarantees for write visibility somewhat. Final fields are frequently guaranteed to see their correctly initialized value regardless of happens-before orderings. This is discussed in detail in Section 8.<br />\nThe wait methods of class Object have lock and unlock actions associated with them; their happens-before relationships are defined by these associated actions. These methods are described further in Section 12.</p>\n<h1 id=\"consistency\"><a class=\"anchor\" href=\"#consistency\">#</a> Consistency</h1>\n<p>We first introduce a simple memory model called consistency.<br />\nThe happens-before relationship defines a partial order over the actions in an execution trace; one action is ordered before another in the partial order if one action happens-before the other. We say that a read r of a variable v is allowed to observe a write w to v if, in the happens-before partial order of the execution trace:</p>\n<ul>\n<li>r is not ordered before w (i.e., it is not the case that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mover><mo stretchy=\"true\">→</mo><mpadded width=\"+0.6em\" lspace=\"0.3em\"><mrow><mi>h</mi><mi>d</mi></mrow></mpadded></mover><mi>w</mi></mrow><annotation encoding=\"application/x-tex\">r \\xrightarrow{hd} w</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.119108em;vertical-align:-0.01100000000000012em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel x-arrow\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1081079999999999em;\"><span style=\"top:-3.322em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight x-arrow-pad\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">h</span><span class=\"mord mathnormal mtight\">d</span></span></span></span><span class=\"svg-align\" style=\"top:-2.689em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"hide-tail\" style=\"height:0.522em;min-width:1.469em;\"><svg width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.01100000000000012em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span></span></span></span>), and</li>\n<li>there is no intervening write w<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mrow></mrow><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">\\rq</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> to v (i.e., no write w<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mrow></mrow><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">\\rq</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> to v such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>w</mi><mover><mo stretchy=\"true\">→</mo><mpadded width=\"+0.6em\" lspace=\"0.3em\"><mrow><mi>h</mi><mi>d</mi></mrow></mpadded></mover><msup><mi>w</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mover><mo stretchy=\"true\">→</mo><mpadded width=\"+0.6em\" lspace=\"0.3em\"><mrow><mi>h</mi><mi>d</mi></mrow></mpadded></mover><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">w \\xrightarrow{hd} w\\rq \\xrightarrow{hd} r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.119108em;vertical-align:-0.01100000000000012em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel x-arrow\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1081079999999999em;\"><span style=\"top:-3.322em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight x-arrow-pad\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">h</span><span class=\"mord mathnormal mtight\">d</span></span></span></span><span class=\"svg-align\" style=\"top:-2.689em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"hide-tail\" style=\"height:0.522em;min-width:1.469em;\"><svg width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.01100000000000012em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.119108em;vertical-align:-0.01100000000000012em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel x-arrow\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1081079999999999em;\"><span style=\"top:-3.322em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight x-arrow-pad\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">h</span><span class=\"mord mathnormal mtight\">d</span></span></span></span><span class=\"svg-align\" style=\"top:-2.689em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"hide-tail\" style=\"height:0.522em;min-width:1.469em;\"><svg width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.01100000000000012em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span>).</li>\n</ul>\n<p>Informally, a read r is allowed to see the result of a write w if there is no happens-before ordering to prevent that read. An execution trace is consistent if all of the reads in the execution trace are allowed.<br />\nBecause consistent execution traces do not have causal orders, they are represented by a tuple ⟨S, so,<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover><mo stretchy=\"true\">→</mo><mpadded width=\"+0.6em\" lspace=\"0.3em\"><mrow><mi>h</mi><mi>d</mi></mrow></mpadded></mover></mrow><annotation encoding=\"application/x-tex\">\\xrightarrow{hd}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.119108em;vertical-align:-0.01100000000000012em;\"></span><span class=\"mrel x-arrow\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1081079999999999em;\"><span style=\"top:-3.322em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight x-arrow-pad\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">h</span><span class=\"mord mathnormal mtight\">d</span></span></span></span><span class=\"svg-align\" style=\"top:-2.689em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"hide-tail\" style=\"height:0.522em;min-width:1.469em;\"><svg width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.01100000000000012em;\"><span></span></span></span></span></span></span></span></span>⟩.</p>\n<p><img data-src=\"https://s11.ax1x.com/2023/12/24/piHCHnf.png\" alt=\"piHCHnf.png\" /></p>\n<p>As an example of this simple model, consider Figure 1, and the corresponding graph in Figure 9. The solid lines represent happens-before relationships between the actions. The dotted lines between a write and a read indicate a write that the read is allowed to see.<br />\nFor example, the read at r2 = A is allowed to see the write at A = 0 or the write A = 2.<br />\nAn execution is consistent, and valid according to the Consistency memory model, if all reads see writes they are allowed to see. So, for example, an execution that has the result r1 == 1, r2 == 2 would be a valid one.</p>\n<h1 id=\"causality\"><a class=\"anchor\" href=\"#causality\">#</a> Causality</h1>\n<p>Consistency is a necessary, but not sufficient, set of constraints. In other words, we need the requirements imposed by Consistency, but they allow for unacceptable behaviors.<br />\nIn particular, one of our key requirements is that correctly synchronized programs may exhibit only sequentially consistent behavior. Consistency alone will violate this requirement.<br />\nConsider the code in Figure 10. If this code is executed in a sequentially consistent way, each action will occur in program order, and neither of the writes will occur. Since no writes occur, there can be no data races: the program is correctly synchronized. We therefore only want the program to exhibit sequentially consistent behavior.<br />\nCould we get a non-sequentially consistent behavior from this program? Consider what would happen if both r1 and r2 saw the value 1. Can we argue that this relatively nonsensical result is legal under Consistency?<br />\nThe answer to this is “yes”. The read in Thread 2 is allowed to see the write in Thread 1, because there is no happens-before relationship to prevent it. Similarly, the read in Thread 1 is allowed to see the read in Thread 2: there is no synchronization to prevent that, either. Consistency is therefore inadequate for our purposes.<br />\nEven for incorrectly synchronized programs, Consistency is too weak: it can allow situ-ations in which an action causes itself to happen, when it could happen no other way. We say that an execution that contains this behavior contains a causal loop. At the extreme, this might allow a value to appear out of thin air. An example of this is given in Figure 11. If we decide arbitrarily that the writes in each thread will be of the value 42, the behavior r1 == r2 == 42 can be validated as consistent: each read each sees a write in the execution, without any intervening happens-before relation.<br />\nTo avoid problems such as this, we require that executions respect causality. It turns out that formally defining causality in a multithreaded context is tricky and subtle.</p>\n<h2 id=\"causal-orders\"><a class=\"anchor\" href=\"#causal-orders\">#</a> Causal Orders</h2>\n<p>For any execution trace, we require the existence of a causal order, which is an ordered list of the reads, writes and synchronization actions in that execution. The causal order can be considered an explanation of how an execution happened. For example, first we can show that x could happen; once we know x will happen, we can show that y can happen; once we know that both x and y will happen, we can show that z can happen.</p>\n<p><img data-src=\"https://s11.ax1x.com/2023/12/24/piHP5aF.png\" alt=\"piHP5aF.png\" /></p>\n<p>The causal order does not have to be consistent with the program order or the happens-before order. Any total order over actions in an execution trace is potentially a valid causal order. The causal order could, for example, reflect the order in which the actions might occur after compiler transformations have taken place.<br />\nThe intuition behind causal orders is that for each prefix of that causal order, the next action in the order is justified by the actions in the prefix. Actions that do not involve potential cycles do not need to be explicitly justified; we only require the justification of prescient actions. An action x in a trace ⟨S, so,<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover><mo stretchy=\"true\">→</mo><mpadded width=\"+0.6em\" lspace=\"0.3em\"><mrow><mi>h</mi><mi>d</mi></mrow></mpadded></mover></mrow><annotation encoding=\"application/x-tex\">\\xrightarrow{hd}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.119108em;vertical-align:-0.01100000000000012em;\"></span><span class=\"mrel x-arrow\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1081079999999999em;\"><span style=\"top:-3.322em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight x-arrow-pad\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">h</span><span class=\"mord mathnormal mtight\">d</span></span></span></span><span class=\"svg-align\" style=\"top:-2.689em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"hide-tail\" style=\"height:0.522em;min-width:1.469em;\"><svg width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.01100000000000012em;\"><span></span></span></span></span></span></span></span></span>, co⟩ is prescient if and only if either:</p>\n<ul>\n<li>there exists an action y that occurs after x in the causal order such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi><mover><mo stretchy=\"true\">→</mo><mpadded width=\"+0.6em\" lspace=\"0.3em\"><mrow><mi>h</mi><mi>d</mi></mrow></mpadded></mover><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">y \\xrightarrow{hd} x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.3025479999999998em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel x-arrow\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1081079999999999em;\"><span style=\"top:-3.322em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight x-arrow-pad\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">h</span><span class=\"mord mathnormal mtight\">d</span></span></span></span><span class=\"svg-align\" style=\"top:-2.689em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"hide-tail\" style=\"height:0.522em;min-width:1.469em;\"><svg width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.01100000000000012em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> or</li>\n<li>x observes a write that occurs after it in the causal order.</li>\n</ul>\n<p>All prescient actions must be justified. To justify a prescient action x in trace E, let α be the actions that occur before x in the causal order. We need to show that x will be allowed to occur in all executions with a causal order that starts with α and contains no prescient actions after α. Section 7.4 describes an alternative weak causality model, in which we would only require that there exist some execution in which x would be allowed to occur.<br />\nIt should be fairly clear that there are no causal orders for which Figure 11 will produce 42: there is no sequence of actions that will guarantee that 42 will be written to x or y.<br />\nIn addition, the reads in Figure 10 will not be able to see the value 1. The first action in the causal order would have to be a write of 1 or a read of 1. Since neither of those are allowed in any non-prescient execution, they cannot be the first action in a causal order.</p>\n<p><img data-src=\"https://s11.ax1x.com/2023/12/24/piHP7G9.png\" alt=\"piHP7G9.png\" /></p>\n<p>Formally defining causality is somewhat involved. To do so, it is necessary to define what it means for one action to be in more than one execution. This definition will be omitted here; the full definition can be found, along with the formal model, in Appendix B.</p>\n<h2 id=\"when-is-a-race-read-justified-in-a-causal-order\"><a class=\"anchor\" href=\"#when-is-a-race-read-justified-in-a-causal-order\">#</a> When is a race read justified in a causal order?</h2>\n<p>We need to state more formally what it means for a read r to be justified in occurring in an execution E whose causal order is αrβ. If r is involved in a data race, then execution can non-deterministically choose which of the multiple writes visible to r is seen by r, which makes it difficult to guarantee that r will see a particular value. The read r is justified if in all executions whose causal order consists of α followed by non-prescient actions, there is a corresponding read r<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mrow></mrow><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">\\rq</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> that is allowed to observe the same value that r observed.<br />\nIntuitively, we are only able to justify a read if it will always be allowed to occur based on the actions we have already justified.</p>\n<h2 id=\"prohibited-sets\"><a class=\"anchor\" href=\"#prohibited-sets\">#</a> Prohibited Sets</h2>\n<p>In order to perform an action presciently, we must be guaranteed that the action will occur.<br />\nThe JMM allows for many possible behaviors of incorrectly synchronized programs. Com-pilers may perform transformations that prevent some behaviors that are allowed by the JMM. When these behaviors are prohibited by compiler transformations, other actions may be guaranteed that were not guaranteed given the full freedom of the JMM. The semantics need to allow such actions to be performed presciently. In Figure 12, we see an example of such an optimization. The compiler can</p>\n<ul>\n<li>eliminate the redundant read of a, replacing 2 with r2 = r1, then</li>\n<li>determine that the expression r1 == r2 is always true, eliminating the conditional branch 3, and finally</li>\n<li>move the write 4: b = 2 early.</li>\n</ul>\n<p>Here, the assignment 4: b = 2 seems to cause itself to happen. Thus, simple compiler optimizations can lead to an apparent cyclic execution trace without a workable causal order.<br />\nWe must allow these cases, but also prevent cases where, if r1 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo mathvariant=\"normal\">≠</mo></mrow><annotation encoding=\"application/x-tex\">\\ne</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span></span></span></span> r2, r3 is assigned a value other than 1.<br />\nTo validate such an execution we would need a causal order that makes r1 == r2 == r3 == 2 a causally consistent execution of Figure 12. To see this behavior, we need a causal order over valid executions that would justify this behavior in an execution.<br />\nHow would we go about trying to construct a causal order to validate this behavior? In this case, we are trying to capture a potential behavior of the transformed program: the case where 4 happens first, then all of Thread 2, and finally 1 - 3. This would suggest { 4, 5, 6, 1, 2, 3 } as a potential causal order.<br />\nHowever, we cannot use this causal order assuming only Causality and Consistency. The prefix of 4 (b = 2) is empty, so all of the validated executions for which the empty set is a prefix (i.e., all validated executions) must allow the write 4 to occur. The problem is that 4 is not guaranteed to occur in all non-prescient executions; it only occurs whenever r1 and r2 see the same value. If we were able to exclude all executions in which r1 and r2 see different values, then we could use the causal order { 4, 5, 6, 1, 2, 3 }<br />\nIn short, compiler transformations can make certain executions (such as the ones in which 1 and 2 do not see the same value) impossible. This prohibition, in turn, can lead to additional executions that seem cyclic.<br />\nFor the purposes of showing that a prescient action x is justified, a set of behaviors that are not possible on a particular implementation of a JVM may be specified. This, in turn, allows other actions to be guaranteed and performed presciently, allowing for new behaviors.<br />\nIf we allowed arbitrary executions to be prohibited, we could conceivably, for example, prohibit all executions. We could then vacuously justify any action we liked, because it would occur in every execution. This sort of behavior is nonsensical; we therefore cannot allow arbitrary executions to be prohibited.<br />\nInstead, an execution can be prohibited only if it contains a read that could see multiple values, and there is an alternate execution that is not prohibited that contains that read, but sees a different value.<br />\nConsider prescient action x in an execution <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">⟨</mo><mi>S</mi><mo separator=\"true\">,</mo><mi>s</mi><mi>o</mi><mo separator=\"true\">,</mo><mover><mo stretchy=\"true\">→</mo><mpadded width=\"+0.6em\" lspace=\"0.3em\"><mrow><mi>h</mi><mi>d</mi></mrow></mpadded></mover><mo separator=\"true\">,</mo><mi>α</mi><mi>x</mi><mi>β</mi><mo stretchy=\"false\">⟩</mo></mrow><annotation encoding=\"application/x-tex\">⟨S, so,\\xrightarrow{hd}, \\alpha x \\beta⟩</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.3581079999999999em;vertical-align:-0.25em;\"></span><span class=\"mopen\">⟨</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">o</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel x-arrow\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1081079999999999em;\"><span style=\"top:-3.322em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight x-arrow-pad\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">h</span><span class=\"mord mathnormal mtight\">d</span></span></span></span><span class=\"svg-align\" style=\"top:-2.689em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"hide-tail\" style=\"height:0.522em;min-width:1.469em;\"><svg width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.01100000000000012em;\"><span></span></span></span></span></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span><span class=\"mclose\">⟩</span></span></span></span> we wish to justify, and the set of executions J of executions whose causal order starts with α. We allow the specification of a set of prohibited executions <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo>⊂</mo><mi>J</mi></mrow><annotation encoding=\"application/x-tex\">P \\subset J</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊂</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span></span></span></span>, and only require that x be allowed to occur in all executions in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>J</mi><mo>−</mo><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">J-P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span>.<br />\nFor each prohibited execution <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>E</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo>∈</mo><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">E\\rq \\in P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.790992em;vertical-align:-0.0391em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span>, we must identify a read r in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>E</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">E\\rq</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>, but not in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span></span></span></span>, that is allowed by the happens before constraint to see multiple writes. Assume that in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>E</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">E\\rq</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> the read r sees a write w. Then there must exist a different write <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>w</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">w\\rq</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> that could be seen by r in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>E</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">E\\rq</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> and an execution <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>E</mi><mrow><mo mathvariant=\"normal\">′</mo><mo mathvariant=\"normal\">′</mo></mrow></msup><mo>∈</mo><mi>J</mi><mo>−</mo><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">E\\rq\\rq \\in J-P</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.790992em;vertical-align:-0.0391em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span> such that</p>\n<ul>\n<li>r and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>w</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">w\\rq</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> occur in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>E</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">E\\rq</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>, and in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>E</mi><mrow><mo mathvariant=\"normal\">′</mo><mo mathvariant=\"normal\">′</mo></mrow></msup></mrow><annotation encoding=\"application/x-tex\">E\\rq\\rq</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>, the read r sees <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>w</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">w\\rq</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>.</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>E</mi><mrow><mo mathvariant=\"normal\">′</mo><mo mathvariant=\"normal\">′</mo></mrow></msup></mrow><annotation encoding=\"application/x-tex\">E\\rq\\rq</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> includes all of the actions that come before r in the causal order of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>E</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">E\\rq</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>.</li>\n</ul>\n<p><img data-src=\"https://s11.ax1x.com/2023/12/24/piHiLWj.png\" alt=\"piHiLWj.png\" /></p>\n<p>Note that since r represents a choice at which <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>E</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">E\\rq</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>E</mi><mrow><mo mathvariant=\"normal\">′</mo><mo mathvariant=\"normal\">′</mo></mrow></msup></mrow><annotation encoding=\"application/x-tex\">E\\rq\\rq</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> diverge, the remainder of their executions can be substantially different.<br />\nUsing prohibited executions, we can show that the execution in Figure 12 respects causal-ity. This can be done by prohibiting all executions where h1 and h2 do not return the same value. Execution traces where they do return the same value can be provided as alternate executions.</p>\n<h2 id=\"causality-model-summary-and-a-possible-weakening\"><a class=\"anchor\" href=\"#causality-model-summary-and-a-possible-weakening\">#</a> Causality Model Summary and a Possible Weakening</h2>\n<p>Figure 15 summarizes, using the informal notation used in this section, the strong causality model proposed for the Java Memory Model. However, the JSR-133 expert group is debating whether instead to adopt a weaker model (Figure 16) that would make fewer guarantees about the behavior of incorrectly synchronized programs and might allow for more compiler and other optimizations of Java programs. At the moment, we do not have a good handle on whether guarantees necessary for safety and defensive programming might be violated by the weaker model, or whether there are any compiler or architectural optimizations that would be forbidden by the stronger causality model. The expert group solicits feedback on this issue. The weak causality model allows the behavior shown in Figure 14, while this behavior is forbidden by the strong causality model.</p>\n",
            "tags": [
                "计算机科学",
                "Java",
                "模型规范",
                "计算机科学",
                "Java",
                "内存模型",
                "线程规范"
            ]
        },
        {
            "id": "https://rainrem.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/java/java%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E5%8F%8Avolatile%E5%85%B3%E9%94%AE%E5%AD%97%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/",
            "url": "https://rainrem.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/java/java%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E5%8F%8Avolatile%E5%85%B3%E9%94%AE%E5%AD%97%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/",
            "title": "Java内存模型及volatile关键字深入理解",
            "date_published": "2023-12-18T14:07:20.000Z",
            "content_html": "<blockquote>\n<p>本篇是对 <code>Java</code>  内存模型 ( <code>JMM</code> ) 及 <code>volatile</code>  关键字的深度记录，从而彻底理解 <code>JMM</code>  和 <code>volatile</code>  关键字的作用。</p>\n</blockquote>\n<h1 id=\"java内存区域与内存模型\"><a class=\"anchor\" href=\"#java内存区域与内存模型\">#</a> Java 内存区域与内存模型</h1>\n<h2 id=\"java内存区域\"><a class=\"anchor\" href=\"#java内存区域\">#</a> Java 内存区域</h2>\n<blockquote>\n<p><code>Java</code>  虚拟机在运行程序时会把自动管理的内存划分为以下几个区域，每个区域都有各自的用途以及创建和销毁的时机，其中蓝色部分代表的是所有线程共享的数据区域，绿色部分代表的是每个线程私有的数据区域。</p>\n</blockquote>\n<p><img data-src=\"https://s11.ax1x.com/2023/12/19/piIY4MT.png\" alt=\"piIY4MT.png\" /></p>\n<ul>\n<li><code>Method Area(方法区)</code> ：\n<ul>\n<li>方法区又被称为： <code>Non-Heap</code>  属于线程共享的内存区域，主要用于存储已被虚拟机加载的类信息、常量、静态变量、通过即时编译器编译后的代码等数据，根据 <code>JVM</code>  规定，当 <code>Method Area(方法区)</code>  无法满足内存分配需求时，将会抛出 <code>OutOfMemoryError</code>  错误，注意：在 <code>Method Area(方法区)</code>  中存在一个叫运行时常量池 <code>(Runtime Constant Pool)</code>  的区域，它的主要作用是存放编译器生成的各种字面量和符号引用，这些内容将在类加载后存放到运行时常量池中以便后续使用。</li>\n</ul>\n</li>\n<li><code>Java Heap(JVM堆)</code>\n<ul>\n<li><code>Java</code>  堆也属于线程共享内存区域，它在虚拟机启动时创建，是 <code>Java</code>  虚拟机所管理的内存中最大的一块，主要用于存放对象实例，几乎所有的对象实例都在这里进行内存分配，注意： <code>Java</code>  堆是垃圾收集器管理的主要区域，因此很多时候也被称为 <code>GC</code>  堆，如果在堆中没有内存完成实例分配并且堆无法再扩展时，将会抛出 <code>OutOfMemoryError</code>  错误。</li>\n</ul>\n</li>\n<li><code>Program Counter Register(程序计数器)</code>\n<ul>\n<li>程序计数器属于线程私有数据区域，它是一小块内存空间，主要代表当前线程所执行的字节码行号的指示器，字节码解释器工作时，通过改变这个计数器的值来选区下一条需要执行的字节码指令、分支、循环、跳转、异常处理、线程恢复等基础功能都依赖于这个计数器来完成。</li>\n</ul>\n</li>\n<li><code>Java Virtual Machine Stacks(虚拟机栈)</code>\n<ul>\n<li>虚拟机栈属于线程私有数据区域，它与线程同时创建，总数与线程相关联，它代表 <code>Java</code>  方法执行的内存模型，每个方法执行时都会创建一个栈帧来存储方法的变量表、操作数栈、动态链接、返回值、返回地址等信息，方法的调用到结束对应一个栈帧在虚拟机栈中的入栈和出栈过程。<br />\n<img data-src=\"https://s11.ax1x.com/2023/12/19/piIYvQK.png\" alt=\"piIYvQK.png\" /></li>\n</ul>\n</li>\n<li><code>Native Method Stacks(本地方法栈)</code>\n<ul>\n<li>本地方法栈属于线程私有数据区域，这部分主要与虚拟机用到的的 <code>Native</code>  方法有关，在一般情况下我们不需要关心此区域。</li>\n</ul>\n</li>\n</ul>\n<div class=\"note danger no-icon\">\n<p>注意： <code>Java</code>  内存区域和 <code>Java</code>  内存模型不是同一种概念，它们两种是属于不同层次的概念。因此 <code>Java</code>  内存区域和 <code>Java</code>  内存模型是完全不同的两个东西。</p>\n</div>\n<h2 id=\"java内存模型\"><a class=\"anchor\" href=\"#java内存模型\">#</a> Java 内存模型</h2>\n<blockquote>\n<p><code>Java</code>  内存模型又被称为 <code>JMM(Java Memory Model)</code> ，它是一种抽象概念，描述的是一组规则或规范，通过这组规范定义了程序中的各个变量 (其中包括：实例字段、静态字段、数组等) 的访问方式，由于 <code>JVM</code>  运行程序的实体是线程，而每个线程创建时 <code>JVM</code>  都会为其创建一个工作内存有时候也会被称为栈空间，用于存储线程私有数据，而 <code>Java</code>  内存模型中规定了所有变量都要存储在主内存中，主内存是共享内存区域，所有线程都可以进行访问，但线程对变量的操作 (读取赋值等操作) 必须在工作内存中进行才可以，首先会将变量从主内存拷贝到自己的工作内存空间中，然后对变量进行操作，操作完成后再将变量写回主内存，不能直接操作主内存中的变量，工作内存中存储着主内存中的变量副本数据，在前面说过，工作内存是每个线程的私有数据区域，因此不同的线程间无法访问对方的工作内存，线程间的通信必须通过主内存来完成，过程如下图：</p>\n</blockquote>\n<p><img data-src=\"https://s11.ax1x.com/2023/12/19/piop9xO.png\" alt=\"piop9xO.png\" /></p>\n<blockquote>\n<p>注意： <code>JMM</code>  与 <code>Java</code>  内存区域的划分是不同的概念层次，更恰当来说 <code>JMM</code>  描述的是一组规则，通过这组规则来控制程序中的各个变量在共享数据区域和私有数据区域的访问方式， <code>JMM</code>  是围绕原子性、有序性、可见性展开的。 <code>Java</code>  内存模型与 <code>Java</code>  内存区域唯一相似的是都存在共享和私有数据区域，在 <code>JMM</code>  中主内存属于共享数据区域，从某个程度上讲应该包括了堆和方法区，而工作内存和线程私有数据区域，从某个程度上讲应该包括程序计数器、虚拟机栈及本地方法栈。在某些地方我们会看到主内存会被描述为堆内存，工作内存被描述为线程栈，实际上它们表达的都是同一个含义， <code>JMM</code>  主内存和工作内存详细介绍如下：</p>\n</blockquote>\n<ul>\n<li>主内存：\n<ul>\n<li>其主要存储的是 <code>Java</code>  实例对象，所有线程创建的实例对象都存放在主内存中，不管该实例对象是成员变量还是局部变量，当然也包括共享的类信息、常量、静态变量，由于是共享数据区域，多条线程对同一个变量进行访问可能会发生线程安全问题。</li>\n</ul>\n</li>\n<li>工作内存：\n<ul>\n<li>其主要存储当前方法的所有本地变量信息 (包含从主内存中拷贝的变量副本)，每个线程只能访问自己的工作内存，即：线程中的本地变量对其它线程是不可见的，就算是两个线程执行同一段代码，它们也会在各自的工作内存中创建属于当前线程的本地变量，当然也包括字节码行号指示器和 <code>Native</code>  相关方法信息，由于工作内存是每个线程的私有数据，线程间无法互相访问，因此存储在工作内存的数据不存在线程安全问题。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"主内存与工作内存的数据存储类型\"><a class=\"anchor\" href=\"#主内存与工作内存的数据存储类型\">#</a> 主内存与工作内存的数据存储类型</h2>\n<blockquote>\n<p>在上面了解了主内存和工作内存后，下面将来看一下它们的数据存储类型及操作方式，根据 <code>Java</code>  虚拟机规范，对于一个实例对象中的成员方法而言，如果方法中包含本地变量是基本数据类型 <code>(byte、short、char、int、long、float、double、boolean)</code> ，将会直接存储在工作内存的栈帧结构中，倘若本地变量是引用类型，那么该变量的引用会存储在工作内存的栈帧中，而对象实例将存储在主内存的共享数据区域的堆中。</p>\n</blockquote>\n<blockquote>\n<p>但是对于实例对象的成员变量，不管它是基本数据类型或引用类型还是包装类型 <code>(Interger、Double)</code>  等，都会被存储到堆中，至于 <code>static</code>  静态变量以及类本身相关信息将会存储在主内存中。需要注意：在主内存中的实例对象可以被多线程共享，如果两个线程同时调用同一个对象的同一个方法时两条线程会将要操作的数据拷贝到自己的工作内存中，在执行完成后会写回到主内存从而实现数据修改操作。</p>\n</blockquote>\n<p><img data-src=\"https://s11.ax1x.com/2023/12/19/pio9O41.png\" alt=\"pio9O41.png\" /></p>\n<h1 id=\"java内存与硬件内存\"><a class=\"anchor\" href=\"#java内存与硬件内存\">#</a> Java 内存与硬件内存</h1>\n<h2 id=\"硬件内存架构\"><a class=\"anchor\" href=\"#硬件内存架构\">#</a> 硬件内存架构</h2>\n<p><img data-src=\"https://s11.ax1x.com/2023/12/20/pioiynO.png\" alt=\"pioiynO.png\" /></p>\n<blockquote>\n<p>上图为了方便理解，省去了南北桥并将三级缓存统称为 <code>CPU</code>  缓存，对于目前计算机而言，每个 <code>CPU</code>  都存在多个核心，多核指的是在一枚处理器中集成多个完整计算引擎 <code>(内核)</code> ，这样就可以支持多任务并行执行，从多线程角度来讲，每个线程都会映射到各个 <code>CPU</code>  核心中并行执行。</p>\n</blockquote>\n<blockquote>\n<p>在处理器内部有一组 <code>CPU</code>  寄存器，它是一个临时存放数据的空间，一般处理器都会从内存取数据到寄存器，然后对其进行处理，但由于内存的处理速度远低于 <code>CPU</code>  这就导致处理器在处理指令时往往花费很多时间在等待内存做准备工作，于是在寄存器和主内存间添加了 <code>CPU</code>  缓存， <code>CPU</code>  缓存很小但访问速度远比主内存快的多。</p>\n</blockquote>\n<blockquote>\n<p>如果处理器总是操作主内存中的同一地址数据，就很容易影响处理器执行速度，此时 <code>CPU</code>  缓存就可以把内存的数据暂时存起来，如果寄存器要取内存中的同一个位置的数据，就可直接从 <code>CPU</code>  缓存中取出，无需再跑到主内存中去取。</p>\n</blockquote>\n<blockquote>\n<p>注意：寄存器并不是每次数据都可以从缓存中取到，如果不是同一个内存地址中的数据，那么寄存器还必须得绕过缓存从内存中取数据，这种现象叫做缓存命中率，从缓存中可以取到数据就代表命中，则而反之就是从内存中取就代表没命中，缓存命中率的高低也会影响处理器执行效率，这就是 <code>CPU(处理器)</code> 、缓存、以及主内存的数据交互。</p>\n</blockquote>\n<blockquote>\n<p>总而言之当一个 <code>CPU</code>  需要访问主内存时，会先读取一部分主内存中的数据到 <code>CPU</code>  缓存，如果 <code>CPU</code>  缓存中存在需要的数据就会直接从缓存中获取，进而在读取 <code>CPU</code>  缓存到寄存器，当 <code>CPU</code>  需要写数据到主内存时，同样会先刷新寄存器中的数据到 <code>CPU</code>  缓存，然后再把数据刷新到主内存中。</p>\n</blockquote>\n<h2 id=\"线程与硬件处理器\"><a class=\"anchor\" href=\"#线程与硬件处理器\">#</a> 线程与硬件处理器</h2>\n<blockquote>\n<p><code>Java</code>  线程的实现是基于一对一的线程模型，所谓的一对一模型就是通过语言级别层面程序去间接调用系统内核的线程模型 (即我们使用 <code>Java</code>  线程时), 在 <code>Java</code>  虚拟机内部是转而调用当前操作系统的 <code>内核线程(Kernel-Level Thread,kLT)</code>  来完成当前任务，它是由操作系统 <code>内核(Kernel)</code>  支持的线程，这种线程是由操作系统内核来完成线程切换，内核通过操作调度器进而对线程执行调度，并将线程的任务映射到各个处理器上。</p>\n</blockquote>\n<blockquote>\n<p>每个内核线程可以被视为内核的一个分身，这也就是操作系统可以同时处理多任务的原因，由于我们编写的多线程程序属于语言层面，程序一般不会直接去调用内核线程，取而代之的是一种轻量级 <code>进程(Light Weight Process)</code> ，也就是所谓的线程，由于每个轻量级进程都会映射到一个内核线程，因此我们可以通过轻量级进程来调用内核线程，进而由操作系统内核将任务映射到各个处理器，这种轻量级进程与内核线程间的一对一关系就被称为一对一的线程模型。</p>\n</blockquote>\n<p><img data-src=\"https://s11.ax1x.com/2023/12/20/piojxQe.png\" alt=\"piojxQe.png\" /></p>\n<blockquote>\n<p>如上图所示，每个线程最终都会映射到 <code>CPU</code>  中进行处理，如果 <code>CPU</code>  存在多核那么一个 <code>CPU</code>  将可以并行执行多个线程任务。</p>\n</blockquote>\n<h2 id=\"内存模型与内存架构关系\"><a class=\"anchor\" href=\"#内存模型与内存架构关系\">#</a> 内存模型与内存架构关系</h2>\n<blockquote>\n<p>在了解了前面的硬件内存架构和 <code>Java</code>  内存模型及 <code>Java</code>  多线程的实现原理后，我们已经意识到多线程的执行最终都会映射到硬件处理器上进行执行，但 <code>Java</code>  内存模型和硬件内存架构并不完全一致，对于硬件内存来说只有寄存器、缓存、主内存的概念，并没有工作内存 (私有数据区域) 和主内存 (堆内存) 之分，也就是说 <code>Java</code>  内存模型的内存划分对硬件内存并没有任何影响，因为 <code>JMM</code>  只是一种抽象概念，是一组规则并不存在，不管是工作内存的数据还是主内存的数据，对于计算机硬件来讲都会存储在计算机主内存中，当然也有可能存储到 <code>CPU</code>  缓存或寄存器中，因此总体来讲 <code>Java</code>  内存模型和计算机硬件内存架构是一个相互交叉的关系，是一种抽象概念划分与真实物理硬件的交叉，对于 <code>Jav</code>  内存区域划分也是同样的道理。</p>\n</blockquote>\n<p><img data-src=\"https://s11.ax1x.com/2023/12/21/pioxUgS.png\" alt=\"pioxUgS.png\" /></p>\n<h1 id=\"指令重排\"><a class=\"anchor\" href=\"#指令重排\">#</a> 指令重排</h1>\n<blockquote>\n<p>指令重排是什么？简单来说就是操作系统在执行代码的时候并不一定按照你的代码顺序依次执行。</p>\n</blockquote>\n<ul>\n<li>计算机在执行程序时为了提高性能，编译器和处理器常常会对指令做重排序列操作，并分为以下三种方式：\n<ul>\n<li><code>编译器优化重排</code> ：编译器在不改变单线程程序的前提下，可以重新安排指令语句的执行顺序。</li>\n<li><code>指令并行重排</code> ：现代处理器采用了指令级并行技术来将多条指令重叠执行，如果不存在数据依赖性 (即：后面的执行语句不依赖于前面执行语句的结果)，处理器可以改变语句对应的机器指令的执行顺序。</li>\n<li><code>内存系统重排</code> ：由于处理器使用缓存和读写缓冲区，这使得加载和存储操作看上去就像是在乱序执行，因为三级缓存的存在，导致内存与缓存的数据同步存在时间差。</li>\n</ul>\n</li>\n<li><code>Java</code>  源代码会经历 <code>编译器优化重排</code> ➡️ <code>指令并行重排</code> ➡️ <code>内存系统重排</code> 的过程最终才变成操作系统可执行的指令顺序，另外指令重排序可以保证串行语义一致，但是没有义务保证多线程之间的语义一致，所以在多线程情况下，指令重排就会可能导致一些问题的发生。</li>\n<li>编译器和处理器的指令重排处理方式是不同的，对于编译器，通过禁止特定类型的编译器重排序的方式来禁止重排序。对于处理器，通过插入内存屏障 <code>(Memory Barrier又被称为内存栅栏或Memory Fence)</code>  的方式来禁止特定类型的处理器重排序，指令并行重排和内存系统重排都属于处理器级别的指令重排序。\n<ul>\n<li><code>Memory Barrier(内存屏障)</code> ：它是一种 <code>CPU</code>  指令，用来禁止处理器指令发生重排序 (像屏障一样)，从而保障指令执行的有序性，另外为了达到屏障效果，它也会使处理器写入、读取值之前将主内存的值写入高速缓存并清空无效队列，从而保证变量的可见性。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>CommandDisorder.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>synchronized_example</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: 指令重排示例代码</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2023-12-22 00:21</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * 指令重排测试</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CommandDisorder</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   * 当使用 volatile 关键词修饰变量时，则不会出现指令重排现象</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token comment\">/*volatile*/</span> <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> d <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   * 测试方式：一次开启两个线程，同时修改变量</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      a <span class=\"token operator\">=</span> b <span class=\"token operator\">=</span> c <span class=\"token operator\">=</span> d <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">// 指令重排，会先执行这行代码，导致 c = 0, d = 0</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        c <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token class-name\">Thread</span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">// 指令重排，会先执行这行代码，导致 c = 0, d = 0</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        b <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        d <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      t1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      t2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      t1<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      t2<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> d <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第%s次出现指令重排%n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        执行结果：</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                1</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                2</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                3</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                4</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                ...</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                56145</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                56146</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                56147</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                第 56148 次出现指令重排</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>上述代码就是用于测试指令重排会在什么时候发生，指令重排会在多少次后进行重排操作都是不确定的，在真实业务中想要避免指令重排请加上 <code>volatile</code>  关键字，来保证变量在线程间的可见性。</p>\n</blockquote>\n<h1 id=\"jmmjava-memory-model\"><a class=\"anchor\" href=\"#jmmjava-memory-model\">#</a> JMM(Java Memory Model)</h1>\n<h2 id=\"jmm到底是什么\"><a class=\"anchor\" href=\"#jmm到底是什么\">#</a> JMM 到底是什么？</h2>\n<blockquote>\n<p><code>Java</code>  是最早尝试提供内存模型的编程语言，由于早期内存模型存在一些缺陷 (例如非常容易削弱编译器的优化)，自 <code>Java 5</code>  开始， <code>Java</code>  开始使用新的内存模型 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5jcy51bWQuZWR1L35wdWdoL2phdmEvbWVtb3J5TW9kZWwvQ29tbXVuaXR5UmV2aWV3LnBkZg==\">《JSR-133：Java Memory Model and Thread Specification》</span>。一般来讲，编程语言也可以直接复用操作系统层面的内存模型，不过不同的操作系统内存模型是不同的。如果直接复用操作系统层面的内存模型，就可能会导致同样一套代码换了一个操作系统就无法执行了。 <code>Java</code>  语言是跨平台的，它需要自己提供一套内存模型以屏蔽系统差异。</p>\n</blockquote>\n<blockquote>\n<p>这只是 <code>JMM</code>  存在的其中一个原因，实际上对于 <code>Java</code>  来说，你可以把 <code>JMM</code>  看做是 <code>Java</code>  定义的并发编程相关的一组规范，除了抽象了线程和主内存之间的关系之外，其还规定了从 <code>Java</code>  源代码到 <code>CPU</code>  可执行命令的这个转化过程要遵守哪些和并发相关的原则和规范，其主要目的是为了简化多线程编程，增强程序的可移植性。</p>\n</blockquote>\n<blockquote>\n<p>为什么需要遵守并发相关的原则和规范，这是因为并发编程下像 <code>CPU</code>  多级缓存和指令重排这类设计可能会导致程序运行出现一些问题。比如指令重排就可能会让多线程程序的执行出现问题，为此 <code>JMM</code>  抽象了 <code>happens-before</code>  原则来解决指令重排问题。</p>\n</blockquote>\n<blockquote>\n<p><code>JMM</code>  简单来说就是定义了一些规范来解决这些问题，开发者可以利用这些规则更方便地开发多线程程序，对于 <code>Java</code>  开发者来说不需要深度了解底层原理也可以开发出并发安全的程序，使用并发相关的关键字如： <code>volatile</code> 、 <code>synchronized</code> 、 <code>Lock</code>  等，即可实现并发安全。</p>\n</blockquote>\n<h2 id=\"jmm存在的必要性\"><a class=\"anchor\" href=\"#jmm存在的必要性\">#</a> JMM 存在的必要性</h2>\n<blockquote>\n<p>在明白了 <code>Java</code>  内存区域和硬件内存架构及 <code>Java</code>  多线程实现原理与 <code>Java</code>  内存模型的具体关系后，来看 <code>Java</code>  内存模型存在的必要性，由于 <code>JVM</code>  运行程序的实体是线程，而每个线程创建时 <code>JVM</code>  都会为其创建一个工作内存，用于存储线程私有数据，线程与主内存中的变量操作必须通过工作内存间接完成，主要过程是将变量从主内存拷贝到每个线程各自的工作内存中，然后对变量进行操作，操作完成后再将变量写回主内存。</p>\n</blockquote>\n<blockquote>\n<p>如果两个线程同时对一个主内存中的实例对象变量进行操作就有可能诱发线程安全问题，请看下图，主内存中存在一个共享变量 <code>x</code> , 但现在有两个线程分别是 <code>A</code>  线程和 <code>B</code>  线程对该变量进行赋值操作 (如： <code>x = 100</code> ), <code>A</code>  和 <code>B</code>  每个线程各自的工作内存中都存在共享变量副本 <code>x</code> ，假如现在 <code>A</code>  线程想要修改 <code>x</code>  值为 <code>150</code> ，而 <code>B</code>  线程却要读取 <code>x</code>  的值，那么 <code>B</code>  线程读取到的值是 <code>A</code>  线程更新后的数据还是更新前的数据呢？这谁也不知道，有可能 <code>B</code>  线程读取到更新后的也有可能读取到更新前的数据，这是因为工作内存是每个线程私有数据区域，而 <code>A</code>  线程操作变量 <code>x</code>  时首先将变量从主内存拷贝一份到 <code>A</code>  线程的工作内存中，然后对其变量进行赋值操作等，等操作完成后再将变量 <code>x</code>  写回到主内存，对于 <code>B</code>  线程也是类似的，这样就有可能造成主内存与工作内存数据存在一致性问题。</p>\n</blockquote>\n<blockquote>\n<p>假设 <code>A</code>  线程修改完成后正在将数据写回主内存中，而 <code>B</code>  线程此时正在读取主内存，即：将 <code>x = 100</code>  拷贝到自己的工作内存中，这样 <code>B</code>  线程读取到的值就是 <code>x=100</code> , 但如果 <code>A</code>  线程已将 <code>x = 150</code>  写回到主内存后， <code>B</code>  线程才开始读取的话那么此时 <code>B</code>  线程读取到的就是 <code>x = 150</code> , 但到底是哪种情况会发生谁都不会知道，这就是所谓的线程安全问题。</p>\n</blockquote>\n<p><img data-src=\"https://s11.ax1x.com/2023/12/21/piTsRrd.png\" alt=\"piTsRrd.png\" /></p>\n<blockquote>\n<p>为了解决类似上述的问题 <code>JVM</code>  定义了一组规则，通过这组规则来决定一个线程对共享变量的写入何时对另一个线程可见，这组规则被称为 <code>Java</code>  内存模型 <code>(JMM)</code> , <code>JMM</code>  是围绕着程序执行的原子性、有序性、可见性展开的。</p>\n</blockquote>\n<h2 id=\"jmm的三种特性\"><a class=\"anchor\" href=\"#jmm的三种特性\">#</a> JMM 的三种特性</h2>\n<h3 id=\"原子性\"><a class=\"anchor\" href=\"#原子性\">#</a> 原子性</h3>\n<blockquote>\n<p>原子性是指一个操作是不可中断的，即使是在多线程环境下，一个操作一旦开始就不会被其它线程所影响，如：对一个静态变量 ( <code>private static int i = 0</code> ) 两条线程同时对它进行赋值操作，线程 <code>A</code>  赋值为 <code>100</code> ，线程 <code>B</code>  赋值为 <code>200</code> ，不管线程如何运行最终 <code>i</code>  的值要么是 <code>100</code>  要么是 <code>200</code> ，线程 <code>A</code>  和线程 <code>B</code>  之间的操作是没有任何干扰的，这就是原子性操作不可被中断的特点。</p>\n</blockquote>\n<blockquote>\n<p>但是对于 <code>32</code>  位系统来讲 <code>long</code>  类型和 <code>double</code>  类型数据它们读写并非原子性的，对于基本类型数据： <code>byte</code> 、 <code>short</code> 、 <code>int</code> 、 <code>float</code> 、 <code>boolean</code> 、 <code>char</code>  的读写是原子操作，也就是说两条线程同时对 <code>long</code>  类型或 <code>double</code>  类型的数据进行读写是会存在互相干扰的，因为对于 <code>32</code>  位虚拟机来说，每次原子读写是 <code>32</code>  位，而 <code>long</code>  和 <code>double</code>  则是 <code>64</code>  位的存储单元。</p>\n</blockquote>\n<blockquote>\n<p>这样就会导致一个线程在写时，操作完前 <code>32</code>  位的原子操作后，轮到 <code>B</code>  线程读取时，恰好只读到了后 <code>32</code>  位的数据，这样可能会读取到一个既非原值又不是线程修改值的变量，它可能就是半个变量的数值，即 <code>64</code>  位数据呗两个线程分成了两次读取。也不必太过担心至少目前的商用虚拟机中几乎把 <code>64</code>  位数据读写操作作为原子操作来执行。</p>\n</blockquote>\n<h3 id=\"可见性\"><a class=\"anchor\" href=\"#可见性\">#</a> 可见性</h3>\n<blockquote>\n<p>可见性是指当一个线程对共享变量进行了修改，那么另外的线程都是立即可以看到修改后的最新值，在 <code>Java</code>  中可以使用 <code>synchronized</code> 、 <code>volatile</code>  关键字、以及各种 <code>Lock</code>  实现可见性，如果我们将变量声明为 <code>volatile</code>  就代表我们将告诉 <code>JVM</code>  这个变量是共享数据且不稳定的，每次使用它都到主内存中进行读取。</p>\n</blockquote>\n<h3 id=\"有序性\"><a class=\"anchor\" href=\"#有序性\">#</a> 有序性</h3>\n<blockquote>\n<p>有序性是指对于单线程的执行代码，我们总是认为代码的执行是按照顺序依次执行的，毕竟对于单线程而言确实如此，但对于多线程环境则可能会出现乱序现象，因为程序编译成机器指令后可能会出现指令重排现象，重排后的指令与原指令的顺序未必一致，要明白在 <code>Java</code>  程序中，倘若在本线程内，所有操作都视为有序行为，如果是多线程环境下，一个线程中观察另外一个线程，所有操作都是无序的，前半句是代表单线程内保证串行语义执行的一致性，后半句代表指令重排现象和工作内存与主内存同步延迟现象。</p>\n</blockquote>\n<h2 id=\"happens-before\"><a class=\"anchor\" href=\"#happens-before\">#</a> happens-before</h2>\n<h3 id=\"happens-before什么是\"><a class=\"anchor\" href=\"#happens-before什么是\">#</a> happens-before 什么是</h3>\n<blockquote>\n<p>关于 <code>happens-before</code>  概念最早诞生于 <code>1978</code>  年由 <code>Leslie Lamport</code>  发表的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sYW1wb3J0LmF6dXJld2Vic2l0ZXMubmV0L3B1YnMvdGltZS1jbG9ja3MucGRm\">《Time，Clocks and the Ordering of Events in a Distributed System》</span>论文中，在这篇论文中 <code>Leslie Lamport</code>  提出了逻辑时钟的概念，这也成了第一个逻辑时钟算法。在分布式环境中，通过一系列规则来定义逻辑时钟的变化，从而能通过逻辑时钟来对分布式系统中的事件的先后顺序进行判断，逻辑时钟并不度量时间本身，仅区分事件发生的前后顺序，其本质就是定义了一种 <code>happens-before</code>  关系，简单了解一下即可。</p>\n</blockquote>\n<blockquote>\n<p><code>JSR 133</code>  引入了 <code>happens-before</code>  这个概念来描述两个操作之间的内存可见性，为什么需要 <code>happens-beffore</code>  原则？ <code>happens-before</code>  原则的诞生是为了程序员和编译器、处理器之间的平衡，程序员追求的是易于理解和编程的强内存模型，遵守规则编码即可。编译器和处理器追求的是较少约束的弱内存模型，让它们尽己所能地去优化性能，让性能最大化。</p>\n</blockquote>\n<ul>\n<li><code>happens-before</code>  原则设计思想非常简单：\n<ul>\n<li>1️⃣为了对编译器和处理器的约束尽可能少，只要不改变程序的执行结果 (单线程程序和正确执行的多线程程序)，编译器和处理器怎么进行重排序优化都行。</li>\n<li>2️⃣对于会改变程序执行结果的重排序， <code>JMM</code>  要求编译器和处理器必须禁止这种重排序。</li>\n</ul>\n</li>\n<li>下面的图来自于<span class=\"red\">《Java 并发编程的艺术》</span>中的一张 <code>JMM</code>  设计思想示意图。<br />\n<img data-src=\"https://s11.ax1x.com/2023/12/23/pi7UJNF.png\" alt=\"pi7UJNF.png\" /></li>\n<li><code>happens-before</code>  原则的定义：\n<ul>\n<li>如果一个操作 <code>happens-before</code>  另一个操作 (描述为第一个操作和第二个操作之间满足 <code>happens-before</code>  关系，那么我们就可以说第一个操作对于第二个操作一定是可见的)，那么第一个操作的执行结果将对第二个操作可见，并且第一个操作的执行顺序排在第二个操作之前。</li>\n<li>两个操作之间存在 <code>happens-before</code>  关系，并不意味着 <code>Java</code>  平台的具体实现必须要按照 <code>happens-before</code>  关系指定的顺序来执行。</li>\n<li>如果重排序之后的执行结果，与按 <code>happens-before</code>  关系来执行的结果一直，那么 <code>JMM</code>  也允许这样的重排序。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> userNum <span class=\"token operator\">=</span> <span class=\"token function\">getUserNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t<span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> teacherNum <span class=\"token operator\">=</span> <span class=\"token function\">getTeacherNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t <span class=\"token comment\">// 2</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> totalNum <span class=\"token operator\">=</span> userNum <span class=\"token operator\">+</span> teacherNum<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 3</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 1 happens-before 2</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 2 happens-before 3</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 1 happens-before 3</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   虽然 1 happens-before 2，但对 1 和 2 进行重排序不会影响代码的执行结果，所以 JMM 是允许编译器和处理器执行这种重排序的。但 1 和 2 必须是在 3 执行之前，也就是说 1,2 happens-before 3</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> */</span></pre></td></tr></table></figure></li>\n</ul>\n<blockquote>\n<p><code>happens-before</code>  原则表达的意义其实并不是一个操作发生在另外一个操作的前面，虽然这从程序员的角度上来讲也并无大碍。更准确地来说，它更想表达的意义是前一个操作的结果对于后一个操作是可见的，无论这两个操作是否在同一个线程里。</p>\n</blockquote>\n<h3 id=\"happens-before和jmm的关系\"><a class=\"anchor\" href=\"#happens-before和jmm的关系\">#</a> happens-before 和 JMM 的关系</h3>\n<blockquote>\n<p>下图来自于<span class=\"red\">《Java 并发编程的艺术》</span>中的一张图就可以非常好的解释清楚。</p>\n</blockquote>\n<p><img data-src=\"https://s11.ax1x.com/2023/12/23/pi7d8W4.png\" alt=\"pi7d8W4.png\" /></p>\n<h3 id=\"happens-before原则\"><a class=\"anchor\" href=\"#happens-before原则\">#</a> happens-before 原则</h3>\n<blockquote>\n<p>在程序开发中，仅靠 <code>synchronized</code>  和 <code>volatile</code>  关键字来保证原子性、可见性及有序性，那么编写并发程序可能会显得十分麻烦，幸运的是在 <code>Java</code>  内存模型中，提供了 <code>happens-before</code>  原则来辅助保证程序执行的原子性、可见性和有序性的问题，它是判断数据是否存在竞争、线程是否安全的依据。</p>\n</blockquote>\n<ul>\n<li><code>happens-before</code>  原则分为以下八种：\n<ul>\n<li><code>程序顺序原则</code> ：一个线程内，按照代码顺序，书写在前面的操作， <code>happens-before</code>  于书写在后面的操作，即：在一个线程内保证语义串行性，也就是按照代码顺序执行。</li>\n<li><code>锁规则</code> ：解锁 <code>(unlock)</code>  操作必然发生在后续的同一个锁的加锁 <code>(lock)</code>  之前，就是说如果对于一个锁解锁后再加锁，那么加锁的动作必须在解锁动作之后 (同一个锁)。</li>\n<li><code>volatile规则</code> ： <code>volatile</code>  变量的写，先发生于读，这保证了 <code>volatile</code>  变量的可见性，简单理解就是 <code>volatile</code>  变量在每次被线程访问时，都强迫从主内存中读取该变量的值，而当该变量发生变化时，又会强迫将最新的值刷新到主内存，在任何时刻不同的线程总是能看到该变量的最新值。</li>\n<li><code>线程启动规则</code> ：线程的 <code>start()</code>  方法先于它的每一个动作，即如果线程 <code>A</code>  在执行线程 <code>B</code>  的 <code>start()</code>  方法之前修改了关系变量的值，那么当线程 <code>B</code>  执行 <code>start()</code>  方法时，线程 <code>A</code>  对共享变量的修改对线程 <code>B</code>  可见。</li>\n<li><code>传递性</code> ： <code>A</code>  优先于 <code>B</code> ， <code>B</code>  优先于 <code>C</code> ，那么 <code>A</code>  必然先于 <code>C</code> 。</li>\n<li><code>线程终止规则</code> ：线程的所有操作先于线程的终结， <code>Thread.join()</code>  方法的作用是等待当前执行的线程终止，假设在线程 <code>B</code>  终止之前，修改了共享变量，线程 <code>A</code>  从线程 <code>B</code>  的 <code>join()</code>  方法成功返回后，线程 <code>B</code>  对共享变量的修改将对线程 <code>A</code>  可见。</li>\n<li><code>线程中断规则</code> ：对线程 <code>interrupt()</code>  方法的调用先行发生于被中断线程的代码检测到中断事件的发生，可以通过 <code>Thread.interrupted()</code>  方法检测线程是否中断。</li>\n<li><code>对象终结规则</code> ：对象的构造函数执行，结束先于 <code>finalize()</code>  方法</li>\n</ul>\n</li>\n<li>需要注意的是：如果两个操作不满足上述任意一个 <code>happens-before</code>  规则，那么这两个操作就没有顺序的保障， <code>JVM</code>  可以对这两个操作进行重排序。</li>\n<li>在上述中的八条原则无需手动添加任何同步手段使用关键字 <code>synchronized</code>  或 <code>volatile</code>  即可达到效果。</li>\n</ul>\n<h1 id=\"关于volatile关键字\"><a class=\"anchor\" href=\"#关于volatile关键字\">#</a> 关于 volatile 关键字</h1>\n<h2 id=\"volatile内存语义\"><a class=\"anchor\" href=\"#volatile内存语义\">#</a> volatile 内存语义</h2>\n<ul>\n<li><code>volatile</code>  关键字在并发编程中很常见，但也容易被滥用，现在我们将来深入了解一下 <code>volatile</code>  关键字的语义， <code>volatile</code>  是 <code>Java</code>  虚拟机提供的轻量级同步机制，主要有如下两个作用：\n<ul>\n<li>禁止指令重排序优化。</li>\n<li>保证被 <code>volatile</code>  修饰的共享变量对所有线程总是可见的，也就是当一个线程修改了一个被 <code>volatile</code>  关键字所修饰的共享变量的值，新值总是可以被其它线程所看到。</li>\n</ul>\n</li>\n<li>当写一个 <code>volatile</code>  变量时， <code>JMM</code>  会把该线程对应的本地内存中的共享变量值立即刷新回主内存中。</li>\n<li>当读一个 <code>volatile</code>  变量时， <code>JMM</code>  会把该线程对应的本地内存设置为无效，重新回到主内存中读取最新共享变量。</li>\n</ul>\n<h2 id=\"volatile可见性\"><a class=\"anchor\" href=\"#volatile可见性\">#</a> volatile 可见性</h2>\n<blockquote>\n<p>关于 <code>volatile</code>  的可见性作用，我们必须意识到被 <code>volatile</code>  关键字所修饰的变量对所有线程总是立即可见的，对 <code>volatile</code>  变量的所有写操作总是能立刻反应到其它线程中，但是对于 <code>volatile</code>  变量运算操作在多线程环境下并不保证安全性，代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>VolatileVisibility.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>synchronized_example</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: volition 的可见性代码示例</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2023-12-23 16:38</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">VolatileVisibility</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">increase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">VolatileVisibility</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">VolatileVisibility</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        t1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        t2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        t1<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        t2<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i = \"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        执行结果：i = 1140057</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token function\">increase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>如上述代码所示，共享变量 <code>i</code>  的任何改变都会立马反应到其它线程中，但是如果此时存在多条线程同时调用 <code>increase()</code>  方法的话，此时就会出现线程安全问题，毕竟 <code>i++</code>  操作并不是原子性，该操作是先读取值然后写回一个新值，相当于在原来的基础上 <code>+1</code>  分为两步来完成。</p>\n</blockquote>\n<blockquote>\n<p>如果第二个线程在第一个线程读取旧值和写回新值期间读取 <code>i</code>  的域值，那么第二个线程就会与第一个线程一起看到同一个值，并执行相同值的 <code>+1</code>  操作，这也就造成了线程安全问题。</p>\n</blockquote>\n<blockquote>\n<p>因此对于 <code>increase()</code>  方法必须使用 <code>synchronized</code>  来修饰，以确保证线程安全，需要注意的一点是一旦使用 <code>synchronized</code>  修饰方法后，由于 <code>synchronized</code>  本身就具备与 <code>volatile</code>  相同特性 (可见性)，因此在这种情况下就可以省去 <code>volatile</code>  关键字了。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>VolatileVisibility.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>synchronized_example</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: volition 的可见性代码示例</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2023-12-23 16:38</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">VolatileVisibility</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">increase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>       i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">VolatileVisibility</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token class-name\">Thread</span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">VolatileVisibility</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    t1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    t2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    t1<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    t2<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i = \"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        执行结果：i = 2000000</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token function\">increase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>下方代码使用 <code>volatile</code>  修饰变量达到线程安全目的，代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>synchronized_example</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description:</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2023-12-23 20:49</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">VolatileSafe</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"线程停止，死循环被打开\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                    <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"修改 flag 为\"</span> <span class=\"token operator\">+</span> flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>         使用 volatile 的执行结果：</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>         Thread-0 线程停止，死循环被打开</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>         Thread-1 修改 flag 为 false</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      --------------------------------</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>         不使用 volatile 的执行结果：</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>         Thread-1 修改 flag 为 false</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>在上述代码中使用 <code>volatile</code>  和不使用 <code>volatile</code>  关键字的结果显然不同，这也就表明了使用 <code>volatile</code>  关键字来修饰变量确实可以让其它线程所看到修改的结果，因此可以通过使用 <code>volatile</code>  关键字来达到线程安全目的。</p>\n</blockquote>\n<blockquote>\n<p>那么 <code>JMM</code>  是如何实现让 <code>volatile</code>  变量对其它线程立即可见的呢？当写一个 <code>volatile</code>  变量时 <code>JMM</code>  会把该线程对应的工作内存中的共享变量值刷新到主内存中，当读取一个 <code>volatile</code>  变量时， <code>JMM</code>  会把该线程对应的工作内存置为无效，那么该线程将只能从主内存中重新读取共享变量， <code>volatile</code>  变量正是通过这种 <code>写/读</code> 方式实现对其它线程可见 (但其内存语义实现则是通过内存屏障)。</p>\n</blockquote>\n<h2 id=\"volatile禁止重排\"><a class=\"anchor\" href=\"#volatile禁止重排\">#</a> volatile 禁止重排</h2>\n<blockquote>\n<p><code>volatile</code>  关键字另一个作用就是禁止指令重排优化，从而避免多线程环境下程序出现乱序执行的现象，关于指令重排优化在前面提到过，这里主要简单说明一下 <code>volatile</code>  是如何实现禁止指令重排优化的。</p>\n</blockquote>\n<blockquote>\n<p>内存屏障 (Memory Barrier) 又被称为内存栅栏，它是 <code>CPU</code>  指令，它的作用有两个，一是保证特定操作的执行顺序，二是保证某些变量的内存可见性 ( <code>volatile</code>  的内存可见性就是利用该特性实现的)。</p>\n</blockquote>\n<blockquote>\n<p>由于编译器和处理器都能执行指令重排优化，如果在指令间插入一条 <code>Memory Barrier</code>  则会告诉编译器和 <code>CPU</code> ，不管什么指令都不能和这条 <code>Memory Barrier</code>  指令重排序，也就是说通过插入内存屏障禁止在内存屏障前后的指令执行重排序优化。</p>\n</blockquote>\n<blockquote>\n<p><code>Memory Barrier</code>  的另一个作用是强制刷出各种 <code>CPU</code>  缓存数据，因此任何 <code>CPU</code>  上的线程都能读取到这些数据的最新版本，总之 <code>volatile</code>  变量正是通过内存屏障实现其在内存中的可见性和禁止重排优化。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>DoubleCheckLock.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>synchronized_example</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: 双重检查锁</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2023-12-23 23:29</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DoubleCheckLock</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">DoubleCheckLock</span> instance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">DoubleCheckLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">DoubleCheckLock</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 第一次检测</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>instance <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token comment\">// 同步</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">DoubleCheckLock</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>instance <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>          <span class=\"token comment\">// 多线程环境下可能会出现问题的地方</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>          instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DoubleCheckLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>上述代码是一个经典的单例双重检查锁的代码，这段代码在单线程环境下并没什么问题，但如果是在多线程情况下就可能出现线程安全问题，原因在于某一个线程执行到第一次检测，读取到 <code>instance</code>  不为 <code>null</code>  时， <code>instance</code>  的引用对象可能没有完成初始化，因为 <code>instance = new DoubleCheckLock()</code>  可以分为以下三步完成 (伪代码)。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>memory <span class=\"token operator\">=</span> <span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 第一步：分配对象内存空间</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">instance</span><span class=\"token punctuation\">(</span>memory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 第二步：初始化对象</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>instance <span class=\"token operator\">=</span> memory<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 第三步：设置 instance 指向刚分配的内存地址，此时 instance != null</span></pre></td></tr></table></figure><blockquote>\n<p>由于第二步和第三步之间可能会重排序，重排序后如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>memory <span class=\"token operator\">=</span> <span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 第一步：分配对象内存空间</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>instance <span class=\"token operator\">=</span> memory<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 第三步：设置 instance 指向刚分配的内存地址，此时 instance != null</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">instance</span><span class=\"token punctuation\">(</span>memory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 第二步：初始化对象</span></pre></td></tr></table></figure><blockquote>\n<p>由于第二步和第三步不存在数据依赖关系，而且无论重排前还是重排后程序的执行结果在单线程中并没有任何改变，因此这种重排优化是允许的。但是指令重排只会保证串行语义执行的一致性 (单线程)，但并不会关心多线程间的语义一致性，所以当一条线程访问 <code>instance</code>  不为 <code>null</code>  时，由于 <code>instance</code>  实例未必初始化完成，也就造成了线程安全问题，此时我们就可以使用 <code>volatile</code>  关键字来禁止 <code>instance</code>  变量被执行指令重排优化。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 使用 volatile 来禁止指令重排优化</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">DoubleCheckLock</span> instance<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>最后我们应该清除知道 <code>JMM</code>  就是一组规则，这组规则意在解决在并发编程可能出现的线程安全问题，并提供了内置解决方案 <code>(happens-before原则)</code>  及其外部可以使用的同步手段： <code>synchronized</code> 、 <code>volatile</code>  等，确保了程序执行在多线程中的应有的原子性、可见性和有序性。</p>\n</blockquote>\n",
            "tags": [
                "计算机科学",
                "Java",
                "Java深入理解",
                "计算机科学",
                "Java",
                "内存模型",
                "并发",
                "JMM",
                "volatile"
            ]
        },
        {
            "id": "https://rainrem.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/java/java%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/Java%E5%B9%B6%E5%8F%91%E4%B9%8Bsynchronized%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/",
            "url": "https://rainrem.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/java/java%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/Java%E5%B9%B6%E5%8F%91%E4%B9%8Bsynchronized%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/",
            "title": "Java并发之synchronized深入理解",
            "date_published": "2023-12-15T14:27:30.000Z",
            "content_html": "<blockquote>\n<p>本篇章是对 <code>Java</code>  并发中的 <code>synchronized</code>  关键字进行深入探索。<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vUmFpblNhdWNlL2phdmEtc3luY2hyb25pemVkLWRlbW8=\">🚀本篇章代码 Demo</span></p>\n</blockquote>\n<h1 id=\"序言\"><a class=\"anchor\" href=\"#序言\">#</a> 序言</h1>\n<ul>\n<li>线程安全是并发编程中的重要关注点，应该注意的是，造成线程安全问题的主要原因有以下两点：\n<ul>\n<li>1️⃣ 是存在共享数据 (临界资源)。</li>\n<li>2️⃣ 存在多条线程共同操作共享数据。</li>\n</ul>\n</li>\n<li>为了解决这个问题，我们需要这样一个方案，当存在多个线程操作共享数据时，需要保证同一个时刻有且只有一个线程在操作共享数据，其它线程必须等到该线程处理完数据后再进行。</li>\n<li>这种方式的名称叫 <code>互斥锁</code> ，即能达到互斥访问目的的锁，也就说当一个共享数据被当前正在访问的线程加上 <code>互斥锁</code> 后，在同一个时刻，其它线程只能处于等待状态，直到当前线程处理完数据释放该锁。</li>\n<li>在 <code>Java</code>  中关键字 <code>synchronized</code>  可以保证在同一个时刻，只有一个线程可以执行某个方法或者某个代码块 (主要是对方法或者代码块中存在共享数据的操作)。</li>\n<li>同时我们还应该注意到 <code>synchronized</code>  另外一个重要的作用，那就是 <code>synchronized</code>  可以保证一个线程的变化 (共享数据的变化) 被其它线程所看到 (保证可见性，完全可以替代 <code>volatile</code>  关键字)，这点也是很重要。</li>\n</ul>\n<h1 id=\"synchronized的应用\"><a class=\"anchor\" href=\"#synchronized的应用\">#</a> synchronized 的应用</h1>\n<ul>\n<li><code>synchronized</code>  关键字主要有以下 <code>3</code>  种应用方式：\n<ul>\n<li><a href=\"#synchronized%E4%BF%AE%E9%A5%B0%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95\">修饰实例方法</a>：作用于当前实例加锁，进入同步代码前要获得当前实例的锁。</li>\n<li><a href=\"#synchronized%E4%BF%AE%E9%A5%B0%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95\">修饰静态方法</a>：作用于当前类对象加锁，进入同步代码前要获得当前类对象的锁。</li>\n<li><a href=\"#synchronized%E5%90%8C%E6%AD%A5%E4%BB%A3%E7%A0%81%E5%9D%97\">修饰代码块</a>：指定加锁对象，对给定对象加锁，进入同步代码库前要获得给定对象的锁。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"synchronized修饰实例方法\"><a class=\"anchor\" href=\"#synchronized修饰实例方法\">#</a> synchronized 修饰实例方法</h2>\n<blockquote>\n<p>所谓实例对象锁就是用 <code>synchronized</code>  修饰实例对象中的实例方法 (实例方法不包括静态方法)，代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>synchronized_example</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: synchronized 修饰实例方法</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2023-12-15 23:02</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SynchronizedData</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * 共享资源 (临界资源)</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token function\">incremental</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     * 递增方法</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">incremental</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">SynchronizedData</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SynchronizedData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token comment\">// 开始</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        t1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        t2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        t1<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        t2<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>           执行结果: 2000000</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>在上述代码中，我们开启了两个线程操作同一个共享资源 (即：变量 <code>i</code> ), 由于 <code>i++</code>  并不是原子性操作，该操作是先读取值然后写回一个新值，相当于原来的值加上 <code>1</code> ，分两步完成。如果第二个线程在第一个线程读取旧值和写会新值期间读取 <code>i</code>  的阈值，那么第二个线程就会与第一个线程一起看到同一个值，并执行相同值的加 <code>1</code>  操作，这也就造成了线程安全失败。因此对于 <code>incremental()</code>  方法必须使用 <code>synchronized</code>  来修饰，以便保证线程安全。此时我们应该注意到 <code>synchronized</code>  修饰的是实例方法 <code>incremental()</code> , 在这样的情况下，当前线程的锁便是实例对象 <code>incremental</code> 。</p>\n</blockquote>\n<blockquote>\n<p>注意：在 <code>Java</code>  中线程同步锁可以是任意对象，从代码执行结果来看确实是正确的，倘若我们没有使用 <code>synchronized</code>  关键字，其最终执行结果大概率是小于 <code>2000000</code>  的，这便是 <code>synchronized</code>  关键字的作用，这里我们还需要意识到，当一个线程正在访问一个对象的 <code>synchronized</code>  实例方法时，那么其它线程不能访问该对象的其它 <code>synchronized</code>  方法，毕竟一个对象只有一把锁，当一个线程获取了该对象的锁之后，其它线程将无法再次获取该对象的锁，所以无法访问该对象的其它 <code>synchronized</code>  实例方法，但是其它线程还是可以访问该实例对象的其它非 <code>synchronized</code>  方法。</p>\n</blockquote>\n<blockquote>\n<p>如果：一个线程 <code>A</code>  需要访问实例对象 <code>object1</code>  的 <code>synchronized</code>  的 <code>a1</code>  方法 (当前对象锁是 <code>object1</code> )，另一个线程 <code>B</code>  需要访问实例对象 <code>object2</code>  的 <code>synchronized</code>  的 <code>a2</code>  方法 (当前对象锁是 <code>object2</code> )，这样是允许的，以为两个实例对象的锁并不相同，此时人工两个线程操作数据并非共享数据，此时线程是安全有保障的，遗憾的是如果两个线程操作的是共享数据那么线程安全就很有可能无法保证，下面是代码示例：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>SynchronizedDataError.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>synchronized_example</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: 非线程安全使用共享数据</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2023-12-15 23:02</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SynchronizedDataError</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * 共享资源 (临界资源)</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token function\">incremental</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     * 递增方法</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">incremental</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">// 创建新实例</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">SynchronizedDataError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">// 创建新实例</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t2<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">SynchronizedDataError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">// 开始线程</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        t1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        t2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\">//join 含义：当前线程 A 等待 thread 线程终止之后才能从 thread.join () 返回</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        t1<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        t2<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>           执行结果: 1658464</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>           每次执行的数值是随机的并不是固定的数值，这就是非线程安全操作共享数据</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>上述代码与前面的不同的是我们创建了两个新实例的 <code>SynchronizedDataError</code>  线程对象，然后启动两个不同的线程对共享数据变量 <code>i</code>  进行操作，遗憾的是执行结果不是期望的 <code>2000000</code> ，因此上述代码犯了严重的错误，虽然我们使用 <code>synchronized</code>  修饰了 <code>incremental()</code>  方法，但是创建的是两个不同的实例对象，这也就以为着存在着两个不同实例的对象锁，因此 <code>t1</code>  和 <code>t2</code>  都会进入各自的对象锁中，就是说 <code>t1</code>  和 <code>t2</code>  线程使用的是不同的锁，因而无法保证线程安全，解决这个问题的方式是将 <code>synchronized</code>  作用于静态的 <code>incremental()</code>  方法上，这样一来的话，对象锁就是当前类对象，由于无论创建多少个实例对象，但对于类对象拥有只有一个，所有在这样的情况下对象锁就是唯一的，修改后的代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>SynchronizedDataError.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>synchronized_example</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: 线程安全使用共享数据</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2023-12-15 23:02</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SynchronizedDataError</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * 共享资源 (临界资源)</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token function\">incremental</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     * 递增方法</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">incremental</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">// 创建新实例</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">SynchronizedDataError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">// 创建新实例</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t2<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">SynchronizedDataError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">// 开始线程</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        t1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        t2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\">//join 含义：当前线程 A 等待 thread 线程终止之后才能从 thread.join () 返回</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        t1<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        t2<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>           执行结果: 2000000</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>           将 incremental () 方法修饰为 static 后就可以做到线程安全的了</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"synchronized修饰静态方法\"><a class=\"anchor\" href=\"#synchronized修饰静态方法\">#</a> synchronized 修饰静态方法</h2>\n<blockquote>\n<p>当 <code>synchronized</code>  作用于静态方法时，其锁就是当前类的 <code>class</code>  对象锁，由于静态成员不专属于任何一个实例对象，属于类成员，因此通过 <code>class</code>  对象锁就可以控制静态成员的并发操作。需要注意的是如果：一个线程 <code>A</code>  调用一个实例对象的非 <code>static synchronized</code>  方法，而线程 <code>B</code>  需要调用这个实例对象所属类的静态 <code>synchronized</code>  方法，这样是允许的，不会发生互斥现象，因为访问静态 <code>synchronized</code>  方法占用的锁是当前类的 <code>class</code>  对象，而访问非静态 <code>synchronized</code>  方法占用的锁是当前实例对象锁，示例代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>SynchronizedDataClass.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>synchronized_example</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: synchronized 修饰静态方法</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2023-12-16 12:33</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SynchronizedDataClass</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * 共享资源 (临界资源)</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token function\">staticIncremental</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     * 作用于静态方法，锁是当前 class 对象，也就是</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     * SynchronizedDataClass 类对应的 class 对象</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">staticIncremental</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>     * 非静态，访问时锁不一样不会发生互斥</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">incremental</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">//new 新实例</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">SynchronizedDataClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">SynchronizedDataClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\">// 启动线程</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        t1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        t2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        t1<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        t2<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            执行结果：2000000</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>由于 <code>synchronized</code>  关键字修饰的是静态 <code>staticIncremental()</code>  方法，与修饰实例方法不同的是，其锁对象是当前类的 <code>class</code>  对象，注意代码中的 <code>incremental()</code>  方法是实例方法，其对象锁是当前实例对象，如果别的线程调用该方法，将不会产生互斥现象，毕竟锁对象不同，但我们应该意识到这种情况下可能会发现线程安全问题 (操作共享资源)。</p>\n</blockquote>\n<h2 id=\"synchronized同步代码块\"><a class=\"anchor\" href=\"#synchronized同步代码块\">#</a> synchronized 同步代码块</h2>\n<blockquote>\n<p>除了使用 <code>synchronized</code>  关键字修饰实例方法和静态方法外，还可以使用同步代码块，在某些情况下，我们编写的方法体可能比较大，同时存在一些比较耗时的操作，而需要同步的代码又只有一小部分，如果直接对整个方法进行同步操作，就会非常耗时，这种情况我们就可以使用同步代码块的方式对需要同步的代码进行包裹，这样就无需对整个方法进行同步操作了，示例代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>SynchronizedCodeBlock.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>synchronized_example</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: synchronized 同步代码块</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2023-12-15 23:02</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SynchronizedCodeBlock</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">SynchronizedCodeBlock</span> INSTANCE <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SynchronizedCodeBlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * 共享资源 (临界资源)</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     * synchronized 同步代码块，锁对象是 INSTANCE</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>INSTANCE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>INSTANCE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>INSTANCE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">// 开始</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        t1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        t2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        t1<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        t2<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>           执行结果: 2000000</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>从上面代码中可以看出，将 <code>synchronized</code>  作用于一个给定的实例对象 <code>INSTANCE</code> ，即当前实例对象就是锁对象，，每次当线程进入 <code>synchronized</code>  包裹的代码块时就会要求当前线程持有 <code>INSTANCE</code>  实例的对象锁，如果当前有其它线程持有该对象锁，那么新到的线程就必须等待，这样就保证了每次只有一个线程执行 <code>i++</code>  操作。当然除了 <code>INSTANCE</code>  作为对象外，我们还可以使用 <code>this</code>  对象 (代表当前实例) 或者当前类的 <code>class</code>  对象作为锁，示例代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>SynchronizedCodeBlockThis.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>synchronized_example</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: synchronized 同步代码块 this</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2023-12-15 23:02</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SynchronizedCodeBlockThis</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * 共享资源 (临界资源)</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">//this: 当前实例对象锁</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">//class 对象锁</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SynchronizedCodeBlockThis</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>了解完了 <code>synchronized</code>  的基本含义和使用方式后，下面将进一步深入 <code>synchronized</code>  的底层实现原理。</p>\n</blockquote>\n<h1 id=\"synchronized底层语义\"><a class=\"anchor\" href=\"#synchronized底层语义\">#</a> synchronized 底层语义</h1>\n<ul>\n<li><code>Java</code>  虚拟机中的同步 ( <code>Synchronization</code> ) 基于进入和退出管程 ( <code>Monitor</code> ) 对象实现，无论是显示同步还是隐式同步都是如此。\n<ul>\n<li>显示同步是指有明确的 <code>monitorenter</code>  和 <code>monitorexit</code>  指令，即：同步代码块。</li>\n</ul>\n</li>\n<li>在 <code>Java</code>  中， <code>synchronized</code>  用的最多的地方就是被 <code>synchronized</code>  修饰的同步方法。</li>\n<li>同步方法并不是由 <code>monitorenter</code>  和 <code>monitorexit</code>  指令来实现同步的，而是由方法调用指令读取运行时常量池中的 <code>ACC_SYNCHRONIZED</code>  标志来隐式实现的。</li>\n<li>下面先来了解一下 <code>Java</code>  对象头概念，这对理解 <code>synchronized</code>  实现原理很重要。</li>\n</ul>\n<h1 id=\"java对象头与monitor\"><a class=\"anchor\" href=\"#java对象头与monitor\">#</a> Java 对象头与 Monitor</h1>\n<ul>\n<li><code>JVM</code>  中对象在内存里分布为三块区域：对象头、实例数据、对齐填充。\n<ul>\n<li><code>对象头</code> ：<a href=\"#%E5%AF%B9%E8%B1%A1%E5%A4%B4%E9%87%8D%E7%82%B9%E5%88%86%E6%9E%90\">对象头重点分析</a>。</li>\n<li><code>实例数据</code> ：这部分是对象真正存储的有效信息，也是在程序代码中所定义的各种类型的字段内容，无论是从父类继承下来的，还是在子类中定义的，都需要记录起来。</li>\n<li><code>对齐填充</code> ：由于虚拟机要求对象起始地址必须是 <code>8</code>  字节的整数倍，对齐填充并不是必须存在的，仅仅是为了字节对齐。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"对象头重点分析\"><a class=\"anchor\" href=\"#对象头重点分析\">#</a> 对象头重点分析</h2>\n<blockquote>\n<p>对象头它是实现 <code>synchronized</code>  锁对象的基础，一般而言 <code>synchronized</code>  使用的锁对象是存储在 <code>Java</code>  对象头中的， <code>JVM</code>  采用两个字来存储对象头，其主要结构是由 <code>Mark Word</code>  和 <code>Class Metadata Address</code>  组成，如果对象是数组则会分配三个字，多出来的一个字用于记录数组长度，结构说明请看下表：</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">虚拟机位数</th>\n<th style=\"text-align:center\">对象头结构</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>32/64bit</code></td>\n<td style=\"text-align:center\"><code>Mark Word</code></td>\n<td style=\"text-align:center\">存储对象的 <code>hashCode</code> 、锁信息或分代年龄或 <code>GC</code>  标志等信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>32/64bit</code></td>\n<td style=\"text-align:center\"><code>Class Metadata Address</code></td>\n<td style=\"text-align:center\">类型指针指向对象的类元数据， <code>JVM</code>  通过这个指针确定该对象是哪个类的实例</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p><code>Mark Word</code>  在默认情况下存储着对象的 <code>hashCode</code>   <code>分代年龄</code>   <code>锁状态标记</code> 等，下表是 <code>32</code>  位 <code>JVM</code>  的 <code>Mark Word</code>  默认存储结构。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">锁状态</th>\n<th style=\"text-align:center\">25bit</th>\n<th style=\"text-align:center\">4bit</th>\n<th style=\"text-align:center\">1bit 是否是偏向锁</th>\n<th style=\"text-align:center\">2bit 锁标志位</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">无锁状态</td>\n<td style=\"text-align:center\">对象 <code>hashCode</code></td>\n<td style=\"text-align:center\">对象分代年龄</td>\n<td style=\"text-align:center\"><code>0</code></td>\n<td style=\"text-align:center\"><code>01</code></td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>由于对象头信息是对象自身定义的数据没有关系的额外储存成本，因此考虑到 <code>JVM</code>  的空间效率， <code>Mark Word</code>  被设计成一个非固定的数据结构，以便存储更多有效数据，它会根据对象本身状态来复用自己的存储空间，如： <code>32</code>  位的 <code>JVM</code>  除了上述列出的 <code>Mark Word</code>  默认存储结构外，还有可能变为如下结构：</p>\n</blockquote>\n<p><img data-src=\"https://s11.ax1x.com/2023/12/16/pi4XAqP.png\" alt=\"pi4XAqP.png\" /></p>\n<blockquote>\n<p>轻量级锁和偏向锁是 <code>Java 6</code>  对 <code>synchronized</code>  进行优化后新增的，在这我们先分析重量级锁也就是 <code>synchronized</code>  的对象锁，锁状态标记为 <code>10</code>  其中指针指向的是 <code>monitor</code>  对象 (管程或监视器锁) 的起始地址。每个对象都存在着一个 <code>monitor</code>  与之关联，对象与其 <code>monitor</code>  之间的关系存在多种实现方式。</p>\n</blockquote>\n<blockquote>\n<p>如： <code>monitor</code>  可以与对象一起创建销毁或当线程试图获取对象锁时自动生成，但当一个 <code>monitor</code>  被某个线程持有后，它便处于锁定状态。在 <code>Java</code>  虚拟机 ( <code>HotSpot</code> ) 中， <code>monitor</code>  是由 <code>ObjectMonitor</code>  来实现的，其主要数据结构如下，位于 <code>HotSpot</code>  虚拟机源码 <code>ObjectMonitor.hpp</code>  文件，由 <code>C++</code>  实现。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>ObjectMonitor.hpp</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ObjectMonitor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    _header       <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    _count        <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 记录个数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    _waiters      <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    _recursions   <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 线程的重入次数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    _object       <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    _owner        <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 标识拥有该 monitor 的线程</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    _WaitSet      <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 处于 wait 状态的线程，会被加入到_WaitSet</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    _WaitSetLock  <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    _Responsible  <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    _succ         <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    _cxq          <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    FreeNext      <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    _EntryList    <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 处于等待锁 block 状态的线程，会被加入到该列表</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    _SpinFreq     <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    _SpinClock    <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    OwnerIsThread <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    _previous_owner_tid <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>在 <code>ObjectMonitor</code>  中有两个队列分别是 <code>_WaitSet</code>  和 <code>_EntryList</code> , 用于保存 <code>ObjectWaiter</code>  对象列表，而每个等待锁的线程都会被封装成 <code>ObjectWaiter</code>  对象， <code>_owner</code>  指向持有 <code>ObjectMonitor</code>  对象的线程，当多个线程同时访问一段同步代码时，首先会进入 <code>_EntryList</code>  集合，当线程获取到对象的 <code>monitor</code>  后将进入 <code>_owner</code>  区域并把 <code>monitor</code>  中的 <code>_owner</code>  变量设置为当前线程，同时 <code>monitor</code>  中的计数器 <code>count</code>  将会 <code>+1</code> ，若线程调用 <code>wait()</code>  方法，将释放当前持有的 <code>monitor</code> , <code>_owner</code>  变量恢复为 <code>Null</code>  然后 <code>count</code>  会 <code>-1</code> ，该线程将会进入 <code>_WaitSet</code>  集合中等待被唤醒。若当前线程执行完毕将释放 <code>monitor</code>  并复位变量的值，以便其它线程进入获取 <code>monitor</code>  锁。</p>\n</blockquote>\n<p><img data-src=\"https://s11.ax1x.com/2023/12/16/pi5ASmD.png\" alt=\"pi5ASmD.png\" /></p>\n<blockquote>\n<p>由此可以看出 <code>monitor</code>  对象存在于每个 <code>Java</code>  对象的对象头中 (存储的指针指向)， <code>synchronized</code>  便是通过这种方式获取锁的，这也是为什么 <code>Java</code>  中任意对象可以作为锁的原因，同时也是 <code>noify</code> 、 <code>notifyAll</code> 、 <code>wait</code>  等方法存在于顶级对象 <code>Object</code>  中的原因，在了解了上面的知识基础后，将进一步来分析 <code>synchronized</code>  在字节码层面的具体语义实现。</p>\n</blockquote>\n<h1 id=\"synchronized代码块底层原理\"><a class=\"anchor\" href=\"#synchronized代码块底层原理\">#</a> synchronized 代码块底层原理</h1>\n<blockquote>\n<p>现在重新来定义一个 <code>synchronized</code>  同步代码块，在代码块中操作共享变量，代码示例如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>SyncCodeBlock.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>synchronized_example</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: synchronized 同步代码块用于 javap 反编译</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2023-12-16 22:30</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SyncCodeBlock</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">syncTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 同步代码块</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>编译上述代码并使用 <code>javap</code>  命令来反编译得到字节码，反编译命令如下：</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] $\"></td><td><pre>javap -p -s -l -v -constants -c -sysinfo SyncCodeBlock.class</pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>SyncCodeBlock.class</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Classfile</span> <span class=\"token operator\">/</span><span class=\"token class-name\">D</span><span class=\"token operator\">:</span><span class=\"token operator\">/</span>项目<span class=\"token operator\">/</span>gitee<span class=\"token operator\">/</span><span class=\"token keyword\">synchronized</span><span class=\"token operator\">-</span>example<span class=\"token operator\">/</span>target<span class=\"token operator\">/</span>classes<span class=\"token operator\">/</span>top<span class=\"token operator\">/</span>rem<span class=\"token operator\">/</span>rain<span class=\"token operator\">/</span>synchronized_example<span class=\"token operator\">/</span><span class=\"token class-name\">SyncCodeBlock</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token class-name\">Last</span> modified <span class=\"token number\">2023</span>年<span class=\"token number\">12</span>月<span class=\"token number\">17</span>日<span class=\"token punctuation\">;</span> size <span class=\"token number\">544</span> bytes</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  SHA<span class=\"token operator\">-</span><span class=\"token number\">256</span> checksum <span class=\"token number\">448</span>b5a7d5bcb275bb0612dbae81d517f7fa275735caecef1ace76e30f695a070</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token class-name\">Compiled</span> from <span class=\"token string\">\"SyncCodeBlock.java\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>synchronized_example<span class=\"token punctuation\">.</span></span>SyncCodeBlock</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  minor version<span class=\"token operator\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  major version<span class=\"token operator\">:</span> <span class=\"token number\">61</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  flags<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0x0021</span><span class=\"token punctuation\">)</span> ACC_PUBLIC<span class=\"token punctuation\">,</span> ACC_SUPER</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  this_class<span class=\"token operator\">:</span> #<span class=\"token number\">8</span>                          <span class=\"token comment\">// top/rem/rain/synchronized_example/SyncCodeBlock</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  super_class<span class=\"token operator\">:</span> #<span class=\"token number\">2</span>                         <span class=\"token comment\">// java/lang/Object</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  interfaces<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> fields<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> attributes<span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token class-name\">Constant</span> pool<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   #<span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Methodref</span>          #<span class=\"token number\">2.</span>#<span class=\"token number\">3</span>          <span class=\"token comment\">// java/lang/Object.\"&lt;init>\":()V</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   #<span class=\"token number\">2</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span>              #<span class=\"token number\">4</span>             <span class=\"token comment\">// java/lang/Object</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   #<span class=\"token number\">3</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">NameAndType</span>        #<span class=\"token number\">5</span><span class=\"token operator\">:</span>#<span class=\"token number\">6</span>          <span class=\"token comment\">// \"&lt;init>\":()V</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   #<span class=\"token number\">4</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Utf8</span>               java<span class=\"token operator\">/</span>lang<span class=\"token operator\">/</span><span class=\"token class-name\">Object</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   #<span class=\"token number\">5</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Utf8</span>               <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>init<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   #<span class=\"token number\">6</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Utf8</span>               <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">V</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   #<span class=\"token number\">7</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Fieldref</span>           #<span class=\"token number\">8.</span>#<span class=\"token number\">9</span>          <span class=\"token comment\">// top/rem/rain/synchronized_example/SyncCodeBlock.i:I</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   #<span class=\"token number\">8</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span>              #<span class=\"token number\">10</span>            <span class=\"token comment\">// top/rem/rain/synchronized_example/SyncCodeBlock</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   #<span class=\"token number\">9</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">NameAndType</span>        #<span class=\"token number\">11</span><span class=\"token operator\">:</span>#<span class=\"token number\">12</span>        <span class=\"token comment\">// i:I</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  #<span class=\"token number\">10</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Utf8</span>               top<span class=\"token operator\">/</span>rem<span class=\"token operator\">/</span>rain<span class=\"token operator\">/</span>synchronized_example<span class=\"token operator\">/</span><span class=\"token class-name\">SyncCodeBlock</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  #<span class=\"token number\">11</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Utf8</span>               i</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  #<span class=\"token number\">12</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Utf8</span>               <span class=\"token class-name\">I</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  #<span class=\"token number\">13</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Utf8</span>               <span class=\"token class-name\">Code</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  #<span class=\"token number\">14</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Utf8</span>               <span class=\"token class-name\">LineNumberTable</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  #<span class=\"token number\">15</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Utf8</span>               <span class=\"token class-name\">LocalVariableTable</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  #<span class=\"token number\">16</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Utf8</span>               <span class=\"token keyword\">this</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  #<span class=\"token number\">17</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Utf8</span>               <span class=\"token class-name\">Ltop</span><span class=\"token operator\">/</span>rem<span class=\"token operator\">/</span>rain<span class=\"token operator\">/</span>synchronized_example<span class=\"token operator\">/</span><span class=\"token class-name\">SyncCodeBlock</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  #<span class=\"token number\">18</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Utf8</span>               syncTask</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  #<span class=\"token number\">19</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Utf8</span>               <span class=\"token class-name\">StackMapTable</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  #<span class=\"token number\">20</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span>              #<span class=\"token number\">21</span>            <span class=\"token comment\">// java/lang/Throwable</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  #<span class=\"token number\">21</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Utf8</span>               java<span class=\"token operator\">/</span>lang<span class=\"token operator\">/</span><span class=\"token class-name\">Throwable</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  #<span class=\"token number\">22</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Utf8</span>               <span class=\"token class-name\">SourceFile</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  #<span class=\"token number\">23</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Utf8</span>               <span class=\"token class-name\">SyncCodeBlock</span><span class=\"token punctuation\">.</span>java</pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    descriptor<span class=\"token operator\">:</span> <span class=\"token class-name\">I</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    flags<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0x000a</span><span class=\"token punctuation\">)</span> ACC_PRIVATE<span class=\"token punctuation\">,</span> ACC_STATIC</pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token comment\">// 构造函数</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>synchronized_example<span class=\"token punctuation\">.</span></span>SyncCodeBlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    descriptor<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">V</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    flags<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0x0001</span><span class=\"token punctuation\">)</span> ACC_PUBLIC</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token class-name\">Code</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>      stack<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> locals<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> args_size<span class=\"token operator\">=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>         <span class=\"token number\">0</span><span class=\"token operator\">:</span> aload_0</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>         <span class=\"token number\">1</span><span class=\"token operator\">:</span> invokespecial #<span class=\"token number\">1</span>                  <span class=\"token comment\">// Method java/lang/Object.\"&lt;init>\":()V</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>         <span class=\"token number\">4</span><span class=\"token operator\">:</span> <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>      <span class=\"token class-name\">LineNumberTable</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        line <span class=\"token number\">9</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>      <span class=\"token class-name\">LocalVariableTable</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token class-name\">Start</span>  <span class=\"token class-name\">Length</span>  <span class=\"token class-name\">Slot</span>  <span class=\"token class-name\">Name</span>   <span class=\"token class-name\">Signature</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token number\">0</span>       <span class=\"token number\">5</span>     <span class=\"token number\">0</span>  <span class=\"token keyword\">this</span>   <span class=\"token class-name\">Ltop</span><span class=\"token operator\">/</span>rem<span class=\"token operator\">/</span>rain<span class=\"token operator\">/</span>synchronized_example<span class=\"token operator\">/</span><span class=\"token class-name\">SyncCodeBlock</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  <span class=\"token comment\">// 主要来看 syncTask 方法实现</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">syncTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    descriptor<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">V</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    flags<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0x0001</span><span class=\"token punctuation\">)</span> ACC_PUBLIC</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token class-name\">Code</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>      stack<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> locals<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> args_size<span class=\"token operator\">=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>         <span class=\"token number\">0</span><span class=\"token operator\">:</span> aload_0</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>         <span class=\"token number\">1</span><span class=\"token operator\">:</span> dup</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>         <span class=\"token number\">2</span><span class=\"token operator\">:</span> astore_1</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>         <span class=\"token number\">3</span><span class=\"token operator\">:</span> monitorenter  <span class=\"token comment\">// 此处进入同步方法</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>         <span class=\"token number\">4</span><span class=\"token operator\">:</span> getstatic     #<span class=\"token number\">7</span>                  <span class=\"token comment\">// Field i:I</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>         <span class=\"token number\">7</span><span class=\"token operator\">:</span> iconst_1</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>         <span class=\"token number\">8</span><span class=\"token operator\">:</span> iadd</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>         <span class=\"token number\">9</span><span class=\"token operator\">:</span> putstatic     #<span class=\"token number\">7</span>                  <span class=\"token comment\">// Field i:I</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token number\">12</span><span class=\"token operator\">:</span> aload_1</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token number\">13</span><span class=\"token operator\">:</span> monitorexit  <span class=\"token comment\">// 此处退出同步方法</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token number\">14</span><span class=\"token operator\">:</span> <span class=\"token keyword\">goto</span>          <span class=\"token number\">22</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token number\">17</span><span class=\"token operator\">:</span> astore_2</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token number\">18</span><span class=\"token operator\">:</span> aload_1</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token number\">19</span><span class=\"token operator\">:</span> monitorexit  <span class=\"token comment\">// 此处退出同步方法</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token number\">20</span><span class=\"token operator\">:</span> aload_2</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token number\">21</span><span class=\"token operator\">:</span> athrow</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token number\">22</span><span class=\"token operator\">:</span> <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>      <span class=\"token class-name\">Exception</span> table<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>         from    <span class=\"token keyword\">to</span>  <span class=\"token namespace\">target</span> type</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>             <span class=\"token number\">4</span>    <span class=\"token number\">14</span>    <span class=\"token number\">17</span>   any</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            <span class=\"token number\">17</span>    <span class=\"token number\">20</span>    <span class=\"token number\">17</span>   any</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>      <span class=\"token class-name\">LineNumberTable</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        line <span class=\"token number\">14</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        line <span class=\"token number\">15</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        line <span class=\"token number\">16</span><span class=\"token operator\">:</span> <span class=\"token number\">12</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        line <span class=\"token number\">17</span><span class=\"token operator\">:</span> <span class=\"token number\">22</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>      <span class=\"token class-name\">LocalVariableTable</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token class-name\">Start</span>  <span class=\"token class-name\">Length</span>  <span class=\"token class-name\">Slot</span>  <span class=\"token class-name\">Name</span>   <span class=\"token class-name\">Signature</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            <span class=\"token number\">0</span>      <span class=\"token number\">23</span>     <span class=\"token number\">0</span>  <span class=\"token keyword\">this</span>   <span class=\"token class-name\">Ltop</span><span class=\"token operator\">/</span>rem<span class=\"token operator\">/</span>rain<span class=\"token operator\">/</span>synchronized_example<span class=\"token operator\">/</span><span class=\"token class-name\">SyncCodeBlock</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>      <span class=\"token class-name\">StackMapTable</span><span class=\"token operator\">:</span> number_of_entries <span class=\"token operator\">=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        frame_type <span class=\"token operator\">=</span> <span class=\"token number\">255</span> <span class=\"token comment\">/* full_frame */</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>          offset_delta <span class=\"token operator\">=</span> <span class=\"token number\">17</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>          locals <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token keyword\">class</span> top<span class=\"token operator\">/</span>rem<span class=\"token operator\">/</span>rain<span class=\"token operator\">/</span>synchronized_example<span class=\"token operator\">/</span><span class=\"token class-name\">SyncCodeBlock</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> java<span class=\"token operator\">/</span>lang<span class=\"token operator\">/</span><span class=\"token class-name\">Object</span> <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>          stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token keyword\">class</span> java<span class=\"token operator\">/</span>lang<span class=\"token operator\">/</span><span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        frame_type <span class=\"token operator\">=</span> <span class=\"token number\">250</span> <span class=\"token comment\">/* chop */</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>          offset_delta <span class=\"token operator\">=</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre><span class=\"token class-name\">SourceFile</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SyncCodeBlock.java\"</span></pre></td></tr></table></figure><blockquote>\n<p>从字节码中可以看出同步代码块的实现使用的是 <code>monitorenter</code>  和 <code>monitorexit</code>  指令，其中 <code>monitorenter</code>  指令指向同步代码块的开始位置，而 <code>monitorexit</code>  指令则指明同步代码块的结束位置，当执行 <code>monitorenter</code>  指令时，当前线程将试图获取 <code>objectref</code>  (对象锁) 所对应的 <code>monitor</code>  的持有权，当 <code>objector</code>  的 <code>monitor</code>  进入时计数器为 <code>0</code> ，那么线程就可以成功获取到 <code>monitor</code> ，并将计数器设置为 <code>1</code>  则代表取锁成功。</p>\n</blockquote>\n<blockquote>\n<p>如果当前线程已持有 <code>objectref</code>  的 <code>monitor</code>  持有权，那它可以重入这个 <code>monitor</code>  (重入将在后面介绍)，重入时计数器的值也会 <code>+1</code> 。倘若其它线程已拥有 <code>objectref</code>  的 <code>monitor</code>  持有权，那么当前线程将被阻塞，直到正在执行的线程执行完毕 (即： <code>monitorexit</code>  指令被执行)，执行完 <code>monitorexit</code>  指令后线程将释放 <code>monitor</code>  锁并设置计数器为 <code>0</code> ，其他线程将有机会持有 <code>monitor</code> 。</p>\n</blockquote>\n<blockquote>\n<p>这里需要注意的是编译器将会确保，无论方法通过任何一种方式完成， 方法中调用过的每条 <code>monitorenter</code>  指令都有其对应的 <code>monitorexit</code>  指令执行，而无论这个方法是否正常结束还是异常结束，为了确保在方法异常完成时 <code>monitorenter</code>  和 <code>monitorexit</code>  指令依然可以正确配对执行，编译器会自动产生一个异常处理器，这个异常处理器声明可处理所有的异常，它的目的就是用来执行 <code>monitorexit</code>  指令，从字节码中可以看出多了一个 <code>monitorexit</code>  指令，它就是异常结束时被执行释放 <code>monitor</code>  的指令。</p>\n</blockquote>\n<h1 id=\"synchronized方法底层原理\"><a class=\"anchor\" href=\"#synchronized方法底层原理\">#</a> synchronized 方法底层原理</h1>\n<blockquote>\n<p><code>synchronized</code>  方法级的同步是隐式的，即无需通过字节码指令来控制，它实现在方法调用和返回操作中， <code>JVM</code>  可以从常量池中的方法结构表中访问 <code>ACC_SYNCHRONIZED</code>  标志来区分一个方法是否是同步方法。当方法调用时，调用指令将会检查方法的 <code>ACC_SYNCHRONIZED</code>  访问标志是否被设置，如果设置了 <code>ACC_SYNCHRONIZED</code>  访问标志，执行线程将先持有 <code>monitor</code>  (在虚拟机规范中代表管程)，然后再执行方法，最后在方法完成时无论是否正常完成都会释放 <code>monitor</code> 。在方法执行期间，执行线程持有了 <code>monitor</code>  其它线程都将无法再获取到同一个 <code>monitor</code> 。</p>\n</blockquote>\n<blockquote>\n<p>如果一个同步方法执行期间抛出了异常，并且在方法内部无法处理此异常时，那么这个同步方法所持有的 <code>monitor</code>  将在异常抛到同步方法之外时自动释放，字节码层如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>SyncMethod.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>synchronized_example</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: synchronized 同步方法用于 javap 反编译</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2023-12-17 10:46</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SyncMethod</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">syncTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>编译上述代码并使用 <code>javap</code>  命令来反编译得到字节码，反编译命令如下：</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] $\"></td><td><pre>javap -p -s -l -v -constants -c -sysinfo SyncMethod.class</pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>SyncMethod.class</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Classfile</span> <span class=\"token operator\">/</span><span class=\"token class-name\">D</span><span class=\"token operator\">:</span><span class=\"token operator\">/</span>项目<span class=\"token operator\">/</span>gitee<span class=\"token operator\">/</span><span class=\"token keyword\">synchronized</span><span class=\"token operator\">-</span>example<span class=\"token operator\">/</span>target<span class=\"token operator\">/</span>classes<span class=\"token operator\">/</span>top<span class=\"token operator\">/</span>rem<span class=\"token operator\">/</span>rain<span class=\"token operator\">/</span>synchronized_example<span class=\"token operator\">/</span><span class=\"token class-name\">SyncMethod</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token class-name\">Last</span> modified <span class=\"token number\">2023</span>年<span class=\"token number\">12</span>月<span class=\"token number\">17</span>日<span class=\"token punctuation\">;</span> size <span class=\"token number\">431</span> bytes</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        SHA<span class=\"token operator\">-</span><span class=\"token number\">256</span> checksum <span class=\"token number\">6</span>b6d0142250883ab1592853d0f9ef17372bb1fb40c43ab9b5dd2a512653b0bc9</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Compiled</span> from <span class=\"token string\">\"SyncMethod.java\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>synchronized_example<span class=\"token punctuation\">.</span></span>SyncMethod</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        minor version<span class=\"token operator\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        major version<span class=\"token operator\">:</span> <span class=\"token number\">61</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        flags<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0x0021</span><span class=\"token punctuation\">)</span> ACC_PUBLIC<span class=\"token punctuation\">,</span> ACC_SUPER</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        this_class<span class=\"token operator\">:</span> #<span class=\"token number\">8</span>                          <span class=\"token comment\">// top/rem/rain/synchronized_example/SyncMethod</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        super_class<span class=\"token operator\">:</span> #<span class=\"token number\">2</span>                         <span class=\"token comment\">// java/lang/Object</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        interfaces<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> fields<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> attributes<span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">Constant</span> pool<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        #<span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Methodref</span>          #<span class=\"token number\">2.</span>#<span class=\"token number\">3</span>          <span class=\"token comment\">// java/lang/Object.\"&lt;init>\":()V</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        #<span class=\"token number\">2</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span>              #<span class=\"token number\">4</span>             <span class=\"token comment\">// java/lang/Object</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        #<span class=\"token number\">3</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">NameAndType</span>        #<span class=\"token number\">5</span><span class=\"token operator\">:</span>#<span class=\"token number\">6</span>          <span class=\"token comment\">// \"&lt;init>\":()V</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        #<span class=\"token number\">4</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Utf8</span>               java<span class=\"token operator\">/</span>lang<span class=\"token operator\">/</span><span class=\"token class-name\">Object</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        #<span class=\"token number\">5</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Utf8</span>               <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>init<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   #<span class=\"token number\">6</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Utf8</span>               <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">V</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>           #<span class=\"token number\">7</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Fieldref</span>           #<span class=\"token number\">8.</span>#<span class=\"token number\">9</span>          <span class=\"token comment\">// top/rem/rain/synchronized_example/SyncMethod.i:I</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>           #<span class=\"token number\">8</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span>              #<span class=\"token number\">10</span>            <span class=\"token comment\">// top/rem/rain/synchronized_example/SyncMethod</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>           #<span class=\"token number\">9</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">NameAndType</span>        #<span class=\"token number\">11</span><span class=\"token operator\">:</span>#<span class=\"token number\">12</span>        <span class=\"token comment\">// i:I</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>           #<span class=\"token number\">10</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Utf8</span>               top<span class=\"token operator\">/</span>rem<span class=\"token operator\">/</span>rain<span class=\"token operator\">/</span>synchronized_example<span class=\"token operator\">/</span><span class=\"token class-name\">SyncMethod</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>           #<span class=\"token number\">11</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Utf8</span>               i</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>           #<span class=\"token number\">12</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Utf8</span>               <span class=\"token class-name\">I</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>           #<span class=\"token number\">13</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Utf8</span>               <span class=\"token class-name\">Code</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>           #<span class=\"token number\">14</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Utf8</span>               <span class=\"token class-name\">LineNumberTable</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>           #<span class=\"token number\">15</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Utf8</span>               <span class=\"token class-name\">LocalVariableTable</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>           #<span class=\"token number\">16</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Utf8</span>               <span class=\"token keyword\">this</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>           #<span class=\"token number\">17</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Utf8</span>               <span class=\"token class-name\">Ltop</span><span class=\"token operator\">/</span>rem<span class=\"token operator\">/</span>rain<span class=\"token operator\">/</span>synchronized_example<span class=\"token operator\">/</span><span class=\"token class-name\">SyncMethod</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>           #<span class=\"token number\">18</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Utf8</span>               syncTask</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>           #<span class=\"token number\">19</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Utf8</span>               <span class=\"token class-name\">SourceFile</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>           #<span class=\"token number\">20</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Utf8</span>               <span class=\"token class-name\">SyncMethod</span><span class=\"token punctuation\">.</span>java</pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        descriptor<span class=\"token operator\">:</span> <span class=\"token class-name\">I</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        flags<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0x0001</span><span class=\"token punctuation\">)</span> ACC_PUBLIC</pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>synchronized_example<span class=\"token punctuation\">.</span></span>SyncMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        descriptor<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">V</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        flags<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0x0001</span><span class=\"token punctuation\">)</span> ACC_PUBLIC</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token class-name\">Code</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>          stack<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> locals<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> args_size<span class=\"token operator\">=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token number\">0</span><span class=\"token operator\">:</span> aload_0</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token number\">1</span><span class=\"token operator\">:</span> invokespecial #<span class=\"token number\">1</span>                  <span class=\"token comment\">// Method java/lang/Object.\"&lt;init>\":()V</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token number\">4</span><span class=\"token operator\">:</span> <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token class-name\">LineNumberTable</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>          line <span class=\"token number\">9</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token class-name\">LocalVariableTable</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>          <span class=\"token class-name\">Start</span>  <span class=\"token class-name\">Length</span>  <span class=\"token class-name\">Slot</span>  <span class=\"token class-name\">Name</span>   <span class=\"token class-name\">Signature</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token number\">0</span>       <span class=\"token number\">5</span>     <span class=\"token number\">0</span>  <span class=\"token keyword\">this</span>   <span class=\"token class-name\">Ltop</span><span class=\"token operator\">/</span>rem<span class=\"token operator\">/</span>rain<span class=\"token operator\">/</span>synchronized_example<span class=\"token operator\">/</span><span class=\"token class-name\">SyncMethod</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token comment\">// 主要来看 syncTask 方法</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">syncTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        descriptor<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">V</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token comment\">// 方法标识 ACC_PUBLIC 代表 public 修饰，ACC_SYNCHRONIZED 指明该方法为同步方法</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        flags<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0x0021</span><span class=\"token punctuation\">)</span> ACC_PUBLIC<span class=\"token punctuation\">,</span> ACC_SYNCHRONIZED</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token class-name\">Code</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>          stack<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> locals<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> args_size<span class=\"token operator\">=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token number\">0</span><span class=\"token operator\">:</span> aload_0</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token number\">1</span><span class=\"token operator\">:</span> dup</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token number\">2</span><span class=\"token operator\">:</span> getfield      #<span class=\"token number\">7</span>                  <span class=\"token comment\">// Field i:I</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token number\">5</span><span class=\"token operator\">:</span> iconst_1</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token number\">6</span><span class=\"token operator\">:</span> iadd</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token number\">7</span><span class=\"token operator\">:</span> putfield      #<span class=\"token number\">7</span>                  <span class=\"token comment\">// Field i:I</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>            <span class=\"token number\">10</span><span class=\"token operator\">:</span> <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token class-name\">LineNumberTable</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>          line <span class=\"token number\">13</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>          line <span class=\"token number\">14</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token class-name\">LocalVariableTable</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>          <span class=\"token class-name\">Start</span>  <span class=\"token class-name\">Length</span>  <span class=\"token class-name\">Slot</span>  <span class=\"token class-name\">Name</span>   <span class=\"token class-name\">Signature</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token number\">0</span>      <span class=\"token number\">11</span>     <span class=\"token number\">0</span>  <span class=\"token keyword\">this</span>   <span class=\"token class-name\">Ltop</span><span class=\"token operator\">/</span>rem<span class=\"token operator\">/</span>rain<span class=\"token operator\">/</span>synchronized_example<span class=\"token operator\">/</span><span class=\"token class-name\">SyncMethod</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token class-name\">SourceFile</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SyncMethod.java\"</span></pre></td></tr></table></figure><blockquote>\n<p>在字节码中可以看出， <code>synchronized</code>  修饰的方法并没有 <code>monitorenter</code>  和 <code>monitorexit</code>  指令，取而代之的是 <code>ACC_SYNCHRONIZED</code>  标识，此标识指明了该方法是一个同步方法， <code>JVM</code>  通过该 <code>ACC_SYNCHRONIZED</code>  标识来分辨一个方法是否被声明为同步方法，从而执行相应的同步调用，这便是 <code>synchronized</code>  锁在同步代码块和同步方法上的基本实现原理。</p>\n</blockquote>\n<blockquote>\n<p>我们需要必须注意的是在 <code>Java</code>  早期版本中， <code>synchronized</code>  属于重量级锁，由此效率很低，因为监视器锁 ( <code>monitor</code> ) 是依赖于底层操作系统的 <code>Mutex Lock</code>  来实现的，而操作系统实现线程之间的切换时需要从用户态转换到核心态，这个状态之间的转换需要相对较长的时间，时间成本消耗会很高，这也是为什么早期的 <code>synchronized</code>  效率很低的原因。</p>\n</blockquote>\n<blockquote>\n<p>好在 <code>Java 6</code>  之后官方从 <code>JVM</code>  层面对 <code>synchronized</code>  做了较大的优化，所以现在的 <code>synchronized</code>  锁效率优化得很不错了， <code>Java 6</code>  之后为了减少获得锁和释放锁时带来的性能消耗，便引入了轻量级锁和偏向锁，下面接着将来了解一下 <code>Java</code>  在 <code>JVM</code>  层对 <code>synchronized</code>  的优化。</p>\n</blockquote>\n<h1 id=\"jvm对synchronized的优化\"><a class=\"anchor\" href=\"#jvm对synchronized的优化\">#</a> JVM 对 synchronized 的优化</h1>\n<ul>\n<li>锁的状态一共有四种分别是：\n<ul>\n<li><a href=\"#%E5%81%8F%E5%90%91%E9%94%81\">偏向锁</a></li>\n<li><a href=\"#%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%94%81\">轻量级锁</a></li>\n<li><a href=\"#%E5%AF%B9%E8%B1%A1%E5%A4%B4%E9%87%8D%E7%82%B9%E5%88%86%E6%9E%90\">重量级锁</a></li>\n<li>无锁状态</li>\n</ul>\n</li>\n<li>锁的状态可以从偏向锁升级到轻量级锁，再升级到重量级锁，但是锁的升级是单向的，就是说只能从低到高，不会出现锁的降级。</li>\n<li>下面将介绍偏向锁和轻量级锁以及 <code>JVM</code>  的其它优化手段，如需详细阅读请查阅 <code>《深入理解java虚拟机》</code> 。</li>\n</ul>\n<h2 id=\"偏向锁\"><a class=\"anchor\" href=\"#偏向锁\">#</a> 偏向锁</h2>\n<blockquote>\n<p>偏向锁是在 <code>Java 6</code>  之后新增的锁，它是一种针对加锁操作的优化手段，经过研究发现在大多数情况下，锁不仅不存在多线程竞争，而且总是由同一个线程多次获取，因此为了减少同一个线程获取锁 (涉及 <code>CAS</code>  操作) 的代价而引入的偏向锁。</p>\n</blockquote>\n<blockquote>\n<p>偏向锁核心思想是，如果一个线程获得了锁，那么锁就会进入偏向模式，此时 <code>Mark Word</code>  的结构也将变为偏向锁结构，当这个线程再次请求锁时，无需再做任何同步操作 (即获取锁的过程)，这样就省去了大量有关 “锁” 申请的操作，从而提高了程序的性能。</p>\n</blockquote>\n<blockquote>\n<p>对于没有锁竞争的场合，偏向锁有很好得优化效果，毕竟极有可能连续多次是同一个线程申请相同锁。但是对于锁竞争激烈的场合，偏向锁就将失效了，因为这种场合极有可能每次申请锁的线程都是不同的，因此在这种情况下就不应该使用偏向锁，偏向锁失败后并不会立即升级到重量级锁，而是先将锁升级为轻量级锁。</p>\n</blockquote>\n<h2 id=\"轻量级锁\"><a class=\"anchor\" href=\"#轻量级锁\">#</a> 轻量级锁</h2>\n<blockquote>\n<p>偏向锁失败后， <code>JVM</code>  并不会立即升级为重量级锁，它首先会尝试一种称为轻量级锁的优化手段 (自 <code>1.6</code>  之后新增的一种锁)，此时 <code>Mark Word</code>  的结构将变为轻量级锁结构。轻量级锁能够提升程序性能的依据是：对绝大部分的锁，在整个同步周期内都不存在竞争。需要了解的是，轻量级锁所适应的场景是线程交替执行同步块的场合，如果存在同一时间访问同一个锁的场景，将会导致轻量级锁升级为重量级锁。</p>\n</blockquote>\n<h2 id=\"自旋锁\"><a class=\"anchor\" href=\"#自旋锁\">#</a> 自旋锁</h2>\n<blockquote>\n<p>轻量级锁失败后， <code>JVM</code>  为了避免线程真实地在操作系统层面被挂起，将会进行一种称为自旋锁的优化手段。这是基于大多数情况下，线程持有锁的时间都不会太长，如果直接挂起操作系统层面的线程将会得不偿失，毕竟操作系统实现线程之间的切换时需要从用户态转换到核心态，这个状态之间的转换需要较长的时间，时间成本相对较高，因此自旋锁会假设在不久将来，当前线程可以获得锁，虚拟机会让当前想要获得锁的线程做几个空循环 (这也是被称为自旋的原因)，一般不会太久，大概是在 <code>50~100</code>  个循环，经过若干次循环后，如果得到锁就顺利进入临界区。</p>\n</blockquote>\n<blockquote>\n<p>如果：经过若干次循环后还不能获得锁，那么线程将会在操作系统层面被挂起，这就是自旋锁的优化方式，这种方式确实可以提升效率，在最后没办法的情况时也就只能升级为重量级锁了。</p>\n</blockquote>\n<h2 id=\"锁消除\"><a class=\"anchor\" href=\"#锁消除\">#</a> 锁消除</h2>\n<blockquote>\n<p>锁消除是虚拟机的另外一种对锁的优化，这种优化更彻底， <code>Java</code>  虚拟机在 <code>JIT</code>  编译时 (即时编译，可以理解为当某段代码即将第一次被执行时进行编译)，通过对运行上下文的扫描，去除不可能存在共享资源竞争的锁，通过这种方式来消除没有必要的锁，可以省去毫无意义的加锁时间，示例代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>StringBufferRemoveSynchronized.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>synchronized_example</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: 锁消除示例：消除 StringBuffer 同步锁</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2023-12-17 15:55</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StringBufferRemoveSynchronized</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> str2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// StringBuffer 是线程安全的，由于 sb 只会在 append 方法中使用，不可能被其他线程引用</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 因此 sb 属于不可能共享的资源，JVM 会自动消除内部的锁</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">StringBuffer</span> sb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">StringBufferRemoveSynchronized</span> rsync <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBufferRemoveSynchronized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10000000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            rsync<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>上述代码中 <code>StringBuffer</code>  的 <code>append()</code>  方法是一个同步方法，但是在 <code>add()</code>  方法中的 <code>StringBuffer</code>  属于局部变量，并且不会被其它线程所使用，因此 <code>StringBuffer</code>  不会存在共享资源被竞争的情景， <code>JVM</code>  会自动将其内部的锁进行消除。</p>\n</blockquote>\n<h1 id=\"synchronized的可重入性\"><a class=\"anchor\" href=\"#synchronized的可重入性\">#</a> synchronized 的可重入性</h1>\n<blockquote>\n<p>从互斥锁的设计上来说，当一个线程试图操作一个由其它线程持有对象锁的临界资源时将会处于阻塞状态，但当一个线程再次请求自己持有对象锁的临界资源时，这种情况就属于 “重入锁” 请求将会成功，在 <code>Java</code>  中 <code>synchronized</code>  是基于原子性内部锁机制，是可重入的，因此在一个线程调用 <code>synchronized</code>  方法的同时在其它方法体内调用该对象的另一个 <code>synchronized</code>  方法，也就是说一个线程得到一个对象锁后再次请求该对象锁这是允许的，这就是 <code>synchronized</code>  的可重入性，示例代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>SynchronizedData2.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>synchronized_example</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: synchronized 的可重入性</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2023-12-15 23:02</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SynchronizedData2</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">SynchronizedData2</span> INSTANCE <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SynchronizedData2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   * 共享资源 (临界资源)</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> ii <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">public</span>  <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>INSTANCE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">//synchronized 的可重入性</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token function\">incremental</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   * 递增方法</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">incremental</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    ii<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>INSTANCE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token class-name\">Thread</span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>INSTANCE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\">// 开始</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    t1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    t2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    t1<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    t2<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>ii<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>在获取到当前实例对象锁后进入 <code>synchronized</code>  代码块执行同步代码，并在代码块中调用当前实例对象的另一个 <code>synchronized</code>  方法，再次请求当前实例锁时将被允许，进而执行方法体中的代码，这就是重入锁最直接的提现。需要注意另外一种情况，当子类继承父类是，子类也是可以通过可重入锁调用父类中的同步方法，注意：由于 <code>synchronized</code>  是基于 <code>monitor</code>  实现的，因此每次重入时 <code>monitor</code>  中的计数器仍会 <code>+1</code> 。</p>\n</blockquote>\n<h1 id=\"synchronized与线程中断\"><a class=\"anchor\" href=\"#synchronized与线程中断\">#</a> synchronized 与线程中断</h1>\n<h2 id=\"线程中断\"><a class=\"anchor\" href=\"#线程中断\">#</a> 线程中断</h2>\n<blockquote>\n<p>线程中断就是在线程运行 ( <code>run()</code>  方法) 期间打断它，在 <code>Java</code>  中，提供了三种有关线程中断的方法。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 中断线程 (实例方法)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">interrupt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 判断线程是否被中断 (实例方法)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">isInterrupted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 判断是否被中断并清除当前中断状态 (实例方法)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">interrupted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>下面是这三种方法的源码，如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Thread.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Thread</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// 中断线程 (实例方法)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">interrupt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">!=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token function\">checkAccess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token comment\">// thread may be blocked in an I/O operation</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>blockerLock<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">Interruptible</span> b <span class=\"token operator\">=</span> blocker<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>          interrupted <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>          <span class=\"token function\">interrupt0</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// inform VM of interrupt</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>          b<span class=\"token punctuation\">.</span><span class=\"token function\">interrupt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>          <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    interrupted <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// inform VM of interrupt</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">interrupt0</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token comment\">// 判断线程是否被中断 (实例方法)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isInterrupted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">return</span> interrupted<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token comment\">// 判断是否被中断并清除当前中断状态 (实例方法)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">interrupted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token class-name\">Thread</span> t <span class=\"token operator\">=</span> <span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">boolean</span> interrupted <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span>interrupted<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">// We may have been interrupted the moment after we read the field,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">// so only clear the field if we saw that it was set and will return</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">// true; otherwise we could lose an interrupt.</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>interrupted<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      t<span class=\"token punctuation\">.</span>interrupted <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      <span class=\"token function\">clearInterruptEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">return</span> interrupted<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>当一个线程处于被阻塞状态或试图执行一个阻塞操作时，使用 <code>Thread.interrupt()</code>  方法可中断该线程，注意：此时将会抛出一个 <code>InterruptedException(中断异常)</code>  的异常，同时中断状态将会被复位 (由中断状态改为非中断状态)，示例代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>InterruptedSleepThread.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>synchronized_example</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Description: 线程中断示例</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @DateTime: 2023-12-17 21:30</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InterruptSleepThread</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">//while 在 try 中，通过异常中断就可以退出 run 循环</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>          <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token comment\">// 当前线程处于阻塞状态，异常必须捕捉处理，无法往外抛出</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>          <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Interrupt When Sleep\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>          <span class=\"token keyword\">boolean</span> interrupt <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isInterrupted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>          <span class=\"token comment\">// 中断状态被复位</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>          <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"interrupt：\"</span><span class=\"token operator\">+</span>interrupt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    t1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">// 中断处于阻塞状态的线程</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    t1<span class=\"token punctuation\">.</span><span class=\"token function\">interrupt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            执行结果：</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                Interrupt When Sleep</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                interrupt：false</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>如上述代码所示，创建一个线程并在线程中调用了 <code>sleep()</code>  方法从而使线程进入阻塞状态，启动线程后调用线程实例对象的 <code>interrupt()</code>  方法来中断线程阻塞异常，并抛出 <code>InterruptedException</code>  异常，此时中断状态也将被复位。为了编码清晰建议使用 <code>TimeUnit.SECONDS.sleep()</code> , 此方法内部实现最终还是调用了 <code>Thread.sleep()</code>  方法。</p>\n</blockquote>\n<blockquote>\n<p>除了阻塞中断的情景，我们还可能会遇到处于运行期间且非阻塞状态的线程，在这种情况下，直接调用 <code>Thread.interrupt()</code>  方法中断线程是不会得到任何响应的，如下代码将无法中断非阻塞状态下的线程：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>InterruptThread.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>synchronized_example</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Description: interrupt () 方法示例</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @DateTime: 2023-12-17 21:51</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InterruptThread</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"未被中断\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        t1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        t1<span class=\"token punctuation\">.</span><span class=\"token function\">interrupt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>          执行结果 - 无限执行：</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>              未被中断</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>              未被中断</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>              未被中断</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>               ......</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>虽然我们在代码中调用了 <code>interrupt()</code>  方法，但线程并未被中断，因为当前线程处于非阻塞状态下，这种情况需要我们手动去进行中断检测并结束程序，修改后的代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>InterruptThread2.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>synchronized_example</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Description: interrupt () 方法示例</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @DateTime: 2023-12-17 21:51</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InterruptThread2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    <span class=\"token comment\">// 判断当前线程是否被中断</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isInterrupted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"线程中断\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"已跳出循环,线程中断!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        t1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        t1<span class=\"token punctuation\">.</span><span class=\"token function\">interrupt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>          执行结果：</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>           线程中断</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>           已跳出循环，线程中断！</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>我们在上述代码中使用了实例方法 <code>isInterrupted()</code>  来判断线程是否已被中断，如果被中断则跳出循环以此来结束当前线程，注意：非阻塞状态下调用 <code>interrupt()</code>  方法并不会导致中断状态重置。</p>\n</blockquote>\n<blockquote>\n<p>总结：中断线程有两种情况，第一种是当线程处于阻塞状态或试图执行一个阻塞操作时，我们可以使用实例方法 <code>interrupt()</code>  进行线程中断，执行中断操作后将会抛出 <code>InterruptedException</code>  异常 (该异常必须进行捕捉无法抛出) 并将中断状态复位。第二种是当线程处于运行状态时，我们也可以调用实例方法 <code>interrupt()</code>  进行线程中断，但同时必须手动去判断中断状态，并编写中断线程的代码 (其就是来结束 <code>run()</code>  方法体的代码)。有时我们在编写代码时可能需要兼顾以上两种情况，那么就可以如下编写：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 判断当前线程是否已中断，注意 interrupted 方法是静态的，执行后会对中断状态进行复位，Thread.interrupted () 默认为 false</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">interrupted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"中断与synchronized\"><a class=\"anchor\" href=\"#中断与synchronized\">#</a> 中断与 synchronized</h2>\n<blockquote>\n<p>事实上线程的中断操作对于正在等待获取锁对象的 <code>synchronized</code>  方法或代码块并不起作用，也就是说对于 <code>synchronized</code>  来说，如果一个线程正在等待锁，那么结果就只有两种可能，第一要么它获得这把锁继续执行，第二要么它就保持等待，即使调用了中断线程的方法也并不会生效。示例代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>SynchronizedBlocked.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>synchronized_example</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Description: 中断与 synchronized</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @DateTime: 2023-12-17 22:30</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SynchronizedBlocked</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Trying to call f()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// Never releases lock</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     * 在构造器中创建新线程并启动获取对象锁</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SynchronizedBlocked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 该线程已持有当前实例锁</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token comment\">// Lock acquired by this thread</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token comment\">// 中断判断</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">interrupted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"中断线程!!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token class-name\">SynchronizedBlocked</span> sync <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SynchronizedBlocked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token class-name\">Thread</span> thread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>sync<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token comment\">// 启动后调用 f () 方法，无法获取当前实例锁处于等待状态</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        thread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token comment\">// 中断线程，无法生效</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        thread<span class=\"token punctuation\">.</span><span class=\"token function\">interrupt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            执行结果：</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            Trying to call f ()</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                ......</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                当前程序并不会自动停止</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>我们在 <code>SynchronizedBlocked</code>  构造函数中创建了一个新线程并启动调用 <code>f()</code>  方法获取到哦当前实例锁，由于 <code>SynchronizedBlocked</code>  自身也是线程，启动后在其 <code>run()</code>  方法中也调用了 <code>f()</code>  方法，但是由于对象锁被其它线程所占用，导致 <code>thread</code>  线程只能等待锁，此时我们调用了 <code>thread.interrupt()</code>  方法，但并不能中断线程。</p>\n</blockquote>\n<h1 id=\"synchronized与等待唤醒机制\"><a class=\"anchor\" href=\"#synchronized与等待唤醒机制\">#</a> synchronized 与等待唤醒机制</h1>\n<blockquote>\n<p>所谓的等待唤醒机制主要指的是 <code>notify</code> 、 <code>notifyAll</code> 、 <code>wait</code>  方法，在使用这三个方法时，必须处于 <code>synchronized</code>  代码块或 <code>synchronized</code>  方法中，否则将会抛出 <code>IllegalMonitorStateException</code>  异常，这是因为调用者几个方法前必须拿到当前对象的监视器也就是 <code>monitor</code>  对象，就是说 <code>notify</code> 、 <code>notifyAll</code> 、 <code>wait</code>  方法依赖于 <code>monitor</code>  对象，我们知道 <code>monitor</code>  存在于对象头的 <code>Mark Word</code>  中 (存储 <code>monitor</code>  引用指针)，而 <code>synchronized</code>  关键字可以获取 <code>monitor</code>  对象，这也就是为什么 <code>notify</code> 、 <code>notifyAll</code> 、 <code>wait</code>  方法必须在 <code>synchronized</code>  代码块或 <code>synchronized</code>  方法中调用的原因。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   object<span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   object<span class=\"token punctuation\">.</span><span class=\"token function\">notifyAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   object<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>最后需要特别注意的是，与 <code>sleep()</code>  方法不同的是 <code>wait()</code>  方法调用完成后，线程将被暂停，但 <code>wait()</code>  方法将会释放当前持有的监视器锁 ( <code>monitor</code> ), 直到有新线程调用了 <code>notify</code>  或 <code>notifyAll</code>  方法后才能继续执行，而 <code>sleep()</code>  方法只是让线程休眠并不释放锁。同时 <code>notify</code> 、 <code>notifyAll</code>  方法调用后，并不会马上释放监视器锁，而是在相应的 <code>synchronized</code>  代码块或 <code>synchronized</code>  方法执行结束后才会自动将锁释放。</p>\n</blockquote>\n<h1 id=\"synchronized原理图\"><a class=\"anchor\" href=\"#synchronized原理图\">#</a> synchronized 原理图</h1>\n<p><img data-src=\"https://s11.ax1x.com/2023/12/18/piIluCT.png\" alt=\"piIluCT.png\" /></p>\n",
            "tags": [
                "计算机科学",
                "Java",
                "Java深入理解",
                "计算机科学",
                "Java",
                "并发",
                "同步",
                "Monitor",
                "synchronized"
            ]
        },
        {
            "id": "https://rainrem.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/java/java%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/JavaEquals%E4%B8%8EHashCode%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/",
            "url": "https://rainrem.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/java/java%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/JavaEquals%E4%B8%8EHashCode%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/",
            "title": "Java equals与hashCode深入理解",
            "date_published": "2023-12-15T06:17:52.000Z",
            "content_html": "<blockquote>\n<p>本章是：为什么重写 <code>equals()</code>  方法时一定要重写 <code>hashCode()</code>  方法深入解析。</p>\n</blockquote>\n<h1 id=\"equals和hashcode是什么\"><a class=\"anchor\" href=\"#equals和hashcode是什么\">#</a> equals 和 hashCode 是什么</h1>\n<blockquote>\n<p>在 <code>Java</code>  开发中每个对象都有一个默认的 <code>equals()</code>  方法，它比较的是对象的引用是否相等 (即：比较两个对象是否是同一个实例)。但是在实际开发中，我们通常需要比较对象的内容是否相等，而不仅仅是比较它们的引用。这就是为什么我们要重写 <code>equals()</code>  方法的原因。</p>\n</blockquote>\n<blockquote>\n<p><code>hashCode(哈希码)</code>  是另一个与对象相关的重要概念，哈希码是一个整数值，它是根据对象的内容计算得出的，在 <code>Java</code>  中哈希码主要用于散列数据结构，如：哈希表就是一种常见的数据结构。它可以快速查找存储在其中的对象，哈希码可以帮助我们确定对象在哈希表中的存储位置，从而实现高效的查找操作。</p>\n</blockquote>\n<h1 id=\"为什么要重写equals方法\"><a class=\"anchor\" href=\"#为什么要重写equals方法\">#</a> 为什么要重写 equals 方法</h1>\n<blockquote>\n<p>在默认情况下 <code>Java</code>  中的 <code>equals()</code>  方法比较的是对象的引用，如果我们不重写 <code>equals()</code>  方法，那么对于两个不同的对象即使它们的内容相同，但是当调用 <code>equals()</code>  方法时也会返回 <code>false</code> , 因为他们的引用不同，如下示例：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Student.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>override<span class=\"token punctuation\">.</span>equlals</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: 学生对象</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2023-12-15 14:55</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> gender<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> gender<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gender <span class=\"token operator\">=</span> gender<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>OverrideEqualsHashCodeApplicationTests.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>override</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>jupiter<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringBootTest</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>override<span class=\"token punctuation\">.</span>equlals<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootTest</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">OverrideEqualsHashCodeApplicationTests</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">equalsDemo1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">Student</span> student1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"冈崎\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"男\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">Student</span> student2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"冈崎\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"男\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"student1.equals(student2) = \"</span> <span class=\"token operator\">+</span> student1<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>student2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            执行结果：student1.equals (student2) = false</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>在上面这个示例中尽管 <code>student1</code>  和 <code>student2</code>  的内容是相同的，但它们是不同的实例对象，因此 <code>equals()</code>  方法返回 <code>false</code> ，这肯定不是我们想要的结果，为了解决这个问题，我们就需要重写 <code>equals()</code>  方法，以便比较对象的内容而不是引用地址。通常我们会在自定义类中重写 <code>equals()</code>  方法以实现我们自己的相等性逻辑，比较对象的属性是否相等。</p>\n</blockquote>\n<blockquote>\n<p>下面是重写后的 <code>Student</code>  类对象， <code>IDEA</code>  的重写快捷键是 <code>Alt+Ins</code></p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Student.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>override<span class=\"token punctuation\">.</span>equlals</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Objects</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Description: 学生对象</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @DateTime: 2023-12-15 14:55</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> gender<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> gender<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gender <span class=\"token operator\">=</span> gender<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> o<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>o <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> o<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">Student</span> student <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">)</span> o<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">return</span> age <span class=\"token operator\">==</span> student<span class=\"token punctuation\">.</span>age <span class=\"token operator\">&amp;&amp;</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>gender<span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span>gender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> gender<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>override</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span>jupiter<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringBootTest</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>override<span class=\"token punctuation\">.</span>equlals<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootTest</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">OverrideEqualsHashCodeApplicationTests</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">equalsDemo1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">Student</span> student1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"冈崎\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"男\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">Student</span> student2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"冈崎\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"男\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"student1.equals(student2) = \"</span> <span class=\"token operator\">+</span> student1<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>student2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            执行结果：student1.equals (student2) = true</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>再次执行后结果就是 <code>true</code>  了，这样才是我们想要的内容比较结果，接下来深入分析一下 <code>equals()</code>  实现原理。</p>\n</blockquote>\n<h2 id=\"1️⃣-equals内部原理\"><a class=\"anchor\" href=\"#1️⃣-equals内部原理\">#</a> 1️⃣ equals 内部原理</h2>\n<blockquote>\n<p>我们都知道 <code>equals()</code>  方法是超类 <code>Object</code>  类中的一个基本方法，用于检测一个对象是否与另一个对象相等。而在 <code>Object</code>  类中这个方法实际上是判断两个对象是否具有相同的引用，如果有它们就一定会相等，源码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Object.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">jdk<span class=\"token punctuation\">.</span>internal<span class=\"token punctuation\">.</span>vm<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IntrinsicCandidate</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Object</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>我们知道所有的对象都拥有标识 (内存地址) 和状态 (数据)，同时 <code>==</code>  运算符比较的是两个对象的内存地址，所以说 <code>Object</code>  的 <code>equals()</code>  方法是比较两个对象的内存地址是否相等，即： <code>object1.equals(object2)</code>  为 <code>true</code>  则表示 <code>equals1</code>  和 <code>equals2</code>  实际上是引用的同一个对象。</p>\n</blockquote>\n<h2 id=\"2️⃣-equals与的区别\"><a class=\"anchor\" href=\"#2️⃣-equals与的区别\">#</a> 2️⃣ equals 与 == 的区别</h2>\n<blockquote>\n<p>一般都会回答： <code>qeuals</code>  比较的是对象内容， <code>==</code>  比较的是对象地址。但从前面我们可以知道 <code>equals()</code>  方法在 <code>Object</code>  中的实现也是间接使用了 <code>==</code>  运算符进行比较的，从严格意义上来说，前面的回答并不完全正确，先来看下段示例代码：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>People.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>override<span class=\"token punctuation\">.</span>equlals</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: 示例类</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2023-12-15 15:33</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">People</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> gender<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">People</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> gender<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gender <span class=\"token operator\">=</span> gender<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">People</span> people1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">People</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"古河渚\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"女\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">People</span> people2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">People</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"古河渚\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"女\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>people1<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>people2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>people1 <span class=\"token operator\">==</span> people2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>          执行结果：</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            false</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            false</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>对于 <code>==</code>  运算符比较两个 <code>People</code>  对象返回了 <code>false</code> , 这点我们很容易就能明白，毕竟它们比较的是内存地址，而 <code>people1</code>  和 <code>people2</code>  是两个不同的实例对象，所以 <code>people1</code>  与 <code>people2</code>  的内存地址也不一样，现在的问题是我们希望判断实例中的内容是否相等，但 <code>equals()</code>  方法结果却返回了 <code>false</code> ，当然对于 <code>equals()</code>  方法返回了 <code>false</code>  我们也知道是怎么回事，因为 <code>equals()</code>  方法来自 <code>Object</code>  类，而我们并没有重写 <code>equals()</code>  方法，调用的必然是 <code>Object</code>  类中原始的 <code>equals()</code>  方法，根据前面分析我们也知道该原始 <code>equals()</code>  方法内部实现使用的是 <code>==</code>  运算符，因此我们必须在 <code>People</code>  类中重写 <code>equals()</code>  方法来实现比较内容，而不是比较内存地址，重写后的示例如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>People.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>override<span class=\"token punctuation\">.</span>equlals</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Objects</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Description: 示例类</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @DateTime: 2023-12-15 15:33</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">People</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> gender<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> o<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>o <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> o<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">People</span> people <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">People</span><span class=\"token punctuation\">)</span> o<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">return</span> age <span class=\"token operator\">==</span> people<span class=\"token punctuation\">.</span>age <span class=\"token operator\">&amp;&amp;</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> people<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>gender<span class=\"token punctuation\">,</span> people<span class=\"token punctuation\">.</span>gender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">People</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> gender<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gender <span class=\"token operator\">=</span> gender<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">People</span> people1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">People</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"古河渚\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"女\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token class-name\">People</span> people2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">People</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"古河渚\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"女\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>people1<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>people2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>people1 <span class=\"token operator\">==</span> people2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>          执行结果：</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            true</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            false</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>总结：默认情况下从 <code>Object</code>  类中继承而来的 <code>equals()</code>  方法与 <code>==</code>  运算符是等价的，比较的是对象的内存地址，但我们可以重写 <code>equals()</code>  方法，使其按照我们的需求方式进行比较，而不再是比较内存地址。</p>\n</blockquote>\n<h2 id=\"3️⃣-equals的重写规则\"><a class=\"anchor\" href=\"#3️⃣-equals的重写规则\">#</a> 3️⃣ equals 的重写规则</h2>\n<ul>\n<li>注意：我们在重写 <code>equals()</code>  方法时，需要注意下面几项规则：\n<ul>\n<li><code>自反性</code> ：对于任何非 <code>null</code>  的引用值 <code>x</code> , <code>x.equals(x)</code>  应该返回 <code>true</code> 。</li>\n<li><code>对称性</code> ：对于任何非 <code>null</code>  的引用值 <code>x</code>  与 <code>y</code> , 当且仅当 <code>y.equals(x)</code>  返回 <code>true</code>  时 <code>x.equals(y)</code>  才返回 <code>true</code> 。</li>\n<li><code>传递性</code> ：对于任何非 <code>null</code>  的引用值 <code>x</code>   <code>y</code>   <code>z</code> , 如果 <code>y.equals(x)</code>  返回 <code>true</code>  和 <code>y.equals(z)</code>  返回 <code>true</code>  那么 <code>x.equals(z)</code>  也应该返回 <code>true</code> 。</li>\n<li><code>一致性</code> ：对于任何非 <code>null</code>  的引用值 <code>x</code>  与 <code>y</code> , 假设对象上 <code>equals</code>  比较中的信息没有被修改，则多次调用 <code>x.equals(y)</code>  始终应该返回 <code>true</code>  或始终返回 <code>false</code> 。</li>\n<li>对于任何非空引用值 <code>x</code> , <code>x.equals(null)</code>  应该返回 <code>false</code> 。</li>\n</ul>\n</li>\n<li>当然在通常情况下，如果只是进行同一个类两个对象的相等比较一般都可以满足以上五点要求，示例代码如下：</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>People.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>override<span class=\"token punctuation\">.</span>equlals</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Objects</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Description: 示例类</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @DateTime: 2023-12-15 15:33</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">People</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> gender<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>o <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">People</span> people<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">return</span> age <span class=\"token operator\">==</span> people<span class=\"token punctuation\">.</span>age <span class=\"token operator\">&amp;&amp;</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> people<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>gender<span class=\"token punctuation\">,</span> people<span class=\"token punctuation\">.</span>gender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">People</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> gender<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gender <span class=\"token operator\">=</span> gender<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\">People</span> people1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">People</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"古河渚\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"女\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token class-name\">People</span> people2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">People</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"古河渚\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"女\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">People</span> people3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">People</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"古河渚\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"女\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"自反性：\"</span> <span class=\"token operator\">+</span> people1<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>people1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"对称性：\"</span> <span class=\"token operator\">+</span> people1<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>people2<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> people2<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>people1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"传递性：\"</span> <span class=\"token operator\">+</span> people1<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>people2<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> people2<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>people3<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> people1<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>people3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"一致性：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>people1<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>people2<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> people1<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>people2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"equals方法没有遵守一致性！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"equals方法遵守一致性！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"与null比较：\"</span> <span class=\"token operator\">+</span> people1<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>          执行结果：</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            自反性：true</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            对称性：true true</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            传递性：true true true</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            一致性：equals 方法遵守一致性！</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            与 null 比较：false</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>以上结果我看可以看出 <code>equals()</code>  方法在同一个类的两个对象间比较还是很容易理解的。如果是子类与父类混合比较，那么情况就不太简单了，接着来看下面的示例：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>override<span class=\"token punctuation\">.</span>equlals</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Objects</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Description: 继承 People</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @DateTime: 2023-12-15 16:34</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FemalePeople</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">People</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     * 职业</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> occupation<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">FemalePeople</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> gender<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> occupation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> gender<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>occupation <span class=\"token operator\">=</span> occupation<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>o <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">FemalePeople</span> fp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> occupation <span class=\"token operator\">==</span> fp<span class=\"token punctuation\">.</span>occupation<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\">People</span> people1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">People</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"古河渚\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"女\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token class-name\">FemalePeople</span> femalePeople1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FemalePeople</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"古河渚\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"女\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"学生\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">FemalePeople</span> femalePeople2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FemalePeople</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"杏\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"女\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"学生\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>people1<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>femalePeople1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>femalePeople1<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>people1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>people1<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>femalePeople2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>          执行结果：</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            true</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            false</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            false</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>当然这个结果也是我们意料之中的，因为 <code>FemalePeople</code>  类型是属于 <code>People</code>  类型，因此 <code>people1.equals(femalePeople1)</code>  肯定为 <code>true</code> , 对于 <code>femalePeople1.equals(people1)</code>  返回 <code>false</code>  是因为 <code>People</code>  类型不一定是 <code>FemalePeople</code>  类型 ( <code>People</code>  还可以有其它子类)，但是如果有这样一个需求，只要 <code>FemalePeople</code>  和 <code>People</code>  的姓名、性别、年龄一样我们就认为他们两个是相同的，在这样一种情况下的需求： <code>People(父类)</code>  与 <code>FemalePeople(子类)</code>  的混合比较就不符合 <code>equals()</code>  方法的对称特性了。显然一个返回 <code>true</code> , 一个返回 <code>false</code> , 根据 <code>equals</code>  的对称特性此时两次比较都应该返回 <code>true</code>  才对，如何修改才符合对称特性呢？造成不符合对称性的原因是因为 <code>People</code>  类型不一定是 <code>FemalePeople</code>  类型，在这种情况下我们不应该在 <code>equals()</code>  方法中直接返回 <code>false</code> ，而应该继续使用父类的 <code>equals()</code>  方法进行比较，修改后的代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>FemalePeople.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>override<span class=\"token punctuation\">.</span>equlals</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: 继承 People</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2023-12-15 16:34</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FemalePeople</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">People</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * 职业</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> occupation<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">FemalePeople</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> gender<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> occupation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> gender<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>occupation <span class=\"token operator\">=</span> occupation<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>o <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">FemalePeople</span> fp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> occupation <span class=\"token operator\">==</span> fp<span class=\"token punctuation\">.</span>occupation<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\">People</span> people1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">People</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"古河渚\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"女\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\">FemalePeople</span> femalePeople1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FemalePeople</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"古河渚\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"女\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"学生\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token class-name\">FemalePeople</span> femalePeople2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FemalePeople</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"杏\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"女\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"学生\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">FemalePeople</span> femalePeople3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FemalePeople</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"杏\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"女\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"老师\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>people1<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>femalePeople1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>femalePeople1<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>people1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>people1<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>femalePeople2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>femalePeople2<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>femalePeople3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>          执行结果：</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            true</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            true</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            false</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            false</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>虽然上面代码现在符合了对称性，但还是不符合传递性，按我们之前的需求应该是相等，而且也应该符合 <code>equals</code>  的传递性才对，事实上执行结果却不是这样，出现违背传递性根本原因是：\n<ul>\n<li>父类与子类混合比较。</li>\n<li>子类中声明了新变量，并且在子类 <code>equals()</code>  方法使用了新增的成员变量作为判断对象是否相等的条件。</li>\n</ul>\n</li>\n<li>只要满足上面两个条件 <code>equals()</code>  方法的传递性便失效了，下面是重新修改后的代码，这样就解决了传递性。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>FemalePeople.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>override<span class=\"token punctuation\">.</span>equlals</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: 继承 People</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2023-12-15 16:34</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FemalePeople</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">People</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * 职业</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> occupation<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">FemalePeople</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> gender<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> occupation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> gender<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>occupation <span class=\"token operator\">=</span> occupation<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>o <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">FemalePeople</span> fp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> occupation <span class=\"token operator\">==</span> fp<span class=\"token punctuation\">.</span>occupation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>               <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> occupation <span class=\"token operator\">==</span> fp<span class=\"token punctuation\">.</span>occupation<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token class-name\">People</span> people1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">People</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"古河渚\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"女\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token class-name\">FemalePeople</span> femalePeople1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FemalePeople</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"古河渚\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"女\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"学生\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token class-name\">FemalePeople</span> femalePeople2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FemalePeople</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"杏\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"女\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"学生\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token class-name\">FemalePeople</span> femalePeople3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FemalePeople</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"杏\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"女\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"老师\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token class-name\">FemalePeople</span> femalePeople4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FemalePeople</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"椋\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"女\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"老师\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>people1<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>femalePeople1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>femalePeople1<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>people1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>people1<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>femalePeople2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>femalePeople2<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>femalePeople3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>femalePeople4<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>femalePeople2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>          执行结果：</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            true</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            true</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            false</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            true</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            false</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"为什么要重写hashcode方法\"><a class=\"anchor\" href=\"#为什么要重写hashcode方法\">#</a> 为什么要重写 hashCode 方法</h1>\n<blockquote>\n<p>在重写了 <code>equals()</code>  方法后为什么还需要重写 <code>hashCode()</code>  方法呢？这是因为在使用散列数据结构时，如：哈希表，我们希望相等的对象具有相等的哈希码。在 <code>Java</code>  中哈希表使用哈希码来确定存储对象的位置。如果：两个相等的对象具有不同的哈希码，那么它们将被存储在哈希表的不同位置，导致无法正确查找对象。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Demo.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span>override<span class=\"token punctuation\">.</span>equlals</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HashSet</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Objects</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Set</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @Description: 重写 hashCOde Vs 不重写 hashCode</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @DateTime: 2023-12-15 19:22</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     * 只重写 equals 方法未重写 hashCode</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> gender<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Student1</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> gender<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gender <span class=\"token operator\">=</span> gender<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> o<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>o <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> o<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token class-name\">Student1</span> student1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Student1</span><span class=\"token punctuation\">)</span> o<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">return</span> age <span class=\"token operator\">==</span> student1<span class=\"token punctuation\">.</span>age <span class=\"token operator\">&amp;&amp;</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> student1<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>gender<span class=\"token punctuation\">,</span> student1<span class=\"token punctuation\">.</span>gender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>     * 重写 equals 和 hashCode 方法</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> gender<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Student2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> gender<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gender <span class=\"token operator\">=</span> gender<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> o<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>o <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> o<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token class-name\">Student2</span> student2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Student2</span><span class=\"token punctuation\">)</span> o<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token keyword\">return</span> age <span class=\"token operator\">==</span> student2<span class=\"token punctuation\">.</span>age <span class=\"token operator\">&amp;&amp;</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> student2<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>gender<span class=\"token punctuation\">,</span> student2<span class=\"token punctuation\">.</span>gender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> gender<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token class-name\">Student1</span> student1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student1</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"冈崎\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"男\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token class-name\">Student1</span> student2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student1</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"冈崎\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"男\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student1</span><span class=\"token punctuation\">></span></span> set1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        set1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>student1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"只重写了equals方法：\"</span> <span class=\"token operator\">+</span> set1<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>student2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--------------------------------------------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token class-name\">Student2</span> student3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student2</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"古河渚\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"女\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token class-name\">Student2</span> student4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student2</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"古河渚\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"女\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student2</span><span class=\"token punctuation\">></span></span> set2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        set2<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>student3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"重写了equals和hashCode方法：\"</span> <span class=\"token operator\">+</span> set2<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>student4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>          执行方法：</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>            只重写了 equals 方法：false </pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            --------------------------------------------------------</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            重写了 equals 和 hashCode 方法：true</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>在上面代码示例中， <code>Student1</code>  类中未重写 <code>hashCode()</code>  方法，尽管 <code>student1</code>  和 <code>student2</code>  内容相同，但由于它们具有不同的哈希码，在使用 <code>set1.contains(student2)</code>  时返回 <code>false</code> , 这是说明哈希表无法正确定位到 <code>student2</code> 。而 <code>Student2</code>  类中重写了 <code>hashCode()</code>  方法，在使用 <code>set2.contains(student4)</code>  时哈希表就可以正确定位到 <code>student4</code> ，因为它们两个的哈希码是相同的，这就是为什么我们需要确保重写 <code>equals()</code>  方法时为什么也要重写 <code>hashCode()</code>  方法的原因，以便它们的哈希码是相同的，这样哈希表就能正确地存储和查找这些对象了。</p>\n</blockquote>\n<h2 id=\"1️⃣-hashcode的重写规则\"><a class=\"anchor\" href=\"#1️⃣-hashcode的重写规则\">#</a> 1️⃣ hashCode 的重写规则</h2>\n<ul>\n<li>注意：我们在重写 <code>hashCode()</code>  方法时，需要注意下面几项规则：\n<ul>\n<li>如果：两个对象通过 <code>equals()</code>  相等，那么它们的哈希码必须相等。</li>\n<li><code>hashCode()</code>  方法的计算应该是高效的，避免复杂的计算。</li>\n<li><code>hashCode()</code>  方法的结果应该在对象的生命周期内保持不变，如果：一个对象的内容发生了变化，它的哈希码也一个保持不变。</li>\n<li>对于不相等的对象，哈希码尽量不要相等，以提高哈希表的性能。</li>\n</ul>\n</li>\n<li>为了遵守这些规则，通常我们可以使用对象的属性来计算哈希码，比如使用属性的哈希码相加或异或来得到对象的哈希码。</li>\n</ul>\n<blockquote>\n<p>总结：为了保证对象的相等性和哈希表的准确性，我们需要在重写 <code>equals()</code>  方法时一起重写 <code>hashCode()</code>  方法。这两个方法是密切相关的，它们一起确保对象在使用散列数据结构时能够正确工作。当你在面试中遇到这个问题时，不要忘记强调 <code>equals</code>  和 <code>hashCode</code>  方法的一致性和性能，以及遵守重写 <code>hashCode</code>  方法的规则。这将帮助你深刻理解这个重要的概念，并在实际开发中正确地使用它们。</p>\n</blockquote>\n",
            "tags": [
                "计算机科学",
                "Java",
                "Java深入理解",
                "计算机科学",
                "Java深入理解",
                "方法重写",
                "哈希算法",
                "散列表"
            ]
        },
        {
            "id": "https://rainrem.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/java/java%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/Java%E4%BD%8D%E8%BF%90%E7%AE%97%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/",
            "url": "https://rainrem.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/java/java%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/Java%E4%BD%8D%E8%BF%90%E7%AE%97%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/",
            "title": "Java位运算深入理解",
            "date_published": "2023-12-14T11:20:11.000Z",
            "content_html": "<h1 id=\"基础概念\"><a class=\"anchor\" href=\"#基础概念\">#</a> 基础概念</h1>\n<blockquote>\n<p>我们先来了解一下相关的基础概念：<a href=\"#1%EF%B8%8F%E2%83%A3-%E6%9C%BA%E5%99%A8%E7%A0%81\">机器码</a>、<a href=\"#2%EF%B8%8F%E2%83%A3-%E7%9C%9F%E5%80%BC\">真值</a>、<a href=\"#3%EF%B8%8F%E2%83%A3-%E5%8E%9F%E7%A0%81\">原码</a>、<a href=\"#4%EF%B8%8F%E2%83%A3-%E5%8F%8D%E7%A0%81\">反码</a>、<a href=\"#5%EF%B8%8F%E2%83%A3-%E8%A1%A5%E7%A0%81\">补码</a>。</p>\n</blockquote>\n<h2 id=\"1️⃣-机器码\"><a class=\"anchor\" href=\"#1️⃣-机器码\">#</a> 1️⃣ 机器码</h2>\n<ul>\n<li>我们知道无论是代码还是数值，在计算机中最后都转换成了二进制的形式存在，而一个数值在计算机中的二进制表示形式，就是这个数的机器码。</li>\n<li>机器码是有符号位的，在计算机中用一个二进制数的最高位存放符号，正数为 <code>0</code> ，负数为 <code>1</code> 。\n<ul>\n<li>示例如下 (使用原码表示)：</li>\n<li>十进制的 <code>+5</code> ，计算机字长为 <code>8</code>  位，其二进制是 <code>00000101</code> 。</li>\n<li>十进制的 <code>-5</code> ，计算机字长为 <code>8</code>  位，其二进制是 <code>10000101</code> 。</li>\n<li>其中的 <code>00000101</code>  和 <code>10000101</code>  就是机器码。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2️⃣-真值\"><a class=\"anchor\" href=\"#2️⃣-真值\">#</a> 2️⃣ 真值</h2>\n<ul>\n<li>由于机器码的第一位是符号位，所以其形式值就不等于其真值的数值，也就是说 <code>10000101</code>  表示的是 <code>-5</code>  而不是 <code>133</code>  (其中 <code>10000101</code>  的十进制是 <code>131</code> ，前提是不算最高位为符号位)，因此 <code>-5</code>  才是机器码的真值。</li>\n</ul>\n<h2 id=\"3️⃣-原码\"><a class=\"anchor\" href=\"#3️⃣-原码\">#</a> 3️⃣ 原码</h2>\n<ul>\n<li>原码是一种计算机中对数字的二进制的表示方法，原码表示法在数值前面增加一个符号位 (即：最高位为符号位)，正数该位为 <code>0</code> ，负数该位为 <code>1</code> ，其余位表示数值的大小。\n<ul>\n<li><code>[+5] = [00000101](原码)</code></li>\n<li><code>[-5] = [10000101](原码)</code></li>\n</ul>\n</li>\n<li>因为第一位是符号位，因此 <code>8</code>  位二进制的取值范围就是 <code>[1111 1111,0111 1111]</code>  也就是 <code>[-127,127]</code> 。</li>\n</ul>\n<h2 id=\"4️⃣-反码\"><a class=\"anchor\" href=\"#4️⃣-反码\">#</a> 4️⃣ 反码</h2>\n<ul>\n<li>反码是数值储存的一种，但是由于补码更能有效表现数字在计算机中的形式，所以多数计算机一般都不采用反码表示数。</li>\n<li>反码的表示方法如下：\n<ul>\n<li>正数的反码是其本身。</li>\n<li>负数的反码是在其原码的基础上，符号位不变，其余各个位取反。</li>\n<li><code>[+5] = [00000101](原码) = [00000101](反码)</code></li>\n<li><code>[-5] = [10000101](原码) = [11111010](反码)</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"5️⃣-补码\"><a class=\"anchor\" href=\"#5️⃣-补码\">#</a> 5️⃣ 补码</h2>\n<ul>\n<li>在计算机系统中数值一律使用补码来表示和存储，原因在于使用补码，可以将符号位和数值域统一处理，同时加减法也可以统一处理。</li>\n<li>补码的表示方法如下：\n<ul>\n<li>正数的补码是其本身。</li>\n<li>负数的补码是在其原码的基础上，符号位不变，其余各位取反然后 <code>+1</code> ，即：在反码的基础上 <code>+1</code> 。</li>\n<li><code>[+5] = [00000101](原码) = [00000101](反码) = [00000101](补码)</code></li>\n<li><code>[-5] = [10000101](原码) = [11111010](反码) = [11111011](补码)</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"6️⃣-总结\"><a class=\"anchor\" href=\"#6️⃣-总结\">#</a> 6️⃣ 总结</h2>\n<blockquote>\n<p>计算机中的符号数有三种表示方法，即： <code>原码</code> 、 <code>反码</code> 、 <code>补码</code> ，三种表示方法均有符号位和数值位两部分，符号位都是用 <code>0</code>  表示为 <code>正数</code> ，用 <code>1</code>  表示为 <code>负数</code> ，而数值位三种表示方法各不相同，而在计算机系统中，数值一律使用补码来表示和存储。</p>\n</blockquote>\n<h1 id=\"位运算\"><a class=\"anchor\" href=\"#位运算\">#</a> 位运算</h1>\n<blockquote>\n<p>位移操作：只针对 <code>int</code>  类型的数据有效，在 <code>Java</code>  中一个 <code>int</code>  的长度始终是 <code>32</code>  位，也就是 <code>4</code>  个字节，它操作的都是该整数的二进制数，也可作用于以下类型即： <code>byte</code> 、 <code>short</code> 、 <code>char</code> 、 <code>long</code>  它们都是整数形式，当为这四种类型时 <code>JVM</code>  先把它们转换为 <code>int</code>  类型再进行操作。</p>\n</blockquote>\n<div class=\"note danger no-icon\">\n<p>注意：在 <code>Java</code>  中没有 <code>&lt;&lt;&lt;</code>  符号</p>\n</div>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">符号</th>\n<th style=\"text-align:center\">描述</th>\n<th style=\"text-align:center\">运算规则</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">&amp;</td>\n<td style=\"text-align:center\">与</td>\n<td style=\"text-align:center\">两个位都为 1 时，结果才为 1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">|</td>\n<td style=\"text-align:center\">或</td>\n<td style=\"text-align:center\">两个位都为 0 时，结果才为 0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">^</td>\n<td style=\"text-align:center\">异或</td>\n<td style=\"text-align:center\">两个位相同为 0，不同为 1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">~</td>\n<td style=\"text-align:center\">取反</td>\n<td style=\"text-align:center\">所有位置 0 变 1，1 变 0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;&lt;</td>\n<td style=\"text-align:center\">左移</td>\n<td style=\"text-align:center\">各二进位全部左移若干位，高位丢弃，低位补 0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&gt;&gt;</td>\n<td style=\"text-align:center\">带符号右移</td>\n<td style=\"text-align:center\">各二进位全部右移若干位，低位丢弃，高位补为符号位</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&gt;&gt;&gt;</td>\n<td style=\"text-align:center\">无符号右移</td>\n<td style=\"text-align:center\">各二进位全部右移若干位，低位丢弃，高位补 0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&amp;&amp;</td>\n<td style=\"text-align:center\">逻辑与</td>\n<td style=\"text-align:center\">左右表达式均为 true 时，运算最终结果才为 true</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">||</td>\n<td style=\"text-align:center\">逻辑非</td>\n<td style=\"text-align:center\">左右表达式只要有一个为 true，运算最终结果就为 true</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>BinaryUtils.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: 打印 Java 中 int 整型的在底层的 32 位信息</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2023-12-14 22:49</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BinaryUtils</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">31</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"0\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"1️⃣-左移\"><a class=\"anchor\" href=\"#1️⃣-左移\">#</a> 1️⃣ 左移 (&lt;&lt;)</h2>\n<ul>\n<li><code>m &lt;&lt; n</code>  的含义是把整数 <code>m</code>  表示的二进制数左移 <code>n</code>  位，高位移出 <code>n</code>  位都舍弃，低位补 <code>0</code>  (此时将会出现正数变成负数的可能)，示例如下：\n<ul>\n<li><code>5 &lt;&lt; 2</code> ：把十进制的数值 <code>5</code>  左移两位，按照如下步骤计算。\n<ul>\n<li>把 <code>5</code>  转为 <code>16</code>  位的二进制机器码： <code>00000000 00000000 00000000 00000101</code></li>\n<li>按左移原理，将二进制数左移两位： <code>00000000 00000000 00000000 00010100</code></li>\n<li>左移后的结果为 <code>20</code></li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Test.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         执行结果：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            00000000000000000000000000000101</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            00000000000000000000000000010100</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            00000000000000000000000000010100</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            整体左移 2 位，高位丢弃，低位补 0</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li><code>5 &lt;&lt; 29</code> ：把十进制的数值 <code>5</code>  左移 <code>29</code>  位，按照如下步骤计算。\n<ul>\n<li>把 <code>5</code>  转为 <code>16</code>  位的二进制机器码： <code>00000000 00000000 00000000 0000101</code></li>\n<li>按左移原理，将二进制数左移 <code>29</code>  位： <code>10100000 00000000 00000000 00000000</code></li>\n<li>左移后高位是 <code>1</code> ，结果显然是负数</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>总结： <code>m &lt;&lt; n</code>  即在数字没有溢出的前提下，对于正数和负数，左移 <code>n</code>  位都相当于 <code>m</code>  乘以 <code>2</code>  的 <code>n</code>  次方。</li>\n</ul>\n<h2 id=\"2️⃣-右移\"><a class=\"anchor\" href=\"#2️⃣-右移\">#</a> 2️⃣ 右移 (&gt;&gt;)</h2>\n<ul>\n<li><code>m &gt;&gt; n</code>  的含义是把整数 <code>m</code>  表示的二进制数右移 <code>n</code>  位， <code>m</code>  为正数，高位全部补 <code>0</code> ， <code>m</code>  为负数，高位全部补 <code>1</code> ，示例如下：\n<ul>\n<li><code>5 &gt;&gt; 2</code> ：把十进制的数值 <code>5</code>  右移两位，按照如下步骤计算\n<ul>\n<li>把 <code>5</code>  转为 <code>16</code>  位的二进制机器码： <code>00000000 00000000 00000000 00000101</code></li>\n<li>按右移原理，将二进制数左移两位： <code>00000000 00000000 00000000 00000001</code></li>\n<li>右移后的结果为 <code>1</code></li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Test.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">>></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 将二进制转为十进制  </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"00000000000000000000000000000001\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"结果：\"</span> <span class=\"token operator\">+</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>         执行结果：</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            00000000000000000000000000000001</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            结果：1</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li><code>-5 &gt;&gt; 2</code> ：把十进制的数值 <code>-5</code>  右移两位，按照如下步骤计算\n<ul>\n<li>把 <code>-5</code>  转为 <code>16</code>  位的二进制机器码： <code>11111111 11111111 11111111 11111011</code></li>\n<li>按右移原理，将二进制数右移两位： <code>11111111 1111111 11111111 11111110</code></li>\n<li>右移后结果为 <code>-2</code></li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Test.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">5</span> <span class=\"token operator\">>></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         执行结果：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>              11111111111111111111111111111011</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>              11111111111111111111111111111110</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>              11111111111111111111111111111110</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>总结： <code>m &gt;&gt; n</code>  即相当于 <code>m</code>  除以 <code>2</code>  的 <code>n</code>  次方，得到的为整数时，即为结果，如果结果为小数，此时会出现两种情况：\n<ul>\n<li>如果 <code>m</code>  为正数，得到的商会无条件的舍弃小数位。</li>\n<li>如果 <code>m</code>  为负数，舍弃小数部分然后把整数部分 <code>+1</code>  得到位移后的值。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3️⃣-无符号右移\"><a class=\"anchor\" href=\"#3️⃣-无符号右移\">#</a> 3️⃣ 无符号右移 (&gt;&gt;&gt;)</h2>\n<ul>\n<li><code>m &gt;&gt;&gt; n</code> ：整数 <code>m</code>  表示的二进制右移 <code>n</code>  位，不论正负数，高位都补 <code>0</code> ，示例如下：\n<ul>\n<li><code>5 &gt;&gt;&gt; 2</code> ：把十进制的数值 <code>5</code>  右移两位，按照如下步骤计算\n<ul>\n<li>把 <code>5</code>  转为 <code>16</code>  位的二进制机器码： <code>00000000 00000000 00000000 00000101</code></li>\n<li>按右移原理，将二进制数左移两位： <code>00000000 00000000 00000000 00000001</code></li>\n<li>右移后结果为 <code>1</code></li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Test.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">>>></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         执行结果：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            00000000000000000000000000000101</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            00000000000000000000000000000001</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            00000000000000000000000000000001</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li><code>-5 &gt;&gt;&gt; 2</code> ：把十进制的数值 <code>-5</code>  右移两位，按照如下步骤计算\n<ul>\n<li>把 <code>-5</code>  转为 <code>16</code>  位的二进制机器码： <code>11111111 11111111 11111111 11111011</code></li>\n<li>按右移原理，将二进制数右移两位： <code>00111111 11111111 11111111 11111110</code></li>\n<li>右移后结果为正数： <code>1073741822</code></li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Test.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">5</span> <span class=\"token operator\">>>></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 将二进制转为十进制</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"00111111111111111111111111111110\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"结果：\"</span> <span class=\"token operator\">+</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>         执行结果：</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            11111111111111111111111111111011</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            00111111111111111111111111111110</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            结果：1073741822</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4️⃣-按位非操作~\"><a class=\"anchor\" href=\"#4️⃣-按位非操作~\">#</a> 4️⃣ 按位非操作 (~)</h2>\n<ul>\n<li><code>~</code>  按位取反操作符，对每个二进制位的内容求反，即： <code>0</code>  变为 <code>1</code> ， <code>1</code>  变为 <code>0</code> ，示例如下：\n<ul>\n<li>把 <code>-5</code>  转为 <code>16</code>  位的二进制机器码： <code>11111111 11111111 11111111 11111011</code></li>\n<li><code>~(-5)</code>  取反结果： <code>00000000 00000000 00000000 00000100</code></li>\n<li>转为十进制结果为 <code>4</code></li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Test.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token operator\">~</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 将二进制转为十进制</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"00000000000000000000000000000100\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"结果：\"</span> <span class=\"token operator\">+</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>         执行结果：</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            11111111111111111111111111111011</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            00000000000000000000000000000100</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            结果：4</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"5️⃣-按位与操作\"><a class=\"anchor\" href=\"#5️⃣-按位与操作\">#</a> 5️⃣ 按位与操作 (&amp;)</h2>\n<ul>\n<li><code>&amp;</code>  位与操作，对应的二进制位进行进行与操作，两个都为 <code>1</code>  才为 <code>1</code> ，其它情况均为 <code>0</code> ，示例如下：\n<ul>\n<li><code>1 &amp; 0 = 0</code>   <code>0 &amp; 0 = 0</code></li>\n<li><code>1 &amp; 1 = 1</code>   <code>0 &amp; 1 = 0</code></li>\n</ul>\n</li>\n<li>示例： <code>-5 &amp; 4</code>\n<ul>\n<li><code>-5</code>  的二进制为： <code>11111111 11111111 11111111 11111011</code></li>\n<li><code>4</code>  的二进制为： <code>00000000 00000000 00000000 00000100</code></li>\n<li>逻辑与运行结果： <code>00000000 00000000 00000000 00000000</code></li>\n<li>最终结果为 <code>0</code></li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Test.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">5</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         执行结果：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            11111111111111111111111111111011</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            00000000000000000000000000000100</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            00000000000000000000000000000000</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"6️⃣-按位或操作\"><a class=\"anchor\" href=\"#6️⃣-按位或操作\">#</a> 6️⃣ 按位或操作 (|)</h2>\n<ul>\n<li><code>|</code>  位或操作符，对应的二进制位进行或操作，两个都为 <code>0</code>  才为 <code>0</code> ，其它情况均为 <code>1</code> ，示例如下：\n<ul>\n<li><code>1 | 0 = 1</code>   <code>0 | 0 = 0</code></li>\n<li><code>1 | 1 = 1</code>   <code>0 | 1 = 1</code></li>\n</ul>\n</li>\n<li>示例： <code>-5 | 4</code>\n<ul>\n<li><code>-5</code>  的二进制为： <code>11111111 11111111 11111111 11111011</code></li>\n<li><code>4</code>  的二进制为： <code>00000000 00000000 00000000 00000100</code></li>\n<li>逻辑或运算结果： <code>11111111 11111111 11111111 11111111</code></li>\n<li>最终结果为 <code>-1</code></li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Test.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">5</span> <span class=\"token operator\">|</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         执行结果：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            11111111111111111111111111111011</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            00000000000000000000000000000100</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            11111111111111111111111111111111</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>利用或的原理我们可以把字节转换为整数， <code>-64&amp;0xFF = 192</code>  其中都 <code>0xFF</code>  表示整数 <code>255</code><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Test.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">64</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>         执行结果：</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            192</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            255</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"7️⃣-按位异或操作\"><a class=\"anchor\" href=\"#7️⃣-按位异或操作\">#</a> 7️⃣ 按位异或操作 (^)</h2>\n<ul>\n<li><code>^</code>  异或操作符，相同位值为 <code>0</code>  否则为 <code>1</code> ，示例如下：\n<ul>\n<li><code>1 ^ 1 = 0</code>   <code>1 ^ 0 = 1</code></li>\n<li><code>0 ^ 1 = 1</code>   <code>0 ^ 0 = 0</code></li>\n</ul>\n</li>\n<li>示例： <code>-5 ^ 4</code>\n<ul>\n<li><code>-5</code>  的二进制为： <code>11111111 11111111 11111111 11111011</code></li>\n<li><code>4</code>  的二进制为： <code>00000000 00000000 00000000 00000100</code></li>\n<li>逻辑异或运算结果： <code>11111111 11111111 11111111 11111111</code></li>\n<li>最终结果为 <code>-1</code></li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Test.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">5</span> <span class=\"token operator\">^</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>         执行结果：</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            11111111111111111111111111111011</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            00000000000000000000000000000100</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            11111111111111111111111111111111</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            11111111111111111111111111111111</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>利用逻辑异或操作有个作用就是可以比较两个数值是否相等，即：利用 <code>1 ^ 1 = 0</code>  或 <code>0 ^ 0 = 0</code>  的原理，如： <code>5 ^ 5 == 0</code><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Test.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">^</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">^</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">^</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         执行结果：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            0</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            0</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            0</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"8️⃣-总结\"><a class=\"anchor\" href=\"#8️⃣-总结\">#</a> 8️⃣ 总结</h2>\n<blockquote>\n<p>有了上面的分析，我们对 <code>Java</code>  的位运算有了比较全面的了解，那么我们的程序通过位运算又有什么优势呢？其实通过位运算确实会比我们直接的代码程序运算会快很多，因为位运算直接运算的是计算机底层的二进制机器码操作指令，而我们的代码程序运算最终也是要转成计算机可以识别的二进制操作指令才能完成，位运算可以理解为省去了中间转换的操作，处理器可以直接操作。我们会在某些源码中经常能看到位运算的代码，其实原理是一样的，处理器能够直接支持和处理。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> SHARED_SHIFT   <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> SHARED_UNIT    <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> SHARED_SHIFT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> MAX_COUNT      <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> SHARED_SHIFT<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> EXCLUSIVE_MASK <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> SHARED_SHIFT<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "Java",
                "Java深入理解",
                "计算机科学",
                "Java深入理解",
                "位运算"
            ]
        },
        {
            "id": "https://rainrem.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/java/java%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/Java%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%9E%8B%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/",
            "url": "https://rainrem.top/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/java/java%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/Java%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%9E%8B%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/",
            "title": "Java枚举类型深入理解",
            "date_published": "2023-12-05T12:51:00.000Z",
            "content_html": "<blockquote>\n<p>在 <code>Java 5</code>  中新增了枚举类型，它是一种特殊的数据类型，之所以特殊是因为它是一种 <code>class</code>  类型却又比 <code>class</code>  类型多了些特殊的约束，但是这些约束的存在也造就了枚举类型的简洁性、安全性以及便捷性。<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vUmFpblNhdWNlL2phdmEtZW51bS1leGFtcGwtZGVtbw==\">🚀本篇章代码 Demo</span></p>\n</blockquote>\n<h1 id=\"定义枚举\"><a class=\"anchor\" href=\"#定义枚举\">#</a> 定义枚举</h1>\n<blockquote>\n<p>下面这是在没有枚举类型的情况下定义常量常见的方法如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>OrdinaryConstantDemo.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">本示例使用JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Description: 普通方式定义常量</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @DateTime: 2023-12-05 21:14</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrdinaryConstantDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     * 星期一</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> MONDAY <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     * 星期二</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> TUESDAY <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     * 星期三</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> WEDNESDAY <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     * 星期四</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> THURSDAY <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>     * 星期五</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> FRIDAY <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>     * 星期六</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> SATURDAY <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>     * 星期天</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> SUNDAY <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>在上述中的常量定义的方式称为 <code>int</code>  枚举模式，这种定义方法并没有什么错，但它存在许多不足的地方，如：类型安全和使用方便性上并没有多少好处，如果存在定义 <code>int</code>  值相同的变量，混淆的几率还是很大的，编译器并不会做出任何警告提示，因此这种方式在枚举出现后并不提倡，现在我们利用枚举类型来重新定义上述常量，定义方式如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>DayType.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">本示例使用JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 枚举定义，枚举类型使用 enum 关键字</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @author LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">DayType</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * 星期一</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    MONDAY<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * 星期二</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    TUESDAY<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     * 星期三</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    WEDNESDAY<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     * 星期四</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    THURSDAY<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     * 星期五</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    FRIDAY<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>     * 星期六</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    SATURDAY<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>     * 星期天</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    SUNDAY</pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>在定义枚举类型时我们使用的关键字是 <code>enum</code>  与 <code>class</code>  关键字类似，枚举类型 <code>DayType</code>  中分别定义了从周一到周日的值，注意： <code>值</code> 一般是大写字母，多个值之间使用逗号分隔，同时我们应该知道的是枚举类型可以像 <code>class</code>  类型一样，定义为一个独立的文件，当然也可以定义在其它类内部，更重要的是枚举常量在类型安全性和便捷性都有保证，如果类型出现问题编译器会提示警告信息，请务必记住枚举类型表示的类型其取值是有限的，也就是说每个值都是可以枚举出来的，如何使用枚举描述上述的一周呢，代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>DayTypeTest.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">本示例使用JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: DayType 测试</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2023-12-05 21:54</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DayTypeTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 引用内部枚举，在 cmd 中使用 javac 编译成 class 文件时不可引用外部枚举会显示错误：找不到符合错误</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">//        InternalDayType monday = InternalDayType.MONDAY;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 创建枚举数组</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token class-name\">InternalDayType</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> days <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InternalDayType</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">InternalDayType</span><span class=\"token punctuation\">.</span>MONDAY<span class=\"token punctuation\">,</span> <span class=\"token class-name\">InternalDayType</span><span class=\"token punctuation\">.</span>TUESDAY<span class=\"token punctuation\">,</span> <span class=\"token class-name\">InternalDayType</span><span class=\"token punctuation\">.</span>WEDNESDAY<span class=\"token punctuation\">,</span> <span class=\"token class-name\">InternalDayType</span><span class=\"token punctuation\">.</span>THURSDAY<span class=\"token punctuation\">,</span> <span class=\"token class-name\">InternalDayType</span><span class=\"token punctuation\">.</span>FRIDAY<span class=\"token punctuation\">,</span> <span class=\"token class-name\">InternalDayType</span><span class=\"token punctuation\">.</span>SATURDAY<span class=\"token punctuation\">,</span> <span class=\"token class-name\">InternalDayType</span><span class=\"token punctuation\">.</span>SUNDAY<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> days<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"day[\"</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">\"].ordinal():\"</span> <span class=\"token operator\">+</span> days<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">ordinal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------------------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// 通过 compareTo 方法比较，实际上其内部是通过 ordinal () 值比较的</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"days[0].compareTo(days[1]):\"</span> <span class=\"token operator\">+</span> days<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>days<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"days[0].compareTo(days[1]):\"</span> <span class=\"token operator\">+</span> days<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>days<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// 获取该枚举对象的 Class 对象引用，当然也可以通过 getClass 方法</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> clazz <span class=\"token operator\">=</span> days<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaringClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"clazz:\"</span> <span class=\"token operator\">+</span> clazz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------------------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">//name()</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"days[0].name():\"</span> <span class=\"token operator\">+</span> days<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"days[1].name():\"</span> <span class=\"token operator\">+</span> days<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"days[2].name():\"</span> <span class=\"token operator\">+</span> days<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"days[3].name():\"</span> <span class=\"token operator\">+</span> days<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------------------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"days[0].toString():\"</span> <span class=\"token operator\">+</span> days<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"days[1].toString():\"</span> <span class=\"token operator\">+</span> days<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"days[2].toString():\"</span> <span class=\"token operator\">+</span> days<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"days[3].toString():\"</span> <span class=\"token operator\">+</span> days<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------------------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token class-name\">InternalDayType</span> d <span class=\"token operator\">=</span> <span class=\"token class-name\">Enum</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InternalDayType</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> days<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token class-name\">InternalDayType</span> d2 <span class=\"token operator\">=</span> <span class=\"token class-name\">InternalDayType</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InternalDayType</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> days<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d:\"</span> <span class=\"token operator\">+</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d2:\"</span> <span class=\"token operator\">+</span> d2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        执行结果：</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        day [0].ordinal ():0</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        day [1].ordinal ():1</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        day [2].ordinal ():2</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        day [3].ordinal ():3</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        day [4].ordinal ():4</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        day [5].ordinal ():5</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        day [6].ordinal ():6</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        -------------------------------------</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        days [0].compareTo (days [1]):-1</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        days [0].compareTo (days [1]):-2</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        clazz:class top.rem.rain.InternalDayType</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        -------------------------------------</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        days [0].name ():MONDAY</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        days [1].name ():TUESDAY</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        days [2].name ():WEDNESDAY</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        days [3].name ():THURSDAY</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        -------------------------------------</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        days [0].toString ():MONDAY</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        days [1].toString ():TUESDAY</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        days [2].toString ():WEDNESDAY</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        days [3].toString ():THURSDAY</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        -------------------------------------</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        d:MONDAY</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        d2:MONDAY</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>   * 此处使用内部方式定义并使用 javac 来变成成 class 文件</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>   * 使用外部类会显示找不到文件</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">InternalDayType</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>     * 星期一</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    MONDAY<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>     * 星期二</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    TUESDAY<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>     * 星期三</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    WEDNESDAY<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"99\"></td><td><pre>     * 星期四</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    THURSDAY<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"103\"></td><td><pre>     * 星期五</pre></td></tr><tr><td data-num=\"104\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    FRIDAY<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"107\"></td><td><pre>     * 星期六</pre></td></tr><tr><td data-num=\"108\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    SATURDAY<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"111\"></td><td><pre>     * 星期天</pre></td></tr><tr><td data-num=\"112\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>    SUNDAY</pre></td></tr><tr><td data-num=\"114\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre></pre></td></tr><tr><td data-num=\"116\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>直接引用枚举的值即可，这便是枚举类型的最简单的模型。</p>\n</blockquote>\n<h1 id=\"枚举实现原理\"><a class=\"anchor\" href=\"#枚举实现原理\">#</a> 枚举实现原理</h1>\n<ul>\n<li>我们了解了枚举类型的定义与简单使用后，现在有必要来了解一下枚举类型的基本实现原理。</li>\n<li>在使用关键字 <code>enum</code>  创建枚举类型并编译后，编译器会为我们生成一个相关的类。</li>\n<li>这个类继承了 <code>Java API</code>  中的 <code>java.lang.Enum</code>  类，通过关键字 <code>enum</code>  创建枚举类型在编译后事实上就是一个类类型。</li>\n</ul>\n<div class=\"note danger no-icon\">\n<p>使用 <code>cmd</code>  首先 cd 到存放 <code>.java</code>  文件的目录下后使用命令，使用 <code>javac</code>  命令在 <code>cmd</code>  窗口中编译 <code>DayTypeTest.java</code>  文件</p>\n</div>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] $\"></td><td><pre>javac DayTypeTest.java -encoding UTF-8</pre></td></tr></table></figure><div class=\"note danger no-icon\">\n<p>利用 <code>javac</code>  将前面的 <code>DayTypeTest.java</code>  文件进行编译，编译后会在当前目录下出现生成的两个文件一个是 <code>DayTypeTest.class</code>  另一个则是它的枚举类型 <code>InternalDayType.class</code> ，也就验证前面说的使用关键字 <code>enum</code>  定义枚举类型并编译后，编译器会自动帮助我们生成一个与枚举相关的类，反编译文件如下：</p>\n</div>\n<ul>\n<li>IntelliJ IDEA 无法反编译出以下效果。</li>\n<li>工具使用  <code>cfr-0.152.jar</code> ，下载地址 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmVuZi5vcmcvb3RoZXIvY2ZyLw==\">https://www.benf.org/other/cfr/</span>。</li>\n<li><code>cmd</code>  窗口中使用的命令：<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] $\"></td><td><pre>java -jar cfr-0.152.jar --sugarenums <span class=\"token boolean\">false</span> -outputpath 请将此处替换为反编译后的储存路径 InternalDayType.class</pre></td></tr></table></figure></li>\n<li><code>--sugarenums false</code>  代表将使用 <code>CFR 0_6</code>  反编译，详细介绍请看此处<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmVuZi5vcmcvb3RoZXIvY2ZyL2hvdy1hcmUtZW51bXMtaW1wbGVtZW50ZWQuaHRtbA==\"> Java 1.5 枚举是如何实现的？</span>。</li>\n<li><code>-outputpath</code>  代表要保存反编译后的文件储存路径。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>InternalDayType.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmVuZi5vcmcvb3RoZXIvY2ZyLw==\">反编译工具下载</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * IntelliJ IDEA 无法反编译出此效果</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 工具使用 cfr-0.152.jar</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 工具下载地址 https://www.benf.org/other/cfr/</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * cmd 窗口中使用的命令 java -jar cfr-0.152.jar --sugarenums false -outputpath D:\\ InternalDayType.class</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * 反编译出如下效果请添加 --sugarenums false 语法</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * -outputpath 代表要保存反编译后的文件储存路径</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * Decompiled with CFR 0.152.</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 反编译 InternalDayType.class</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InternalDayType</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Enum</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">InternalDayType</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 前面咱们自己定义的 7 种枚举实例，并实例化枚举</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token comment\">/* enum */</span> <span class=\"token class-name\">InternalDayType</span> MONDAY <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InternalDayType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MONDAY\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token comment\">/* enum */</span> <span class=\"token class-name\">InternalDayType</span> TUESDAY <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InternalDayType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TUESDAY\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token comment\">/* enum */</span> <span class=\"token class-name\">InternalDayType</span> WEDNESDAY <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InternalDayType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"WEDNESDAY\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token comment\">/* enum */</span> <span class=\"token class-name\">InternalDayType</span> THURSDAY <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InternalDayType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"THURSDAY\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token comment\">/* enum */</span> <span class=\"token class-name\">InternalDayType</span> FRIDAY <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InternalDayType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"FRIDAY\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token comment\">/* enum */</span> <span class=\"token class-name\">InternalDayType</span> SATURDAY <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InternalDayType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SATURDAY\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token comment\">/* enum */</span> <span class=\"token class-name\">InternalDayType</span> SUNDAY <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InternalDayType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SUNDAY\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token comment\">/* synthetic */</span> <span class=\"token class-name\">InternalDayType</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> $VALUES<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 编译器为我们添加的静态 values () 方法</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">InternalDayType</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InternalDayType</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>$VALUES<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">// 编译器为我们添加的静态 valuesOf () 方法</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">// 注意返回时调用了 Enum 类的 valueOf () 方法</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">InternalDayType</span> <span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> string<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Enum</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InternalDayType</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">// 私有构造函数</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">InternalDayType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> string<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token comment\">// 将实例化后的枚举添加到了静态块中，也就是静态常量池中</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        $VALUES <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InternalDayType</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>MONDAY<span class=\"token punctuation\">,</span> TUESDAY<span class=\"token punctuation\">,</span> WEDNESDAY<span class=\"token punctuation\">,</span> THURSDAY<span class=\"token punctuation\">,</span> FRIDAY<span class=\"token punctuation\">,</span> SATURDAY<span class=\"token punctuation\">,</span> SUNDAY<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>从上面反编译的代码可以看出编译器确实帮助我们生成了一个 <code>InternalDayType</code>  类 (注意：该类型是 <code>final</code>  类型的，将无法被继承) 而且该类继承自 <code>java.lang.Enum</code>  类，该类是一个抽象类。</li>\n<li>编译器还帮助我们生成了 <code>7</code>  个 <code>InternalDayType</code>  类型的实例对象分别对应枚举中定义的 <code>7</code>  个日期，也就是使用关键字 <code>enum</code>  定义的 <code>InternalDayType</code>  类型中的每种日期枚举常量也是实实在在的 <code>InternalDayType</code>  实例对象，只不过代表的内容不一样。</li>\n<li>注意：编译器还为我们生成了两个静态方法，分别是 <code>values()</code>  和 <code>valuesOf()</code> ，稍后分析它们的用法，使用关键字 <code>enum</code>  定义的枚举类型，在编译后也将转换为一个实实在在的类，而在该类中会存在每个在枚举类型中定义好变量的对应实例对象。</li>\n<li>如上述 <code>MONDAY</code>  枚举类型对应 <code>public static final InternalDayType MONDAY = new InternalDayType(&quot;MONDAY&quot;, 0);</code> ，同时编译器会为该类创建两个方法，分别是 <code>values()</code>  和 <code>valueOf()</code> 。</li>\n</ul>\n<blockquote>\n<p>下面我们深入来探究一下 <code>java.lang.Enum</code>  类以及 <code>values()</code>  和 <code>valueOf()</code>  方法的用途。</p>\n</blockquote>\n<h1 id=\"枚举常见方法\"><a class=\"anchor\" href=\"#枚举常见方法\">#</a> 枚举常见方法</h1>\n<h2 id=\"enum抽象类常见方法\"><a class=\"anchor\" href=\"#enum抽象类常见方法\">#</a> Enum 抽象类常见方法</h2>\n<blockquote>\n<p><code>Enum</code>  是所有 <code>Java</code>  语音枚举类型的公共基本类 (注意： <code>Enum</code>  是抽象类)，它的常见方法如下：</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">返回类型</th>\n<th style=\"text-align:center\">方法名称</th>\n<th style=\"text-align:center\">方法说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>int</code></td>\n<td style=\"text-align:center\"><code>compareTo(E o)</code></td>\n<td style=\"text-align:center\">比较此枚举与指定对象的顺序</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>boolean</code></td>\n<td style=\"text-align:center\"><code>equals(Object other)</code></td>\n<td style=\"text-align:center\">当指定对象等于此枚举常量是，返回 <code>true</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>Class&lt;?&gt;</code></td>\n<td style=\"text-align:center\"><code>getDeclaringClass()</code></td>\n<td style=\"text-align:center\">返回与此枚举常量的枚举类型相对应的 <code>Class</code>  对象</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>String</code></td>\n<td style=\"text-align:center\"><code>name()</code></td>\n<td style=\"text-align:center\">返回此枚举常量的名称，在其枚举声明中对其进行声明</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>int</code></td>\n<td style=\"text-align:center\"><code>ordinal()</code></td>\n<td style=\"text-align:center\">返回枚举常量的序数 (它在枚举声明中的位置，其中初始常量序数为零)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>String</code></td>\n<td style=\"text-align:center\"><code>toString()</code></td>\n<td style=\"text-align:center\">返回枚举常量的名称，它包含在声明中</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>static&lt;T extends Enum&lt;T&gt;&gt; T</code></td>\n<td style=\"text-align:center\"><code>static valueOf(Class&lt;T&gt; enumType,String name)</code></td>\n<td style=\"text-align:center\">返回带指定名称的指定枚举类型的枚举常量</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>主要说明一下 <code>ordinal()</code>  方法，该方法获取的是枚举变量在枚举类中声明的顺序，下标从 <code>0</code>  开始。\n<ul>\n<li>如：日期中的 <code>MONDAY</code>  在第一个位置，那么 <code>MONDAY</code>  的 <code>ordinal</code>  值就是 <code>0</code> 。</li>\n<li>如果 <code>MONDAY</code>  的声明位置发生变化，那么使用 <code>ordinal()</code>  方法获取到的值也随之变化，注意在大多数情况下我们都不应该首选使用该方法。</li>\n</ul>\n</li>\n<li><code>compareTo(E o)</code>  方法则是比较枚举的大小，注意：其内部实现是根据每个枚举的 <code>ordinal</code>  值大小来进行比较的。</li>\n<li><code>name()</code>  方法与 <code>toString()</code>  几乎是等同的，都是输出变量的字符串形式。</li>\n<li><code>valueOf(Class&lt;T&gt; enumType,String name)</code>  方法是根据枚举类的 <code>Class</code>  对象和枚举名称获取枚举常量，该方法是静态的。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>DayTypeTest.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">本示例使用JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: DayType 测试</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2023-12-05 21:54</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DayTypeTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 创建枚举数组</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">InternalDayType</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> days<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InternalDayType</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">InternalDayType</span><span class=\"token punctuation\">.</span>MONDAY<span class=\"token punctuation\">,</span> <span class=\"token class-name\">InternalDayType</span><span class=\"token punctuation\">.</span>TUESDAY<span class=\"token punctuation\">,</span> <span class=\"token class-name\">InternalDayType</span><span class=\"token punctuation\">.</span>WEDNESDAY<span class=\"token punctuation\">,</span> <span class=\"token class-name\">InternalDayType</span><span class=\"token punctuation\">.</span>THURSDAY<span class=\"token punctuation\">,</span> <span class=\"token class-name\">InternalDayType</span><span class=\"token punctuation\">.</span>FRIDAY<span class=\"token punctuation\">,</span> <span class=\"token class-name\">InternalDayType</span><span class=\"token punctuation\">.</span>SATURDAY<span class=\"token punctuation\">,</span> <span class=\"token class-name\">InternalDayType</span><span class=\"token punctuation\">.</span>SUNDAY<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span>days<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"day[\"</span><span class=\"token operator\">+</span>i<span class=\"token operator\">+</span><span class=\"token string\">\"].ordinal():\"</span><span class=\"token operator\">+</span>days<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">ordinal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------------------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 通过 compareTo 方法比较，实际上其内部是通过 ordinal () 值比较的</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"days[0].compareTo(days[1]):\"</span><span class=\"token operator\">+</span>days<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>days<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"days[0].compareTo(days[1]):\"</span><span class=\"token operator\">+</span>days<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>days<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">// 获取该枚举对象的 Class 对象引用，当然也可以通过 getClass 方法</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> clazz <span class=\"token operator\">=</span> days<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaringClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"clazz:\"</span><span class=\"token operator\">+</span>clazz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------------------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">//name()</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"days[0].name():\"</span><span class=\"token operator\">+</span>days<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"days[1].name():\"</span><span class=\"token operator\">+</span>days<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"days[2].name():\"</span><span class=\"token operator\">+</span>days<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"days[3].name():\"</span><span class=\"token operator\">+</span>days<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------------------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"days[0].toString():\"</span><span class=\"token operator\">+</span>days<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"days[1].toString():\"</span><span class=\"token operator\">+</span>days<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"days[2].toString():\"</span><span class=\"token operator\">+</span>days<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"days[3].toString():\"</span><span class=\"token operator\">+</span>days<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------------------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token class-name\">InternalDayType</span> d<span class=\"token operator\">=</span> <span class=\"token class-name\">Enum</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InternalDayType</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>days<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token class-name\">InternalDayType</span> d2<span class=\"token operator\">=</span><span class=\"token class-name\">InternalDayType</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InternalDayType</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>days<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d:\"</span><span class=\"token operator\">+</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d2:\"</span><span class=\"token operator\">+</span>d2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                执行结果：</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                day [0].ordinal ():0</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                day [1].ordinal ():1</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                day [2].ordinal ():2</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                day [3].ordinal ():3</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                day [4].ordinal ():4</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                day [5].ordinal ():5</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                day [6].ordinal ():6</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                -------------------------------------</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                days [0].compareTo (days [1]):-1</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                days [0].compareTo (days [1]):-2</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                clazz:class top.rem.rain.InternalDayType</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                -------------------------------------</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                days [0].name ():MONDAY</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                days [1].name ():TUESDAY</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                days [2].name ():WEDNESDAY</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                days [3].name ():THURSDAY</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                -------------------------------------</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                days [0].toString ():MONDAY</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                days [1].toString ():TUESDAY</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                days [2].toString ():WEDNESDAY</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>                days [3].toString ():THURSDAY</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>                -------------------------------------</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>                d:MONDAY</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>                d2:MONDAY</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"80\"></td><td><pre> * 此处使用内部方式定义并使用 javac 来变成成 class 文件</pre></td></tr><tr><td data-num=\"81\"></td><td><pre> * 使用外部类会显示找不到文件</pre></td></tr><tr><td data-num=\"82\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token class-name\">InternalDayType</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>     * 星期一</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    MONDAY<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>     * 星期二</pre></td></tr><tr><td data-num=\"90\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    TUESDAY<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"93\"></td><td><pre>     * 星期三</pre></td></tr><tr><td data-num=\"94\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    WEDNESDAY<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>     * 星期四</pre></td></tr><tr><td data-num=\"98\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    THURSDAY<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"101\"></td><td><pre>     * 星期五</pre></td></tr><tr><td data-num=\"102\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    FRIDAY<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"105\"></td><td><pre>     * 星期六</pre></td></tr><tr><td data-num=\"106\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    SATURDAY<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"109\"></td><td><pre>     * 星期天</pre></td></tr><tr><td data-num=\"110\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    SUNDAY</pre></td></tr><tr><td data-num=\"112\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>抽象类 <code>Enum</code>  类的基本内容到此就介绍完了，这里提醒一点就是， <code>Enum</code>  类内部会有一个构造函数，该类构造只能有编译器调用，无法手动操作，来看 <code>Enum</code>  类的主要源码。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Enum.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">本示例使用JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 实现了 Comparable</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Enum</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Enum</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Constable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     * 枚举字符串名称</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     * 枚举顺序值</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> ordinal<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token function\">ordinal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">return</span> ordinal<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     * 枚举的构造方法，只能由编译器调用</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>     * @param name 枚举字符串名称</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>     * @param ordinal 枚举顺序值</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Enum</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ordinal<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ordinal <span class=\"token operator\">=</span> ordinal<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> other<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token operator\">==</span>other<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">CloneNotSupportedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CloneNotSupportedException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>     * 比较的是 ordinal 的值</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>     * @param o 任意枚举类型</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>     * @return int</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token class-name\">Enum</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> other <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Enum</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span>o<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token class-name\">Enum</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> self <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> other<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token comment\">// optimization</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            self<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaringClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> other<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaringClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassCastException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token comment\">// 根据 ordinal 值比较大小</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>ordinal <span class=\"token operator\">-</span> other<span class=\"token punctuation\">.</span>ordinal<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>     * 获取声明类</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>     * @return Class&lt;E></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getDeclaringClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token comment\">// 获取 class 对象引用，getClass () 是 Object 方法</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> clazz <span class=\"token operator\">=</span> <span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token comment\">// 获取父类 Class 对象引用</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> zuper <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getSuperclass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>zuper <span class=\"token operator\">==</span> <span class=\"token class-name\">Enum</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span>clazz <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span>zuper<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>     * 返回带指定名称的指定枚举类型的枚举常量</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>     * @param enumClass</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>     * @param name</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>     * @param &lt;T></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>     <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Enum</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">T</span> <span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> enumClass<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>                                                <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>         <span class=\"token comment\">//enumClass.enumConstantDirectory ()：获取到的是一个 map 集合，key 值就是 name 值，value 则是枚举变量值</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>         <span class=\"token comment\">//enumConstantDirectory 是 class 对象内部的方法，根据 class 对象获取一个 map 集合的值 </span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>         <span class=\"token class-name\">T</span> result <span class=\"token operator\">=</span> enumClass<span class=\"token punctuation\">.</span><span class=\"token function\">enumConstantDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name is null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>         <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>            <span class=\"token string\">\"No enum constant \"</span> <span class=\"token operator\">+</span> enumClass<span class=\"token punctuation\">.</span><span class=\"token function\">getCanonicalName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".\"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>通过 <code>Enum</code>  源码可以知道， <code>Enum</code>  实现了 <code>Comparable</code>  接口，这也是可以使用 <code>compareTo</code>  比较的原因，当然 <code>Enum</code>  构造函数也是存在的，该构造函数只能由编译器调用，毕竟我们只能使用 <code>enum</code>  关键字来定义枚举，其它就交给编译器了。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Enum.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">本示例使用JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 实现了 Comparable</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Enum</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Enum</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Constable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     * 枚举字符串名称</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * 枚举顺序值</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> ordinal<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     * 枚举的构造方法，只能由编译器调用</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     * @param name 枚举字符串名称</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     * @param ordinal 枚举顺序值</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Enum</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ordinal<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ordinal <span class=\"token operator\">=</span> ordinal<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"valuesvalueof方法\"><a class=\"anchor\" href=\"#valuesvalueof方法\">#</a> Values ()&amp;ValueOf () 方法</h2>\n<ul>\n<li><code>values()</code>  和 <code>valueOf(String name)</code>  方法是编译器生成的 <code>static</code>  方法。</li>\n<li>从前面分析中，在 <code>Enum</code>  类中并没有出现 <code>values()</code>  方法，但 <code>valueOf()</code>  方法还是有出现的。</li>\n<li>只不过编译器生成的 <code>valueOf()</code>  方法需要传递一个 <code>name</code>  参数，而 <code>Enum</code>  自带的静态方法 <code>valueOf()</code>  则需要传递两个参数。</li>\n<li>从前面反编译后的代码可以看到，编译器生成的 <code>valueOf()</code>  方法最终还是调用了 <code>Enum</code>  类的 <code>valueOf()</code>  方法。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>EnumDemo.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">本示例使用JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Description:</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @DateTime: 2023-12-06 23:45</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EnumDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token class-name\">DayType</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> days2 <span class=\"token operator\">=</span> <span class=\"token class-name\">DayType</span><span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"day2:\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>days2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token class-name\">DayType</span> day <span class=\"token operator\">=</span> <span class=\"token class-name\">DayType</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MONDAY\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"day:\"</span> <span class=\"token operator\">+</span> day<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        执行结果：</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        day2:[MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY]</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        day:MONDAY</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>从结果上看就可以知道， <code>values()</code>  方法的作用就是获取枚举类中的所有变量，作为数组返回，而 <code>valueOf(String name)</code>  方法与 <code>Enum</code>  类中的 <code>valueOf(String name)</code>  方法的作用类似，根据名称获取枚举变量，只不过编译器生成的 <code>valueOf(String name)</code>  方法更简洁一些只需要传递一个参数，注意： <code>values()</code>  方法是由编译器插入到枚举类中的 <code>static</code>  方法，所以如果我们将枚举实例向上转型为 <code>Enum</code> ，那么 <code>values()</code>  方法将无法被调用，因为 <code>Enum</code>  类中并没有 <code>values()</code>  方法， <code>valueOf(String name)</code>  方法也是同样的道理。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>EnumDemo2.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">本示例使用JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description:</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2023-12-07 20:41</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EnumDemo2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 正常使用</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token class-name\">DayType</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> ds <span class=\"token operator\">=</span> <span class=\"token class-name\">DayType</span><span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 向上转型 Enum</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token class-name\">Enum</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">DayType</span><span class=\"token punctuation\">></span></span> e <span class=\"token operator\">=</span> <span class=\"token class-name\">DayType</span><span class=\"token punctuation\">.</span>MONDAY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 无法调用，没有此方法</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">//e.values();</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"class对象枚举\"><a class=\"anchor\" href=\"#class对象枚举\">#</a> Class 对象 &amp; 枚举</h1>\n<blockquote>\n<p>在上述我们提到当枚举实例向上转型为 <code>Enum</code>  类型后， <code>values()</code>  方法将会失效，也就无法一次性获取所有枚举实例变量，但是由于 <code>Class</code>  对象的存在，即使不使用 <code>values()</code>  方法，还是可以一次获取到所有枚举实例变量的， <code>Class</code>  对象中存在如下方法：</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">返回类型</th>\n<th style=\"text-align:center\">方法名称</th>\n<th style=\"text-align:center\">方法说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>T[]</code></td>\n<td style=\"text-align:center\"><code>getEnumConstants()</code></td>\n<td style=\"text-align:center\">返回该类枚举类型的所有元素，如果 <code>Class</code>  对象不是枚举类型则返回 <code>null</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>boolean</code></td>\n<td style=\"text-align:center\"><code>isEnum</code></td>\n<td style=\"text-align:center\">当且仅当该类声明为源代码中的枚举是返回 <code>true</code></td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>因此通过 <code>getEnumConstants()</code>  方法，同样可以轻而易举地获取所有枚举实例变量，下面通过代码来演示此功能，代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>EnumDemo3.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">本示例使用JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Description:</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @DateTime: 2023-12-07 20:45</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EnumDemo3</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 向上转型 Enum</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token class-name\">Enum</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">DayType</span><span class=\"token punctuation\">></span></span> e <span class=\"token operator\">=</span> <span class=\"token class-name\">DayType</span><span class=\"token punctuation\">.</span>MONDAY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 获取 class 对象引用</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> clasz <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaringClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>clasz<span class=\"token punctuation\">.</span><span class=\"token function\">isEnum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token class-name\">DayType</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dsz <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">DayType</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> clasz<span class=\"token punctuation\">.</span><span class=\"token function\">getEnumConstants</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DayType:\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>dsz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>         输出结果:</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>         DayType:[MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY]</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>我们通过 <code>Enum</code>  的 <code>class</code>  对象的 <code>getEnumConstants()</code>  方法仍能一次性获取所有的枚举实例常量。</p>\n</blockquote>\n<h1 id=\"枚举进阶用法\"><a class=\"anchor\" href=\"#枚举进阶用法\">#</a> 枚举进阶用法</h1>\n<blockquote>\n<p>在前面的分析中，我们都是基于简单枚举类型的定义，也就是在定义枚举时只定义了枚举实例类型，并没有定义方法或者成员变量，实际上使用 <code>enum</code>  关键字定义的枚举类，除了不能使用继承 (因为编译器会自动为我们继承 <code>Enum</code>  抽象类，而 <code>Java</code>  只支持单继承，因此枚举类是无法手动实现继承的)，可以把 <code>enum</code>  类当成常规类，就是可以说我们向 <code>enum</code>  类中添加方法和变量，甚至是 <code>mian</code>  方法。</p>\n</blockquote>\n<h2 id=\"枚举类添加方法与构造函数\"><a class=\"anchor\" href=\"#枚举类添加方法与构造函数\">#</a> 枚举类添加方法与构造函数</h2>\n<blockquote>\n<p>重新定义一个日期枚举类，带有成员变量，描述该日期枚举类的作用，同时定义一个 <code>getDescriptionChinese()</code>  方法来返回描述内容，并将构造函数私有化，防止外部调用，在声明枚举实例时传入对应的描述，代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>DayType2.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">本示例使用JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 枚举进阶用法</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @author LightRain</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">DayType2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * 星期一</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">MONDAY</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"星期一\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     * 星期二</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">TUESDAY</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"星期二\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     * 星期三</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token function\">WEDNESDAY</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"星期三\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     * 星期四</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token function\">THURSDAY</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"星期四\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>     * 星期五</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token function\">FRIDAY</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"星期五\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>     * 星期六</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token function\">SATURDAY</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"星期六\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>     * 星期天，使用逗号分隔，使用分号结尾</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token function\">SUNDAY</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"星期天\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>     * 中文描述</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> descriptionChinese<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>     * 将构造私有化，防止外部调用</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>     * @param descriptionChinese 中文描述</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">DayType2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> descriptionChinese<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>descriptionChinese <span class=\"token operator\">=</span> descriptionChinese<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>     * 获取中文描述</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>     * @return String</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getDescriptionChinese</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token keyword\">return</span> descriptionChinese<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">DayType2</span> day <span class=\"token operator\">:</span> <span class=\"token class-name\">DayType2</span><span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name: \"</span> <span class=\"token operator\">+</span> day<span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\",getDescriptionChinese: \"</span> <span class=\"token operator\">+</span> day<span class=\"token punctuation\">.</span><span class=\"token function\">getDescriptionChinese</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        执行结果：</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        name: MONDAY,getDescriptionChinese: 星期一</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        name: TUESDAY,getDescriptionChinese: 星期二</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        name: WEDNESDAY,getDescriptionChinese: 星期三</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        name: THURSDAY,getDescriptionChinese: 星期四</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        name: FRIDAY,getDescriptionChinese: 星期五</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        name: SATURDAY,getDescriptionChinese: 星期六</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        name: SUNDAY,getDescriptionChinese: 星期天</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>在 <code>enum</code>  类中确实可以像定义常规类一样声明变量和成员方法，但是我们必须注意到，如果打算在 <code>enum</code>  类中定义方法，务必在声明完枚举实例后使用逗号分隔和使用分号来结束，倘若在枚举实例前定义任何方法，编译器都将会报错将无法通过编译，同时即使自定义了构造函数且 <code>enum</code>  的定义结束，我们也永远无法手动调用构造函数创建枚举实例，这件事只能由编译器来执行。</p>\n</blockquote>\n<h2 id=\"覆盖enum类方法\"><a class=\"anchor\" href=\"#覆盖enum类方法\">#</a> 覆盖 enum 类方法</h2>\n<blockquote>\n<p>既然 <code>enum</code>  类跟常规类的定义没有什么区别 ( <code>enum</code>  类还是有些约束的)，那么覆盖父类的方法也不会很难，可惜的是父类 <code>Enum</code>  中定义的方法只有 <code>toString()</code>  方法没有使用 <code>final</code>  来修饰，因此只能覆盖 <code>toString()</code>  方法，下面将通过代码覆盖 <code>toString()</code>  来省去编写 <code>getDescriptionChinese()</code>  方法，代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>DayType3.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">本示例使用JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 枚举进阶用法 - 覆盖 toString 方法来省去 getDescriptionChinese () 方法</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @author LightRain</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">DayType3</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * 星期一</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">MONDAY</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"星期一\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     * 星期二</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">TUESDAY</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"星期二\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     * 星期三</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token function\">WEDNESDAY</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"星期三\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     * 星期四</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token function\">THURSDAY</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"星期四\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>     * 星期五</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token function\">FRIDAY</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"星期五\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>     * 星期六</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token function\">SATURDAY</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"星期六\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>     * 星期天，使用逗号分隔，使用分号结尾</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token function\">SUNDAY</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"星期天\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>     * 中文描述</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> descriptionChinese<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>     * 将构造私有化，防止外部调用</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>     * @param descriptionChinese 中文描述</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">DayType3</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> descriptionChinese<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>descriptionChinese <span class=\"token operator\">=</span> descriptionChinese<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>       <span class=\"token keyword\">return</span> descriptionChinese<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">DayType3</span> day <span class=\"token operator\">:</span> <span class=\"token class-name\">DayType3</span><span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name: \"</span> <span class=\"token operator\">+</span> day<span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\",getDescriptionChinese: \"</span> <span class=\"token operator\">+</span> day<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        执行结果：</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        name: MONDAY,getDescriptionChinese: 星期一</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        name: TUESDAY,getDescriptionChinese: 星期二</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        name: WEDNESDAY,getDescriptionChinese: 星期三</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        name: THURSDAY,getDescriptionChinese: 星期四</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        name: FRIDAY,getDescriptionChinese: 星期五</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        name: SATURDAY,getDescriptionChinese: 星期六</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        name: SUNDAY,getDescriptionChinese: 星期天</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"自定义enum类抽象方法\"><a class=\"anchor\" href=\"#自定义enum类抽象方法\">#</a> 自定义 enum 类抽象方法</h2>\n<blockquote>\n<p>与常规抽象类一样，在 <code>enum</code>  类中允许我们为其定义抽象方法，然后使每个枚举实例都实现该方法，以便产生不同的行为方式，注意： <code>abstract</code>  关键字对于枚举类来说并不是必须的，代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>EnumDemo4.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">本示例使用JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: 自定义 enum 类抽象方法</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2023-12-07 22:17</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">EnumDemo4</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   * 使用枚举静态块重写 getInfo 方法来为抽象方法添加具体实现</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  FIRST<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token string\">\"FIRST TIME\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  SECOND<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token string\">\"SECOND TIME\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   * 在枚举类中定义抽象方法</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   * @return String</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"F：\"</span><span class=\"token operator\">+</span><span class=\"token class-name\">EnumDemo4</span><span class=\"token punctuation\">.</span>FIRST<span class=\"token punctuation\">.</span><span class=\"token function\">getInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"S：\"</span><span class=\"token operator\">+</span><span class=\"token class-name\">EnumDemo4</span><span class=\"token punctuation\">.</span>SECOND<span class=\"token punctuation\">.</span><span class=\"token function\">getInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            执行结果：</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            F：FIRST TIME</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            S：SECOND TIME</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>通过这种方式就可以轻而易举地定义每个枚举实例的不同行为方式，我们可以注意到使用 <code>enum</code>  类实例似乎表现出了多态的特性，可惜的是枚举类型的实例终究不能作为类型传递使用，就像下面的使用方法，就无法通过编译器。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 无法通过编译，毕竟 EnumDemo4.FIRST 是个实例对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EnumDemo4</span><span class=\"token punctuation\">.</span>FIRST instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>以上就是在枚举实例常量中定义抽象方法。</p>\n</blockquote>\n<h1 id=\"枚举与接口\"><a class=\"anchor\" href=\"#枚举与接口\">#</a> 枚举与接口</h1>\n<blockquote>\n<p>由于 <code>Java</code>  单继承的原因， <code>enum</code>  类不能继承其它类，但它不妨碍实现接口，因此 <code>enum</code>  类同样可以实现多接口，代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>EnumDemo5.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">本示例使用JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 食品接口</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Food</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token class-name\">String</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * 运动接口</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Sport</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token class-name\">String</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"18\"></td><td><pre> * 使用 enum 类实现多接口</pre></td></tr><tr><td data-num=\"19\"></td><td><pre> * @author LightRain</pre></td></tr><tr><td data-num=\"20\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">EnumDemo5</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Food</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Sport</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   * 食品</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  FOOD<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   * 运动</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  SPORT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">\"xxx喜欢吃甜食\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">\"xxx喜欢跑步\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EnumDemo5</span><span class=\"token punctuation\">.</span>FOOD<span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EnumDemo5</span><span class=\"token punctuation\">.</span>SPORT<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        执行结果：</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        xxx 喜欢吃甜食</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        xxx 喜欢跑步</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>有时候我们可能需要对一组数据进行分类，比如食品菜单分类而且希望这些菜单都属于 <code>Foods</code>  类型， <code>SichuanCuisine(川菜)</code> 、 <code>LuCuisine(鲁菜)</code> 、 <code>Cantonese(粤菜)</code>  等，每种分类下又有多种具体的菜式和食品，此时可以利用接口来组织，代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Foods.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">本示例使用JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 食品菜单接口</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @author LightRain</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Foods</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     * 川菜</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">enum</span> <span class=\"token class-name\">SichuanCuisine</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Foods</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>         * 蚂蚁上树</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token function\">ANTS_ON_TREES</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"蚂蚁上树\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>         * 麻辣血旺</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token function\">SPICY_BLOOD</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"麻辣血旺\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>         * 四川腊肉</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token function\">SICHUAN_BACON</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"四川腊肉\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>         * 菜品描述</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> description<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">SichuanCuisine</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> desc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>description <span class=\"token operator\">=</span> desc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token keyword\">return</span> description<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>     * 鲁菜</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">enum</span> <span class=\"token class-name\">LuCuisine</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Foods</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>         * 木须肉</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token function\">MUSHU_MEAT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"木须肉\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>         * 把子肉</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token function\">PUT_THE_MEAT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"把子肉\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>         * 德州扒鸡</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token function\">TEXAS_GRILLED_CHICKEN</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"德州扒鸡\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>         * 菜品描述</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> description<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token class-name\">LuCuisine</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> desc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>description <span class=\"token operator\">=</span> desc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token keyword\">return</span> description<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>     * 粤菜</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Cantonese</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Foods</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>         * 碌鸭</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token function\">DUCK</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"碌鸭\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>         * 虎皮凤爪</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token function\">TIGER_SKIN_CHICKEN_FEET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"虎皮凤爪\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>         * 炒河粉</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token function\">FRIED_RIVER_NOODLES</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"炒河粉\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"91\"></td><td><pre>         * 菜品描述</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> description<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        <span class=\"token class-name\">Cantonese</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> desc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>description <span class=\"token operator\">=</span> desc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>            <span class=\"token keyword\">return</span> description<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>在接口中是可以定义枚举静态块的。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>FoodMenu.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">本示例使用JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: 食品菜单</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2023-12-07 22:58</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FoodMenu</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">Foods</span> foods <span class=\"token operator\">=</span> <span class=\"token class-name\">Foods<span class=\"token punctuation\">.</span>SichuanCuisine</span><span class=\"token punctuation\">.</span>ANTS_ON_TREES<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ANTS_ON_TREES：\"</span> <span class=\"token operator\">+</span> foods<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    foods <span class=\"token operator\">=</span> <span class=\"token class-name\">Foods<span class=\"token punctuation\">.</span>Cantonese</span><span class=\"token punctuation\">.</span>FRIED_RIVER_NOODLES<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"FRIED_RIVER_NOODLES：\"</span> <span class=\"token operator\">+</span> foods<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    foods <span class=\"token operator\">=</span> <span class=\"token class-name\">Foods<span class=\"token punctuation\">.</span>LuCuisine</span><span class=\"token punctuation\">.</span>TEXAS_GRILLED_CHICKEN<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TEXAS_GRILLED_CHICKEN：\"</span> <span class=\"token operator\">+</span> foods<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            执行结果：</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            ANTS_ON_TREES：蚂蚁上树</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            FRIED_RIVER_NOODLES：炒河粉</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            TEXAS_GRILLED_CHICKEN：德州扒鸡</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>通过这种方式就可以很方便组织上述场景需求，同时确保每种具体类型的事物都属于 <code>Foods</code> ，现在我们利用一个枚举嵌套枚举的方式，把前面定义的菜谱存放到一个 <code>Meal</code>  菜单中，通过这种方式就可以统一管理菜单数据了，代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Meal.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">本示例使用JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * 食品菜单整合</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @author LightRain</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Meal</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     * 川菜菜单</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">SICHUANCUISINE</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Foods<span class=\"token punctuation\">.</span>SichuanCuisine</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     * 鲁菜菜单</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">LUCUISINE</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Foods<span class=\"token punctuation\">.</span>LuCuisine</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     * 粤菜菜单</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">CANTONESE</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Foods<span class=\"token punctuation\">.</span>Cantonese</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Foods</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> values<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Meal</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Foods</span><span class=\"token punctuation\">></span></span> kind<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">// 通过 class 对象获取枚举实例</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>values <span class=\"token operator\">=</span> kind<span class=\"token punctuation\">.</span><span class=\"token function\">getEnumConstants</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\">Foods</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> foods <span class=\"token operator\">=</span> <span class=\"token class-name\">Meal</span><span class=\"token punctuation\">.</span>SICHUANCUISINE<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>foods<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>f <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"川菜菜单：\"</span> <span class=\"token operator\">+</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        foods <span class=\"token operator\">=</span> <span class=\"token class-name\">Meal</span><span class=\"token punctuation\">.</span>LUCUISINE<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>foods<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>f <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"鲁菜菜单：\"</span> <span class=\"token operator\">+</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        foods <span class=\"token operator\">=</span> <span class=\"token class-name\">Meal</span><span class=\"token punctuation\">.</span>CANTONESE<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>foods<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>f <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"粤菜菜单：\"</span> <span class=\"token operator\">+</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            执行结果：</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            川菜菜单：蚂蚁上树</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            川菜菜单：麻辣血旺</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            川菜菜单：四川腊肉</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            鲁菜菜单：木须肉</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            鲁菜菜单：把子肉</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            鲁菜菜单：德州扒鸡</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            粤菜菜单：碌鸭</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            粤菜菜单：虎皮凤爪</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            粤菜菜单：炒河粉</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"枚举与switch\"><a class=\"anchor\" href=\"#枚举与switch\">#</a> 枚举与 switch</h1>\n<blockquote>\n<p>在使用 <code>switch</code>  进行条件判断时，条件参数一般只能是整形、字符型，而枚举型确实也被 <code>switch</code>  所支持，在 <code>Java 1.7</code>  后 <code>switch</code>  也对字符串进行了支持， <code>switch</code>  与枚举类型的使用，代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>EnumAndSwitch.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">本示例使用JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: 枚举与 switch 饿汉式</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2023-12-08 20:45</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EnumAndSwitch</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">getColorName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span>BLUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">getColorName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span>RED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>         执行结果：</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>         蓝色</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>         红色</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getColorName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Color</span> color<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token keyword\">case</span> BROWN <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"棕色\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token keyword\">case</span> RED <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"红色\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token keyword\">case</span> ORANGE <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"橙色\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token keyword\">case</span> YELLOW <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"黄色\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token keyword\">case</span> GREEN <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"绿色\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token keyword\">case</span> BLUE <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"蓝色\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token keyword\">case</span> PURPLE <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"紫色\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token keyword\">case</span> GRAY <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"灰色\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token keyword\">case</span> WHITE <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"白色\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token keyword\">case</span> BLACK <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"黑色\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Color</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>     * 棕</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    BROWN<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>     * 红</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    RED<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>     * 橙</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    ORANGE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>     * 黄</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    YELLOW<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>     * 绿</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    GREEN<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>     * 蓝</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    BLUE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>     * 紫</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    PURPLE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>     * 灰</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    GRAY<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>     * 白</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    WHITE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>     * 黑</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    BLACK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>使用枚举进行 <code>switch</code>  条件判断时无需使用 <code>Color</code>  引用。</p>\n</blockquote>\n<h1 id=\"枚举与单例模式\"><a class=\"anchor\" href=\"#枚举与单例模式\">#</a> 枚举与单例模式</h1>\n<blockquote>\n<p>单例模式它的作用是确保某个类只有一个实例，自行实例化并向整个系统提供整个实例，在实际应用中，线程池、缓存、日志对象、对话框对象常被设计成单例模式，总之选择单例模式就是为了避免状态不一致，下面是单例模式的几种主要编写方式，从而对比出使用枚举实现单例模式的优点。</p>\n</blockquote>\n<h2 id=\"饿汉式单例模式\"><a class=\"anchor\" href=\"#饿汉式单例模式\">#</a> 饿汉式单例模式</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>HungryChineseStyle.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">本示例使用JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: 饿汉式单例模式 (基于 classloder 机制避免了多线程的同步问题)</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2023-12-08 21:25</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HungryChineseStyle</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">HungryChineseStyle</span> INSTANCE <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HungryChineseStyle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">HungryChineseStyle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">HungryChineseStyle</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> INSTANCE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>显然这种写法很简单，但问题是无法做到延迟创建对象，事实上如果该单例类涉及资源较多，创建比较耗费时间时，我们更希望它可以尽可能地延迟加载，从而减小初始化的负载，从而就有了懒汉式单例模式。</p>\n</blockquote>\n<h2 id=\"懒汉式单例模式\"><a class=\"anchor\" href=\"#懒汉式单例模式\">#</a> 懒汉式单例模式</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Lazy.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">本示例使用JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: 懒汉式单例模式 (适合多线程安全)</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2023-12-08 23:05</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Lazy</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Lazy</span> INSTANCE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Lazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">synchronized</span> <span class=\"token class-name\">Lazy</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>INSTANCE <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            INSTANCE <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Lazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> INSTANCE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>这种写法能够在多线程中很好避免同步问题，同时也具备 <code>lazy loading</code>  机制，遗憾的是由于 <code>synchronized</code>  的存在，效率很低，在单线程的情境下完全可以去掉 <code>synchronize</code>  为了效率与性能问题，改进后的代码如下：</p>\n</blockquote>\n<h2 id=\"双重检查锁单例模式\"><a class=\"anchor\" href=\"#双重检查锁单例模式\">#</a> 双重检查锁单例模式</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>DoubleCheckLock.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">本示例使用JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: 懒汉式 - 双重检查锁</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2023-12-08 23:14</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DoubleCheckLock</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">volatile</span> <span class=\"token class-name\">DoubleCheckLock</span> instance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">DoubleCheckLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">DoubleCheckLock</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>instance<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">DoubleCheckLock</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>instance<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>          instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DoubleCheckLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>这种方式被称为 <code>双重检查锁</code> ，主要在 <code>getInstance()</code>  方法中，进行了两次 <code>if(instance==null)</code>  判空检查，可以极大提升并发度，进而提升性能，毕竟在单例模式中 <code>new</code>  的情况非常少，绝大多都是可以并行操作，因此在枷锁前多进行一次 <code>null</code>  检查可以减少绝大多数的枷锁操作，也就提高了执行效率。但是必须注意的是 <code>volatile</code>  关键字，该关键字有两层语义，第一层是可见性，可见性是指在一个线程中对该变量的修改会马上由工作内存 ( <code>Work Memory</code> ) 写回主内存 ( <code>Main Memory</code> )，所以其它线程会马上读取到已修改的值，关于工作内存和主内存可以简单理解为高速缓存 (直接与 <code>CPU</code>  打交道) 和主存 (代表内存条)，注意工作内存是线程独享的，主存是线程共享的。 <code>volatile</code>  的第二次语义是禁止指令重排序优化，我们写的代码 (特别是多线代码)，由于编译器优化，会在实际执行的时候可能与我们编写的顺序不同。编译器只保证程序执行结果与源码相同，却不保证实际指令的顺序与源码相同，这在单线程中并没有什么问题，然而一旦引入多线程环境，这种乱序就可能导致严重问题。 <code>volatile</code>  关键字就可以从语义上解决这个问题，值得关注的是 <code>volatile</code>  的禁止指令重排序优化功能在 <code>Java 1.5</code>  后才得以实现，因此在 <code>Java 1.5</code>  之前的版本仍然是不安全的，即使使用 <code>volatile</code>  关键字，或许我们可以利用静态内部类来实现更安全的机制。</p>\n</blockquote>\n<h2 id=\"静态内部类单例模式\"><a class=\"anchor\" href=\"#静态内部类单例模式\">#</a> 静态内部类单例模式</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>StaticInnerClass.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">本示例使用JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: 静态内部类单例模式</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2023-12-08 23:34</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StaticInnerClass</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Holder</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">StaticInnerClass</span> INSTANCE <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StaticInnerClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">StaticInnerClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">StaticInnerClass</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Holder</span><span class=\"token punctuation\">.</span>INSTANCE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>上述代码展示的就是静态内部类单例模式，我们把 <code>INSTANCE</code>  实例放到一个静态内部类中，这样就可以避免了静态实例在 <code>INSTANCE</code>  类的加载阶段就创建对象，毕竟静态变量初始化是在 <code>StaticInnerClass</code>  类初始化时触发的，并且由于静态内部类只会被加载一次，所以这种写法也是线程安全。</p>\n</blockquote>\n<h2 id=\"防止被破坏单例模式\"><a class=\"anchor\" href=\"#防止被破坏单例模式\">#</a> 防止被破坏单例模式</h2>\n<ul>\n<li>\n<p>从上述 <code>4</code>  种单例模式的写法中，似乎也解决了效率与懒加载问题，但是他们都有两个共同缺点：</p>\n<ul>\n<li>序列化可能会破坏单例模式，比较每次反序列化一个序列化的对象实例时都会创建一个新的实例，解决方案代码如下：</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Singleton.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">本示例使用JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Serial</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Serializable</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  * @Author: LightRain</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  * @Description: 避免反序列化破坏单例模式</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  * @DateTime: 2023-12-08 23:48</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  * @Version：1.0</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  **/</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton</span> INSTANCE <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    * 反序列时直接返回当前 INSTANCE</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    * @return Object;</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   <span class=\"token annotation punctuation\">@Serial</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">readResolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     <span class=\"token keyword\">return</span> INSTANCE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre> </pre></td></tr><tr><td data-num=\"28\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>\n<p>使用反射强行调用私有构造器，解决方式可以修改构造器，让它在创建第二个实例的时候抛出异常，解决方案代码如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Singleton2</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">本示例使用JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: 避免使用反射强行破坏单例模式</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2023-12-08 23:56</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Singleton2</span> INSTANCE <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Singleton2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Singleton2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The instance  already exists ！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton2</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">return</span> INSTANCE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>如上所述，问题确实也得到了解决，但问题是我们为此付出了不少努力，即添加了不少的代码，还应该注意到如果单例类维持了其它对象的状态时还需要使它们成为 <code>transient</code>  对象，这种就更复杂了，那么有没有简单还高效的呢？当然那就是枚举单例了，来看看如何实现，如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>EnumSingleton.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">本示例使用JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 枚举单例模式</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @author LightRain</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">EnumSingleton</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * 实例</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    INSTANCE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>代码相当简洁，我们也可以像常规类一样编写 <code>enum</code>  类，为其添加变量和方法，访问方式也更简单，使用 <code>EnumSingleton.INSTANCE</code>  进行访问，这样也就避免调用 <code>getInstance()</code>  方法，更重要的是使用枚举单例的写法，我们完全不用考虑序列化和反射问题，枚举序列化是由 <code>JVM</code>  保证的，每一个枚举类型和定义的枚举变量在 <code>JVM</code>  中都是唯一的，在枚举类型的序列化和反序列化上 <code>Java</code>  做了特殊的规定，在序列化是 <code>Java</code>  仅仅是将枚举对象的 <code>name</code>  属性输出到结果中，反序列化的时候则是通过 <code>java.lang.Enum</code>  的 <code>valueOf()</code>  方法来根据名字查找枚举对象，同时编译器是不允许任何对这种序列化机制的定制并禁用 <code>writeObject</code> 、 <code>readObject</code> 、 <code>readObjectNoDat</code> 、 <code>writeReplace</code> 、 <code>readResolve</code>  等方法，从而保证了枚举实例的唯一性，不妨来看看 <code>Enum</code>  类的 <code>valueOf()</code>  方法源码：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Enum.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">版本请选择JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Enum</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Enum</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Constable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Enum</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">T</span> <span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> enumClass<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">T</span> result <span class=\"token operator\">=</span> enumClass<span class=\"token punctuation\">.</span><span class=\"token function\">enumConstantDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name is null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token string\">\"No enum constant \"</span> <span class=\"token operator\">+</span> enumClass<span class=\"token punctuation\">.</span><span class=\"token function\">getCanonicalName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".\"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>实际上通过调用 <code>enumClass</code>  的 <code>enumConstantDirectory()</code>  方法获取到的是一个 <code>Map</code>  集合，在该集合中存放了以枚举 <code>name</code>  为 <code>key</code>  和以枚举实例变量为 <code>value</code>  的 <code>key</code> &amp; <code>value</code>  数据，因此通过 <code>name</code>  的值就可以获取到枚举实例，下面是 <code>enumConstantDirectory()</code>  源码：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Class.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">版本请选择JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>Serializable</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">GenericDeclaration</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Type</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">AnnotatedElement</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">TypeDescriptor<span class=\"token punctuation\">.</span>OfField</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Constable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">enumConstantDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> directory <span class=\"token operator\">=</span> enumConstantDirectory<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>directory <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">//getEnumConstantsShared () 最终通过反射调用枚举类的 values 方法</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> universe <span class=\"token operator\">=</span> <span class=\"token function\">getEnumConstantsShared</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>universe <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" is not an enum class\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      directory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>universe<span class=\"token punctuation\">.</span>length <span class=\"token operator\">/</span> <span class=\"token number\">0.75f</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token comment\">//map 存放了当前 enum 类的所有枚举实例变量，以 name 为 key</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> constant <span class=\"token operator\">:</span> universe<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        directory<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Enum</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span>constant<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> constant<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      enumConstantDirectory <span class=\"token operator\">=</span> directory<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">return</span> directory<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">transient</span> <span class=\"token keyword\">volatile</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> enumConstantDirectory<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>到这里我们也就可以看出枚举序列化确实不会重新创建新实例， <code>JVM</code>  保证了每个枚举实例变量的唯一性，下面就是来看使用反射能不能创建枚举，通过反射获取构造器并创建枚举，代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>ReflectionCreateEnumeration.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">本示例使用JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Constructor</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InvocationTargetException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @Description: 反射创建枚举实例测试</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @DateTime: 2023-12-09 11:30</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ReflectionCreateEnumeration</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">NoSuchMethodException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InvocationTargetException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InstantiationException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IllegalAccessException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 获取枚举类的构造函数</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token class-name\">Constructor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">EnumSingleton</span><span class=\"token punctuation\">></span></span> declaredConstructor <span class=\"token operator\">=</span> <span class=\"token class-name\">EnumSingleton</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredConstructor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 暴力破解</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    declaredConstructor<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 创建枚举</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token class-name\">EnumSingleton</span> otherInstance <span class=\"token operator\">=</span> declaredConstructor<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"otherInstance\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>          执行结果：</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>          Exception in thread \"main\" java.lang.IllegalArgumentException: Cannot reflectively create enum objects</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            at java.base/java.lang.reflect.Constructor.newInstanceWithCaller (Constructor.java:492)</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            at java.base/java.lang.reflect.Constructor.newInstance (Constructor.java:480)</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            at top.rem.rain.ReflectionCreateEnumeration.main (ReflectionCreateEnumeration.java:19)</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>执行结果</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Exception</span> in thread <span class=\"token string\">\"main\"</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span>IllegalArgumentException</span><span class=\"token operator\">:</span> <span class=\"token class-name\">Cannot</span> reflectively create <span class=\"token keyword\">enum</span> objects</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tat java<span class=\"token punctuation\">.</span>base<span class=\"token operator\">/</span><span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span>Constructor</span><span class=\"token punctuation\">.</span><span class=\"token function\">newInstanceWithCaller</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Constructor</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">492</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tat java<span class=\"token punctuation\">.</span>base<span class=\"token operator\">/</span><span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span>Constructor</span><span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Constructor</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">480</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tat <span class=\"token class-name\"><span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain<span class=\"token punctuation\">.</span></span>ReflectionCreateEnumeration</span><span class=\"token punctuation\">.</span><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ReflectionCreateEnumeration</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">19</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>很显然是告诉我们不能使用反射创建枚举类，这是为什么呢？下面来继续探究 <code>newInstance()</code>  方法源码：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Constructor.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">版本请选择JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Constructor</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Executable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token annotation punctuation\">@CallerSensitive</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token annotation punctuation\">@ForceInline</span> <span class=\"token comment\">// to ensure Reflection.getCallerClass optimization</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span> <span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> initargs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>          <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InstantiationException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IllegalAccessException</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>          <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InvocationTargetException</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> caller <span class=\"token operator\">=</span> override <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">:</span> <span class=\"token class-name\">Reflection</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCallerClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">newInstanceWithCaller</span><span class=\"token punctuation\">(</span>initargs<span class=\"token punctuation\">,</span> <span class=\"token operator\">!</span>override<span class=\"token punctuation\">,</span> caller<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">/* package-private */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token class-name\">T</span> <span class=\"token function\">newInstanceWithCaller</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> checkAccess<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> caller<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>          <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InstantiationException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IllegalAccessException</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>          <span class=\"token class-name\">InvocationTargetException</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>checkAccess<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token function\">checkAccess</span><span class=\"token punctuation\">(</span>caller<span class=\"token punctuation\">,</span> clazz<span class=\"token punctuation\">,</span> clazz<span class=\"token punctuation\">,</span> modifiers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// 在这里判断 Modifier.ENUM 是不是枚举修饰的，如果是则抛出异常</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getModifiers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token class-name\">Modifier</span><span class=\"token punctuation\">.</span>ENUM<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cannot reflectively create enum objects\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token class-name\">ConstructorAccessor</span> ca <span class=\"token operator\">=</span> constructorAccessor<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// read volatile</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ca <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      ca <span class=\"token operator\">=</span> <span class=\"token function\">acquireConstructorAccessor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token class-name\">T</span> inst <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span> ca<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">return</span> inst<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>从源码中来看很显然，确实无法使用反射创建枚举实例，也就说明了创建枚举实例只有编译器能够做到，显然枚举订单里模式确实是个不错的选择，因此我们推荐使用它。<br />\n但是这总不是万能的，对于 <code>Android</code>  平台这个可能未必是最好的选择，在 <code>Android</code>  开发中，内存优化是个大块头，而使用枚举时占用的内存尝尝是静态变量订单两倍，因此 <code>Android</code>  官方在内存优化方面给出的建议是尽量避免在 <code>Android</code>  中使用 <code>enum</code> 。不管如何，关于单例模式，我们总是应该记住：线程安全、延迟加载、序列化与反序列化安全，反射安全是很重要的。</p>\n</blockquote>\n<h1 id=\"enummap\"><a class=\"anchor\" href=\"#enummap\">#</a> EnumMap</h1>\n<h2 id=\"enummap基本用法\"><a class=\"anchor\" href=\"#enummap基本用法\">#</a> EnumMap 基本用法</h2>\n<blockquote>\n<p>有这样一个问题，现在我们有一堆大小相同而颜色不同的数据，需要统计出每种颜色的数量是多少以便将数据录入仓库，定义如下枚举用于表示颜色，代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Colors.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">本示例使用JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @author LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Colors</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    GREEN<span class=\"token punctuation\">,</span>RED<span class=\"token punctuation\">,</span>BLUE<span class=\"token punctuation\">,</span>YELLOW</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>解决方案如下，使用 <code>Map</code>  集合来统计， <code>key</code>  值作为颜色名称， <code>value</code>  代表运费数量。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>EnumMapBasicUsage.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">本示例使用JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Description: EnumMap 基本用法</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @DateTime: 2023-12-09 13:01</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EnumMapBasicUsage</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Clothes</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Clothes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C001\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span>BLUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Clothes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C002\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span>YELLOW<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Clothes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C003\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span>RED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Clothes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C004\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span>GREEN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Clothes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C005\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span>BLUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Clothes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C006\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span>BLUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Clothes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C007\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span>RED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Clothes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C008\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span>YELLOW<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Clothes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C009\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span>YELLOW<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Clothes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C010\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span>GREEN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 第一种：使用 HashMap</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Clothes</span> clothes <span class=\"token operator\">:</span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token class-name\">String</span> colorName <span class=\"token operator\">=</span> clothes<span class=\"token punctuation\">.</span><span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token class-name\">Integer</span> count <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>colorName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>colorName<span class=\"token punctuation\">,</span> count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>colorName<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"---------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">// 第二种：使用 EnumMap</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> enumMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EnumMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Clothes</span> clothes <span class=\"token operator\">:</span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token class-name\">Color</span> color <span class=\"token operator\">=</span> clothes<span class=\"token punctuation\">.</span><span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token class-name\">Integer</span> count <span class=\"token operator\">=</span> enumMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                enumMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">,</span> count<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                enumMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>enumMap<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>          执行结果：</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            &#123;RED=2, BLUE=3, YELLOW=3, GREEN=2&#125;</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            ---------------</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            &#123;GREEN=2, RED=2, BLUE=3, YELLOW=3&#125;</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Color</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>         * 绿色</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        GREEN<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>         * 红色</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        RED<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>         * 蓝色</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        BLUE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>         * 黄色</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        YELLOW</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Clothes</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\">Color</span> colors<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Clothes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Color</span> colors<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>colors <span class=\"token operator\">=</span> colors<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>            <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Color</span> <span class=\"token function\">getColors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>            <span class=\"token keyword\">return</span> colors<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setColors</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Color</span> colors<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>colors <span class=\"token operator\">=</span> colors<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Color</span> <span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>colors<span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre></pre></td></tr><tr><td data-num=\"109\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>我们使用了两种解决方案，第一种是 <code>HashMap</code> , 第二种是 <code>EnumMap</code> , 虽然都统计出了正确的结果，但是 <code>EnumMap</code>  作为枚举的专属集合，我们没有理由再去使用 <code>HashMap</code> ，毕竟 <code>EnumMap</code>  要求其 <code>KEY</code>  必须为 <code>Enum</code>  类型的，因此使用 <code>Color</code>  枚举实例作为 <code>KEY</code>  最恰当不过了，也避免了获取 <code>name</code>  的步骤，更重要的是 <code>EnumMap</code>  效率更高，因为其内部是通过数组实现的，注意 <code>EnumMap</code>  的 <code>Key</code>  值不能为 <code>null</code> ，虽说是枚举专属集合，但其操作与一般的 <code>Map</code>  差不多，概括性来说 <code>EnumMap</code>  是专门为枚举类型量身定制的 <code>Map</code>  实现，虽然使用其它的 <code>Map</code>  (如： <code>HashMap</code> ) 类型也能完成相同功能，但是使用 <code>EnumMap</code>  会更加高效，它只能接收同一枚枚举类型的实例作为键值且不能为 <code>null</code> ，由于枚举类型实例的数量相对固定并且有限，所以 <code>EnumMap</code>  使用数组来存放与枚举类型对应的值，毕竟数组是一段连续的内存空间，根据程序局部性原理，效率会相当高，下面来进一步了解 <code>EnumMap</code>  的用法。<br />\n <code>EnumMap</code>  构造函数如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>EnumMap.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">版本请选择JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EnumMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Enum</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>Serializable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Cloneable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// 创建一个具有指定键类型的空枚举映射</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">EnumMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">></span></span> keyType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>keyType <span class=\"token operator\">=</span> keyType<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    keyUniverse <span class=\"token operator\">=</span> <span class=\"token function\">getKeyUniverse</span><span class=\"token punctuation\">(</span>keyType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    vals <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span>keyUniverse<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// 创建一个其键类型与指定枚举映射相同的枚举映射，最初包含相同的映射关系 (如果有的话)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">EnumMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EnumMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    keyType <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span>keyType<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    keyUniverse <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span>keyUniverse<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    vals <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span>vals<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    size <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token comment\">// 创建一个枚举映射，从指定映射对其初始化</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">EnumMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">EnumMap</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token class-name\">EnumMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> em <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">EnumMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span> m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      keyType <span class=\"token operator\">=</span> em<span class=\"token punctuation\">.</span>keyType<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      keyUniverse <span class=\"token operator\">=</span> em<span class=\"token punctuation\">.</span>keyUniverse<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      vals <span class=\"token operator\">=</span> em<span class=\"token punctuation\">.</span>vals<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      size <span class=\"token operator\">=</span> em<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Specified map is empty\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      keyType <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">keySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaringClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      keyUniverse <span class=\"token operator\">=</span> <span class=\"token function\">getKeyUniverse</span><span class=\"token punctuation\">(</span>keyType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      vals <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span>keyUniverse<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token function\">putAll</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>与 <code>HashMap</code>  不同，它需要传递一个类型信息，即 <code>Class</code>  对象，通过这个参数 <code>EnumMap</code>  就可以根据类型信息初始化其内部数据结构，另外两个是初始化时传入一个 <code>Map</code>  集合，代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>EnumMapConstructor.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">本示例使用JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EnumMap</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @Description: EnumMap 构造器示例</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @DateTime: 2023-12-09 16:37</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EnumMapConstructor</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 第一种构造</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> enumMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EnumMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 第二种构造</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> enumMap2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EnumMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>enumMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 第三种构造</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> hashMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span>GREEN<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span>BLUE<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> enumMap3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EnumMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>hashMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Color</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>         * 绿色</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        GREEN<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>         * 红色</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        RED<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>         * 蓝色</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        BLUE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>         * 黄色</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        YELLOW</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>至于 <code>EnumMap</code>  的方法，跟普通的 <code>Map</code>  几乎没有区别，注意与 <code>HashMap</code>  的主要不同在于构造器需要传递类型参数和 <code>EnumMap</code>  保证 <code>Key</code>  顺序与枚举中的顺序一致，但请记住 <code>Key</code>  不能为 <code>null</code> 。</p>\n</blockquote>\n<h2 id=\"enummap实现原理解析\"><a class=\"anchor\" href=\"#enummap实现原理解析\">#</a> EnumMap 实现原理解析</h2>\n<blockquote>\n<p>这里我们主要分析其内部存储结构，添加查找的实现，了解了这几点后对 <code>EnumMap</code>  内部实现原理就比较清晰了，先来看数据结构和构造函数。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>EnumMap.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">版本请选择JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EnumMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Enum</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>Serializable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Cloneable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// Class 对象引用</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">></span></span> keyType<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// 存储 Key 值的数组</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">transient</span> <span class=\"token class-name\">K</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> keyUniverse<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// 存储 Value 值的数组</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">transient</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> vals<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">//map 的 size</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">transient</span> <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token comment\">// 构造函数</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">EnumMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">></span></span> keyType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>keyType <span class=\"token operator\">=</span> keyType<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    keyUniverse <span class=\"token operator\">=</span> <span class=\"token function\">getKeyUniverse</span><span class=\"token punctuation\">(</span>keyType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    vals <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span>keyUniverse<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p><code>EnumMap</code>  继承了 <code>AbstractMap</code>  类，因此 <code>EnumMap</code>  具备一般 <code>Map</code>  的使用方法， <code>keyType</code>  表示类型信息， <code>keyUniverse</code>  表示键数组，存储的是所有可能的枚举值， <code>vals</code>  数组表示键对应的值， <code>size</code>  表示键值对个数，在构造函数中通过 <code>keyUniverse = getKeyUniverse(keyType);</code>  初始化了 <code>keyUniverse</code>  数组的值，内部存储的是所有可能的枚举值，接着初始化了存在 <code>Value</code>  值的数组 <code>vals</code> ，其大小枚举实例的个数相同， <code>getKeyUniverse</code>  方法实现如下：</p>\n</blockquote>\n<h3 id=\"getkeyuniverse方法实现分析\"><a class=\"anchor\" href=\"#getkeyuniverse方法实现分析\">#</a> getKeyUniverse 方法实现分析</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>EnumMap.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">版本请选择JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EnumMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Enum</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>Serializable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Cloneable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   * 意思就是返回枚举数组</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   * Returns all of the values comprising K.</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   * The result is uncloned, cached, and shared by all callers. -> 返回包含 K 的所有值。 结果是未克隆的、缓存的，并由所有调用方共享</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Enum</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">K</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getKeyUniverse</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">></span></span> keyType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 最终调用到枚举类型的 values 方法，values 方法返回所有可能的枚举值</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token class-name\">SharedSecrets</span><span class=\"token punctuation\">.</span><span class=\"token function\">getJavaLangAccess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getEnumConstantsShared</span><span class=\"token punctuation\">(</span>keyType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>将鼠标放入到 <code>getEnumConstantsShared</code>  上然后按 <code>Ctrl+鼠标左边</code> 进入方法内部，以此追查。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>JavaLangAccess.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">版本请选择JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">jdk<span class=\"token punctuation\">.</span>internal<span class=\"token punctuation\">.</span>access</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">JavaLangAccess</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Enum</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getEnumConstantsShared</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> klass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>System.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">版本请选择JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">System</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Enum</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getEnumConstantsShared</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> klass<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Enum</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>klass<span class=\"token punctuation\">.</span><span class=\"token function\">getEnumConstantsShared</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Class.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">版本请选择JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>Serializable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">GenericDeclaration</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Type</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">AnnotatedElement</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TypeDescriptor<span class=\"token punctuation\">.</span>OfField</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Constable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getEnumConstantsShared</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> constants <span class=\"token operator\">=</span> enumConstants<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>constants <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isEnum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>         <span class=\"token comment\">//values 的调用就在这</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">final</span> <span class=\"token class-name\">Method</span> values <span class=\"token operator\">=</span> <span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"values\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span></span>AccessController</span><span class=\"token punctuation\">.</span><span class=\"token function\">doPrivileged</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>security<span class=\"token punctuation\">.</span></span>PrivilegedAction</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    values<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> temporaryConstants <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>values<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        enumConstants <span class=\"token operator\">=</span> constants <span class=\"token operator\">=</span> temporaryConstants<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token comment\">// These can happen when users concoct enum-like classes</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token comment\">// that don't comply with the enum spec.</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InvocationTargetException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">NoSuchMethodException</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>             <span class=\"token class-name\">IllegalAccessException</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">return</span> constants<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">transient</span> <span class=\"token keyword\">volatile</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> enumConstants<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>从方法的返回值来看，返回类型是枚举数组，事实也是如此，最终返回值正是枚举类型的 <code>values</code>  方法的返回值，因此 <code>keyUniverse</code>  数组存储就是枚举类型的所有可能的枚举值。</p>\n</blockquote>\n<h3 id=\"put方法实现分析\"><a class=\"anchor\" href=\"#put方法实现分析\">#</a> put 方法实现分析</h3>\n<blockquote>\n<p><code>put</code>  方法实现代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>EnumMap.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">版本请选择JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EnumMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Enum</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>Serializable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Cloneable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">V</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">K</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 检测 key 的类型</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">typeCheck</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 获取存放 value 值的数组下标</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">ordinal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 设置旧值</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">Object</span> oldValue <span class=\"token operator\">=</span> vals<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 设置 value 值</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    vals<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">maskNull</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldValue <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 返回旧值</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">unmaskNull</span><span class=\"token punctuation\">(</span>oldValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>这里通过 <code>typeCheck</code>  方法进行了 <code>key</code>  类型检测，判断是否为枚举类型，如果类型不对则会抛出异常。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>EnumMap.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">版本请选择JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EnumMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Enum</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>Serializable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Cloneable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">typeCheck</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">K</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> keyClass <span class=\"token operator\">=</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>keyClass <span class=\"token operator\">!=</span> keyType <span class=\"token operator\">&amp;&amp;</span> keyClass<span class=\"token punctuation\">.</span><span class=\"token function\">getSuperclass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> keyType<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassCastException</span><span class=\"token punctuation\">(</span>keyClass <span class=\"token operator\">+</span> <span class=\"token string\">\" != \"</span> <span class=\"token operator\">+</span> keyType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>接着通过 <code>key.ordinal()</code>  方式获取到该枚举实例的顺序值，利用此值作为下标，把值存储在 <code>vals</code>  数组对应下标的元素中 (即 <code>vals[index]</code> )，这也是为什么 <code>EnumMap</code>  能维持与枚举实例相同存储顺序的原因，我们发现在对 <code>vals[]</code>  中元素进行赋值和返回旧值时分别调用了 <code>maskNull()</code>  和 <code>unmaskNull()</code>  方法。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>EnumMap.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">版本请选择JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EnumMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Enum</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>Serializable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Cloneable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// 代表 Null 值的空对象实例</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Object</span> NULL <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token string\">\"java.util.EnumMap.NULL\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">maskNull</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 如果值为空，返回 NULL 对象否则返回 value </span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> NULL <span class=\"token operator\">:</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">V</span> <span class=\"token function\">unmaskNull</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// 将 NULL 对象转换为 null 值</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">==</span> NULL <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">:</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>由此看来 <code>EnumMap</code>  还是允许存放 <code>null</code>  的，但 <code>key</code>  是绝对不能为 <code>null</code> ，对于 <code>null</code>  值 <code>EnumMap</code>  进行了特殊处理，将其包装为 <code>NULL</code>  对象，毕竟 <code>vals[]</code>  存的是 <code>Object</code> ， <code>maskNull()</code>  和 <code>unmaskNull()</code>  方法正是用于 <code>null</code>  的包装和解包装的，这就是 <code>EnumMap</code>  集合的添加过程。</p>\n</blockquote>\n<h3 id=\"get方法实现分析\"><a class=\"anchor\" href=\"#get方法实现分析\">#</a> get 方法实现分析</h3>\n<blockquote>\n<p><code>get()</code>  方法实现代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>EnumMap.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">版本请选择JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EnumMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Enum</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>Serializable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Cloneable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">V</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isValidKey</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token function\">unmaskNull</span><span class=\"token punctuation\">(</span>vals<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Enum</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ordinal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// 对 Key 值的有效性和类型信息进行判断</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isValidKey</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// Cheaper than instanceof Enum followed by getDeclaringClass</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> keyClass <span class=\"token operator\">=</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">return</span> keyClass <span class=\"token operator\">==</span> keyType <span class=\"token operator\">||</span> keyClass<span class=\"token punctuation\">.</span><span class=\"token function\">getSuperclass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> keyType<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>相对应 <code>put()</code>  方法， <code>get()</code>  方法显示相当简洁， <code>key</code>  有效的话直接通过 <code>ordinal</code>  方法取索引，然后在值数组 <code>vals</code>  里通过索引获取值返回。</p>\n</blockquote>\n<h3 id=\"remove方法实现分析\"><a class=\"anchor\" href=\"#remove方法实现分析\">#</a> remove 方法实现分析</h3>\n<blockquote>\n<p><code>remove()</code>  方法实现代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>EnumMap.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">版本请选择JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EnumMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Enum</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>Serializable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Cloneable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">V</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 判断 key 值是否有效</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isValidKey</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 直接获取索引</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Enum</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ordinal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">Object</span> oldValue <span class=\"token operator\">=</span> vals<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 对应下标元素值设置为 null</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    vals<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldValue <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">unmaskNull</span><span class=\"token punctuation\">(</span>oldValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>如果 <code>key</code>  值有效就通过 <code>key</code>  获取下标索引值，把 <code>vals[]</code>  对应的下标值设置为 <code>null</code>  然后 <code>size</code>  减一。</p>\n</blockquote>\n<h3 id=\"containsvaluecontainskey方法实现分析\"><a class=\"anchor\" href=\"#containsvaluecontainskey方法实现分析\">#</a> containsValue&amp;containsKey 方法实现分析</h3>\n<blockquote>\n<p><code>containsValue()</code>  和 <code>containsKey()</code>  方法实现代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>EnumMap.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">版本请选择JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EnumMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Enum</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>Serializable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Cloneable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// 判断是否包含 value</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">containsValue</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    value <span class=\"token operator\">=</span> <span class=\"token function\">maskNull</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 遍历数组</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> val <span class=\"token operator\">:</span> vals<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token comment\">// 判断是否包含 key</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">isValidKey</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> vals<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Enum</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ordinal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>判断 <code>value</code>  直接通过遍历数组实现，而判断 <code>key</code>  就很简单了，判断 <code>key</code>  是否有效和对应 <code>vals[]</code>  中是否存在该值。<br />\n以上这就是 <code>EnumMap</code>  的主要实现原理，即内部有两个数组，长度相同，一个表示所有可能的键 (枚举值)，一个表示对应的值，不允许 <code>key</code>  为 <code>null</code> ，但允许 <code>value</code>  为 <code>null</code> ，键都有一个对应的索引，根据索引直接访问和操作其键数组和值数组，由于操作的都是数组，因此效率很高。</p>\n</blockquote>\n<h1 id=\"enumset\"><a class=\"anchor\" href=\"#enumset\">#</a> EnumSet</h1>\n<blockquote>\n<p><code>EnumSet</code>  是与枚举类型一起使用的专属 <code>Enum</code>  的 <code>Set</code>  集合， <code>EnumSet</code>  中所有元素都必须是枚举类型，与其它 <code>Set</code>  接口的实现类 <code>HashSet</code> 、 <code>TreeSet</code>  其内部都是用对应的 <code>HashSet</code> 、 <code>TreeMap</code>  实现的，不同的是 <code>EnumSet</code>  在内部实现是 <code>位向量</code> ，它是一种极为高效的位运算操作，由于直接存储和操作都是 <code>bit</code> ，因此 <code>EnumSet</code>  空间和时间性能都十分可观，足以媲美传统上基于 <code>int</code>  的 <code>位标志</code> 的运算，重要的是我们可以像操作 <code>set</code>  集合一般来操作 <code>为运算</code> ，这样使用代码更简单易懂同时又具备类型安全的优势。<br />\n注意： <code>EnumSet</code>  不允许使用 <code>null</code>  元素，试图插入 <code>null</code>  元素将会抛出 <code>NullPointerException</code> ，但试图测试判断是否存在 <code>null</code>  元素或移除 <code>null</code>  元素则不会抛出异常，与大多数 <code>collection</code>  实现一样， <code>EnumSet</code>  不是线程安全的，因此在多线程环境下一个注意数据同步问题。</p>\n</blockquote>\n<h2 id=\"enumset基本用法\"><a class=\"anchor\" href=\"#enumset基本用法\">#</a> EnumSet 基本用法</h2>\n<blockquote>\n<p>创建 <code>EnumSet</code>  并不能使用 <code>new</code>  关键字，因为它是一个抽象类，而应该使用其提供的静态工厂方法， <code>EnumSet</code>  的静态工厂方法比较多，代码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>EnumSet.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">版本请选择JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Enum</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Cloneable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>Serializable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// 创建一个具有指定元素类型的空 EnumSet</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Enum</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">EnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">noneOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> elementType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">Enum</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> universe <span class=\"token operator\">=</span> <span class=\"token function\">getUniverse</span><span class=\"token punctuation\">(</span>elementType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>universe <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassCastException</span><span class=\"token punctuation\">(</span>elementType <span class=\"token operator\">+</span> <span class=\"token string\">\" not an enum\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>universe<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">64</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegularEnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>elementType<span class=\"token punctuation\">,</span> universe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JumboEnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>elementType<span class=\"token punctuation\">,</span> universe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token comment\">// 创建一个指定元素类型并包含所有枚举值的 EnumSet</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Enum</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">EnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">allOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> elementType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token class-name\">EnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token function\">noneOf</span><span class=\"token punctuation\">(</span>elementType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    result<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token comment\">// 创建一个包括枚举值中指定范围元素的 EnumSet</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Enum</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">EnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> from<span class=\"token punctuation\">,</span> <span class=\"token class-name\">E</span> <span class=\"token keyword\">to</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">to</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span>from <span class=\"token operator\">+</span> <span class=\"token string\">\" > \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">to</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token class-name\">EnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token function\">noneOf</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaringClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    result<span class=\"token punctuation\">.</span><span class=\"token function\">addRange</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">,</span> <span class=\"token keyword\">to</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token comment\">// 创建一个包括参数中所有元素的 EnumSet</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Enum</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">EnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token class-name\">EnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token function\">noneOf</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaringClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Enum</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">EnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">E</span> e2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token class-name\">EnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token function\">noneOf</span><span class=\"token punctuation\">(</span>e1<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaringClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>e1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>e2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Enum</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">EnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">E</span> e2<span class=\"token punctuation\">,</span> <span class=\"token class-name\">E</span> e3<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token class-name\">EnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token function\">noneOf</span><span class=\"token punctuation\">(</span>e1<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaringClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>e1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>e2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>e3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Enum</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">EnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">E</span> e2<span class=\"token punctuation\">,</span> <span class=\"token class-name\">E</span> e3<span class=\"token punctuation\">,</span> <span class=\"token class-name\">E</span> e4<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token class-name\">EnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token function\">noneOf</span><span class=\"token punctuation\">(</span>e1<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaringClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>e1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>e2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>e3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>e4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Enum</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">EnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">E</span> e2<span class=\"token punctuation\">,</span> <span class=\"token class-name\">E</span> e3<span class=\"token punctuation\">,</span> <span class=\"token class-name\">E</span> e4<span class=\"token punctuation\">,</span> <span class=\"token class-name\">E</span> e5<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token class-name\">EnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token function\">noneOf</span><span class=\"token punctuation\">(</span>e1<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaringClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>e1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>e2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>e3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>e4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>e5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>  <span class=\"token annotation punctuation\">@SafeVarargs</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Enum</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">EnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> first<span class=\"token punctuation\">,</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> rest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token class-name\">EnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token function\">noneOf</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaringClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e <span class=\"token operator\">:</span> rest<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>      result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>  <span class=\"token comment\">// 创建一个包含参数容器中的所有元素的 EnumSet</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Enum</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">EnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">copyOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Enum</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">EnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">copyOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">EnumSet</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Collection is empty\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>      <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> i <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>      <span class=\"token class-name\">E</span> first <span class=\"token operator\">=</span> i<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>      <span class=\"token class-name\">EnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token class-name\">EnumSet</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>      <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"103\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>代码示例如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>EnumSetDemo.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">本示例使用JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EnumSet</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @Description: EnumSet 用法示例</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @DateTime: 2023-12-10 11:09</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EnumSetDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 创建一个空 Set 集合</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">EnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">></span></span> enumSet <span class=\"token operator\">=</span> <span class=\"token class-name\">EnumSet</span><span class=\"token punctuation\">.</span><span class=\"token function\">noneOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"添加前的EnumSet：\"</span> <span class=\"token operator\">+</span> enumSet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        enumSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span>BLUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        enumSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span>BLACK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        enumSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span>GREEN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        enumSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span>YELLOW<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        enumSet<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span>RED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"添加后的EnumSet：\"</span> <span class=\"token operator\">+</span> enumSet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"------------------------------------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">// 使用 allOf 创建包含所有枚举类型的 enumSet，其内部根据 Class 对象初始化了所有枚举实例</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">EnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">></span></span> enumSet1 <span class=\"token operator\">=</span> <span class=\"token class-name\">EnumSet</span><span class=\"token punctuation\">.</span><span class=\"token function\">allOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"allOf直接填充：\"</span> <span class=\"token operator\">+</span> enumSet1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"------------------------------------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token comment\">// 初始集合包括枚举值中指定范围的元素</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\">EnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">></span></span> enumSet2 <span class=\"token operator\">=</span> <span class=\"token class-name\">EnumSet</span><span class=\"token punctuation\">.</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span>RED<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span>BLUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"指定初始化范围：\"</span> <span class=\"token operator\">+</span> enumSet2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"------------------------------------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">// 指定补集，也就是从全部枚举类型中去除参数集合中的元素，如下去掉上述 enumSet2 的元素</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token class-name\">EnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">></span></span> enumSet3 <span class=\"token operator\">=</span> <span class=\"token class-name\">EnumSet</span><span class=\"token punctuation\">.</span><span class=\"token function\">complementOf</span><span class=\"token punctuation\">(</span>enumSet2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"指定补集：\"</span> <span class=\"token operator\">+</span> enumSet3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"------------------------------------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token comment\">// 初始化时直接指定元素</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token class-name\">EnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">></span></span> enumSet4 <span class=\"token operator\">=</span> <span class=\"token class-name\">EnumSet</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span>YELLOW<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"指定Color.YELLOW元素：\"</span> <span class=\"token operator\">+</span> enumSet4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token class-name\">EnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">></span></span> enumSet5 <span class=\"token operator\">=</span> <span class=\"token class-name\">EnumSet</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span>YELLOW<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span>RED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"指定Color.YELLOW和Color.RED元素：\"</span> <span class=\"token operator\">+</span> enumSet5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"------------------------------------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token comment\">// 复制 enumSet5 容器的数据作为初始化数据</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token class-name\">EnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">></span></span> enumSet6 <span class=\"token operator\">=</span> <span class=\"token class-name\">EnumSet</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOf</span><span class=\"token punctuation\">(</span>enumSet5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"enumSet6：\"</span> <span class=\"token operator\">+</span> enumSet6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"------------------------------------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span>RED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token comment\">// 此处添加一个重复元素</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span>RED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span>GREEN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span>YELLOW<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"list：\"</span> <span class=\"token operator\">+</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token comment\">// 使用 copyOf (Collection&lt;E> c)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token class-name\">EnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">></span></span> enumSet7 <span class=\"token operator\">=</span> <span class=\"token class-name\">EnumSet</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOf</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"enumSet7：\"</span> <span class=\"token operator\">+</span> enumSet7<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>          执行结果：</pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            添加前的 EnumSet：[]</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            添加后的 EnumSet：[GREEN, RED, BLUE, BLACK, YELLOW]</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            ------------------------------------------------</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            allOf 直接填充：[GREEN, RED, BLUE, BLACK, YELLOW]</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            ------------------------------------------------</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            指定初始化范围：[RED, BLUE]</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>            ------------------------------------------------</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            指定补集：[GREEN, BLACK, YELLOW]</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>            ------------------------------------------------</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            指定 Color.YELLOW 元素：[YELLOW]</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            指定 Color.YELLOW 和 Color.RED 元素：[RED, YELLOW]</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>            ------------------------------------------------</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            enumSet6：[RED, YELLOW]</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            ------------------------------------------------</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            list：[RED, RED, GREEN, YELLOW]</pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            enumSet7：[GREEN, RED, YELLOW]</pre></td></tr><tr><td data-num=\"89\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Color</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>         * 绿色</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        GREEN<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"99\"></td><td><pre>         * 红色</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        RED<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"103\"></td><td><pre>         * 蓝色</pre></td></tr><tr><td data-num=\"104\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        BLUE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"107\"></td><td><pre>         * 黑色</pre></td></tr><tr><td data-num=\"108\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        BLACK<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"111\"></td><td><pre>         * 黄色</pre></td></tr><tr><td data-num=\"112\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        YELLOW</pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p><code>noneOf(Class&lt;E&gt; elementType)</code>  静态方法，主要用于创建一个空的 <code>EnumSet</code>  集合，传递参数 <code>elementType</code>  代表的是枚举类型的类型信息，即 <code>Class</code>  对象。<br />\n <code>EnumSet&lt;E&gt; allOf(Class&lt;E&gt; elementType)</code>  静态方法则是创建一个填充了 <code>elementType</code>  类型所代表的所有枚举实例，奇怪的是 <code>EnumSet</code>  提供了多个重载形式的 <code>of()</code>  方法，最后一个接受的是可变参数，其它重载方法则是固定参数个数， <code>EnumSet</code>  之所以这样设计是因为可变参数的运行效率低一些，所有在参数数据不多的情况下，强烈不建议使用传递参数为可变参数的 <code>of()</code>  方法，即 <code>EnumSet&lt;E&gt; of(E first, E... rest)</code> 。 至于 <code>EnumSet</code>  的操作方法与 <code>set</code>  集合一样，什么时候使用 <code>EnumSet</code>  比较好呢？事实上当需要进行位域运算时就可以使用 <code>EnumSet</code>  了。</p>\n</blockquote>\n<h3 id=\"位域运算\"><a class=\"anchor\" href=\"#位域运算\">#</a> 位域运算</h3>\n<blockquote>\n<p>位域运算代码示例如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>BitFieldDemo.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">本示例使用JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: 位域运算代码示例</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2023-12-10 13:12</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BitFieldDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 定义位域变量</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     * 1</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> TYPE_ONE <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     * 2</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> TYPE_TWO <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     * 4</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> TYPE_THREE <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     * 8</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> TYPE_FOUR <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">// 位域运算</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">int</span> type <span class=\"token operator\">=</span> TYPE_ONE <span class=\"token operator\">|</span> TYPE_TWO <span class=\"token operator\">|</span> TYPE_THREE <span class=\"token operator\">|</span> TYPE_FOUR<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"type = \"</span> <span class=\"token operator\">+</span> type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>          执行结果：</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>          type = 15</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>诸如上述情况，我们都可以将上述的类型定义成枚举然后采用 <code>EnumSet</code>  来装载，进行各种操作，这样不仅不用手动编写太多冗余代码，而且使用 <code>EnumSet</code>  集合进行操作也将使代码更加简洁。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>EnumSetDemo2.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">本示例使用JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EnumSet</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Description: 枚举替代位域</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @DateTime: 2023-12-10 13:23</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EnumSetDemo2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">EnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Type</span><span class=\"token punctuation\">></span></span> set <span class=\"token operator\">=</span> <span class=\"token class-name\">EnumSet</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Type</span><span class=\"token punctuation\">.</span>TYPE_ONE<span class=\"token punctuation\">,</span><span class=\"token class-name\">Type</span><span class=\"token punctuation\">.</span>TYPE_FOUR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Type</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>         * 1</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        TYPE_ONE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>         * 2</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        TYPE_TWO<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>         * 3</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        TYPE_THREE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>         * 4</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        TYPE_FOUR</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p><code>EnumSet</code>  其中最有价值的是其内部实现原理，采用的是位向量，它体现出来的是一种高效的数据处理方式，这点很值得我们去学习它。</p>\n</blockquote>\n<h2 id=\"enumset实现原理分析\"><a class=\"anchor\" href=\"#enumset实现原理分析\">#</a> EnumSet 实现原理分析</h2>\n<blockquote>\n<p>关于 <code>EnumSet</code>  实现原理会有点绕脑，其内部执行几乎都是位运算。</p>\n</blockquote>\n<h3 id=\"理解位向量\"><a class=\"anchor\" href=\"#理解位向量\">#</a> 理解位向量</h3>\n<blockquote>\n<p>分析 <code>EnumSet</code>  前有必要先了解一下 <code>位向量</code> ，顾名思义 <code>位向量</code> 就是用一个 <code>bit</code>  位 ( <code>0</code>  或 <code>1</code> ) 标记一个元素的状态，用一组 <code>bit</code>  位表示一个集合的状态，而每个位对应一个元素，每个 <code>bit</code>  位的状态只可能有两种，即 <code>0</code>  或 <code>1</code> 。 <code>位向量</code> 能表示的元素个数与向量的 <code>bit</code>  位长度有关，如：一个 <code>int</code>  类型能表示 <code>32</code>  个元素，而应该 <code>long</code>  类型则可以表示 <code>64</code>  个元素，对于 <code>EnumSet</code>  而言采用的就是 <code>long</code>  类型或者 <code>long</code>  类型数组。比如现在有一个文件中的数据，该文件存储了 <code>N = 1000000</code>  个无序的整数，需要把这些整数读取到内存并排序再重新写回文件中，该如何解决？最简单的方式是用 <code>int</code>  类型来存储每个数，并把其存入到数组中，再进行排序，但是这种方式将会导致存储空间异常地大，对数据操作起来效率也是问题，那么有没有更高效的方式呢？那就是运用 <code>位向量</code> ，我们知道一个 <code>int</code>  类型的数有 <code>4</code>  个字节，也就是 <code>32</code>  位，那么我们可以用 <code>N/32</code>  个 <code>int</code>  类型数组来表示 <code>N</code>  个数。</p>\n</blockquote>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a [0] 表示第 1~32 个数（0~31）</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a [1] 表示第 33~64 个数（32~63）</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a [2] 表示第 65~96 个数（64~95）</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>...... 以此类推</pre></td></tr></table></figure><blockquote>\n<p>这样一来每当输入一个数字 <code>m</code>  后，我们应该先找到该数字在数组的第 <code>?</code>  个元素，也就是 <code>a[?]</code>  然后再确定在这个元素的第几个 <code>bit</code>  位，找到后设置为 <code>1</code> ，代表存在该数字。<br />\n比如：输入 <code>40</code>  那么 <code>40/32</code>  为 <code>1</code>  余 <code>8</code> ，则应该将 <code>a[1]</code>  元素值的第 <code>9</code>  个 <code>bit</code>  位设置为 <code>1</code> ( <code>1</code>  的二进制左移 <code>8</code>  位后就是第 <code>9</code>  个位置)，表示该数字存在， <code>40</code>  数字的表示原理图过程如下：</p>\n</blockquote>\n<p><img data-src=\"https://z1.ax1x.com/2023/12/10/piRYuHx.png\" alt=\"piRYuHx.png\" /></p>\n<blockquote>\n<p>在大概明白了位向量表示方式后，上述过程的计算方式，通过以下方式可以计算该数存储在数组的第 <code>?</code>  个元素和元素中第 <code>?</code>  个 <code>bit</code>  位置，为了方便演示，我们在这里假设第 <code>?</code>  个元素中的 <code>?</code>  为 <code>P</code>  余数值为 <code>S</code> 。</p>\n</blockquote>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&#x2F;&#x2F;m 除以 2^n 则商 (P) 表示为 m &gt;&gt; n</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>&#x2F;&#x2F; 等同于 m &#x2F; 2^5 取整数 即：40 &#x2F; 32 &#x3D; 1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>&#x2F;&#x2F; 那么 P&#x3D;1 就是数组中的第 2 个元素，即 a [1]</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>&#x2F;&#x2F; 位操作过程如下，40 的二进制</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>00000000 00000000 00000000 00101000</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>&#x2F;&#x2F; 右移 5 位即 n&#x3D;5,m &gt;&gt; 5, 即结果转为 10 进制就是 P&#x3D;1</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>00000000 00000000 00000000 00000001</pre></td></tr></table></figure><blockquote>\n<p>在这里我们使用 <code>int</code>  类型，即 <code>32</code>  位，所以 <code>2^5=32</code> ，因此 <code>n=5</code> , 由此计算出 <code>P</code>  的值代表的是数组的第 <code>P</code>  个元素，接着利用下述方式计算出余数 ( <code>S</code> ), 以此设置该元素的第 ( <code>S+1</code> ) 个 <code>bit</code>  位为 <code>1</code> 。</p>\n</blockquote>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&#x2F;&#x2F;m 除以 2^n 的余数 (S) 表示为 m &amp; (2^n-1)</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>&#x2F;&#x2F; 等同于： m % 2^5 取余数 即：40 % 32 &#x3D; 8</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>&#x2F;&#x2F;m&#x3D;40 的二进制</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>00000000 00000000 00000000 00101000</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>&#x2F;&#x2F; 2^n-1 (31) 的二进制</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>00000000 00000000 00000000 00011111</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>&#x2F;&#x2F;m &amp; (2^n-1) 即 40 与 31 进行与操作得出余数 即 S&#x3D;8</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>00000000 00000000 00000000 00001000</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>&#x2F;&#x2F; 下面是将 a [1] 元素值的第 (8+1) 个 bit 设置为 1，为什么是 (8+1) 而不是 8？因为 1 左移 8 位就在第 9 个 bit 位了，过程如下：</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>&#x2F;&#x2F; 1 的二进制如下：</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>00000000 00000000 00000000 00000001</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>&#x2F;&#x2F; 1 &lt;&lt; 8 利用余数 8 对 1 进行左移动</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>00000000 00000000 00000001 0000000</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>&#x2F;&#x2F; 然后再与 a [1] 执行或操作后就可以将对应的 bit 为设置为 1</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>&#x2F;&#x2F;a [P] |&#x3D; 1 &lt;&lt; S 下面将使用 Java 代码来实现</pre></td></tr></table></figure><blockquote>\n<p>通过上述二进制位运算就可以计算出整数部分 <code>P</code>  和余数部分 <code>S</code>  并成功设置 <code>bit</code>  位为 <code>1</code> ，下面是用 <code>Java</code>  代码来实现运算过程，代码如下：</p>\n</blockquote>\n<h4 id=\"1️⃣定义位运算变量\"><a class=\"anchor\" href=\"#1️⃣定义位运算变量\">#</a> 1️⃣定义位运算变量</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>BitOperationDemo.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">本示例使用JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: 位运算示例：定义全局变量</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2023-12-10 16:15</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BitOperationDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * 存储元素的数组</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     * 默认使用 int 类型</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> BIT_LENGTH <span class=\"token operator\">=</span> <span class=\"token number\">32</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     * 整数部分</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token class-name\">P</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>     * 余数</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token class-name\">S</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>     * 2^5 - 1</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> MASK <span class=\"token operator\">=</span> <span class=\"token number\">0x1F</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>     * 2^n SHIFT=n=5 表示 2^5=32 即 bit 位长度 32</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> SHIFT <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"2️⃣位运算添加\"><a class=\"anchor\" href=\"#2️⃣位运算添加\">#</a> 2️⃣位运算添加</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>BitOperationDemo.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">本示例使用JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: 位运算示例</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2023-12-10 16:15</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BitOperationDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * 置位和添加操作</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     * @param i</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 1. 结果等同  P = i / BIT_LENGTH; 取整数</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">P</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">>></span> SHIFT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 2. 结果等同  S = i % BIT_LENGTH; 取余数</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">S</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">&amp;</span> MASK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 3. 赋值设置该元素 bit 位为 1</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        a<span class=\"token punctuation\">[</span><span class=\"token class-name\">P</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token class-name\">S</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 4. 将 int 型变量 j 的第 k 个比特位设置为 1， 即 j=j|(1&lt;&lt;k), 上述 3 句合并为一句</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">//a[i >> SHIFT ] |= (1 &lt;&lt; (i &amp; MASK));</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>在计算出 <code>P</code>  和 <code>S</code>  后就可以进行赋值了，其中 <code>a[P]</code>  代表数组中第 <code>P</code>  个元素， <code>a[P] |= 1 &lt;&lt; S</code>  整句意思就是把 <code>a[P]</code>  元素的第 <code>S+1</code>  位设置为 <code>1</code> ，注意从低位到高位设置 (即：从右到左), <code>1.</code>   <code>2.</code>   <code>3.</code>  合并为 <code>4.</code> ，代码将更佳简洁。<br />\n既然有添加操作就会有删除操作，删除操作的过程与添加类似，只不过删除是把相对应的 <code>bit</code>  位设置为 <code>0</code> ，代表不存在该数值。</p>\n</blockquote>\n<h4 id=\"3️⃣位运算清除\"><a class=\"anchor\" href=\"#3️⃣位运算清除\">#</a> 3️⃣位运算清除</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>BitOperationDemo.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">本示例使用JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: 位运算示例</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2023-12-10 16:15</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BitOperationDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * 置 0 操作，相当于清除元素</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     * @param i</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 1. 计算位于数组中第？个元素 P = i / BIT_LENGTH;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">P</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">>></span> SHIFT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 2. 计算余数 S = i % BIT_LENGTH;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">S</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">&amp;</span> MASK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 3. 把 a [P] 元素的第 S+1 个 (从低位到高位) bit 位设置为 0</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        a<span class=\"token punctuation\">[</span><span class=\"token class-name\">P</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;=</span> <span class=\"token operator\">~</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token class-name\">S</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">// 4. 将 int 型变量 j 的第 k 个比特位设置为 0，即 j= j&amp;~(1&lt;&lt;k)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">//a[i>>SHIFT] &amp;= ~(1&lt;&lt;(i &amp;MASK));</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>与添加唯一不同的是，计算出余数 <code>S</code>  后利用 <code>1</code>  左移 <code>S</code>  位，再取反 ( <code>~</code> ) 操作，最后进行与 ( <code>&amp;</code> ) 操作，即：将 <code>a[P]</code>  元素的第 <code>S+1</code>  个 (从低位到高位) <code>bit</code>  位设置为 <code>0</code> ，表示删除该数字，这个计算过程可以自行推算一下，这就是 <code>位向量</code> 表示法的添加和清除方法。</p>\n</blockquote>\n<h4 id=\"4️⃣位运算读取\"><a class=\"anchor\" href=\"#4️⃣位运算读取\">#</a> 4️⃣位运算读取</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>BitOperationDemo.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">本示例使用JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @Description: 位运算示例</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @DateTime: 2023-12-10 16:15</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BitOperationDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * 读取操作，返回 1 代表该 bit 位有值，返回 0 代表该 bit 位没值</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     * @param i</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     * @return int</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">//a[i>>SHIFT] &amp; (1&lt;&lt;(i&amp;MASK));</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">P</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">>></span> SHIFT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">S</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">&amp;</span>  MASK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">bitCount</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token class-name\">P</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token class-name\">S</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>其中 <code>Integer.bitCount()</code>  是返回指定 <code>int</code>  值的二进制补码 (计算机数字的二进制表示法都是使用补码表示) 表示形式的 <code>1</code>  位的数量。</p>\n</blockquote>\n<h4 id=\"5️⃣位运算完整代码\"><a class=\"anchor\" href=\"#5️⃣位运算完整代码\">#</a> 5️⃣位运算完整代码</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>BitOperationDemo.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">本示例使用JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">top<span class=\"token punctuation\">.</span>rem<span class=\"token punctuation\">.</span>rain</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Random</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * @Author: LightRain</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> * @Description: 位运算示例</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @DateTime: 2023-12-10 16:15</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @Version：1.0</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> **/</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BitOperationDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   * 存储元素的数组</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   * 默认使用 int 类型</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> BIT_LENGTH <span class=\"token operator\">=</span> <span class=\"token number\">32</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   * 整数部分</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token class-name\">P</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>   * 余数</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token class-name\">S</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>   * 2^5 - 1</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> MASK <span class=\"token operator\">=</span> <span class=\"token number\">0x1F</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>   * 2^n SHIFT=n=5 表示 2^5=32 即 bit 位长度 32</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> SHIFT <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>   * 初始化位向量</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>   *</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>   * @param count</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">BitOperationDemo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">=</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> BIT_LENGTH <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>   * 将数组中元素 bit 位设置为 0</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>      <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>   * 置位和添加操作</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>   *</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>   * @param i</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token comment\">// 1. 结果等同  P = i / BIT_LENGTH; 取整数</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token class-name\">P</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">>></span> SHIFT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token comment\">// 2. 结果等同  S = i % BIT_LENGTH; 取余数</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token class-name\">S</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">&amp;</span> MASK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token comment\">// 3. 赋值设置该元素 bit 位为 1</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    a<span class=\"token punctuation\">[</span><span class=\"token class-name\">P</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token class-name\">S</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token comment\">// 4. 将 int 型变量 j 的第 k 个比特位设置为 1， 即 j=j|(1&lt;&lt;k), 上述 3 句合并为一句</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token comment\">//a[i >> SHIFT ] |= (1 &lt;&lt; (i &amp; MASK));</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>   * 置 0 操作，相当于清除元素</pre></td></tr><tr><td data-num=\"85\"></td><td><pre>   *</pre></td></tr><tr><td data-num=\"86\"></td><td><pre>   * @param i</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token comment\">// 1. 计算位于数组中第？个元素 P = i / BIT_LENGTH;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token class-name\">P</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">>></span> SHIFT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token comment\">// 2. 计算余数 S = i % BIT_LENGTH;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token class-name\">S</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">&amp;</span> MASK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token comment\">// 3. 把 a [P] 元素的第 S+1 个 (从低位到高位) bit 位设置为 0</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    a<span class=\"token punctuation\">[</span><span class=\"token class-name\">P</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;=</span> <span class=\"token operator\">~</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token class-name\">S</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token comment\">// 4. 将 int 型变量 j 的第 k 个比特位设置为 0，即 j= j&amp;~(1&lt;&lt;k)</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token comment\">//a[i>>SHIFT] &amp;= ~(1&lt;&lt;(i &amp;MASK));</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>   * 读取操作，返回 1 代表该 bit 位有值，返回 0 代表该 bit 位没值</pre></td></tr><tr><td data-num=\"101\"></td><td><pre>   *</pre></td></tr><tr><td data-num=\"102\"></td><td><pre>   * @param i</pre></td></tr><tr><td data-num=\"103\"></td><td><pre>   * @return int</pre></td></tr><tr><td data-num=\"104\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    <span class=\"token comment\">//a[i>>SHIFT] &amp; (1&lt;&lt;(i&amp;MASK));</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    <span class=\"token class-name\">P</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">>></span> SHIFT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token class-name\">S</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">&amp;</span> MASK<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">bitCount</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token class-name\">P</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token class-name\">S</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"113\"></td><td><pre>   * 获取排序后的数组</pre></td></tr><tr><td data-num=\"114\"></td><td><pre>   * @return</pre></td></tr><tr><td data-num=\"115\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getSortedArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> sortedArray <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>      <span class=\"token comment\">// 判断 i 是否存在</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>        sortedArray<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>    <span class=\"token keyword\">return</span> sortedArray<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>    <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">25</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> randoms <span class=\"token operator\">=</span> <span class=\"token function\">getRandomsList</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"排序前：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>    <span class=\"token class-name\">BitOperationDemo</span> bitOperation <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BitOperationDemo</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> e <span class=\"token operator\">:</span> randoms<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">+</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>      bitOperation<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"------------------------------------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> sortedArray <span class=\"token operator\">=</span> bitOperation<span class=\"token punctuation\">.</span><span class=\"token function\">getSortedArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"排序后：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> e <span class=\"token operator\">:</span> sortedArray<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">+</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"151\"></td><td><pre>          执行结果：</pre></td></tr><tr><td data-num=\"152\"></td><td><pre>            排序前：</pre></td></tr><tr><td data-num=\"153\"></td><td><pre>            24,12,14,8,5,9,17,11,10,22,23,7,21,19,13,15,6,1,20,18,16,2,3,4,</pre></td></tr><tr><td data-num=\"154\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"155\"></td><td><pre>            ------------------------------------------------</pre></td></tr><tr><td data-num=\"156\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"157\"></td><td><pre>            排序后：</pre></td></tr><tr><td data-num=\"158\"></td><td><pre>            1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,</pre></td></tr><tr><td data-num=\"159\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getRandomsList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>    <span class=\"token class-name\">Random</span> random <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> randomsList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>randomsList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>      <span class=\"token comment\">// element ∈  [1,count)</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>      <span class=\"token keyword\">int</span> element <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>randomsList<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>        randomsList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>    <span class=\"token keyword\">return</span> randomsList<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre></pre></td></tr><tr><td data-num=\"175\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"enumset原理解析\"><a class=\"anchor\" href=\"#enumset原理解析\">#</a> EnumSet 原理解析</h3>\n<blockquote>\n<p>有了前面 <code>位向量</code> 的分析，对于了解 <code>EnumSet</code>  的实现原理就会简单一些了， <code>EnumSet</code>  内部使用 <code>位向量</code> 来实现的，在前面说过 <code>EnumSet</code>  只是一个抽象类，事实上它存在两个子类， <code>RegularEnumSet</code>  和 <code>JumboEnumSet</code> 。 <code>RegularEnumSet</code>  使用一个 <code>long</code>  类型的变量作为 <code>位向量</code> ， <code>long</code>  类型的位长度是 <code>64 bit</code> ，因此可以存储 <code>64</code>  个枚举实例的标志位，一般情况下够用的了，而 <code>JumboEnumSet</code>  使用一个 <code>long</code>  类型的数组，当枚举个数超过 <code>64</code>  时，就会采用 <code>long</code>  数组的方式存储。</p>\n</blockquote>\n<h4 id=\"1️⃣-enumset内部数据结构\"><a class=\"anchor\" href=\"#1️⃣-enumset内部数据结构\">#</a> 1️⃣ EnumSet 内部数据结构</h4>\n<blockquote>\n<p><code>EnumSet</code>  内部数据结构源码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>EnumSet.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">版本请选择JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Enum</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Cloneable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>Serializable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   * 表示枚举类型</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   * The class of all the elements of this set. -> 此集合的所有元素的类</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">final</span> <span class=\"token keyword\">transient</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> elementType<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   * 存储该类型信息所表示的所有可能的枚举实例</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   * All of the values comprising E.  (Cached for performance.) -> 包含 E 的所有值。(缓存以提高性能。)</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">final</span> <span class=\"token keyword\">transient</span> <span class=\"token class-name\">Enum</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> universe<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p><code>EnumSet</code>  中有两个变量：一个是 <code>elementType</code>  用于表示枚举类型信息，另一个是 <code>universe</code>  是数组类型用于存储该类型信息所表示的所有可能的枚举实例， <code>EnumSet</code>  是抽象类，因此具体实现由子类来完成。</p>\n</blockquote>\n<h4 id=\"2️⃣-noneof静态方法\"><a class=\"anchor\" href=\"#2️⃣-noneof静态方法\">#</a> 2️⃣ noneOf () 静态方法</h4>\n<blockquote>\n<p><code>noneOf(Class&lt;E&gt; elementType)</code>  静态构造方法源码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>EnumSet.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">版本请选择JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Enum</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Cloneable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>Serializable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// 根据 EnumMap 中的一样，获取可能的枚举实例</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Enum</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">EnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">noneOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> elementType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">Enum</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> universe <span class=\"token operator\">=</span> <span class=\"token function\">getUniverse</span><span class=\"token punctuation\">(</span>elementType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>universe <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassCastException</span><span class=\"token punctuation\">(</span>elementType <span class=\"token operator\">+</span> <span class=\"token string\">\" not an enum\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>universe<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">64</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token comment\">// 枚举个数小于 64 则创建 RegularEunmSet</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegularEnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>elementType<span class=\"token punctuation\">,</span> universe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token comment\">// 否则创建 JumboEnumSet</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JumboEnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>elementType<span class=\"token punctuation\">,</span> universe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>从源码可以看出如果枚举值个数小于等于 <code>64</code> ，则静态工厂方法中创建的就是 <code>RegularEnumSet</code> ，否则大于 <code>64</code>  的话就创建 <code>JumboEnumSet</code> 。无论是 <code>RegularEnumSet</code>  还是 <code>JumboEnumSet</code> ，其构造函数内部都间接调用了 <code>EnumSet</code>  的构造函数，因此最终的 <code>elementType</code>  和 <code>universe</code>  都传递给了父类 <code>EnumSet</code>  的内部变量。</p>\n</blockquote>\n<h4 id=\"3️⃣-regularenumsetjumboenumset\"><a class=\"anchor\" href=\"#3️⃣-regularenumsetjumboenumset\">#</a> 3️⃣ RegularEnumSet&amp;JumboEnumSet</h4>\n<blockquote>\n<p><code>RegularEnumSet</code>  和 <code>JumboEnumSet</code>  构造方法源码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>RegularEnumSet.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">版本请选择JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">RegularEnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Enum</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">EnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// RegularEnumSet 构造</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token class-name\">RegularEnumSet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span>elementType<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Enum</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> universe<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>elementType<span class=\"token punctuation\">,</span> universe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>JumboEnumSet.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">版本请选择JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">JumboEnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Enum</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">EnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// JumboEnumSet 构造</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token class-name\">JumboEnumSet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span>elementType<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Enum</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> universe<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>elementType<span class=\"token punctuation\">,</span> universe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    elements <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>universe<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token number\">63</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>>></span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>在 <code>RegularEnumSet</code>  和 <code>JumboEnumSet</code>  类中都存在一个 <code>elements</code>  变量，用于记录 <code>位向量</code> 的操作。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>RegularEnumSet.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">版本请选择JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">RegularEnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Enum</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">EnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token annotation punctuation\">@java.io.Serial</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token number\">3411599620347842686L</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 通过 long 类型的 elements 记录位向量的操作</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> elements <span class=\"token operator\">=</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>JumboEnumSet.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">版本请选择JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">JumboEnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Enum</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">EnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token annotation punctuation\">@java.io.Serial</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token number\">334349849919042784L</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 通过 long 数组类型的 elements 记录位向量</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> elements<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token comment\">// 表示集合大小</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>在 <code>RegularEnumSet</code>  中 <code>elements</code>  是一个 <code>long</code>  类型的变量，共有 <code>64</code>  个 <code>bit</code>  位，因此可以记录 <code>64</code>  个枚举常量，当枚举常量的数量超过 <code>64</code>  个时，将使用 <code>JumboEnumSet</code> ， <code>elements</code>  在该类中一个 <code>long</code>  型的数组，每个数组元素都可以存储 <code>64</code>  个枚举常量，这个过程其实与前面 <code>位向量</code> 的分析是同样的道理，只不过前面使用的是 <code>32</code>  位的 <code>int</code>  类型，这里使用的是 <code>64</code>  位的 <code>long</code>  类型罢了。</p>\n</blockquote>\n<h4 id=\"4️⃣-regularenumset-add方法\"><a class=\"anchor\" href=\"#4️⃣-regularenumset-add方法\">#</a> 4️⃣ RegularEnumSet - Add () 方法</h4>\n<blockquote>\n<p>下面来看 <code>EnumSet</code>  是如何添加数据的 <code>RegularEnumSet</code>  中的 <code>add</code>  源码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>RegularEnumSet.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">版本请选择JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">RegularEnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Enum</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">EnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 检测是否为枚举类型</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">typeCheck</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 记录旧 elements</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">long</span> oldElements <span class=\"token operator\">=</span> elements<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 执行位向量操作</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 数组版：a [i>> SHIFT ] |= (1 &lt;&lt; (i &amp; MASK))</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    elements <span class=\"token operator\">|=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1L</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Enum</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ordinal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> elements <span class=\"token operator\">!=</span> oldElements<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>关于 <code>elements |= (1L &lt;&lt; ((Enum&lt;?&gt;)e).ordinal());</code>  这句跟我们所分析的 <code>位向量</code> 操作是相同的原理，只不过前面分析的是数组类型实现，这里用的 <code>long</code>  类型单一变量实现， <code>((Enum)e).ordinal()</code>  通过该语句获取要添加的枚举实例的序号，然后通过 <code>1</code>  左移再与 <code>long</code>  类型的 <code>elements</code>  进行或操作，就可以把对应位置上的 <code>bit</code>  设置为 <code>1</code>  了，也就代表该枚举实例的存在。<br />\n详细过程请看下图：注意 <code>universe</code>  数组在 <code>EnumSet</code>  创建时就初始化并填充了所有可能的枚举实例，而 <code>elements</code>  值的第 <code>n</code>  个 <code>bit</code>  位为 <code>1</code>  时代表枚举存在，而获取的则是从 <code>universe</code>  数组中的第 <code>n</code>  个元素值。</p>\n</blockquote>\n<p><img data-src=\"https://z1.ax1x.com/2023/12/12/pifZexK.jpg\" alt=\"pifZexK.jpg\" /></p>\n<blockquote>\n<p>以上就是枚举实例的添加过程和获取原理，而对于 <code>JumboEnumSet</code>  的 <code>add</code>  接着看下面。</p>\n</blockquote>\n<h4 id=\"5️⃣-jumboenumset-add方法\"><a class=\"anchor\" href=\"#5️⃣-jumboenumset-add方法\">#</a> 5️⃣ JumboEnumSet - Add () 方法</h4>\n<blockquote>\n<p>接着来看 <code>JumboEnumSet</code>  的 <code>add</code>  源码实现如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>JumboEnumSet.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">版本请选择JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">JumboEnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Enum</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">EnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">typeCheck</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 计算 ordinal 值</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> eOrdinal <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">ordinal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> eWordNum <span class=\"token operator\">=</span> eOrdinal <span class=\"token operator\">>>></span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">long</span> oldElements <span class=\"token operator\">=</span> elements<span class=\"token punctuation\">[</span>eWordNum<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 与前面分析的位向量相同：a [i>> SHIFT ] |= (1 &lt;&lt; (i &amp; MASK))</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    elements<span class=\"token punctuation\">[</span>eWordNum<span class=\"token punctuation\">]</span> <span class=\"token operator\">|=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1L</span> <span class=\"token operator\">&lt;&lt;</span> eOrdinal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">boolean</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">[</span>eWordNum<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> oldElements<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>关于 <code>JumboEnumSet</code>  的 <code>add</code>  方法的实现与 <code>RegularEuumSet</code>  区别是一个 <code>long</code>  数组类型，一个 <code>long</code>  变量，运算原理相同，数组的 <code>位向量</code> 运算与前面的分析是相同的，。</p>\n</blockquote>\n<h4 id=\"6️⃣-regularenumsetjumboenumset-remove方法\"><a class=\"anchor\" href=\"#6️⃣-regularenumsetjumboenumset-remove方法\">#</a> 6️⃣ RegularEnumSet&amp;JumboEnumSet - remove () 方法</h4>\n<blockquote>\n<p><code>RegularEnumSet</code>  和 <code>JumboEnumSet</code>  的 <code>remove()</code>  源码实现如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>RegularEnumSet.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">版本请选择JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">RegularEnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Enum</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">EnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> eClass <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>eClass <span class=\"token operator\">!=</span> elementType <span class=\"token operator\">&amp;&amp;</span> eClass<span class=\"token punctuation\">.</span><span class=\"token function\">getSuperclass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> elementType<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">long</span> oldElements <span class=\"token operator\">=</span> elements<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 将 int 类型变量 j 的第 k 个比特位设置为 0，即：j = j&amp;~(1&lt;&lt;k)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 数组类型：a [i>>SHIFT] &amp;= ~(1&lt;&lt;(i &amp; MASK));</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    elements <span class=\"token operator\">&amp;=</span> <span class=\"token operator\">~</span><span class=\"token punctuation\">(</span><span class=\"token number\">1L</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Enum</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ordinal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> elements <span class=\"token operator\">!=</span> oldElements<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>JumboEnumSet.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">版本请选择JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">JumboEnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Enum</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">EnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> eClass <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>eClass <span class=\"token operator\">!=</span> elementType <span class=\"token operator\">&amp;&amp;</span> eClass<span class=\"token punctuation\">.</span><span class=\"token function\">getSuperclass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> elementType<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> eOrdinal <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Enum</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ordinal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">int</span> eWordNum <span class=\"token operator\">=</span> eOrdinal <span class=\"token operator\">>>></span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">long</span> oldElements <span class=\"token operator\">=</span> elements<span class=\"token punctuation\">[</span>eWordNum<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 与 a [i>>SHIFT] &amp;= ~(1&lt;&lt;(i &amp;MASK)); 相同</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    elements<span class=\"token punctuation\">[</span>eWordNum<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;=</span> <span class=\"token operator\">~</span><span class=\"token punctuation\">(</span><span class=\"token number\">1L</span> <span class=\"token operator\">&lt;&lt;</span> eOrdinal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">boolean</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">[</span>eWordNum<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> oldElements<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p><code>remove()</code>  方法的实现，跟 <code>位向量</code> 清空操作是同样的实现原理，请看下图：</p>\n</blockquote>\n<p><img data-src=\"https://z1.ax1x.com/2023/12/12/pifiaqA.png\" alt=\"pifiaqA.png\" /></p>\n<blockquote>\n<p>至于 <code>JumboEnumSet</code>  的实现原理也是类似的，下面为了简洁起见，我们以 <code>RegularEnumSet</code>  类的实现作为源码分析，毕竟 <code>JumboEnumSet</code>  的内部实现原理可以说跟前面分析过的 <code>位向量</code> 几乎一样。</p>\n</blockquote>\n<h4 id=\"7️⃣-containscontainsall方法\"><a class=\"anchor\" href=\"#7️⃣-containscontainsall方法\">#</a> 7️⃣ contains ()&amp;containsAll () 方法</h4>\n<blockquote>\n<p>接着来看如何判读是否包含某个元素，源码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>RegularEnumSet.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">版本请选择JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">RegularEnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Enum</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">EnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> eClass <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>eClass <span class=\"token operator\">!=</span> elementType <span class=\"token operator\">&amp;&amp;</span> eClass<span class=\"token punctuation\">.</span><span class=\"token function\">getSuperclass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> elementType<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 先左移再进行 & amp; 操作</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>elements <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1L</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Enum</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ordinal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">containsAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>c <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">RegularEnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> es<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">containsAll</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>es<span class=\"token punctuation\">.</span>elementType <span class=\"token operator\">!=</span> elementType<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token keyword\">return</span> es<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// ~elements 取反相当于 elements 补集，再与 es.elements 进行 & amp; 操作，如果为 0 就说明 elements 补集与 es.elements 没有交集，也就是 es.elements 是 elements 的子集</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>es<span class=\"token punctuation\">.</span>elements <span class=\"token operator\">&amp;</span> <span class=\"token operator\">~</span>elements<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>对于 <code>contains(Object e)</code>  方法，先左移再按位进行 <code>&amp;</code>  操作，不为 <code>0</code>  则表示包含该元素，跟 <code>位向量</code> 的 <code>get</code>  操作实现原理差不多。对于 <code>containsAll(Collection&lt;?&gt; c)</code>  则可能比较难懂，这里分析一下 <code>elements</code>  的 <code>long</code>  类型变量标记 <code>EnumSet</code>  集合中已存在元素的 <code>bit</code>  位，如果 <code>bit</code>  位为 <code>1</code>  则说明存在枚举实例，为 <code>0</code>  则不存在，现在执行 <code>~elements</code>  操作后，则说明 <code>~elements</code>  的 <code>elements</code>  的补集，那么只要传递进来的 <code>es.elements</code>  与补集 <code>~elements</code>  执行 <code>&amp;</code>  操作为 <code>0</code> ，就可以证明 <code>es.elements</code>  与补集 <code>~elements</code>  没有交集的可能，也就说 <code>es.elements</code>  只能是 <code>elements</code>  的子集，这样就可以判断出当前 <code>EnumSet</code>  集合中包含传递进来的集合 <code>c</code>  了，详细请看下图：</p>\n</blockquote>\n<p><img data-src=\"https://z1.ax1x.com/2023/12/12/pifAjds.png\" alt=\"pifAjds.png\" /></p>\n<blockquote>\n<p>上图中， <code>elements</code>  代表 <code>A</code> , <code>es.elements</code>  代表 B， <code>~elements</code>  就是求 <code>A</code>  的补集， <code>(es.elements &amp; ~elements) == 0</code>  就是在验证 <code>A∩B</code>  是不是空集，即 <code>B</code>  是否为 <code>A</code>  的子集。</p>\n</blockquote>\n<h4 id=\"8️⃣-retainall方法\"><a class=\"anchor\" href=\"#8️⃣-retainall方法\">#</a> 8️⃣ retainAll () 方法</h4>\n<blockquote>\n<p>接着看 <code>retainAll()</code>  方法，求两个集合的交集，源码如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>RegularEnumSet.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">版本请选择JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">RegularEnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Enum</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">EnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">retainAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>c <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">RegularEnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> es<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">retainAll</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>es<span class=\"token punctuation\">.</span>elementType <span class=\"token operator\">!=</span> elementType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token keyword\">boolean</span> changed <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>elements <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      elements <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token keyword\">return</span> changed<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">long</span> oldElements <span class=\"token operator\">=</span> elements<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 执行 &amp; 操作，求交集比较简单</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    elements <span class=\"token operator\">&amp;=</span> es<span class=\"token punctuation\">.</span>elements<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> elements <span class=\"token operator\">!=</span> oldElements<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"9️⃣-iterator方法取值\"><a class=\"anchor\" href=\"#9️⃣-iterator方法取值\">#</a> 9️⃣ iterator () 方法取值</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>RegularEnumSet.java</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHMvYXJjaGl2ZS8=\">版本请选择JAVA 8</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">RegularEnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Enum</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">EnumSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EnumSetIterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EnumSetIterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Enum</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 记录 elements</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">long</span> unseen<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 记录最后一个返回值</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">long</span> lastReturned <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token class-name\">EnumSetIterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      unseen <span class=\"token operator\">=</span> elements<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token keyword\">return</span> unseen <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">E</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>unseen <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NoSuchElementException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token comment\">// 取值过程：先与本身负执行 & amp; 操作得出的就是二进制低位开始的第一个 1 的数值大小哦</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      lastReturned <span class=\"token operator\">=</span> unseen <span class=\"token operator\">&amp;</span> <span class=\"token operator\">-</span>unseen<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token comment\">// 取值后减去已取得 lastReturned</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      unseen <span class=\"token operator\">-=</span> lastReturned<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token comment\">// 返回在指定 long 值的二进制补码表示形式中最低位 (最右边) 的 1 位之后的零位的数量</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">)</span> universe<span class=\"token punctuation\">[</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span><span class=\"token function\">numberOfTrailingZeros</span><span class=\"token punctuation\">(</span>lastReturned<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lastReturned <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalStateException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      elements <span class=\"token operator\">&amp;=</span> <span class=\"token operator\">~</span>lastReturned<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      lastReturned <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>比较难懂的应该是下面这些代码：</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 取值过程，先与本身负执行 & amp; 操作得出的就是二进制低位开始的第一个 1 的数值大小</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>lastReturned <span class=\"token operator\">=</span> unseen <span class=\"token operator\">&amp;</span> <span class=\"token operator\">-</span>unseen<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 取值后减去已取得 lastReturned</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>unseen <span class=\"token operator\">-=</span> lastReturned<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 返回在指定 long 值的二进制补码表示形式中最低位 (最右边) 的 1 位之后的零位的数量</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">)</span> universe<span class=\"token punctuation\">[</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span><span class=\"token function\">numberOfTrailingZeros</span><span class=\"token punctuation\">(</span>lastReturned<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>我们通过原理图来帮助理解，现在假设集合中已保存所有可能的枚举实例变量，我们需要把它们遍历出来，下面的第一个枚举元素的获取过程，显然通过 <code>unseen &amp; -unseen</code>  操作，我们可以获取到二进制低位开始的第一个 <code>1</code>  的数值，该计算的结果是要么全部都是 <code>0</code>  要么就只有一个 <code>1</code> ，然后赋值给 <code>lastReturned</code>  通过 <code>Long.numberOfTrailingZeros(lastReturned)</code>  获取到该 <code>bit</code>  为 <code>1</code>  在 <code>64</code>  位的 <code>long</code>  类型中的位置，即：从低位算起的第几个 <code>bit</code> 。<br />\n详细看下图：该 <code>bit</code>  的位置恰好是低位的第 <code>1</code>  个 <code>bit</code>  位置，也就指明了 <code>universe</code>  数组的第一个元素就是要获取的枚举变量。执行 <code>unseen -= lastReturned</code>  后继续进行第 <code>2</code>  个元素的遍历，以此类推遍历出所有值，这就是 <code>EnumSet</code>  的取值过程，真正存储枚举变量的是 <code>universe</code>  数组，而通过 <code>long</code>  类型变量的 <code>bit</code>  位的 <code>0</code>  或 <code>1</code>  表示存储该枚举变量在 <code>universe</code>  数组的那个位置，这样做的好处是任何操作都是执行 <code>long</code>  类型变量的 <code>bit</code>  位操作，这样执行效率将会特别高，毕竟是二进制直接执行，只有最终获取值时才会操作到数组 <code>universe</code> 。</p>\n</blockquote>\n<p><img data-src=\"https://z1.ax1x.com/2023/12/13/pifmjPA.png\" alt=\"pifmjPA.png\" /></p>\n<blockquote>\n<p>以上这些就是关于 <code>EnumSet</code>  的实现原理的主要部分，其内部使用 <code>位向量</code> 来执行，存储结构简洁，节省空间，而大部分操作都是按位运算来执行，直接操作二进制数据效率极高，这就是本期的枚举全部内容。</p>\n</blockquote>\n",
            "tags": [
                "计算机科学",
                "Java",
                "Java深入理解",
                "计算机科学",
                "Java",
                "Java高级特性",
                "Java枚举类型"
            ]
        },
        {
            "id": "https://rainrem.top/%E6%95%A3%E7%AB%A0/%E7%A1%AC%E4%BB%B6%E5%BD%92%E7%BA%B3/",
            "url": "https://rainrem.top/%E6%95%A3%E7%AB%A0/%E7%A1%AC%E4%BB%B6%E5%BD%92%E7%BA%B3/",
            "title": "硬件归纳",
            "date_published": "2023-11-29T16:06:00.000Z",
            "content_html": "<h1 id=\"电阻欧姆公式\"><a class=\"anchor\" href=\"#电阻欧姆公式\">#</a> 电阻欧姆公式</h1>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">颜色</th>\n<th style=\"text-align:center\">单位 Ω</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">棕</td>\n<td style=\"text-align:center\">1Ω</td>\n</tr>\n<tr>\n<td style=\"text-align:center\" class=\"red\">红</td>\n<td style=\"text-align:center\">2Ω</td>\n</tr>\n<tr>\n<td style=\"text-align:center\" class=\"orange\">橙</td>\n<td style=\"text-align:center\">3Ω</td>\n</tr>\n<tr>\n<td style=\"text-align:center\" class=\"yellow\">黄</td>\n<td style=\"text-align:center\">4Ω</td>\n</tr>\n<tr>\n<td style=\"text-align:center\" class=\"green\">绿</td>\n<td style=\"text-align:center\">5Ω</td>\n</tr>\n<tr>\n<td style=\"text-align:center\" class=\"blue\">蓝</td>\n<td style=\"text-align:center\">6Ω</td>\n</tr>\n<tr>\n<td style=\"text-align:center\" class=\"purple\">紫</td>\n<td style=\"text-align:center\">7Ω</td>\n</tr>\n<tr>\n<td style=\"text-align:center\" class=\"grey\">灰</td>\n<td style=\"text-align:center\">8Ω</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">白</td>\n<td style=\"text-align:center\">9Ω</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">黑</td>\n<td style=\"text-align:center\">0Ω</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">金色</td>\n<td style=\"text-align:center\">误差 ± 5%(95%~105%)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">银色</td>\n<td style=\"text-align:center\">误差 ± 10%(90%~110%)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">无色</td>\n<td style=\"text-align:center\">误差 ± 20%(80%~120%)</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>普通电阻计算公式是根据电阻上面的色环来计算出是多少 <code>Ω</code>  的电阻。</li>\n<li><code>四色环电阻</code> ：前两位代表正常值第三位代表需要在后面补几个 <code>0</code>  的个数，第四位则是代表误差正负值。\n<ul>\n<li>如：<span class=\"orange\">橙</span><span class=\"red\">红</span><span class=\"red\">红</span>，橙色代表 <code>3</code> ，红色代表 <code>2</code> ，拼在一起就是 <code>32</code>  但是第三位也是一个 <code>2</code> ，也就是代表需要在末尾处补两个 <code>0</code> ，最后就是 <code>3200Ω</code>  ➡️  <code>3.2KΩ</code> 。</li>\n<li>如：<span class=\"purple\">紫</span><span class=\"grey\">灰</span><span class=\"orange\">橙</span> ➡️  <code>78000Ω</code>  ➡️ 每三位进一则为千 <code>78.000</code>  ➡️  <code>78KΩ</code> 。</li>\n<li>如：<span class=\"blue\">蓝</span><span class=\"green\">绿</span><span class=\"yellow\">黄</span> ➡️  <code>650000Ω</code>  ➡️ 每三位进一则为千 <code>650.000</code>  ➡️ <code>650KΩ</code> ➡️ 每三位进一则为万 <code>65MΩ</code> 。</li>\n<li>如：<span class=\"grey\">灰</span><span class=\"red\">红</span>黑 ➡️ 第三位黑色代表 <code>0</code>  则不需要在后面补任何数，毕竟 <code>0</code>  代表 <code>0</code>  个数，➡️  <code>82Ω</code> ➡️  <code>0.82KΩ</code> 。</li>\n<li>例：<span class=\"orange\">▋</span><span class=\"red\">▋</span>▋ ➡️ <span class=\"orange\">橙色 = 3</span><span class=\"red\"> 红色 = 2</span> 黑色 = 0 ➡️ 32<s>0</s> ➡️ 32Ω ➡️ 0.32KΩ。</li>\n</ul>\n</li>\n<li><code>五色环电阻</code> ： 五色环和四色环一样，只不过是五色环前三位代表正常值，第四位代表需要在后面补几个 <code>0</code>  的个数，第五位则是代表误差正负值。\n<ul>\n<li>如：<span class=\"orange\">橙</span><span class=\"red\">红</span><span class=\"red\">红</span><span class=\"orange\">橙</span> ➡️  <code>322000</code>  ➡️  <code>322KΩ</code> ➡️  <code>32.2MΩ</code> 。</li>\n<li>如：<span class=\"yellow\">黄</span><span class=\"green\">绿</span><span class=\"blue\">蓝</span><span class=\"red\">红</span> ➡️  <code>45600</code>  ➡️  <code>45.6KΩ</code> 。</li>\n<li>如：<span class=\"yellow\">黄</span><span class=\"green\">绿</span><span class=\"blue\">蓝</span>黑 ➡️  <code>456</code>  ➡️  <code>0.456KΩ</code> 。</li>\n<li>例：<span class=\"yellow\">▋</span><span class=\"green\">▋</span><span class=\"blue\">▋</span>▋ ➡️ <span class=\"yellow\">橙色 = 4</span><span class=\"green\"> 绿色 = 5</span><span class=\"blue\"> 蓝色 = 6</span> 黑色 = 0 ➡️ 456<s>0</s> ➡️ 456Ω ➡️ 0.456KΩ。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"贴片电阻公式\"><a class=\"anchor\" href=\"#贴片电阻公式\">#</a> 贴片电阻公式</h1>\n<h1 id=\"深入理解电容\"><a class=\"anchor\" href=\"#深入理解电容\">#</a> 深入理解电容</h1>\n<h1 id=\"洗衣机工作原理\"><a class=\"anchor\" href=\"#洗衣机工作原理\">#</a> 洗衣机工作原理</h1>\n<h1 id=\"冰箱工作原理\"><a class=\"anchor\" href=\"#冰箱工作原理\">#</a> 冰箱工作原理</h1>\n<h1 id=\"空调工作原理\"><a class=\"anchor\" href=\"#空调工作原理\">#</a> 空调工作原理</h1>\n<h1 id=\"压缩机工作原理\"><a class=\"anchor\" href=\"#压缩机工作原理\">#</a> 压缩机工作原理</h1>\n<h1 id=\"交流电直流电\"><a class=\"anchor\" href=\"#交流电直流电\">#</a> 交流电 &amp; 直流电</h1>\n<h1 id=\"万用表测量方法\"><a class=\"anchor\" href=\"#万用表测量方法\">#</a> 万用表测量方法</h1>\n<h1 id=\"焊接注意事项\"><a class=\"anchor\" href=\"#焊接注意事项\">#</a> 焊接注意事项</h1>\n<h1 id=\"理解什么是锡焊\"><a class=\"anchor\" href=\"#理解什么是锡焊\">#</a> 理解什么是锡焊</h1>\n",
            "tags": [
                "硬件",
                "硬件"
            ]
        }
    ]
}